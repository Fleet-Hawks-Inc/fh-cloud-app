{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./imported-assets.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./imported-assets.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services/api.service';\nimport { ToastrService } from 'ngx-toastr';\nimport CSVFileValidator from 'csv-file-validator';\nimport Constants from '../../../constants';\nlet ImportedAssetsComponent = class ImportedAssetsComponent {\n  constructor(apiService, toastr) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.loaded = false;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.uploadedDocs = [];\n    this.error = {\n      hasError: false,\n      message: '',\n      attributes: []\n    };\n    this.csvHeader = [];\n    this.array = [];\n    this.validData = {};\n    this.isFileValid = false;\n    this.inValidMessages = [];\n    this.check = false;\n    this.submitDisabled = true;\n    this.importAssets = [];\n  }\n\n  ngOnInit() {\n    this.fetchAssetImport();\n  }\n\n  selectDoc(event) {\n    this.error.hasError = false;\n    this.error.message = '';\n    this.error.attributes = [];\n    let files = event.target.files;\n    let condition = true;\n\n    if (condition) {\n      this.uploadedDocs = [];\n      this.uploadedDocs = files;\n      const reader = new FileReader();\n      reader.addEventListener('load', event => {\n        let csvdata = event.target.result;\n      });\n      reader.readAsBinaryString(event.target.files[0]);\n    }\n  }\n\n  fetchAssetImport() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.loaded = true;\n      let result = yield _this.apiService.getData('importer/get?type=asset').toPromise();\n\n      if (result.length === 0) {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        _this.loaded = false;\n      }\n\n      if (result && result.length > 0) {\n        _this.importAssets = result;\n        console.log('result--', _this.importAssets);\n      }\n\n      _this.loaded = false;\n    })();\n  }\n\n  validateCSV($event) {\n    const data = {\n      headers: [{\n        name: 'Asset Name/Number',\n        inputName: 'Asset Name/Number',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'VIN',\n        inputName: 'VIN',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (vin) {\n          const vinformat = /^[a-zA-Z0-9\\s]{17,18}$/;\n          return vinformat.test(vin);\n        }\n      }, {\n        name: 'Start Date',\n        inputName: 'Start Date',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (date) {\n          const dateformat = /^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$/;\n          return dateformat.test(date);\n        }\n      }, {\n        name: 'Asset Type',\n        inputName: 'Asset Type',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'Status',\n        inputName: 'Status',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'Year',\n        inputName: 'Year',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (vin) {\n          const vinformat = /^[0-9\\s]{4}$/;\n          return vinformat.test(vin);\n        }\n      }, {\n        name: 'Licence Country',\n        inputName: 'Licence Country',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'Licence Province/State',\n        inputName: 'Licence Province/State',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'Licence Plate Number',\n        inputName: 'Licence Plate Number',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (vin) {\n          const vinformat = /^[A-Z0-9\\s]/;\n          return vinformat.test(vin);\n        }\n      }]\n    };\n    CSVFileValidator($event.srcElement.files[0], data).then(csvData => {\n      if (csvData.data.length !== 0 && csvData.data.length < 201) {\n        if (csvData.inValidMessages.length === 0) {\n          this.validData = csvData.data;\n          this.check = true;\n          this.submitDisabled = false;\n          this.inValidMessages = [];\n        } else {\n          this.inValidMessages = csvData.inValidMessages;\n          this.isFileValid = false;\n          this.check = false;\n          this.submitDisabled = true;\n        }\n\n        csvData.data;\n      } else if (csvData.data.length == 0) {\n        this.submitDisabled = true;\n        this.toastr.error(\"There are no records in the file uploaded.\");\n      } else {\n        this.submitDisabled = true;\n        this.toastr.error(\"The file should contain a maximum of 200 records.\");\n      }\n    }).catch(err => {});\n  }\n\n  refreshData() {}\n\n  modalClose() {\n    $('#uploadedDocs').val('');\n    this.inValidMessages = [];\n  }\n\n  postDocument() {\n    this.error.hasError = false;\n    this.error.message = '';\n\n    if (this.check == true) {\n      if (this.uploadedDocs.length > 0) {\n        const formData = new FormData();\n\n        for (let i = 0; i < this.uploadedDocs.length; i++) {\n          formData.append(\"uploadedDocs\", this.uploadedDocs[i]);\n        }\n\n        this.apiService.postData('assets/import/CSV', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            this.error.hasError = true;\n            this.error.message = err;\n            this.submitDisabled = true;\n            $('#uploadedDocs').val('');\n          },\n          next: res => {\n            this.error.hasError = false;\n            this.error.message = '';\n            this.error.attributes = [];\n            this.submitDisabled = false;\n            this.toastr.success(\"The file has been scheduled for processing and you will be notified via email once it is completed.\");\n            $('#uploadedDocs').val('');\n            $('#importModel').modal('hide');\n          }\n        });\n      }\n    }\n  }\n\n};\n\nImportedAssetsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}];\n\nImportedAssetsComponent = __decorate([Component({\n  selector: 'app-imported-assets',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ImportedAssetsComponent);\nexport { ImportedAssetsComponent };","map":null,"metadata":{},"sourceType":"module"}