{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-issue.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-issue.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ApiService } from \"../../../../../services\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { NgbCalendar, NgbDateAdapter } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { map, takeUntil } from \"rxjs/operators\";\nimport { from, Subject } from 'rxjs';\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ModalService } from \"../../../../../services/modal.service\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { Location } from \"@angular/common\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport * as moment from \"moment\";\nimport { UnsavedChangesComponent } from 'src/app/unsaved-changes/unsaved-changes.component';\nimport { RouteManagementServiceService } from \"src/app/services/route-management-service.service\";\nlet AddIssueComponent = class AddIssueComponent {\n  // date: {year: number, month: number};\n  constructor(apiService, router, route, toaster, spinner, location, domSanitizer, ngbCalendar, modalService, modalServiceOwn, dateAdapter, routerMgmtService) {\n    this.apiService = apiService;\n    this.router = router;\n    this.route = route;\n    this.toaster = toaster;\n    this.spinner = spinner;\n    this.location = location;\n    this.domSanitizer = domSanitizer;\n    this.ngbCalendar = ngbCalendar;\n    this.modalService = modalService;\n    this.modalServiceOwn = modalServiceOwn;\n    this.dateAdapter = dateAdapter;\n    this.routerMgmtService = routerMgmtService;\n    this.takeUntil$ = new Subject();\n    this.Asseturl = this.apiService.AssetUrl;\n    this.fileName = \"\";\n    /**\r\n     * Issue Prop\r\n     */\n\n    this.clone = false;\n    this.issueName = \"\";\n    this.isSubmitted = false;\n    this.unitID = null;\n    this.unitType = \"vehicle\";\n    this.currentStatus = \"OPEN\";\n    this.reportedDate = moment().format(\"YYYY-MM-DD\");\n    this.description = \"\";\n    this.reportedBy = \"\";\n    this.assignedTo = \"\";\n    this.vehicles = [];\n    this.assets = [];\n    this.contacts = [];\n    this.drivers = [];\n    this.users = [];\n    this.uploadedFiles = [];\n    this.imageNameArray = [];\n    this.uploadedPhotos = [];\n    this.uploadedDocs = [];\n    this.existingPhotos = [];\n    this.existingDocs = [];\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.submitDisabled = false;\n    this.Error = \"\";\n    this.errors = {};\n    this.Success = \"\";\n    this.issueImages = [];\n    this.issueDocs = [];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"\");\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.modalServiceOwn.triggerRedirect.next(false);\n    this.router.events.pipe(takeUntil(this.takeUntil$)).subscribe(v => {\n      if (v.url !== 'undefined' || v.url !== '') {\n        this.modalServiceOwn.setUrlToNavigate(v.url);\n      }\n    });\n    this.modalServiceOwn.triggerRedirect$.pipe(takeUntil(this.takeUntil$)).subscribe(v => {\n      if (v) {\n        this.router.navigateByUrl(this.modalServiceOwn.urlToRedirect.getValue());\n      }\n    });\n    this.selectedFileNames = new Map();\n    this.sessionID = this.routerMgmtService.vehicleUpdateSessionID;\n  }\n\n  canLeave() {\n    if (this.issueF.dirty && !this.isSubmitted) {\n      if (!this.modalService.hasOpenModals()) {\n        let ngbModalOptions = {\n          backdrop: \"static\",\n          keyboard: false,\n          size: \"sm\"\n        };\n        this.modalService.open(UnsavedChangesComponent, ngbModalOptions);\n      }\n\n      return false;\n    }\n\n    this.modalServiceOwn.triggerRedirect.next(true);\n    this.takeUntil$.next();\n    this.takeUntil$.complete();\n    return true;\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.fetchUsers();\n\n      _this.issueID = _this.route.snapshot.params[`issueID`]; // if (this.issueID || this.cloneID) {\n\n      if (_this.issueID) {\n        _this.title = \"Edit Issue\";\n        yield _this.fetchIssueByID();\n      } else {\n        _this.title = \"Add Issue\";\n      }\n\n      yield _this.fetchVehicles();\n      yield _this.fetchAssets();\n\n      _this.route.queryParams.subscribe(params => {\n        _this.cloneID = params.cloneID;\n\n        if (_this.cloneID != undefined && _this.cloneID != \"\") {\n          _this.cloneIssue(_this.cloneID);\n        }\n      });\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchVehicles() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this2.apiService.getData(\"vehicles\").toPromise();\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          _this2.vehicles.push(element);\n        }\n\n        if (element.isDeleted === 1 && _this2.unitID === element.vehicleID) {\n          _this2.unitID = null;\n        }\n      });\n    })();\n  }\n\n  fetchAssets() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this3.apiService.getData(\"assets\").toPromise();\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          _this3.assets.push(element);\n        }\n\n        if (element.isDeleted === 1 && _this3.unitID === element.assetID) {\n          _this3.unitID = null;\n        }\n      });\n    })();\n  }\n\n  fetchUsers() {\n    this.apiService.getData(\"common/users/fetch/records\").subscribe(result => {\n      this.users = result.Items;\n    });\n  }\n\n  getToday() {\n    return new Date().toISOString().split(\"T\")[0];\n  }\n\n  onChangeUnitType(value) {\n    if (this.issueID) {\n      if (value != this.fetchedUnitType) {\n        this.unitID = null;\n        this.unitType = value;\n      } else {\n        this.unitID = this.fetchedUnitID;\n        this.unitType = this.fetchedUnitType;\n      }\n    } else {\n      this.unitType = value;\n      this.unitID = null;\n    }\n  }\n\n  addIssue() {\n    this.hideErrors();\n    this.submitDisabled = true;\n    const data = {\n      issueName: this.issueName.trim(),\n      unitType: this.unitType,\n      unitID: this.unitID,\n      currentStatus: this.currentStatus,\n      reportedDate: this.reportedDate,\n      description: this.description,\n      odometer: this.odometer,\n      reportedBy: this.reportedBy,\n      assignedTo: this.assignedTo,\n      uploadedPhotos: this.uploadedPhotos,\n      uploadedDocs: this.uploadedDocs\n    };\n\n    if (this.clone == true) {\n      data.uploadedPhotos = this.existingPhotos;\n      data.uploadedDocs = this.existingDocs;\n    } // create form data instance\n\n\n    const formData = new FormData(); // append photos if any\n\n    for (let i = 0; i < this.uploadedPhotos.length; i++) {\n      formData.append(\"uploadedPhotos\", this.uploadedPhotos[i]);\n    } // append docs if any\n\n\n    for (let j = 0; j < this.uploadedDocs.length; j++) {\n      formData.append(\"uploadedDocs\", this.uploadedDocs[j]);\n    } // append other fields\n\n\n    formData.append(\"data\", JSON.stringify(data)); // this.apiService.postData('issues/', data).subscribe({\n\n    this.apiService.postData(\"issues\", formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.submitDisabled = false;\n        this.modalServiceOwn.triggerRedirect.next(true);\n        this.takeUntil$.next();\n        this.takeUntil$.complete();\n        this.isSubmitted = true;\n        this.toaster.success(\"Issue Added successfully\");\n        this.router.navigateByUrl(\"/fleet/maintenance/issues/list\");\n        this.router.navigateByUrl('/fleet/maintenance/issues/list/${this.routerMgmtService.maintainanceUpdated()}');\n        this.cancel();\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event, obj) {\n    let files = [...event.target.files];\n\n    if (obj === \"uploadedDocs\") {\n      this.uploadedDocs = [];\n\n      for (let i = 0; i < files.length; i++) {\n        this.uploadedDocs.push(files[i]);\n      }\n    } else {\n      this.uploadedPhotos = [];\n\n      for (let i = 0; i < files.length; i++) {\n        this.uploadedPhotos.push(files[i]);\n      }\n    }\n  }\n  /*\r\n   * Fetch Issue details before updating\r\n   */\n\n\n  fetchIssueByID() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this4.apiService.getData(`issues/${_this4.issueID}`).toPromise(); // .subscribe((result: any) => {\n\n      result = result[0];\n      _this4.issueID = _this4.issueID;\n      _this4.issueName = result.issueName;\n      _this4.unitID = result.unitID;\n      _this4.fetchedUnitID = result.unitID;\n      _this4.fetchedUnitType = result.unitType;\n      _this4.unitType = result.unitType;\n      _this4.currentStatus = result.currentStatus;\n      _this4.reportedDate = result.reportedDate;\n      _this4.description = result.description;\n      _this4.odometer = result.odometer;\n      _this4.reportedBy = result.reportedBy;\n      _this4.assignedTo = result.assignedTo;\n      _this4.existingPhotos = result.uploadedPhotos;\n      _this4.existingDocs = result.uploadedDocs;\n\n      if (result.uploadedPhotos !== undefined && result.uploadedPhotos.length > 0) {\n        // this.issueImages = result.uploadedPhotos.map((x) => ({\n        //   path: `${this.Asseturl}/${result.pk}/${x}`,\n        //   name: x,\n        // }));\n        _this4.issueImages = result.uploadedPics;\n      }\n\n      if (result.uploadedDocs !== undefined && result.uploadedDocs.length > 0) {\n        // this.issueDocs = result.uploadedDocs.map((x) => ({\n        //   path: `${this.Asseturl}/${result.pk}/${x}`,\n        //   name: x,\n        // }));\n        _this4.issueDocs = result.uploadDocument;\n      }\n    })();\n  }\n\n  setPDFSrc(val) {\n    const pieces = val.split(/[\\s.]+/);\n    const ext = pieces[pieces.length - 1];\n    this.pdfSrc = \"\";\n\n    if (ext === \"doc\" || ext === \"docx\" || ext === \"xlsx\") {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"https://docs.google.com/viewer?url=\" + val + \"&embedded=true\");\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  }\n\n  setSrcValue() {\n    this.pdfSrc = \"\";\n  }\n  /*\r\n   * Update Issue\r\n   */\n\n\n  updateIssue() {\n    this.errors = {};\n    this.submitDisabled = true;\n    this.hasError = false;\n    this.hasSuccess = false;\n    const data = {\n      issueID: this.issueID,\n      issueName: this.issueName.trim(),\n      unitID: this.unitID,\n      unitType: this.unitType,\n      currentStatus: this.currentStatus,\n      reportedDate: this.reportedDate,\n      description: this.description,\n      odometer: this.odometer,\n      reportedBy: this.reportedBy,\n      assignedTo: this.assignedTo,\n      uploadedPhotos: this.existingPhotos,\n      uploadedDocs: this.existingDocs\n    }; // create form data instance\n\n    const formData = new FormData(); // append photos if any\n\n    for (let i = 0; i < this.uploadedPhotos.length; i++) {\n      formData.append(\"uploadedPhotos\", this.uploadedPhotos[i]);\n    } // append docs if any\n\n\n    for (let j = 0; j < this.uploadedDocs.length; j++) {\n      formData.append(\"uploadedDocs\", this.uploadedDocs[j]);\n    } // append other fields\n\n\n    formData.append(\"data\", JSON.stringify(data));\n    this.apiService.putData(`issues/${this.issueID}`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.submitDisabled = false;\n        this.modalServiceOwn.triggerRedirect.next(true);\n        this.takeUntil$.next();\n        this.takeUntil$.complete();\n        this.isSubmitted = true;\n        this.toaster.success(\"Issue Updated Successfully\"); //this.router.navigateByUrl(\"/fleet/maintenance/issues/list\");\n\n        this.router.navigateByUrl('/fleet/maintenance/issues/list/${this.routerMgmtService.maintainanceUpdated()}');\n      }\n    });\n  } // delete uploaded images and documents\n\n\n  delete(type, name) {\n    this.apiService.deleteData(`issues/uploadDelete/${this.issueID}/${type}/${name}`).subscribe(result => {\n      this.fetchIssueByID();\n      let alertmsg = \"\";\n\n      if (type === \"doc\") {\n        alertmsg = \"Document\";\n      } else {\n        alertmsg = \"Image\";\n      }\n\n      this.toaster.success(alertmsg + \" Deleted Successfully\");\n    });\n  }\n  /*\r\n   * If We CliCk Clone Button Then It Fetch Issue details\r\n   */\n  // let clone = false;\n\n\n  cloneIssue(id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.apiService.getData(\"issues/\" + id).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          result = result[0];\n          _this5.clone = true;\n          _this5.issueID = _this5.issueID;\n          _this5.issueName = result.issueName;\n          _this5.unitID = result.unitID;\n          _this5.fetchedUnitID = result.unitID;\n          _this5.fetchedUnitType = result.unitType;\n          _this5.unitType = result.unitType;\n          _this5.currentStatus = 'OPEN';\n          _this5.reportedDate = result.reportedDate;\n          _this5.description = result.description;\n          _this5.odometer = result.odometer;\n          _this5.reportedBy = result.reportedBy;\n          _this5.assignedTo = result.assignedTo;\n          _this5.existingPhotos = result.uploadedPhotos;\n          _this5.existingDocs = result.uploadedDocs;\n\n          if (result.uploadedPhotos !== undefined && result.uploadedPhotos.length > 0) {\n            _this5.issueImages = result.uploadedPics;\n          }\n\n          if (result.uploadedDocs !== undefined && result.uploadedDocs.length > 0) {\n            _this5.issueDocs = result.uploadDocument;\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n};\n\nAddIssueComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: Location\n}, {\n  type: DomSanitizer\n}, {\n  type: NgbCalendar\n}, {\n  type: NgbModal\n}, {\n  type: ModalService\n}, {\n  type: NgbDateAdapter\n}, {\n  type: RouteManagementServiceService\n}];\n\nAddIssueComponent.propDecorators = {\n  issueF: [{\n    type: ViewChild,\n    args: [\"issueF\"]\n  }]\n};\nAddIssueComponent = __decorate([Component({\n  selector: \"app-add-issue\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddIssueComponent);\nexport { AddIssueComponent };","map":null,"metadata":{},"sourceType":"module"}