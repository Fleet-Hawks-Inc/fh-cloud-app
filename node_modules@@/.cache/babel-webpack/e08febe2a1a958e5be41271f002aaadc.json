{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./new-ace-manifest.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./new-ace-manifest.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { NgbCalendar, NgbDateAdapter } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClient } from '@angular/common/http';\nimport { NgbTimepickerConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { from, Subject, throwError } from 'rxjs';\nimport { map, debounceTime, distinctUntilChanged, switchMap, catchError } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { ListService } from '../../../../../services';\nimport { HereMapService } from '../../../../../services';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet NewAceManifestComponent = class NewAceManifestComponent {\n  constructor(httpClient, route, toastr, apiService, ngbCalendar, location, HereMap, listService, config, dateAdapter, countryStateCity) {\n    var _this = this;\n\n    this.httpClient = httpClient;\n    this.route = route;\n    this.toastr = toastr;\n    this.apiService = apiService;\n    this.ngbCalendar = ngbCalendar;\n    this.location = location;\n    this.HereMap = HereMap;\n    this.listService = listService;\n    this.dateAdapter = dateAdapter;\n    this.countryStateCity = countryStateCity;\n    this.title = 'Add ACE e-Manifest';\n    this.modalTitle = 'Add';\n    this.vehicles = [];\n    this.assets = [];\n    this.fetchedDrivers = [];\n    this.mainDriver = null;\n    this.coDrivers = [];\n    this.shippers = [];\n    this.consignees = [];\n    this.brokers = [];\n    this.inbondTypesList = [];\n    this.foreignPortsList = [];\n    this.countriesList = [];\n    this.thirdPartiesList = [];\n    this.thirdPartyStates = [];\n    this.thirdPartyCities = [];\n    this.modalStates = [];\n    this.modalCities = [];\n    this.carriers = [];\n    this.currentUser = '';\n    this.manifestType = 'ACE';\n    this.truck = {\n      truckID: '',\n      sealNumbers: [{\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }],\n      IIT: null\n    };\n    this.trailers = [{\n      assetID: '',\n      assetTypeCode: '',\n      sealNumbers: [{\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }],\n      IIT: null\n    }];\n    this.borderResponses = [];\n    this.addTrailerSealBtn = true;\n    this.drivers = [];\n    this.estimatedArrivalDate = '';\n    this.errors = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.USports = [];\n    this.addressStates = [];\n    this.addressCities = [];\n    this.documentTypeList = [];\n    this.shipmentTypeList = [];\n    this.brokersList = [];\n    this.timeList = [];\n    this.tripNumber = '';\n    this.states = [];\n    this.countries = [];\n    this.packagingUnitsList = [];\n    this.addTrailerBtn = true;\n    this.timeCreated = '';\n    this.passengers = [];\n    this.passengerDocStates = [];\n    this.addedPassengers = [];\n    this.shipments = [{\n      type: '',\n      shipmentControlNumber: '',\n      provinceOfLoading: '',\n      goodsAstrayDateOfExit: '',\n      inBondDetails: {\n        type: '',\n        paperInBondNumber: '',\n        usDestination: '',\n        foreignDestination: '',\n        onwardCarrierScac: '',\n        irsNumber: '',\n        estimatedDepartureDate: '',\n        fda: false\n      },\n      SCAC: '',\n      shipperID: '',\n      consigneeID: '',\n      broker: {\n        filerCode: '',\n        portLocation: ''\n      },\n      thirdParties: [{\n        type: '',\n        name: '',\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: '',\n          thirdPartyStates: [],\n          thirdPartyCities: []\n        }\n      }],\n      commodities: [{\n        loadedOn: {\n          type: '',\n          number: ''\n        },\n        description: '',\n        quantity: '',\n        packagingUnit: '',\n        weight: '',\n        weightUnit: '',\n        marksAndNumbers: [{\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }],\n        c4LineReleaseNumber: '',\n        harmonizedCode: '',\n        value: '',\n        countryOfOrigin: '',\n        hazmatDetails: {\n          unCode: '',\n          emergencyContactName: '',\n          contactPhone: '',\n          contactEmail: ''\n        }\n      }]\n    }];\n    this.searchTerm = new Subject();\n    this.usAddress = {\n      address: {\n        countryName: '',\n        countryCode: '',\n        stateName: '',\n        stateCode: '',\n        cityName: '',\n        postalCode: '',\n        addressLine: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        manual: false,\n        userLocation: ''\n      }\n    };\n    this.fetchedCoDrivers = [];\n    this.borderAssetTypes = [];\n    this.borderAssetType = [];\n    this.USStates = [];\n    this.USCities = [];\n    /**\r\n     * for front end validation of US address\r\n     */\n\n    this.errorClassUserLocation = false;\n    this.errorClassCountry = false;\n    this.errorClassState = false;\n    this.errorClassCity = false;\n    this.errorClassAddress = false;\n    this.errorClassPostal = false;\n    this.errorFastCard = false;\n    this.address = false;\n    this.amendManifest = false;\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      // this.currentUser = (await Auth.currentSession()).getIdToken().payload;\n      // this.currentUser = `${this.currentUser.firstName} ${this.currentUser.lastName}`;\n      _this.currentUser = localStorage.getItem(\"currentUserName\");\n    });\n    config.seconds = true;\n    config.spinners = true;\n    const date = new Date();\n    this.birthDateMinLimit = {\n      year: date.getFullYear() - 60,\n      month: date.getMonth() + 1,\n      day: date.getDate()\n    };\n    this.getcurrentDate = {\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate()\n    };\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.manifestID = _this2.route.snapshot.params[`manifestID`];\n\n      if (_this2.manifestID) {\n        _this2.title = 'Edit ACE e-Manifest';\n        _this2.modalTitle = 'Edit';\n\n        _this2.fetchACEEntry();\n\n        yield _this2.getCAProvinces();\n\n        _this2.route.queryParams.subscribe(params => {\n          if (params.amendManifest !== undefined) {\n            _this2.amendManifest = params.amendManifest; // to get query parameter amend\n          }\n        });\n      } else {\n        _this2.title = 'Add ACE e-Manifest';\n        _this2.modalTitle = 'Add';\n      }\n\n      _this2.fetchVehicles();\n\n      _this2.fetchAssets();\n\n      _this2.fetchDrivers();\n\n      yield _this2.fetchCountries();\n\n      _this2.listService.fetchShippers();\n\n      _this2.listService.fetchReceivers();\n\n      _this2.fetchBrokers();\n\n      _this2.getCAProvinces(); // fetch al provinces of Canada\n\n\n      _this2.fetchCarrier();\n\n      _this2.getCurrentuser();\n\n      _this2.searchLocation();\n\n      _this2.fetchAssetType();\n\n      _this2.fetchUSStates(); // it fetches the US states\n\n\n      _this2.shippers = _this2.listService.shipperList;\n      _this2.consignees = _this2.listService.receiverList;\n\n      _this2.httpClient.get('assets/USports.json').subscribe(data => {\n        _this2.USports = data;\n      });\n\n      _this2.httpClient.get('assets/manifestETA.json').subscribe(data => {\n        _this2.timeList = data;\n      });\n\n      _this2.httpClient.get('assets/ACEShipmentType.json').subscribe(data => {\n        _this2.shipmentTypeList = data;\n      });\n\n      _this2.httpClient.get('assets/packagingUnit.json').subscribe(data => {\n        _this2.packagingUnitsList = data;\n      });\n\n      _this2.httpClient.get('assets/travelDocumentType.json').subscribe(data => {\n        _this2.documentTypeList = data;\n      });\n\n      _this2.httpClient.get('assets/ACEBrokersList.json').subscribe(data => {\n        _this2.brokersList = data;\n      });\n\n      _this2.httpClient.get('assets/jsonFiles/ACEinbond-types.json').subscribe(data => {\n        _this2.inbondTypesList = data;\n      });\n\n      _this2.httpClient.get('assets/jsonFiles/ACEforeignPorts.json').subscribe(data => {\n        _this2.foreignPortsList = data;\n      });\n\n      _this2.httpClient.get('assets/jsonFiles/worldCountries.json').subscribe(data => {\n        _this2.countriesList = data;\n      });\n\n      _this2.httpClient.get('assets/jsonFiles/ACEthirdPartyTypes.json').subscribe(data => {\n        _this2.thirdPartiesList = data;\n      });\n\n      $(document).ready(() => {\n        _this2.form = $('#form_').validate();\n      });\n    })();\n  }\n\n  shipmentLoadedFn(s, i) {\n    this.shipments[s].commodities[i].loadedOn.number = '';\n  }\n\n  fetchAssets() {\n    this.apiService.getData('assets').subscribe(result => {\n      this.assets = result.Items;\n    });\n  }\n  /***\r\n  * fetch asset types from json file\r\n  */\n\n\n  fetchAssetType() {\n    this.httpClient.get('assets/jsonFiles/trailers.json').subscribe(data => {\n      this.borderAssetType = data;\n    });\n  }\n\n  getBorderAssetTypes(e) {// const assetID = e;\n    // let fetchedAsset = await this.apiService.getData('assets/' + assetID).toPromise();\n    // this.borderAssetTypes = this.testBorderAsset.find(con => con.name === fetchedAsset.Items[0].assetDetails.assetType).borderTypes;\n\n    return _asyncToGenerator(function* () {})();\n  }\n\n  getCAProvinces() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.states = yield _this3.countryStateCity.GetStatesByCountryCode(['CA']);\n    })();\n  }\n\n  fetchUSStates() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.USStates = yield _this4.countryStateCity.GetStatesByCountryCode(['US']);\n    })();\n  }\n\n  getUSCities(event) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const stateCode = event;\n      const countryCode = 'US';\n      _this5.usAddress.address.cityName = '';\n      _this5.usAddress.address.stateName = yield _this5.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this5.usAddress.address.countryName = yield _this5.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this5.USCities = yield _this5.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  } // PASSENGER FUNCTIONS\n\n\n  getPassengerDocStates(countryCode, Pindex, Dindex) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.passengers[Pindex].travelDocuments[Dindex].stateProvince = '';\n      _this6.passengers[Pindex].travelDocuments[Dindex].docStates = yield _this6.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  fetchPassengerDocStates(passengers) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let p = 0; p < passengers.length; p++) {\n        for (let d = 0; d < passengers[p].travelDocuments.length; d++) {\n          const countryCode = _this7.passengers[p].travelDocuments[d].country;\n          _this7.passengers[p].travelDocuments[d].docStates = yield _this7.countryStateCity.GetStatesByCountryCode([countryCode]);\n        }\n      }\n    })();\n  } // THIRD PARTY FUNCTION\n\n\n  getThirdPartyState(countryCode, sIndex, pIndex) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.shipments[sIndex].thirdParties[pIndex].address.stateCode = '';\n      _this8.shipments[sIndex].thirdParties[pIndex].address.thirdPartyStates = yield _this8.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getThirdPartyCity(stateCode, sIndex, pIndex) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const countryCode = _this9.shipments[sIndex].thirdParties[pIndex].address.countryCode;\n      _this9.shipments[sIndex].thirdParties[pIndex].address.cityName = '';\n      _this9.shipments[sIndex].thirdParties[pIndex].address.stateName = yield _this9.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this9.shipments[sIndex].thirdParties[pIndex].address.countryName = yield _this9.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this9.shipments[sIndex].thirdParties[pIndex].address.thirdPartyCities = yield _this9.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  fetchThirdPartyAddress(shipments) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let s = 0; s < shipments.length; s++) {\n        for (let p = 0; p < shipments[s].thirdParties.length; p++) {\n          const countryCode = _this10.shipments[s].thirdParties[p].address.countryCode;\n          const stateCode = _this10.shipments[s].thirdParties[p].address.stateCode;\n          _this10.shipments[s].thirdParties[p].address.thirdPartyStates = yield _this10.countryStateCity.GetStatesByCountryCode([countryCode]);\n          _this10.shipments[s].thirdParties[p].address.thirdPartyCities = yield _this10.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n        }\n      }\n    })();\n  }\n\n  onChangeHideErrors(fieldname = '') {\n    $('[name=\"' + fieldname + '\"]').removeClass('error').next().remove('label');\n  }\n\n  fetchDrivers() {\n    this.apiService.getData('drivers').subscribe(result => {\n      this.fetchedDrivers = result.Items;\n    });\n  }\n\n  fetchVehicles() {\n    this.apiService.getData('vehicles').subscribe(result => {\n      this.vehicles = result.Items;\n    });\n  }\n\n  fetchCountries() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      _this11.countries = yield _this11.countryStateCity.GetAllCountries(); //fetch countries from library\n    })();\n  }\n\n  fetchCarrier() {\n    this.apiService.getData('carriers/getCarrier').subscribe(result => {\n      this.carriers = result.Items;\n    });\n  }\n\n  fetchBrokers() {\n    this.apiService.getData('brokers').subscribe(result => {\n      this.brokers = result.Items;\n    });\n  } // TRAILER DATA\n\n\n  addTrailer() {\n    this.trailers.push({\n      assetID: '',\n      assetTypeCode: '',\n      sealNumbers: [{\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }],\n      IIT: null\n    });\n    this.addTrailerBtn = true;\n\n    if (this.trailers.length >= 9999) {\n      this.addTrailerBtn = false;\n    } else {\n      this.addTrailerBtn = true;\n    }\n  }\n\n  deleteTrailer(i) {\n    this.trailers.splice(i, 1);\n    this.addTrailerBtn = true;\n  }\n\n  addShipment() {\n    this.shipments.push({\n      type: '',\n      shipmentControlNumber: '',\n      provinceOfLoading: '',\n      goodsAstrayDateOfExit: '',\n      inBondDetails: {\n        type: '',\n        paperInBondNumber: '',\n        usDestination: '',\n        foreignDestination: '',\n        onwardCarrierScac: '',\n        irsNumber: '',\n        estimatedDepartureDate: '',\n        fda: false\n      },\n      SCAC: '',\n      shipperID: '',\n      consigneeID: '',\n      broker: {\n        filerCode: '',\n        portLocation: ''\n      },\n      thirdParties: [],\n      commodities: [{\n        loadedOn: {\n          type: '',\n          number: ''\n        },\n        description: '',\n        quantity: '',\n        packagingUnit: '',\n        weight: '',\n        weightUnit: '',\n        marksAndNumbers: [{\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }],\n        c4LineReleaseNumber: '',\n        harmonizedCode: '',\n        value: '',\n        countryOfOrigin: '',\n        hazmatDetails: {\n          unCode: '',\n          emergencyContactName: '',\n          contactPhone: '',\n          contactEmail: ''\n        }\n      }]\n    });\n  }\n\n  deleteShipment(i) {\n    this.shipments.splice(i, 1);\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  addMarksAndNumbers(s, i) {\n    if (this.shipments[s].commodities[i].marksAndNumbers.length <= 3) {\n      this.shipments[s].commodities[i].marksAndNumbers.push({\n        markNumber: ''\n      });\n    }\n  }\n\n  addMorePassenger() {\n    this.passengers.push({\n      firstName: '',\n      lastName: '',\n      gender: '',\n      dateOfBirth: '',\n      citizenshipCountry: '',\n      fastCardNumber: '',\n      travelDocuments: [{\n        type: '',\n        number: '',\n        country: '',\n        stateProvince: '',\n        docStates: []\n      }]\n    });\n  }\n\n  deletePassenger(i) {\n    this.passengers.splice(i, 1);\n  }\n\n  addDocument(i) {\n    if (this.passengers[i].travelDocuments.length < 3) {\n      this.passengers[i].travelDocuments.push({\n        type: '',\n        number: '',\n        country: '',\n        stateProvince: ''\n      });\n\n      if (this.passengers[i].travelDocuments.length >= 3) {\n        $('#addDocBtn').hide();\n      }\n    }\n  }\n\n  deleteDocument(i, p) {\n    this.passengers[p].travelDocuments.splice(i, 1);\n\n    if (this.passengers[p].travelDocuments.length < 3) {\n      $('#addDocBtn').show();\n    }\n  }\n\n  addCommodity(i) {\n    this.shipments[i].commodities.push({\n      loadedOn: {\n        type: '',\n        number: ''\n      },\n      description: '',\n      quantity: '',\n      packagingUnit: '',\n      weight: '',\n      weightUnit: '',\n      marksAndNumbers: [{\n        markNumber: ''\n      }, {\n        markNumber: ''\n      }, {\n        markNumber: ''\n      }, {\n        markNumber: ''\n      }],\n      c4LineReleaseNumber: '',\n      harmonizedCode: '',\n      value: '',\n      countryOfOrigin: '',\n      hazmatDetails: {\n        unCode: '',\n        emergencyContactName: '',\n        contactPhone: '',\n        contactEmail: ''\n      }\n    });\n  }\n\n  deleteCommodity(i, s) {\n    this.shipments[s].commodities.splice(i, 1);\n  }\n\n  addThirdParty(p) {\n    if (this.shipments[p].thirdParties.length <= 20) {\n      this.shipments[p].thirdParties.push({\n        type: '',\n        name: '',\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: '',\n          thirdPartyStates: [],\n          thirdPartyCities: []\n        }\n      });\n    }\n  } // third party address\n\n\n  clearUserLocation(s, p, callType) {\n    if (callType === 'thirdParty') {\n      this.shipments[s].thirdParties[p].address[`userLocation`] = '';\n      $('div').removeClass('show-search__result');\n    } else {\n      this.usAddress.address[`userLocation`] = '';\n      $('div').removeClass('show-search__result');\n    }\n  }\n\n  searchLocation() {\n    this.searchTerm.pipe(map(e => {\n      $('.map-search__results').hide();\n      $(e.target).closest('div').addClass('show-search__result');\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.HereMap.searchEntries(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      this.searchResults = res;\n    });\n  }\n\n  manAddress(event, s, p, callType) {\n    if (event.target.checked) {\n      if (callType === 'thirdParty') {\n        $(event.target).closest('.address-item').addClass('open');\n        this.shipments[s].thirdParties[p].address[`userLocation`] = '';\n        this.shipments[s].thirdParties[p].address.countryCode = '';\n        this.shipments[s].thirdParties[p].address.stateCode = '';\n        this.shipments[s].thirdParties[p].address.stateName = '';\n        this.shipments[s].thirdParties[p].address.cityName = '';\n        this.shipments[s].thirdParties[p].address.postalCode = '';\n      } else {\n        $(event.target).closest('.address-item').addClass('open');\n        this.usAddress.address[`userLocation`] = '';\n        this.usAddress.address.countryCode = '';\n        this.usAddress.address.stateCode = '';\n        this.usAddress.address.cityName = '';\n        this.usAddress.address.postalCode = '';\n      }\n    } else {\n      if (callType === 'thirdParty') {\n        $(event.target).closest('.address-item').removeClass('open');\n        this.shipments[s].thirdParties[p].address.countryCode = '';\n        this.shipments[s].thirdParties[p].address.countryName = '';\n        this.shipments[s].thirdParties[p].address.stateCode = '';\n        this.shipments[s].thirdParties[p].address.stateName = '';\n        this.shipments[s].thirdParties[p].address.cityName = '';\n        this.shipments[s].thirdParties[p].address.postalCode = '';\n        this.shipments[s].thirdParties[p].address.addressLine = '';\n        this.shipments[s].thirdParties[p].address.geoCords.lat = '';\n        this.shipments[s].thirdParties[p].address.geoCords.lng = '';\n      } else {\n        $(event.target).closest('.address-item').removeClass('open');\n        this.usAddress.address.countryCode = '';\n        this.usAddress.address.countryName = '';\n        this.usAddress.address.stateCode = '';\n        this.usAddress.address.stateName = '';\n        this.usAddress.address.cityName = '';\n        this.usAddress.address.postalCode = '';\n        this.usAddress.address.addressLine = '';\n        this.usAddress.address.geoCords.lat = '';\n        this.usAddress.address.geoCords.lng = '';\n      }\n    }\n  }\n\n  userAddress(s, p, item, callType) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this12.HereMap.geoCode(item.address.label);\n      result = result.items[0];\n\n      if (callType === 'thirdParty') {\n        _this12.shipments[s].thirdParties[p].address.userLocation = result.address.label;\n        _this12.shipments[s].thirdParties[p].address.geoCords.lat = result.position.lat;\n        _this12.shipments[s].thirdParties[p].address.geoCords.lng = result.position.lng;\n        _this12.shipments[s].thirdParties[p].address.countryName = result.address.countryName;\n        _this12.shipments[s].thirdParties[p].address.countryCode = result.address.countryCode;\n        _this12.shipments[s].thirdParties[p].address.addressLine = result.address.houseNumber + ' ' + result.address.street;\n        $('div').removeClass('show-search__result');\n        _this12.shipments[s].thirdParties[p].address.stateName = result.address.state;\n        _this12.shipments[s].thirdParties[p].address.stateCode = result.address.stateCode;\n        _this12.shipments[s].thirdParties[p].address.cityName = result.address.city;\n        _this12.shipments[s].thirdParties[p].address.postalCode = result.address.postalCode;\n\n        if (result.address.houseNumber === undefined) {\n          result.address.houseNumber = '';\n        }\n\n        if (result.address.street === undefined) {\n          result.address.street = '';\n        }\n      } else {\n        _this12.usAddress.address.userLocation = result.address.label;\n        _this12.usAddress.address.geoCords.lat = result.position.lat;\n        _this12.usAddress.address.geoCords.lng = result.position.lng;\n        _this12.usAddress.address.countryName = result.address.countryName;\n        _this12.usAddress.address.countryCode = result.address.countryCode;\n        _this12.usAddress.address.addressLine = result.address.houseNumber + ' ' + result.address.street;\n        _this12.usAddress.address.stateName = result.address.state;\n        _this12.usAddress.address.stateCode = result.address.stateCode;\n        _this12.usAddress.address.cityName = result.address.city;\n        _this12.usAddress.address.postalCode = result.address.postalCode;\n        $('div').removeClass('show-search__result');\n\n        if (result.address.houseNumber === undefined) {\n          result.address.houseNumber = '';\n        }\n\n        if (result.address.street === undefined) {\n          result.address.street = '';\n        }\n      }\n    })();\n  }\n\n  deleteThirdParty(i, s) {\n    this.shipments[s].thirdParties.splice(i, 1);\n  }\n\n  savePassengers() {\n    this.addedPassengers = this.passengers;\n  }\n\n  addACEManifest() {\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.hideErrors();\n\n    if (this.shipments.length === 0) {\n      if (this.usAddress.address.manual === true) {\n        this.errorClassUserLocation = false; // to show error on empty US address\n\n        if (this.usAddress.address.countryCode === '') {\n          this.errorClassCountry = true;\n        } else {\n          this.errorClassCountry = false;\n        }\n\n        if (this.usAddress.address.stateCode === '') {\n          this.errorClassState = true;\n        } else {\n          this.errorClassState = false;\n        }\n\n        if (this.usAddress.address.cityName === '') {\n          this.errorClassCity = true;\n        } else {\n          this.errorClassCity = false;\n        }\n\n        if (this.usAddress.address.addressLine === '') {\n          this.errorClassAddress = true;\n        } else {\n          this.errorClassAddress = false;\n        }\n\n        if (this.usAddress.address.postalCode === '') {\n          this.errorClassPostal = true;\n        } else {\n          this.errorClassPostal = false;\n        }\n\n        if (this.usAddress.address.stateCode !== '' && this.usAddress.address.cityName !== '' && this.usAddress.address.addressLine !== '' && this.usAddress.address.postalCode !== '') {\n          this.address = true;\n        }\n      } else {\n        if (this.usAddress.address.userLocation === '') {\n          this.errorClassUserLocation = true;\n        } else {\n          this.address = true;\n          this.errorClassUserLocation = false;\n        }\n      }\n\n      if (this.address === true) {\n        const data = {\n          SCAC: this.SCAC,\n          manifestType: this.manifestType,\n          tripNumber: this.SCAC + this.tripNumber,\n          usPortOfArrival: this.usPortOfArrival,\n          estimatedArrivalDate: this.estimatedArrivalDate,\n          estimatedArrivalTime: this.estimatedArrivalTime,\n          truck: this.truck,\n          trailers: this.trailers,\n          mainDriver: this.mainDriver,\n          coDrivers: this.coDrivers,\n          usAddress: this.usAddress,\n          passengers: this.passengers,\n          shipments: this.shipments,\n          currentStatus: 'Draft'\n        };\n\n        for (let p = 0; p < data.passengers.length; p++) {\n          for (let d = 0; d < data.passengers[p].travelDocuments.length; d++) {\n            const element = data.passengers[p].travelDocuments[d];\n            delete element.docStates;\n          }\n        }\n\n        for (let s = 0; s < data.shipments.length; s++) {\n          for (let p = 0; p < data.shipments[s].thirdParties.length; p++) {\n            const element = data.shipments[s].thirdParties[p].address;\n            delete element.thirdPartyStates;\n            delete element.thirdPartyCities;\n          }\n        }\n\n        this.addFunction(data);\n      }\n    } else {\n      this.usAddress = {\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: ''\n        }\n      };\n      const data = {\n        SCAC: this.SCAC,\n        manifestType: this.manifestType,\n        tripNumber: this.SCAC + this.tripNumber,\n        usPortOfArrival: this.usPortOfArrival,\n        estimatedArrivalDate: this.estimatedArrivalDate,\n        estimatedArrivalTime: this.estimatedArrivalTime,\n        truck: this.truck,\n        trailers: this.trailers,\n        mainDriver: this.mainDriver,\n        coDrivers: this.coDrivers,\n        usAddress: this.usAddress,\n        passengers: this.passengers,\n        shipments: this.shipments,\n        currentStatus: 'Draft'\n      };\n\n      for (let p = 0; p < data.passengers.length; p++) {\n        for (let d = 0; d < data.passengers[p].travelDocuments.length; d++) {\n          const element = data.passengers[p].travelDocuments[d];\n          delete element.docStates;\n        }\n      }\n\n      for (let s = 0; s < data.shipments.length; s++) {\n        for (let p = 0; p < data.shipments[s].thirdParties.length; p++) {\n          const element = data.shipments[s].thirdParties[p].address;\n          delete element.thirdPartyStates;\n          delete element.thirdPartyCities;\n        }\n      }\n\n      this.addFunction(data);\n    }\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v === 'tripNumber') {\n        $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n      }\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  fetchACEEntry() {\n    var _this13 = this;\n\n    this.apiService.getData('eManifests/ACE/' + this.manifestID).subscribe( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (result) {\n        result = result.Items[0];\n        _this13.manifestID = _this13.manifestID;\n        _this13.manifestType = _this13.manifestType;\n        _this13.sendId = result.sendId;\n        _this13.timeCreated = result.timeCreated;\n        _this13.SCAC = result.SCAC;\n        _this13.tripNumber = result.tripNumber.substring(4, result.tripNumber.length);\n        _this13.usPortOfArrival = result.usPortOfArrival;\n        _this13.estimatedArrivalDate = result.estimatedArrivalDate;\n        _this13.estimatedArrivalTime = result.estimatedArrivalTime;\n        _this13.truck = result.truck;\n        _this13.mainDriver = result.mainDriver;\n        _this13.coDrivers = result.coDrivers;\n        _this13.trailers = result.trailers;\n        _this13.passengers = result.passengers;\n        yield _this13.fetchPassengerDocStates(_this13.passengers);\n        _this13.shipments = result.shipments;\n        yield _this13.fetchThirdPartyAddress(_this13.shipments);\n        _this13.currentStatus = result.currentStatus;\n        _this13.usAddress = result.usAddress;\n        _this13.borderResponses = result.borderResponses;\n        _this13.createdDate = result.createdDate;\n        _this13.createdTime = result.createdTime;\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n\n  updateACEManifest() {\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.hideErrors();\n\n    if (this.shipments.length === 0) {\n      if (this.usAddress.address.manual === true) {\n        this.errorClassUserLocation = false; // to show error on empty US address\n\n        if (this.usAddress.address.countryCode === '') {\n          this.errorClassCountry = true;\n        } else {\n          this.errorClassCountry = false;\n        }\n\n        if (this.usAddress.address.stateCode === '') {\n          this.errorClassState = true;\n        } else {\n          this.errorClassState = false;\n        }\n\n        if (this.usAddress.address.cityName === '') {\n          this.errorClassCity = true;\n        } else {\n          this.errorClassCity = false;\n        }\n\n        if (this.usAddress.address.addressLine === '') {\n          this.errorClassAddress = true;\n        } else {\n          this.errorClassAddress = false;\n        }\n\n        if (this.usAddress.address.postalCode === '') {\n          this.errorClassPostal = true;\n        } else {\n          this.errorClassPostal = false;\n        }\n\n        if (this.usAddress.address.stateCode !== '' && this.usAddress.address.cityName !== '' && this.usAddress.address.addressLine !== '' && this.usAddress.address.postalCode !== '') {\n          this.address = true;\n        }\n      } else {\n        if (this.usAddress.address.userLocation === '') {\n          this.errorClassUserLocation = true;\n        } else {\n          this.address = true;\n          this.errorClassUserLocation = false;\n        }\n      }\n\n      if (this.address === true) {\n        const data = {\n          manifestID: this.manifestID,\n          manifestType: this.manifestType,\n          sendId: this.sendId,\n          SCAC: this.SCAC,\n          tripNumber: this.SCAC + this.tripNumber,\n          usPortOfArrival: this.usPortOfArrival,\n          estimatedArrivalDate: this.estimatedArrivalDate,\n          estimatedArrivalTime: this.estimatedArrivalTime,\n          truck: this.truck,\n          trailers: this.trailers,\n          mainDriver: this.mainDriver,\n          coDrivers: this.coDrivers,\n          usAddress: this.usAddress,\n          passengers: this.passengers,\n          shipments: this.shipments,\n          borderResponses: this.borderResponses,\n          createdDate: this.createdDate,\n          createdTime: this.createdTime,\n          currentStatus: 'Draft'\n        };\n\n        for (let p = 0; p < data.passengers.length; p++) {\n          for (let d = 0; d < data.passengers[p].travelDocuments.length; d++) {\n            const element = data.passengers[p].travelDocuments[d];\n            delete element.docStates;\n          }\n        }\n\n        for (let s = 0; s < data.shipments.length; s++) {\n          for (let p = 0; p < data.shipments[s].thirdParties.length; p++) {\n            const element = data.shipments[s].thirdParties[p].address;\n            delete element.thirdPartyStates;\n            delete element.thirdPartyCities;\n          }\n        }\n\n        this.updateFunction(data);\n      }\n    } else {\n      this.usAddress = {\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: ''\n        }\n      }; // this.coDrivers.unshift(this.mainDriver);\n\n      const data = {\n        manifestID: this.manifestID,\n        manifestType: this.manifestType,\n        sendId: this.sendId,\n        SCAC: this.SCAC,\n        tripNumber: this.SCAC + this.tripNumber,\n        usPortOfArrival: this.usPortOfArrival,\n        estimatedArrivalDate: this.estimatedArrivalDate,\n        estimatedArrivalTime: this.estimatedArrivalTime,\n        truck: this.truck,\n        trailers: this.trailers,\n        mainDriver: this.mainDriver,\n        coDrivers: this.coDrivers,\n        usAddress: this.usAddress,\n        passengers: this.passengers,\n        shipments: this.shipments,\n        borderResponses: this.borderResponses,\n        createdDate: this.createdDate,\n        createdTime: this.createdTime,\n        currentStatus: 'Draft'\n      };\n\n      for (let p = 0; p < data.passengers.length; p++) {\n        for (let d = 0; d < data.passengers[p].travelDocuments.length; d++) {\n          const element = data.passengers[p].travelDocuments[d];\n          delete element.docStates;\n        }\n      }\n\n      for (let s = 0; s < data.shipments.length; s++) {\n        for (let p = 0; p < data.shipments[s].thirdParties.length; p++) {\n          const element = data.shipments[s].thirdParties[p].address;\n          delete element.thirdPartyStates;\n          delete element.thirdPartyCities;\n        }\n      }\n\n      this.updateFunction(data);\n    }\n  } // update function\n\n\n  updateFunction(data) {\n    this.apiService.putData(`eManifests/updateACEmanifest/${this.amendManifest}`, data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {// this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.toastr.success('Manifest updated successfully.');\n        this.location.back(); // <-- go back to previous location\n      }\n    });\n  } // add Function\n\n\n  addFunction(data) {\n    this.apiService.postData('eManifests/addACEemanifest', data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {// this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.toastr.success('Manifest added successfully.');\n        this.location.back(); // <-- go back to previous location\n      }\n    });\n  }\n\n  fastValidation(e) {\n    const fastCard = e.target.value;\n    const newString = fastCard.split('');\n\n    if (newString.length == 0) {\n      this.errorFastCard = false;\n    } else {\n      if (newString.length != 14) {\n        this.errorFastCard = true;\n      } else {\n        const fastStart = newString[0].concat(newString[1], newString[2], newString[3]);\n        const fastEnd = newString[12].concat(newString[13]);\n\n        if (fastStart != '4270' && fastStart != '4110') {\n          this.errorFastCard = true;\n        } else if (fastEnd != '00' && fastEnd != '01' && fastEnd != '02') {\n          this.errorFastCard = true;\n        } else {\n          this.errorFastCard = false;\n        }\n      }\n    }\n  }\n\n};\n\nNewAceManifestComponent.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: ApiService\n}, {\n  type: NgbCalendar\n}, {\n  type: Location\n}, {\n  type: HereMapService\n}, {\n  type: ListService\n}, {\n  type: NgbTimepickerConfig\n}, {\n  type: NgbDateAdapter\n}, {\n  type: CountryStateCityService\n}];\n\nNewAceManifestComponent = __decorate([Component({\n  selector: 'app-new-ace-manifest',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [],\n  styles: [__NG_CLI_RESOURCE__1]\n})], NewAceManifestComponent);\nexport { NewAceManifestComponent };","map":null,"metadata":{},"sourceType":"module"}