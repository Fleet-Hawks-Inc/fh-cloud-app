{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./asset-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./asset-detail.component.css\";\nimport { Component } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ColumnMode, SelectionType } from \"@swimlane/ngx-datatable\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport Constants from \"src/app/pages/manage/constants\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { environment } from \"../../../../../environments/environment\";\nimport { ApiService } from \"../../../../services\";\nimport { RouteManagementServiceService } from 'src/app/services/route-management-service.service';\nlet AssetDetailComponent = class AssetDetailComponent {\n  constructor(toastr, domSanitizer, apiService, route, spinner, countryStateCity, routerMgmtService) {\n    this.toastr = toastr;\n    this.domSanitizer = domSanitizer;\n    this.apiService = apiService;\n    this.route = route;\n    this.spinner = spinner;\n    this.countryStateCity = countryStateCity;\n    this.routerMgmtService = routerMgmtService; // google maps config\n\n    this.center = {\n      lat: 24,\n      lng: 12\n    };\n    this.zoom = 10;\n    this.ColumnMode = ColumnMode;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.environment = environment.isFeatureEnabled;\n    this.assetsImages = [];\n    this.assetsDocs = [];\n    this.noRecordMsg = Constants.NO_RECORDS_FOUND;\n    this.assetDataDetail = [];\n    this.allDevices = [];\n    this.pDocs = [];\n    this.lDocs = [];\n    this.purchase = {\n      purchaseVendorID: \"\",\n      warrantyExpirationDate: \"\",\n      purchasePrice: \"\",\n      purchasePriceCurrency: \"\",\n      warrantyExpirationMeter: \"\",\n      purchaseDate: \"\",\n      purchaseComments: \"\",\n      purchaseOdometer: \"\",\n      gstInc: false\n    };\n    this.loan = {\n      loanVendorID: \"\",\n      amountOfLoan: \"\",\n      amountOfLoanCurrency: \"\",\n      aspiration: \"\",\n      annualPercentageRate: \"\",\n      downPayment: \"\",\n      downPaymentCurrency: \"\",\n      dateOfLoan: \"\",\n      monthlyPayment: \"\",\n      monthlyPaymentCurrency: \"\",\n      firstPaymentDate: \"\",\n      numberOfPayments: \"\",\n      loadEndDate: \"\",\n      accountNumber: \"\",\n      generateExpenses: \"\",\n      notes: \"\",\n      loanDueDate: \"\",\n      lReminder: false,\n      gstInc: false\n    };\n    this.errors = {};\n    this.assetObjects = {};\n    this.groupsObjects = {};\n    this.contactsObjects = {};\n    this.uploadedDocs = [];\n    this.existingDocs = [];\n    this.uploadedPhotos = [];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"\");\n    this.messageStatus = true;\n    this.ownerOperatorName = \"\";\n    this.inspectionFormName = \"\";\n    this.inspectionForms = {\n      inspectionFormName: \"\",\n      parameters: [],\n      isDefaultInspectionType: \"\",\n      inspectionType: \"\"\n    }; // Charts\n\n    this.chartOptions = {\n      scaleShowVerticalLines: false,\n      responsive: true,\n      scales: {\n        yAxes: [{\n          // ticks: {beginAtZero:true},\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Temperature (F)\"\n          },\n          ticks: {\n            min: 0,\n            // max: 80,\n            stepSize: 5,\n            suggestedMin: 0,\n            // suggestedMax: 80,\n            // Include a degree sign in the ticks\n            callback: (value, index, values) => {\n              return value + \"Â°F\";\n            }\n          }\n        }]\n      }\n    };\n    this.chartLabels = [\"31 July 12:00\", \"31 July 18:00\", \"1 Aug 00:00\", \"1 Aug 06:00\", \"1 Aug 12:00\", \"1 Aug 18:00\", \"2 Aug 00:00\", \"2 Aug 06:00\", \"2 Aug 12:00\", \"2 Aug 18:00\"];\n    this.chartType = \"line\";\n    this.chartLegend = true;\n    this.chartData = [{\n      data: [12, 15, 17, 13, 15, 12, 18, 12, 18, 13, 10, 14, 12],\n      label: \"Set\",\n      fill: false,\n      backgroundColor: \"#9c9ea1\",\n      borderColor: \"#9c9ea1\",\n      pointBackgroundColor: \"#9c9ea1\",\n      borderWidth: 1\n    }, {\n      data: [10, 14, 12, 11, 14, 11, 15, 12, 16, 14, 11, 13, 14],\n      label: \"Actual\",\n      fill: false,\n      backgroundColor: \"#000\",\n      borderColor: \"#000\",\n      pointBackgroundColor: \"#000\",\n      borderWidth: 1\n    }];\n    /**\r\n     * Get location of the devices attached to asset variable declarations\r\n     */\n\n    this.rows = [];\n    this.loadingIndicator = true;\n    this.reorderable = false;\n    this.swapColumns = false;\n    this.markerOptions = {\n      draggable: false\n    };\n    this.markerPositions = [];\n    this.SelectionType = SelectionType;\n    this.selected = [];\n    this.noDevices = false;\n    this.assetLogs = [];\n    this.manufacturersObjects = {};\n    this.modelsObjects = {};\n    this.asset = '';\n    this.groupName = '';\n    this.groupId = '';\n    this.sessionID = this.routerMgmtService.assetUpdateSessionID;\n  }\n\n  ngOnInit() {\n    this.assetID = this.route.snapshot.params[`assetID`]; // get asset Id from URL\n\n    this.fetchAsset();\n    this.fetchAssetLogs();\n    this.fetchGroups();\n    this.fetchContactsByIDs();\n  }\n\n  fetchContactsByIDs() {\n    this.apiService.getData(\"contacts/get/list\").subscribe(result => {\n      this.contactsObjects = result;\n    });\n  }\n  /**\r\n   * fetch Asset data\r\n   */\n\n\n  fetchAsset() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.spinner.show(); // loader init\n\n\n      _this.apiService.getData(`assets/${_this.assetID}`).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (res) {\n          if (res) {\n            let result = res.Items[0];\n            _this.assetDataDetail = res.Items[0]; // if (!result.hasOwnProperty('devices')) {\n            //   result['devices'] = [];\n            // }\n\n            result.assetType = result.assetType.replace(\"_\", \" \");\n\n            if (result.inspectionFormID !== \"\" && result.inspectionFormID !== undefined) {\n              _this.apiService.getData(\"inspectionForms/\" + result.inspectionFormID).subscribe(result => {\n                let res = result.Items[0];\n                _this.inspectionForms = res;\n                _this.inspectionFormName = res.inspectionFormName;\n              });\n            }\n\n            _this.ownerOperatorName = result.assetDetails.ownerOperator; // this.fetchDevicesByID();\n\n            _this.assetIdentification = result.assetIdentification;\n            _this.VIN = result.VIN;\n            _this.assetType = result.assetType; // this.groupID = result.groupID;\n\n            _this.startDate = result.startDate;\n            _this.currentStatus = result.currentStatus;\n            _this.annualSafetyDate = result.assetDetails.annualSafetyDate;\n            _this.licencePlateNumber = result.assetDetails.licencePlateNumber;\n            _this.licenceCountryName = yield _this.countryStateCity.GetSpecificCountryNameByCode(result.assetDetails.licenceCountryCode);\n            _this.licenceStateName = yield _this.countryStateCity.GetStateNameFromCode(result.assetDetails.licenceStateCode, result.assetDetails.licenceCountryCode);\n            _this.year = result.assetDetails.year;\n            _this.manufacturer = result.assetDetails.manufacturer;\n            _this.model = result.assetDetails.model;\n            _this.length = result.assetDetails.length;\n            _this.height = result.assetDetails.height;\n            _this.lengthUnit = result.assetDetails.lengthUnit;\n            _this.heightUnit = result.assetDetails.heightUnit;\n            _this.axle = result.assetDetails.axle;\n            _this.GAWR = result.assetDetails.GAWR;\n            _this.GAWR_Unit = result.assetDetails.GAWR_Unit;\n            _this.GVWR = result.assetDetails.GVWR;\n            _this.GVWR_Unit = result.assetDetails.GVWR_Unit;\n            _this.ownerShip = result.assetDetails.ownerShip;\n            _this.ownCname = result.assetDetails.ownCname;\n            _this.ownAmt = result.assetDetails.ownAmt;\n            _this.ownCurr = result.assetDetails.ownCurr;\n            _this.ownDate = result.assetDetails.ownDate;\n            _this.ownRec = result.assetDetails.ownRec;\n            _this.ownFrq = result.assetDetails.ownFrq;\n            _this.remarks = result.assetDetails.remarks;\n            _this.dateOfIssue = result.insuranceDetails.dateOfIssue;\n            _this.dateOfExpiry = result.insuranceDetails.dateOfExpiry;\n            _this.premiumAmount = result.insuranceDetails.premiumAmount;\n            _this.premiumCurrency = result.insuranceDetails.premiumCurrency;\n            _this.reminderBefore = result.insuranceDetails.reminderBefore;\n            _this.reminderBeforeUnit = result.insuranceDetails.reminderBeforeUnit;\n            _this.vendor = result.insuranceDetails.vendor;\n            _this.purchase = {\n              purchaseVendorID: result.purchase.purchaseVendorID,\n              warrantyExpirationDate: result.purchase.warrantyExpirationDate,\n              purchasePrice: result.purchase.purchasePrice,\n              purchasePriceCurrency: result.purchase.purchasePriceCurrency,\n              warrantyExpirationMeter: result.purchase.warrantyExpirationMeter,\n              purchaseDate: result.purchase.purchaseDate,\n              purchaseComments: result.purchase.purchaseComments,\n              purchaseOdometer: result.purchase.purchaseOdometer,\n              gstInc: result.purchase.gstInc\n            };\n            _this.loan = {\n              loanVendorID: result.loan.loanVendorID,\n              amountOfLoan: result.loan.amountOfLoan,\n              amountOfLoanCurrency: result.loan.amountOfLoanCurrency,\n              aspiration: result.loan.aspiration,\n              annualPercentageRate: result.loan.annualPercentageRate,\n              downPayment: result.loan.downPayment,\n              downPaymentCurrency: result.loan.downPaymentCurrency,\n              monthlyPaymentCurrency: result.loan.monthlyPaymentCurrency,\n              dateOfLoan: result.loan.dateOfLoan,\n              monthlyPayment: result.loan.monthlyPayment,\n              firstPaymentDate: result.loan.firstPaymentDate,\n              numberOfPayments: result.loan.numberOfPayments,\n              loadEndDate: result.loan.loadEndDate,\n              accountNumber: result.loan.accountNumber,\n              generateExpenses: result.loan.generateExpenses,\n              loanDueDate: result.loan.loanDueDate,\n              lReminder: result.loan.lReminder,\n              gstInc: result.loan.gstInc,\n              notes: result.loan.notes\n            };\n            _this.ACEID = result.crossBorderDetails.ACE_ID;\n            _this.ACIID = result.crossBorderDetails.ACI_ID; // get imageLinks\n\n            _this.assetsImages = result.uploadedPhotosLinks;\n            _this.pDocs = result.purchaseDocsLinks;\n            _this.lDocs = result.loanDocsLinks;\n            _this.assetsDocs = result.uploadedDocsLinks;\n            _this.groupId = result.groupID;\n\n            _this.fetchGroups(); // if (\n            //   result.uploadedPhotos != undefined &&\n            //   result.uploadedPhotos.length > 0\n            // ) {\n            //   this.assetsImages = result.uploadedPhotos.map((x) => ({\n            //     path: `${this.Asseturl}/${result.carrierID}/${x}`,\n            //     name: x,\n            //   }));\n            // }\n            // if (\n            //   result.purchaseDocs != undefined &&\n            //   result.purchaseDocs.length > 0\n            // ) {\n            //   this.pDocs = [];\n            //   result.purchaseDocs.map((x) => {\n            //     let obj = {\n            //       name: x,\n            //       path: `${this.Asseturl}/${result.carrierID}/${x}`,\n            //     };\n            //     this.pDocs.push(obj);\n            //   });\n            // }\n            // if (result.loanDocs != undefined && result.loanDocs.length > 0) {\n            //   this.lDocs = [];\n            //   result.loanDocs.map((x) => {\n            //     let obj = {\n            //       name: x,\n            //       path: `${this.Asseturl}/${result.carrierID}/${x}`,\n            //     };\n            //     this.lDocs.push(obj);\n            //   });\n            // }\n            // if (\n            //   result.uploadedDocs != undefined &&\n            //   result.uploadedDocs.length > 0\n            // ) {\n            //   this.assetsDocs = result.uploadedDocs.map((x) => ({\n            //     path: `${this.Asseturl}/${result.carrierID}/${x}`,\n            //     name: x,\n            //   }));\n            // }\n            // this.spinner.hide(); // loader hide\n\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), err => {});\n    })();\n  } // fetchGroups() {\n  //     this.apiService.getData(\"groups/get/list\").subscribe((result: any) => {\n  //         this.groupsObjects = result;\n  //     });\n  // }\n\n\n  fetchGroups() {\n    if (this.groupId !== '') {\n      this.apiService.getData(`groups/get/list?type=assets&groupId=${this.groupId}`).subscribe(result => {\n        this.groupsObjects = result;\n      });\n    }\n  }\n\n  fetchAssetLogs() {\n    this.apiService.getData(`auditLogs/details/${this.assetID}`).subscribe(res => {\n      this.assetLogs = res.Items;\n\n      if (this.assetLogs.length > 0) {\n        this.assetLogs.map(a => {\n          a.dateAndTime = `${a.createdDate} ${a.createTime}`;\n\n          if (a.eventParams.userName !== undefined) {\n            const newString = a.eventParams.userName.split(\"_\");\n            a.userFirstName = newString[0];\n            a.userLastName = newString[1];\n          }\n\n          if (a.eventParams.name !== undefined) {\n            a.entityNumber = a.eventParams.name;\n          }\n\n          if (a.eventParams.name !== undefined) {\n            if (a.eventParams.name.includes(\"_\")) {\n              const newString = a.eventParams.name.split(\"_\");\n              a.firstName = newString[0];\n              a.lastName = newString[1];\n            }\n          }\n        });\n        this.assetLogs.sort((c, d) => {\n          return new Date(d.dateAndTime).valueOf() - new Date(c.dateAndTime).valueOf();\n        });\n      }\n    });\n  }\n\n  fetchDevicesByID() {\n    var _this2 = this;\n\n    this.allDevices = [];\n\n    if (this.assetData.devices) {\n      this.assetData.devices.forEach( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (element) {\n          let result = yield _this2.apiService.getData(\"devices/\" + element).toPromise();\n\n          _this2.allDevices.push(result.Items[0]);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }\n\n  removeDevices(i) {\n    if (confirm(\"Are you sure you want to delete?\") === true) {\n      this.assetData.devices.splice(i, 1);\n      this.allDevices.splice(i, 1);\n      this.messageStatus = false;\n      this.addDevice(); // this.fetchAsset();\n    }\n  }\n\n  addDevicesIDs() {\n    if (!this.assetData.devices.includes(this.devices)) {\n      this.assetData.devices.push(this.devices);\n    } else {\n      this.toastr.error(`Device already selected`);\n    }\n\n    this.fetchDevicesByID();\n  }\n\n  addDevice() {\n    delete this.assetData.carrierID;\n    delete this.assetData.timeModified;\n    this.apiService.postData(\"assets/\" + this.assetID, this.assetData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/'.*'/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.spinner.hide(); // loader hide\n\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        if (this.messageStatus) {\n          this.toastr.success(\"Device added successfully\");\n        } else {\n          this.toastr.success(\"Device removed successfully\");\n        }\n\n        $(\"#attachDeviceModal\").modal(\"hide\");\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  } // delete uploaded images and documents\n  // delete(type: string, name: string, index: any) {\n  //   delete this.assetDataDetail.carrierID;\n  //   delete this.assetDataDetail.timeModified;\n  //   delete this.assetDataDetail.isDelActiveSK;\n  //   delete this.assetDataDetail.assetSK;\n  //   delete this.assetDataDetail.carrierID;\n  //   delete this.assetDataDetail.timeModified;\n  //   if (type === 'doc') {\n  //     this.assetsDocs.splice(index, 1);\n  //     this.assetDataDetail.uploadedDocs.splice(index, 1);\n  //     this.deleteUploadedFile(type, name);\n  //     try {\n  //       const formData = new FormData();\n  //       formData.append('data', JSON.stringify(this.assetDataDetail));\n  //       this.apiService.putData('assets', formData, true).subscribe({\n  //         complete: () => { this.fetchAsset(); }\n  //       });\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   } else {\n  //     this.assetsImages.splice(index, 1);\n  //     this.assetDataDetail.uploadedPhotos.splice(index, 1);\n  //     this.deleteUploadedFile(type, name);\n  //     try {\n  //       const formData = new FormData();\n  //       formData.append('data', JSON.stringify(this.assetDataDetail));\n  //       this.apiService.putData('assets', formData, true).subscribe({\n  //         complete: () => { this.fetchAsset(); }\n  //       });\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   }\n  // }\n\n\n  deleteDocument(type, name) {\n    // delete from aws\n    this.apiService.deleteData(`assets/uploadDelete/${this.assetID}/${type}/${name}`).subscribe(result => {\n      if (type == \"doc\") {\n        this.assetsDocs = [];\n        this.uploadedDocs = result.Attributes.uploadedDocs;\n        this.existingDocs = result.Attributes.uploadedDocs;\n        result.Attributes.uploadedDocs.map(x => {\n          let obj = {\n            name: x,\n            path: `${this.Asseturl}/${result.carrierID}/${x}`\n          };\n          this.assetsDocs.push(obj);\n        });\n      } else if (type == \"loan\") {\n        this.lDocs = [];\n        this.uploadedDocs = result.Attributes.loanDocs;\n        this.existingDocs = result.Attributes.loanDocs;\n        result.Attributes.loanDocs.map(x => {\n          let obj = {\n            name: x,\n            path: `${this.Asseturl}/${result.carrierID}/${x}`\n          };\n          this.lDocs.push(obj);\n        });\n      } else {\n        this.pDocs = [];\n        this.uploadedDocs = result.Attributes.purchaseDocs;\n        this.existingDocs = result.Attributes.purchaseDocs;\n        result.Attributes.purchaseDocs.map(x => {\n          let obj = {\n            name: x,\n            path: `${this.Asseturl}/${result.carrierID}/${x}`\n          };\n          this.pDocs.push(obj);\n        });\n      }\n    });\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustUrl(\"\");\n\n    if (ext == \"doc\" || ext == \"docx\" || ext == \"xlsx\") {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"https://docs.google.com/viewer?url=\" + val + \"&embedded=true\");\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  } //Google Maps methods\n\n  /**\r\n   * Move to center\r\n   * @param event mouse event\r\n   */\n\n\n  moveMap(event) {\n    this.center = event.latLng.toJSON();\n  }\n  /** when row is clicked updated map */\n\n\n  onLocationRowSelected({\n    selected\n  }) {\n    for (const sel of this.selected) {\n      this.updatePosition(sel.cords);\n    }\n  }\n  /**Updates marker position on map */\n\n\n  updatePosition(cordsInput) {\n    const cords = cordsInput.split(\",\");\n    this.center = {\n      lng: parseFloat(cords[0]),\n      lat: parseFloat(cords[1])\n    };\n    this.markerPositions = [];\n    this.markerPositions.push({\n      lng: parseFloat(cords[0]),\n      lat: parseFloat(cords[1])\n    });\n  }\n\n};\n\nAssetDetailComponent.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: DomSanitizer\n}, {\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: CountryStateCityService\n}, {\n  type: RouteManagementServiceService\n}];\n\nAssetDetailComponent = __decorate([Component({\n  selector: \"app-asset-detail\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AssetDetailComponent);\nexport { AssetDetailComponent };","map":null,"metadata":{},"sourceType":"module"}