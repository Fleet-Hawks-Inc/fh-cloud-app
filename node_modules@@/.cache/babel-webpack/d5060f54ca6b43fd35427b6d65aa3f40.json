{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./company-documents.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./company-documents.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ApiService } from '../../../../services';\nimport { map } from 'rxjs/operators';\nimport { from } from 'rxjs';\nimport * as moment from 'moment';\nimport { Auth } from 'aws-amplify';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Constants from '../../../fleet/constants';\nimport { environment } from 'src/environments/environment';\nimport * as _ from 'lodash';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nlet CompanyDocumentsComponent = class CompanyDocumentsComponent {\n  constructor(apiService, toastr, spinner, modalService) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.modalService = modalService;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.environment = environment.isFeatureEnabled;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.documents = [];\n    this.trips = [];\n    this.ifEdit = false;\n    this.modalTitle = 'Add';\n    this.documentsDocs = [];\n    this.documentMode = 'Manual';\n    this.allOptions = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.errors = {};\n    this.submitDisabled = false;\n    this.documentData = {\n      categoryType: 'company',\n      tripID: null,\n      docType: null,\n      // documentName: '',\n      description: '',\n      uploadedDocs: [],\n      dateCreated: moment().format('YYYY-MM-DD')\n    };\n    this.totalRecords = 0;\n    this.pageLength = 10;\n    this.serviceUrl = '';\n    this.filterValues = {\n      docID: '',\n      searchValue: '',\n      startDate: '',\n      endDate: '',\n      start: '',\n      end: ''\n    };\n    this.lastEvaluatedKey = '';\n    this.suggestions = [];\n    this.currentID = null;\n    this.uploadeddoc = [];\n    this.newDoc = [];\n    this.tripsObjects = {};\n    this.docError = false; // to show error if doc is not uploaded\n\n    this.docNext = false;\n    this.docPrev = true;\n    this.docDraw = 0;\n    this.docPrevEvauatedKeys = [''];\n    this.docStartPoint = 1;\n    this.docEndPoint = this.pageLength;\n    this.descriptionData = '';\n    this.documentNumberDisabled = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.alltrips = [];\n    this.getSuggestions = _.debounce(function (searchvalue) {\n      this.suggestions = [];\n\n      if (searchvalue !== '') {\n        this.apiService.getData('documents/get/suggestions/' + searchvalue).subscribe({\n          complete: () => {},\n          error: () => {},\n          next: result => {\n            this.suggestions = [];\n\n            for (let i = 0; i < result.length; i++) {\n              const element = result[i];\n              let obj = {\n                id: element.docID,\n                name: element.documentNumber\n              };\n              this.suggestions.push(obj);\n            }\n          }\n        });\n      }\n    }, 800);\n    this.loaded = false;\n\n    this.fetchDocuments = () => {\n      this.totalRecords = 0;\n      this.apiService.getData('documents/get/count?categoryType=company&searchValue=' + this.filterValues.searchValue + \"&from=\" + this.filterValues.start + \"&to=\" + this.filterValues.end).subscribe({\n        complete: () => {},\n        error: () => {},\n        next: result => {\n          this.totalRecords = result.Count;\n        }\n      });\n    };\n\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.currentUser = `${_this.currentUser.firstName} ${_this.currentUser.lastName}`;\n    });\n    this.selectedFileNames = new Map();\n  }\n\n  ngOnInit() {\n    this.fetchDocumentsCount();\n    this.fetchTrips();\n    this.fetchTripsByIDs();\n  }\n  /*\r\n   * Get all trips from api\r\n   */\n\n\n  fetchTrips() {\n    this.apiService.getData('trips').subscribe(result => {\n      this.alltrips = result.Items;\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.trips.push(element);\n        }\n\n        if (element.isDeleted === 1 && element.tripID === this.documentData.tripID) {\n          this.documentData.tripID = null;\n        }\n      });\n    });\n  }\n  /*\r\n  * Get all trips from api\r\n  */\n\n\n  fetchTripsByIDs() {\n    this.apiService.getData('trips/get/list').subscribe(result => {\n      this.tripsObjects = result;\n    });\n  }\n\n  fetchDocumentsCount() {\n    this.apiService.getData('documents/get/count?categoryType=company&searchValue=' + this.filterValues.searchValue + \"&from=\" + this.filterValues.start + \"&to=\" + this.filterValues.end).subscribe({\n      complete: () => {},\n      error: () => {},\n      next: result => {\n        this.totalRecords = result.Count;\n\n        if (this.filterValues.searchValue != '' || this.filterValues.start != '' || this.filterValues.end != '') {\n          this.docEndPoint = this.totalRecords;\n        }\n\n        this.initDataTable();\n      }\n    });\n  }\n\n  selectDoc(event) {\n    let files = [...event.target.files];\n    let condition = true;\n\n    for (let i = 0; i < files.length; i++) {\n      const element = files[i];\n      let name = element.name.split('.');\n      let ext = name[name.length - 1].toLowerCase();\n\n      if (ext !== 'jpg' && ext !== 'pdf' && ext !== 'jpeg' && ext !== 'png') {\n        $('#uploadedDocs').val('');\n        condition = false;\n        this.toastr.error('Only pdf, jpg, jpeg and png file formats are allowed');\n        return false;\n      }\n    }\n\n    if (condition) {\n      this.uploadeddoc = [];\n      this.uploadeddoc = files;\n    }\n  }\n\n  saveDocumentMode() {\n    if (this.documentMode !== 'Manual') {\n      const prefixCode = `${this.documentPrefix}-${this.documentSequence}`;\n      this.documentData['documentNumber'] = prefixCode;\n    }\n  }\n\n  onAddDocument() {\n    if (this.uploadeddoc.length > 0) {\n      this.submitDisabled = true;\n      this.hideErrors();\n      this.spinner.show(); // create form data instance\n\n      const formData = new FormData(); // append photos if any\n\n      for (let i = 0; i < this.uploadeddoc.length; i++) {\n        formData.append('uploadedDocs', this.uploadeddoc[i]);\n      } // append other fields\n\n\n      formData.append('data', JSON.stringify(this.documentData));\n      this.apiService.postData('documents', formData, true).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, 'This Field');\n            this.errors[val.context.label] = val.message;\n          })).subscribe({\n            complete: () => {\n              this.submitDisabled = false; // this.throwErrors();\n            },\n            error: () => {\n              this.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          this.spinner.hide();\n          this.toastr.success('Document Added successfully');\n          this.docRef.close();\n          this.documentData.docType = null;\n          this.documentData.tripID = null;\n          this.documentData.uploadedDocs = [];\n          this.uploadeddoc = [];\n          $('#uploadedDocs').val(''); // this.documentData.documentName = '';\n\n          this.documentData.description = '';\n          this.lastEvaluatedKey = '';\n          this.documents = [];\n          this.fetchDocumentsCount();\n          this.submitDisabled = false;\n        }\n      });\n    } else {\n      this.docError = true;\n    }\n  }\n\n  throwErrors() {\n    this.spinner.hide();\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n  /*\r\n    * Fetch Document details before updating\r\n    */\n\n\n  editDocument(id) {\n    this.spinner.show();\n    this.currentID = id;\n    this.docError = false;\n    this.ifEdit = true;\n    this.modalTitle = 'Edit';\n    this.newDoc = [];\n    this.documentData = {\n      categoryType: 'company',\n      tripID: null,\n      docType: null,\n      // documentName: '',\n      description: '',\n      uploadedDocs: [],\n      dateCreated: moment().format('YYYY-MM-DD')\n    };\n    this.documentData.docType = null;\n    this.documentData.description = '';\n    this.documentData.uploadedDocs = [];\n    this.apiService.getData(`documents/${this.currentID}`).subscribe(result => {\n      result = result.Items[0];\n      this.spinner.hide();\n      this.documentData.tripID = result.tripID;\n      this.alltrips.forEach(element => {\n        if (element.isDeleted === 1 && element.tripID === this.documentData.tripID) {\n          this.documentData.tripID = null;\n        }\n      });\n      this.documentData['documentNumber'] = result.documentNumber.toString(); // this.documentData.documentName = result.documentName;\n\n      this.documentData.docType = result.docType;\n      this.documentData.description = result.description;\n      this.documentData[`timeCreated`] = result.timeCreated;\n      this.documentData.dateCreated = result.dateCreated;\n      this.documentData.uploadedDocs = result.uploadedDocs; // this.uploadeddoc = result.uploadedDocs;\n\n      if (result.uploadedDocs !== undefined && result.uploadedDocs.length > 0) {\n        result.uploadedDocs.forEach(x => {\n          if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n            const obj = {\n              imgPath: `${x.urlPath}`,\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n            this.newDoc.push(obj);\n          } else {\n            const obj = {\n              imgPath: 'assets/img/icon-pdf.png',\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n            this.newDoc.push(obj);\n          }\n        });\n      }\n\n      this.openDocModal();\n    });\n  }\n\n  openDocModal() {\n    let ngbModalOptions = {\n      keyboard: false,\n      backdrop: \"static\",\n      windowClass: \"document--main\"\n    };\n    this.docRef = this.modalService.open(this.addDocumentModal, ngbModalOptions);\n  }\n\n  onUpdateDocument() {\n    if (this.uploadeddoc.length > 0 || this.documentData.uploadedDocs.length > 0) {\n      this.submitDisabled = true;\n      this.documentData[`docID`] = this.currentID; // create form data instance\n\n      const formData = new FormData(); //append photos if any\n\n      if (this.uploadeddoc.length > 0) {\n        for (let i = 0; i < this.uploadeddoc.length; i++) {\n          formData.append('uploadedDocs', this.uploadeddoc[i]);\n        }\n      } //append other fields\n\n\n      formData.append('data', JSON.stringify(this.documentData));\n      this.apiService.putData('documents', formData, true).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, 'This Field');\n            this.errors[val.context.label] = val.message;\n          })).subscribe({\n            complete: () => {\n              this.submitDisabled = false; // this.throwErrors();\n            },\n            error: () => {\n              this.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          this.toastr.success('Document Updated successfully');\n          this.docRef.close();\n          this.documentData.docType = null;\n          this.documentData.tripID = '';\n          this.documentData.uploadedDocs = [];\n          $('#uploadedDocs').val(''); // this.documentData.documentName = '';\n\n          this.documentData.description = '';\n          this.lastEvaluatedKey = '';\n          this.documents = [];\n          this.currentID = null;\n          this.initDataTable();\n          this.submitDisabled = false;\n        }\n      });\n    } else {\n      this.docError = true;\n    }\n  }\n\n  deactivateAsset(value, docID, docNo) {\n    if (confirm(\"Are you sure you want to delete?\") === true) {\n      this.apiService.deleteData(`documents/isDeleted/${docID}/${docNo}/${value}`).subscribe(result => {\n        this.documents = [];\n        this.docDraw = 0;\n        this.lastEvaluatedKey = '';\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.toastr.success('Document deleted successfully.');\n        this.fetchDocuments();\n        this.initDataTable();\n      });\n    }\n  }\n\n  initDataTable(refresh) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this2.lastEvaluatedKey = \"\";\n        _this2.documents = [];\n      }\n\n      if (_this2.lastEvaluatedKey !== 'end') {\n        _this2.apiService.getData(`documents/fetch/records?categoryType=company&searchValue=${_this2.filterValues.searchValue}&from=${_this2.filterValues.start}&to=${_this2.filterValues.end}&lastKey=${_this2.lastEvaluatedKey}`).subscribe(result => {\n          if (result.Items.length == 0) {\n            _this2.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          if (result.Items.length > 0) {\n            if (result.LastEvaluatedKey !== undefined) {\n              _this2.lastEvaluatedKey = encodeURIComponent(result.LastEvaluatedKey.docSK);\n            } else {\n              _this2.lastEvaluatedKey = 'end';\n            }\n\n            for (let i = 0; i < result.Items.length; i++) {\n              const element = result.Items[i];\n\n              _this2.documents.push(element);\n            } // this.documents = this.documents.concat(result.Items);\n\n\n            _this2.loaded = true;\n          } // this.suggestions = [];\n          // this.getStartandEndVal();\n          // this.documents = result['Items'];\n\n        });\n      }\n    })();\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.initDataTable();\n    }\n\n    this.loaded = false;\n  }\n\n  searchFilter() {\n    if (this.filterValues.startDate === null) this.filterValues.startDate = '';\n    if (this.filterValues.endDate === null) this.filterValues.endDate = '';\n\n    if (this.filterValues.startDate != '' || this.filterValues.endDate != '' || this.filterValues.searchValue != '') {\n      if (this.filterValues.startDate != '' && this.filterValues.endDate == '') {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.filterValues.startDate == '' && this.filterValues.endDate != '') {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.filterValues.startDate > this.filterValues.endDate) {\n        this.toastr.error('Start date should be less then end date');\n        return false;\n      } else {\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.documents = [];\n        this.suggestions = [];\n        this.lastEvaluatedKey = \"\";\n        this.filterValues.searchValue = this.filterValues.searchValue.toLowerCase();\n\n        if (this.filterValues.startDate !== '') {\n          this.filterValues.start = this.filterValues.startDate;\n        }\n\n        if (this.filterValues.endDate !== '') {\n          this.filterValues.end = this.filterValues.endDate;\n        } // this.pageLength = this.totalRecords;\n\n\n        this.fetchDocumentsCount();\n      }\n    } else {\n      this.toastr.error('Please fill at least one field');\n      return false;\n    }\n  }\n\n  resetFilter() {\n    if (this.filterValues.startDate !== '' || this.filterValues.endDate !== '' || this.filterValues.searchValue !== '') {\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.documents = [];\n      this.suggestions = [];\n      this.filterValues = {\n        docID: '',\n        searchValue: '',\n        startDate: '',\n        endDate: '',\n        start: '',\n        end: ''\n      };\n      this.resetCountResult();\n      this.fetchDocumentsCount();\n    } else {\n      return false;\n    }\n  }\n\n  searchSelectedRoute(document) {\n    this.filterValues.docID = document.id;\n    this.filterValues.searchValue = document.name;\n    this.suggestions = [];\n  }\n\n  getStartandEndVal() {\n    this.docStartPoint = this.docDraw * this.pageLength + 1;\n    this.docEndPoint = this.docStartPoint + this.pageLength - 1;\n  } // next button func\n\n\n  nextResults() {\n    this.docNext = true;\n    this.docPrev = true;\n    this.docDraw += 1;\n    this.initDataTable();\n  } // prev button func\n\n\n  prevResults() {\n    this.docPrev = true;\n    this.docNext = true;\n    this.docDraw -= 1;\n    this.lastEvaluatedKey = this.docPrevEvauatedKeys[this.docDraw];\n    this.initDataTable();\n  }\n\n  resetCountResult() {\n    this.lastEvaluatedKey = '';\n    this.docStartPoint = 1;\n    this.docEndPoint = this.pageLength;\n    this.docDraw = 0;\n  }\n\n  openDocumentModal() {\n    this.currentID = null;\n    this.documentData = {\n      categoryType: 'company',\n      tripID: null,\n      docType: null,\n      // documentName: '',\n      description: '',\n      uploadedDocs: [],\n      dateCreated: moment().format('YYYY-MM-DD')\n    };\n    this.newDoc = '';\n    this.openDocModal();\n  }\n\n  showDescModal(description) {\n    this.descriptionData = description;\n    $(\"#routeNotes\").modal('show');\n  }\n\n  refreshData() {\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.documents = [];\n    this.suggestions = [];\n    this.filterValues = {\n      docID: '',\n      searchValue: '',\n      startDate: '',\n      endDate: '',\n      start: '',\n      end: ''\n    };\n    this.lastEvaluatedKey = '';\n    this.resetCountResult();\n    this.fetchDocumentsCount();\n  }\n\n};\n\nCompanyDocumentsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: NgbModal\n}];\n\nCompanyDocumentsComponent.propDecorators = {\n  addDocumentModal: [{\n    type: ViewChild,\n    args: [\"addDocumentModal\", {\n      static: true\n    }]\n  }]\n};\nCompanyDocumentsComponent = __decorate([Component({\n  selector: 'app-company-documents',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], CompanyDocumentsComponent);\nexport { CompanyDocumentsComponent };","map":null,"metadata":{},"sourceType":"module"}