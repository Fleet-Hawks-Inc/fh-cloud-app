{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./pdf-automation.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"pdfcanvas\"];\nexport class PdfAutomationComponent {\n  constructor(service, http) {\n    // $(() => {\n    //   // const canvas = document.getElementById('src');\n    this.service = service;\n    this.http = http;\n    this.modalBody = '';\n    this.$rect = {};\n    this.$text = {};\n    this.$ctx = {};\n    this.$srcContext = {};\n    this.$canvas = {};\n    this.$sitePersonel = {};\n    this.$cursorVT = {};\n    this.$cursorHL = {};\n    this.$val = [];\n    this.$head = [];\n    this.$annotateinfo = {};\n    this.$rectn = [];\n    this.$res = [];\n    this.$pdfjson = {};\n    this.$data = {};\n    this.i = 0;\n    this.$rct = [];\n    this.postData = {\n      \"u1\": \"1000\",\n      \"u2\": \"1100\"\n    };\n    this.$obj = {\n      \"documentId\": \"RANDOM VALUE\",\n      \"typeofDocument\": \"Order\",\n      \"nameofDocument\": \"LighSpeed\",\n      \"carrierId\": \"carrierId\",\n      \"createDate\": \"\",\n      \"createdTime\": \"\",\n      \"rct\": []\n    };\n    this.$jsonfile = {};\n    this.url = 'http://localhost:3000/api/v1/pdfautomation';\n    this.pageTitle = 'Pdf Annotation';\n    this.drag = false;\n    this.selectOpt = ''; //   const canvas = this.pdfcanvas.nativeElement;\n    //   this.$canvas = canvas;\n    //   const savebtn = document.getElementById('fire');\n    //   const pdffile = document.getElementById('pdffile');\n    //   const el = document.getElementById('myFile');\n    //   const uf = document.getElementById('uploadedfile');\n    //   let text;\n    //   this.$text = text;\n    //   const ctx = canvas.getContext('2d');\n    //   this.$ctx = ctx;\n    //   const rect = {};\n    //   this.$rect = rect;\n    //   let drag = false;\n    //   const imageObj = null;\n    //   let renderTask;\n    //   const delay = ms => new Promise(res => setTimeout(res, ms));\n    //   const srcContext = canvas.getContext('2d');\n    //   this.$srcContext = srcContext;\n    //   this.$cursorVT = document.querySelector('.vt')\n    //   this.$cursorHL = document.querySelector('.hl')\n    //   interface HTMLInputEvent extends Event {\n    //     target: HTMLInputElement & EventTarget;\n    //   }\n    //   el.onchange = (e?: HTMLInputEvent) => {\n    //     const canvas = this.pdfcanvas.nativeElement;\n    //     this.$canvas = canvas;\n    //     const savebtn = document.getElementById('fire');\n    //     const pdffile = document.getElementById('pdffile');\n    //     const el = document.getElementById('myFile');\n    //     const uf = document.getElementById('uploadedfile');\n    //     let text;\n    //     this.$text = text;\n    //     const ctx = canvas.getContext('2d');\n    //     this.$ctx = ctx;\n    //     const rect = {};\n    //     this.$rect = rect;\n    //     let drag = false;\n    //     const imageObj = null;\n    //     let renderTask;\n    //     const delay = ms => new Promise(res => setTimeout(res, ms));\n    //     const srcContext = canvas.getContext('2d');\n    //     this.$srcContext = srcContext;\n    //     this.$cursorVT = document.querySelector('.vt')\n    //     this.$cursorHL = document.querySelector('.hl')\n    //     let files: any = e.target.files[0];\n    //     const contentType = files.type;\n    //     const bucket = new S3(\n    //       {\n    //         accessKeyId: 'AKIARUNMEEHU3LCMJJIK',\n    //         secretAccessKey: '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',\n    //         region: 'us-east-2'\n    //       }\n    //     );\n    //     const params = {\n    //       Bucket: 'pdfautomation-bucket',\n    //       Key: files.name,\n    //       Body: files,\n    //       ACL: 'public-read',\n    //       ContentType: contentType\n    //     };\n    //     bucket.upload(params, function (err, data) {\n    //       if (err) {\n    //         return false;\n    //       }\n    //       return true;\n    //     });\n    //     //for upload progress   \n    //     /*bucket.upload(params).on('httpUploadProgress', function (evt) {\n    //           }).send(function (err, data) {\n    //               if (err) {\n    //                   return false;\n    //               }\n    //               return true;\n    //           });*/\n    //     for (var i = 0, f; f = files[i]; i++) {\n    //       var reader = new FileReader();\n    //       if (!f.type.match('image.*')) {\n    //         continue;\n    //       }\n    //       reader.onload = (function (theFile) {\n    //         return function (evt) {\n    //           var span = document.createElement('span');\n    //           span.innerHTML = ['<img class=\"thumb\" src=\"', evt.target.result,\n    //             '\" title=\"', escape(theFile.name), '\"/>'].join('');\n    //           document.getElementById('list').insertBefore(span, null);\n    //         };\n    //       })(f);\n    //       reader.readAsDataURL(f);\n    //     }\n    //     // (async () => {\n    //     //   await delay(2000);\n    //     const url = \"https://pdfautomation-bucket.s3.us-east-2.amazonaws.com/\" + files.name;\n    //     // Loaded via <script> tag, create shortcut to access PDF.js exports.\n    //     const pdfjsLib = window['pdfjs-dist/build/pdf'];\n    //     // The workerSrc property shall be specified.\n    //     pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\n    //     const loadingTask = pdfjsLib.getDocument(url);\n    //     loadingTask.promise.then((pdf) => {\n    //       // Fetch the first page\n    //       const pageNumber = 1;\n    //       pdf.getPage(pageNumber).then(function (page) {\n    //         const scale = 2;\n    //         const viewport = page.getViewport({ scale: scale });\n    //         // Prepare canvas using PDF page dimensions\n    //         // const canvasShadowed = document.getElementById('src');\n    //         // const canvasShadowed = this.canva.nativeElement;\n    //         const canvasShadowed = canvas;\n    //         const context = canvasShadowed.getContext('2d');\n    //         canvasShadowed.height = viewport.height;\n    //         canvasShadowed.width = viewport.width;\n    //         // Render PDF page into canvas context\n    //         const renderContext = {\n    //           canvasContext: context,\n    //           viewport\n    //         };\n    //         renderTask = page.render(renderContext);\n    //         renderTask.promise.then(() => {\n    //         });\n    //       });\n    //     }, (reason) => {\n    //       // PDF loading error\n    //     });\n    //     // var ocrJson = {\n    //     //     // todo: other parameters. b&w, resizing strategy etc\n    //     //     'version': '1.0.0',\n    //     //     'schema': 'My OCR Meta JSON',\n    //     //     'rectangles': [\n    //     //         { 'left': 70, 'top': 95, 'width': 130, 'height': 15, 'label': 'PatientName' },\n    //     //         { 'left': 70, 'top': 110, 'width': 230, 'height': 15, 'label': 'Address' },\n    //     //         { 'left': 140, 'top': 135, 'width': 150, 'height': 15, 'label': 'DOS' },\n    //     //     ],\n    //     // };\n    //   }\n    //   uf.onchange = (e?: HTMLInputEvent) => {\n    //     let files: any = e.target.files[0];\n    //     const contentType = files.type;\n    //     const bucket = new S3(\n    //       {\n    //         accessKeyId: 'AKIARUNMEEHU3LCMJJIK',\n    //         secretAccessKey: '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',\n    //         region: 'us-east-2'\n    //       }\n    //     );\n    //     const params = {\n    //       Bucket: 'pdfautomation-bucket',\n    //       Key: files.name,\n    //       Body: files,\n    //       ACL: 'public-read',\n    //       ContentType: contentType\n    //     };\n    //     bucket.upload(params, function (err, data) {\n    //       if (err) {\n    //         return false;\n    //       }\n    //       return true;\n    //     });\n    //     //for upload progress   \n    //     /*bucket.upload(params).on('httpUploadProgress', function (evt) {\n    //           }).send(function (err, data) {\n    //               if (err) {\n    //                   return false;\n    //               }\n    //               return true;\n    //           });*/\n    //     for (var i = 0, f; f = files[i]; i++) {\n    //       var reader = new FileReader();\n    //       //   if (!f.type.match('image.*')) {\n    //       //     continue;\n    //       //   }\n    //       //   reader.onload = (function (theFile) {\n    //       //     return function (evt) {\n    //       //       var span = document.createElement('span');\n    //       //       span.innerHTML = ['<img class=\"thumb\" src=\"', evt.target.result,\n    //       //         '\" title=\"', escape(theFile.name), '\"/>'].join('');\n    //       //       document.getElementById('list').insertBefore(span, null);\n    //       //     };\n    //       //   })(f);\n    //       //   reader.readAsDataURL(f);\n    //       // }\n    //       // (async () => {\n    //       //   await delay(2000);\n    //       const url = \"https://pdfautomation-bucket.s3.us-east-2.amazonaws.com/\" + files.name;\n    //       // Loaded via <script> tag, create shortcut to access PDF.js exports.\n    //       const pdfjsLib = window['pdfjs-dist/build/pdf'];\n    //       // // The workerSrc property shall be specified.\n    //       // pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\n    //       const loadingTask = pdfjsLib.getDocument(url);\n    //       loadingTask.promise.then((pdf) => {\n    //         const pageNumber = 1;\n    //         pdf.getPage(pageNumber).then(function (page) {\n    //           const scale = 2;\n    //           const viewport = page.getViewport({ scale: scale });\n    //           const canvasShadowed = canvas;\n    //           const context = canvasShadowed.getContext('2d');\n    //           canvasShadowed.height = viewport.height;\n    //           canvasShadowed.width = viewport.width;\n    //           const renderContext = {\n    //             canvasContext: context,\n    //             viewport\n    //           };\n    //           renderTask = page.render(renderContext);\n    //           renderTask.promise.then(() => {\n    //           });\n    //         });\n    //       }, (reason) => {\n    //         // PDF loading error\n    //       });\n    //       (async () => {\n    //         await delay(2000);\n    //         this.http.get(this.url + \"/78fe60b0-6c37-11eb-9a16-fd33a4993a22\").subscribe((data: any) => {\n    //           const rectangles = [];\n    //           for (let i = 0; i < data.Items[0].rct.length; i++) {\n    //             let a = {\n    //               left: data.Items[0].rct[i][1],\n    //               top: data.Items[0].rct[i][2],\n    //               width: data.Items[0].rct[i][3],\n    //               height: data.Items[0].rct[i][4],\n    //             }\n    //             rectangles.push(a)\n    //           }\n    //           // const rectangles = [\n    //           //   {\n    //           //     left:data.Items[0].rct[0][1],\n    //           //     top: data.Items[0].rct[0][2],\n    //           //     width:data.Items[0].rct[0][3],\n    //           //     height: data.Items[0].rct[0][4],\n    //           //   },\n    //           //   {\n    //           //     left: 462,\n    //           //     top: 29,\n    //           //     width: 299,\n    //           //     height: 80,\n    //           //   },\n    //           // ];\n    //           const worker = new Tesseract.TesseractWorker();\n    //           for (let i = 0; i < rectangles.length; i++) {\n    //             const cropImgCanvas = this.cropImage(this.$canvas, rectangles[i]);//img\n    //             if (cropImgCanvas) {\n    //             }\n    //             else {\n    //             }\n    //             // just renderint to visualize - no need for actual crop\n    //             this.$srcContext.rect(rectangles[i].left, rectangles[i].top, rectangles[i].width, rectangles[i].height);\n    //             this.$srcContext.strokeStyle = '#FF0000';\n    //             this.$srcContext.stroke();\n    //             worker.recognize(cropImgCanvas)\n    //               .progress(progress => {\n    //               }).then(result => {\n    //                 const para = document.createElement('P');\n    //                 const h = document.createElement('h3');\n    //                 // h.innerHTML = document.getElementById('select').value;\n    //                 h.innerHTML = data.Items[0].rct[i][0];\n    //                 para.innerHTML = result.text;\n    //                 this.$val.push(result.text);\n    //                 this.$head.push(data.Items[0].rct[i][0]);\n    //                 this.$pdfjson[data.Items[0].rct[i][0]] = result.text;\n    //                 JSON.stringify(this.$pdfjson);\n    //                 document.getElementById('myDIV').appendChild(h);\n    //                 document.getElementById('myDIV').appendChild(para);\n    //               });\n    //           }\n    //         });\n    //       })();\n    //     }\n    //     async function init() {\n    //       // var drag = false;\n    //       // var canvas = document.getElementById('src');\n    //       // const worker = new Tesseract.TesseractWorker();\n    //       // var srcContext = document.getElementById('src').getContext('2d');\n    //       // var destContext = document.getElementById('dest').getContext('2d');\n    //       // let img = await loadImage('1.jpg');\n    //       // srcContext.drawImage(img, 0, 0);\n    //     }\n    //     document.body.onload = init;\n    //   });\n  }\n\n  selectfile(value) {}\n\n  cropImage(sourceImage, rect) {\n    if (!sourceImage) {} else {}\n\n    this.$rect = rect; // parameterize them\n\n    const left = rect.left;\n    const top = rect.top;\n    const width = rect.width;\n    const height = rect.height;\n    const cropCanvas = document.createElement('canvas');\n    cropCanvas.width = width;\n    cropCanvas.height = height;\n    const context = cropCanvas.getContext('2d');\n    context.drawImage(sourceImage, left, top, width, height, 0, 0, width, height);\n    return cropCanvas;\n  }\n\n  mymousedown(e) {\n    this.$rect.startX = e.pageX - this.$canvas.offsetLeft - 280;\n    this.$rect.startY = e.pageY - this.$canvas.offsetTop - 195;\n    this.drag = true;\n  }\n\n  mymouseup(e) {\n    this.drag = false;\n    this.$ctx.strokeRect(this.$rect.startX, this.$rect.startY, this.$rect.w, this.$rect.h); //var canvas = document.getElementById('src');\n\n    const worker = new Tesseract.TesseractWorker(); // const worker = Tesseract;\n    // const srcContext = document.getElementById('src').getContext('2d');\n    // let img = await loadImage('1.jpg');\n    // srcContext.drawImage(img, 0, 0);\n\n    const rct = {\n      left: this.$rect.startX,\n      top: this.$rect.startY,\n      width: this.$rect.w,\n      height: this.$rect.h\n    };\n    const cropImgCanvas = this.cropImage(this.$canvas, rct); //img\n\n    if (cropImgCanvas) {} else {} // just renderint to visualize - no need for actual crop\n\n\n    this.$srcContext.rect(rct.left, rct.top, rct.width, rct.height);\n    this.$srcContext.strokeStyle = '#FF0000';\n    this.$srcContext.stroke(); // todo: pass the rect info and promise them all?\n\n    worker.recognize(cropImgCanvas).progress(progress => {}).then(result => {\n      // document.getElementById('text').value = result.text;\n      // text = result.text\n      const objects = [{\n        \"typeofDocument\": \"Order\",\n        \"nameOfDocument\": \"LightSpeed\",\n        \"carrierId\": \"carrierId\"\n      }];\n      this.$sitePersonel.objects = objects;\n      this.$xmin = rct.left;\n      this.$ymin = rct.top;\n      this.$xmax = rct.width;\n      this.$ymax = rct.height;\n      let i = 0;\n      var object = {\n        annotateInfo: [result.text, this.$xmin, this.$ymin, this.$xmax, this.$ymax]\n      };\n      i = i + 1;\n      this.$text = result.text;\n      this.$sitePersonel.objects.push(object); // document.getElementById('input').value = text;\n\n      this.modalBody = this.$text;\n      const value = JSON.stringify(this.$sitePersonel);\n      document.getElementById('json').innerHTML = value;\n    });\n    this.modalBody = this.$text; // document.getElementById('input').value = text;\n\n    $('#exampleModal').modal('show');\n  }\n\n  mybutton() {\n    let rct = \"rct\" + this.i;\n    var newData = [this.selectOpt, this.$xmin, this.$ymin, this.$xmax, this.$ymax];\n    this.$obj.rct.push(newData);\n    this.$jsonfile = {\n      \"documentId\": \"RANDOM VALUE\",\n      \"typeofDocument\": \"Order\",\n      \"nameofDocument\": \"LighSpeed\",\n      \"carrierId\": \"carrierId\",\n      \"value\": this.selectOpt,\n      \"createDate\": \"\",\n      \"createdTime\": \"\"\n    }; // let rct = \"rct\" + this.i;\n    // this.$rectn.push(rct);\n    // this.$res.push(this.$xmin,\n    //   this.$xmax,\n    //   this.$ymin,\n    //   this.$ymax)\n    // this.$annotateinfo[rct] =1;\n    // // this.$xmin,\n    // // this.$xmax,\n    // // this.$ymin,\n    // // this.$ymax;\n    // this.i++;\n\n    JSON.stringify(this.$jsonfile);\n    const para = document.createElement('P');\n    const h = document.createElement('h3'); // h.innerHTML = document.getElementById('select').value;\n\n    h.innerHTML = this.selectOpt;\n    var inputValue = document.getElementById(\"input\").value;\n    para.innerHTML = inputValue;\n    this.$val.push(inputValue);\n    this.$head.push(this.selectOpt);\n    this.$pdfjson[this.selectOpt] = inputValue;\n    JSON.stringify(this.$pdfjson);\n    this.service.dataSubscribe.next(JSON.stringify(this.$pdfjson));\n    document.getElementById('myDIV').appendChild(h);\n    document.getElementById('myDIV').appendChild(para);\n  }\n\n  myclick(e) {\n    this.service.dataSubscribe.next(JSON.stringify(this.$pdfjson));\n    this.http.post(this.url, this.$obj).subscribe(data => {}); // this.http.get(this.url + \"/fgfd\").subscribe((data : any) => {\n    // });\n\n    this.service.missionAnnouncedSource.next(this.$pdfjson);\n  }\n\n  mymouseout(e) {}\n\n  mymousemove(e) {\n    this.$cursorVT.setAttribute('style', `left: ${e.clientX}px;`);\n    this.$cursorHL.setAttribute('style', `top: ${e.clientY}px;`);\n\n    if (this.drag) {\n      this.$rect.w = e.pageX - this.$canvas.offsetLeft - this.$rect.startX - 280;\n      this.$rect.h = e.pageY - this.$canvas.offsetTop - this.$rect.startY - 195;\n      this.$ctx.strokeStyle = 'red'; //  this.$ctx.strokeRect( this.$rect.startX,  this.$rect.startY,  this.$rect.w,  this.$rect.h);\n      // this.$ctx.fillStyle = \"green\";\n      // this.$ctx.globalAlpha = 0.01;  // [0, 1]\n      // this.$ctx.fillRect(this.$rect.startX, this.$rect.startY, this.$rect.w, this.$rect.h);\n    }\n  }\n\n  ngOnInit() {}\n\n}\n\nPdfAutomationComponent.ɵfac = function PdfAutomationComponent_Factory(t) {\n  return new (t || PdfAutomationComponent)(i0.ɵɵdirectiveInject(i1.PdfAutomationService), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\n\nPdfAutomationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PdfAutomationComponent,\n  selectors: [[\"app-pdfautomation\"]],\n  viewQuery: function PdfAutomationComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pdfcanvas = _t.first);\n    }\n  },\n  decls: 103,\n  vars: 3,\n  consts: [[1, \"body\"], [1, \"inner-wrapper\"], [\"role\", \"main\", 1, \"content-body\", \"pl-0\", \"pr-0\", \"pt-0\"], [1, \"page-header\"], [1, \"row\", \"pr-5\", 2, \"padding-top\", \"10px\"], [1, \"col-md-4\", \"col-lg-4\", \"font-weight-bold\", \"text-4\", \"text-dark\"], [1, \"col-md-8\", \"col-lg-8\", \"text-right\", \"pr-4\"], [\"routerLink\", \"\", 1, \"btn\", \"btn-default\", \"btn-sm\"], [1, \"fas\", \"fa-list\"], [1, \"row\"], [1, \"cursor\"], [1, \"vt\"], [1, \"hl\"], [\"type\", \"file\", \"id\", \"myFile\", \"size\", \"50\", 3, \"click\"], [\"type\", \"file\", \"id\", \"uploadedfile\", \"size\", \"50\"], [\"id\", \"src\", \"width\", \"500\", \"height\", \"500\", 1, \"d-flex\", 2, \"cursor\", \"crosshair\", 3, \"mouseout\", \"mousedown\", \"mouseup\", \"mousemove\"], [\"pdfcanvas\", \"\"], [\"id\", \"json\"], [\"id\", \"a\"], [1, \"topcorner\"], [\"id\", \"myDIV\", \"contentEditable\", \"true\", 1, \"card\", 2, \"width\", \"18rem\"], [\"href\", \"#\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"id\", \"exampleModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"myModalLabel\", 1, \"modal\", \"fade\"], [\"role\", \"document\", 1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"name\", \"industry\", \"id\", \"select\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"OrderNumber\"], [\"value\", \"orderDate\"], [\"value\", \"CustomerPO\"], [\"value\", \"reference\"], [\"value\", \"csa\"], [\"value\", \"ctpat\"], [\"value\", \"additionalcontactname\"], [\"value\", \"email\"], [\"value\", \"phone\"], [\"value\", \"shippersshipperID\"], [\"value\", \"shipperspickupLocation\"], [\"value\", \"shipperspickupDate\"], [\"value\", \"shipperspickupTime\"], [\"value\", \"shipperspickupInstruction\"], [\"value\", \"shipperscontactPerson\"], [\"value\", \"shippersphone\"], [\"value\", \"shippersnotes\"], [\"value\", \"shipperscommodityname\"], [\"value\", \"shipperscommodityquantity\"], [\"value\", \"shipperscommodityquantityUnit\"], [\"value\", \"shippersweight\"], [\"value\", \"shippersweightUnit\"], [\"value\", \"receiversreceiverID\"], [\"value\", \"receiversdropOffLocation\"], [\"value\", \"receiversdropOffDate\"], [\"value\", \"receiversdropOffTime\"], [\"value\", \"receiversdropOffInstruction\"], [\"value\", \"freightFeeamount\"], [\"value\", \"freightFeecurrency\"], [\"value\", \"freightFeetype\"], [\"id\", \"input\", 1, \"modal-body\", 3, \"ngModel\", \"ngModelChange\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn\", \"btn-default\"], [\"type\", \"button\", \"id\", \"fire\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"id\", \"text\"]],\n  template: function PdfAutomationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"section\", 2);\n      i0.ɵɵelementStart(3, \"header\", 3);\n      i0.ɵɵelementStart(4, \"div\", 4);\n      i0.ɵɵelementStart(5, \"div\", 5);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 6);\n      i0.ɵɵelementStart(8, \"a\", 7);\n      i0.ɵɵelement(9, \"i\", 8);\n      i0.ɵɵtext(10, \" Pdf Automation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 9);\n      i0.ɵɵelementStart(12, \"table\");\n      i0.ɵɵelementStart(13, \"div\", 10);\n      i0.ɵɵelement(14, \"div\", 11);\n      i0.ɵɵelement(15, \"div\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 13);\n      i0.ɵɵlistener(\"click\", function PdfAutomationComponent_Template_input_click_16_listener($event) {\n        return ctx.selectfile($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 14);\n      i0.ɵɵelementStart(18, \"canvas\", 15, 16);\n      i0.ɵɵlistener(\"mouseout\", function PdfAutomationComponent_Template_canvas_mouseout_18_listener($event) {\n        return ctx.mymouseout($event);\n      })(\"mousedown\", function PdfAutomationComponent_Template_canvas_mousedown_18_listener($event) {\n        return ctx.mymousedown($event);\n      })(\"mouseup\", function PdfAutomationComponent_Template_canvas_mouseup_18_listener($event) {\n        return ctx.mymouseup($event);\n      })(\"mousemove\", function PdfAutomationComponent_Template_canvas_mousemove_18_listener($event) {\n        return ctx.mymousemove($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 17);\n      i0.ɵɵtext(21, \" hi\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"h1\", 18);\n      i0.ɵɵelementStart(23, \"div\", 19);\n      i0.ɵɵelementStart(24, \"div\", 20);\n      i0.ɵɵelementStart(25, \"a\", 21);\n      i0.ɵɵlistener(\"click\", function PdfAutomationComponent_Template_a_click_25_listener($event) {\n        return ctx.myclick($event);\n      });\n      i0.ɵɵtext(26, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"div\", 22);\n      i0.ɵɵelementStart(28, \"div\", 23);\n      i0.ɵɵelementStart(29, \"div\", 24);\n      i0.ɵɵelementStart(30, \"div\", 25);\n      i0.ɵɵelementStart(31, \"select\", 26);\n      i0.ɵɵlistener(\"ngModelChange\", function PdfAutomationComponent_Template_select_ngModelChange_31_listener($event) {\n        return ctx.selectOpt = $event;\n      });\n      i0.ɵɵelementStart(32, \"option\", 27);\n      i0.ɵɵtext(33, \"OrderNumber\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"option\", 28);\n      i0.ɵɵtext(35, \"OrderDate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"option\", 29);\n      i0.ɵɵtext(37, \"CustomerPO\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"option\", 30);\n      i0.ɵɵtext(39, \"reference\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"option\", 31);\n      i0.ɵɵtext(41, \"CSA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(42, \"option\", 32);\n      i0.ɵɵtext(43, \"ctpat\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"option\", 30);\n      i0.ɵɵtext(45, \"reference\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"option\", 33);\n      i0.ɵɵtext(47, \"Additional Contact\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(48, \"option\", 34);\n      i0.ɵɵtext(49, \"Email \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(50, \"option\", 35);\n      i0.ɵɵtext(51, \"Phone \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(52, \"option\", 36);\n      i0.ɵɵtext(53, \"shippersshipperID \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(54, \"option\", 37);\n      i0.ɵɵtext(55, \"shipperspickupLocation \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(56, \"option\", 38);\n      i0.ɵɵtext(57, \"shipperspickupDate \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(58, \"option\", 39);\n      i0.ɵɵtext(59, \"shipperspickupTime \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(60, \"option\", 40);\n      i0.ɵɵtext(61, \"shipperspickupInstruction \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(62, \"option\", 41);\n      i0.ɵɵtext(63, \"shipperscontactPerson \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(64, \"option\", 36);\n      i0.ɵɵtext(65, \"shippersshipperID \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(66, \"option\", 42);\n      i0.ɵɵtext(67, \"shippersphone \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(68, \"option\", 43);\n      i0.ɵɵtext(69, \"shippersnotes \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(70, \"option\", 44);\n      i0.ɵɵtext(71, \"shipperscommodityname \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(72, \"option\", 45);\n      i0.ɵɵtext(73, \"shipperscommodityquantity \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(74, \"option\", 46);\n      i0.ɵɵtext(75, \"shipperscommodityquantityUnit \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(76, \"option\", 47);\n      i0.ɵɵtext(77, \"shippersweight \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(78, \"option\", 48);\n      i0.ɵɵtext(79, \"shippersweightUnit \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(80, \"option\", 49);\n      i0.ɵɵtext(81, \"receiversreceiverID \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(82, \"option\", 50);\n      i0.ɵɵtext(83, \"receiversdropOffLocation \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(84, \"option\", 51);\n      i0.ɵɵtext(85, \"receiversdropOffDate \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(86, \"option\", 52);\n      i0.ɵɵtext(87, \"receiversdropOffTime \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(88, \"option\", 53);\n      i0.ɵɵtext(89, \"receiversdropOffInstruction \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(90, \"option\", 54);\n      i0.ɵɵtext(91, \"freightFeeamount \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(92, \"option\", 55);\n      i0.ɵɵtext(93, \"freightFeecurrency \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(94, \"option\", 56);\n      i0.ɵɵtext(95, \"freightFeetype \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(96, \"input\", 57);\n      i0.ɵɵlistener(\"ngModelChange\", function PdfAutomationComponent_Template_input_ngModelChange_96_listener($event) {\n        return ctx.modalBody = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(97, \"div\", 58);\n      i0.ɵɵelementStart(98, \"button\", 59);\n      i0.ɵɵtext(99, \"Close\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(100, \"button\", 60);\n      i0.ɵɵlistener(\"click\", function PdfAutomationComponent_Template_button_click_100_listener() {\n        return ctx.mybutton();\n      });\n      i0.ɵɵtext(101, \"Save changes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(102, \"h1\", 61);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.pageTitle, \" \");\n      i0.ɵɵadvance(25);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectOpt);\n      i0.ɵɵadvance(65);\n      i0.ɵɵproperty(\"ngModel\", ctx.modalBody);\n    }\n  },\n  directives: [i3.RouterLinkWithHref, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor],\n  styles: [\"canvas[_ngcontent-%COMP%] {\\r\\n  border: dotted gray 2px;\\r\\n  margin: 20px;\\r\\n}\\r\\n\\r\\n.topcorner[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  top: 10px;\\r\\n  right: 10px;\\r\\n}\\r\\n\\r\\n.cursor[_ngcontent-%COMP%] {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  right: 0;\\r\\n  bottom: 0;\\r\\n  left: 0;\\r\\n  z-index: 1;\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.vt[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  bottom: 0;\\r\\n  width: 1px;\\r\\n  background: black;\\r\\n}\\r\\n\\r\\n.hl[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  height: 1px;\\r\\n  left: 0;\\r\\n  right: 0;\\r\\n  background: black;\\r\\n}\"]\n});","map":null,"metadata":{},"sourceType":"module"}