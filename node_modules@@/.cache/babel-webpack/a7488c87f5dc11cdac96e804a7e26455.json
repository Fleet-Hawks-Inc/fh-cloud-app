{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./trial-balance.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./trial-balance.component.css\";\nimport { Component } from '@angular/core';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { AccountService } from 'src/app/services/account.service';\nimport * as _ from 'lodash';\nimport { ToastrService } from \"ngx-toastr\";\nimport * as moment from 'moment';\nimport { ActivatedRoute } from '@angular/router'; //import { AccountService } from 'src/app/services';\n\nlet TrialBalanceComponent = class TrialBalanceComponent {\n  constructor(accountService, toaster, route) {\n    this.accountService = accountService;\n    this.toaster = toaster;\n    this.route = route;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.assetArr = [];\n    this.liabilityArr = [];\n    this.equityArr = [];\n    this.revenueArr = [];\n    this.accArray = [];\n    this.expenseArr = [];\n    this.actName = null;\n    this.actType = null;\n    this.accounts = [];\n    this.exportData = [];\n    this.filter = {\n      actType: null,\n      actName: null,\n      startDate: null,\n      endDate: null\n    };\n    this.datee = '';\n    this.disableSearch = false;\n    this.exportLoading = false;\n    this.currTab = \"CAD\";\n    this.isLoadText = \"Load More...\";\n    this.isLoad = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.CAD = [];\n    this.USD = [];\n    this.actID = \"\";\n    this.acClasses = [];\n    this.totalUSD = 0;\n    this.totalCUSD = 0;\n    this.totalDCAD = 0;\n    this.totalCCAD = 0;\n    this.allExportData = [];\n    this.lastExportSk = \"\";\n    this.data1 = [];\n    this.cadDebitTotal = 0;\n    this.cadCreditTotal = 0;\n    this.usdDebitTotal = 0;\n    this.usdCreditTotal = 0;\n    this.creTotal = [];\n    this.debTotal = [];\n    this.accountsClassObjects = {};\n    this.coaData = {};\n    this.tempResults = [];\n    this.currency = 'CAD';\n    this.transactionLogCAD = [];\n    this.creditTotal = 0;\n    this.result = [];\n    this.tempcredit = [];\n    this.tempdebit = [];\n  }\n\n  ngOnInit() {\n    this.filter.endDate = moment().format(\"YYYY-MM-DD\");\n    this.filter.startDate = moment().subtract(15, 'day').format('YYYY-MM-DD');\n    this.fetchAccounts();\n    this.fetchAccountClassByIDs();\n    this.getAcClasses();\n  }\n\n  fetchAccounts(refresh) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this.accounts = [];\n      }\n\n      _this.accountService.getData(`chartAc/report/trialBalance/${_this.currency}/?&start=${_this.filter.startDate}&end=${_this.filter.endDate}`).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          if (result.data.length === 0) {\n            _this.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          if (result.data.length > 0) {\n            result.data.map(v => {\n              _this.accounts.push(v);\n            });\n\n            const newArray = _.sortBy(_this.accounts, [\"accountNo\"]);\n\n            _this.accounts = newArray;\n\n            for (let i = 0; i < _this.accounts.length; i++) {\n              if (_this.accounts[i].debit === 0 || _this.accounts[i].credit === 0) {\n                _this.dataMessage = Constants.NO_RECORDS_FOUND;\n              }\n            }\n\n            for (let i = 0; i < _this.accounts.length; i++) {\n              if (_this.currTab === 'CAD') {\n                _this.currency = 'CAD';\n                _this.accounts = _.filter(_this.accounts, function (o) {\n                  return o.debit != '0' || o.credit != '0';\n                });\n\n                if (_this.accounts[i].credit > _this.accounts[i].debit) {\n                  _this.tempcredit = _this.accounts[i].credit - _this.accounts[i].debit;\n                  _this.accounts[i].credit = _this.tempcredit;\n                  _this.accounts[i].debit = '0';\n                } else if (_this.accounts[i].credit < _this.accounts[i].debit) {\n                  _this.tempdebit = _this.accounts[i].debit - _this.accounts[i].credit;\n                  _this.accounts[i].debit = _this.tempdebit;\n                  _this.accounts[i].credit = '0';\n                }\n              }\n\n              if (_this.currTab === 'USD') {\n                _this.currency = 'USD';\n                _this.accounts = _.filter(_this.accounts, function (o) {\n                  return o.debit != '0' || o.credit != '0';\n                });\n\n                if (_this.accounts[i].credit > _this.accounts[i].debit) {\n                  _this.tempcredit = _this.accounts[i].credit - _this.accounts[i].debit;\n                  _this.accounts[i].credit = _this.tempcredit;\n                  _this.accounts[i].debit = '0';\n                } else if (_this.accounts[i].credit < _this.accounts[i].debit) {\n                  _this.tempdebit = _this.accounts[i].debit - _this.accounts[i].credit;\n                  _this.accounts[i].debit = _this.tempdebit;\n                  _this.accounts[i].credit = '0';\n                }\n              }\n            }\n\n            for (let i = 0; i <= _this.accounts.length; i++) {\n              if (_this.currTab === 'CAD') {\n                _this.currency = 'CAD';\n                _this.cadCreditTotal += parseFloat(_this.accounts[i].credit);\n                _this.cadDebitTotal += parseFloat(_this.accounts[i].debit);\n              }\n\n              if (_this.currTab === 'USD') {\n                _this.currency = 'USD';\n                _this.usdCreditTotal += parseFloat(_this.accounts[i].credit);\n                _this.usdDebitTotal += parseFloat(_this.accounts[i].debit);\n              }\n            }\n          }\n\n          if (_this.currTab === 'CAD') {\n            _this.currency = 'CAD';\n\n            if (_this.accounts.length === 0) {\n              _this.dataMessage = Constants.NO_RECORDS_FOUND;\n            }\n          }\n\n          if (_this.currTab === 'USD') {\n            _this.currency = 'USD';\n\n            if (_this.accounts.length === 0) {\n              _this.dataMessage = Constants.NO_RECORDS_FOUND;\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  searchFilter() {\n    if (this.filter.startDate !== null || this.filter.endDate !== null) {\n      this.start = this.filter.startDate;\n      this.end = this.filter.endDate;\n\n      if (this.start > this.end) {\n        this.toaster.error('Start Date should be less then end date.');\n        return false;\n      } else {\n        this.cadDebitTotal = 0;\n        this.cadCreditTotal = 0;\n        this.usdDebitTotal = 0;\n        this.usdCreditTotal = 0;\n        this.accounts = [];\n        this.creTotal = [];\n        this.debTotal = [];\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fetchAccounts();\n      }\n    }\n  }\n\n  resetFilter() {\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filter.endDate = moment().format(\"YYYY-MM-DD\");\n    this.filter.startDate = moment().subtract(15, 'day').format('YYYY-MM-DD');\n    this.cadDebitTotal = 0;\n    this.cadCreditTotal = 0;\n    this.usdDebitTotal = 0;\n    this.usdCreditTotal = 0;\n    this.accounts = [];\n    this.creTotal = [];\n    this.debTotal = [];\n    this.fetchAccounts();\n  }\n\n  fetchAccountClassByIDs() {\n    this.accountService.getData(\"chartAc/get/accountClass/list/all\").subscribe(result => {\n      this.accountsClassObjects = result;\n    });\n  }\n\n  getAcClasses() {\n    this.accountService.getData(\"chartAc/get/acClasses\").subscribe(res => {\n      this.acClasses = res;\n    });\n  }\n\n  refreshClass() {\n    this.getAcClasses();\n  } //For Switching Tab\n\n\n  changeTab(type) {\n    this.currTab = type;\n    this.accounts = [];\n\n    if (this.currTab === \"CAD\") {\n      this.currency = 'CAD';\n      this.cadDebitTotal = 0;\n      this.cadCreditTotal = 0;\n      this.fetchAccounts();\n    } else if (this.currTab === \"USD\") {\n      this.currency = 'USD';\n      this.usdDebitTotal = 0;\n      this.usdCreditTotal = 0;\n      this.fetchAccounts();\n    }\n  } //For Generating CSV\n\n\n  generateCSV() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.exportLoading = true;\n      let dataObject = [];\n      let csvArray = [];\n      let provArray = [];\n\n      try {\n        if (_this2.accounts.length > 0) {\n          for (const element of _this2.accounts) {\n            let obj = {};\n            obj[\"Account Number\"] = element.accountNo;\n            obj[\"Account Name\"] = element.accountName;\n            obj[\"Debit\"] = element.debit === '0' ? '-' : element.debit;\n            obj[\"Credit\"] = element.credit === '0' ? '-' : element.credit;\n            dataObject.push(obj);\n          }\n\n          let totObj = {\n            [\"Debit\"]: 'Total',\n            [\"Credit\"]: \" \"\n          };\n\n          if (_this2.currency === 'CAD') {\n            totObj[\"Total1\"] = _this2.cadDebitTotal.toFixed(2);\n            totObj[\"Total\"] = _this2.cadCreditTotal.toFixed(2);\n            dataObject.push(totObj);\n          } else if (_this2.currency === 'USD') {\n            totObj[\"Total1\"] = _this2.usdDebitTotal.toFixed(2);\n            totObj[\"Total\"] = _this2.usdCreditTotal.toFixed(2);\n            dataObject.push(totObj);\n          }\n\n          let headers = Object.keys(dataObject[0]).join(',');\n          headers += '\\n';\n          csvArray.push(headers);\n\n          for (const element of dataObject) {\n            let value = Object.values(element).join(',');\n            value += '\\n';\n            csvArray.push(value);\n          }\n\n          const blob = new Blob(csvArray, {\n            type: 'text/csv;charset=utf-8'\n          });\n          const link = document.createElement('a');\n\n          if (link.download !== undefined) {\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}-trialBalance.csv`);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }\n\n          _this2.exportLoading = false;\n        } else {\n          _this2.toaster.error(\"No Records Found\");\n\n          _this2.exportLoading = false;\n        }\n      } catch (error) {\n        _this2.exportLoading = false;\n      }\n    })();\n  }\n\n};\n\nTrialBalanceComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}];\n\nTrialBalanceComponent = __decorate([Component({\n  selector: 'app-trial-balance',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], TrialBalanceComponent);\nexport { TrialBalanceComponent };","map":null,"metadata":{},"sourceType":"module"}