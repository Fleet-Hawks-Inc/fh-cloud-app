{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./location-share.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./location-share.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MapInfoWindow } from '@angular/google-maps';\nimport { ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ApiService } from 'src/app/services';\nimport { DashCamLocationStreamService } from 'src/app/services/dash-cam-location-stream.service';\nlet LocationShareComponent = class LocationShareComponent {\n  constructor(route, webSocket, apiService, toaster) {\n    this.route = route;\n    this.webSocket = webSocket;\n    this.apiService = apiService;\n    this.toaster = toaster;\n    this.lat = -104.618896;\n    this.lng = 50.44521;\n    this.width = \"100%\";\n    this.height = \"100%\";\n    this.zoom = 17;\n    this.center = {\n      lat: 48.48248695279594,\n      lng: -99.0688673798094\n    };\n    this.token = undefined;\n    this.loaded = false;\n    this.infoDetail = 'Vehicle is Offline!!';\n    this.vehicleMarkerOptions = {\n      draggable: false,\n      icon: 'assets/live-location-icon.png'\n    };\n    this.mapOptions = {\n      clickableIcons: true,\n      fullscreenControl: true,\n      rotateControl: true,\n      mapTypeControl: true\n    };\n    this.messages = [];\n    this.destroyed$ = new Subject();\n    this.token = this.route.snapshot.params.token;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // google.maps.geometry.spherical.computeHeading - for rotation of icon\n      _this.apiResponse = yield _this.validateAndGetLocation();\n\n      if (_this.apiResponse && _this.apiResponse.errorCode) {\n        _this.toaster.error('This link has expired.');\n\n        _this.loaded = false;\n      }\n\n      if (_this.apiResponse) {\n        _this.loaded = true;\n\n        _this.connectToWSServer();\n\n        _this.updateLastLocation();\n      }\n    })();\n  }\n\n  connectToWSServer() {\n    this.webSocket.connect(this.apiResponse.usage, this.apiResponse.salt, this.apiResponse.token).pipe(takeUntil(this.destroyed$)).subscribe(messages => {\n      if (messages.action === '80000') {\n        this.toaster.success('Successfully Connected to Server..');\n      }\n\n      if (messages.action === \"80003\" && messages.payload.deviceID === this.apiResponse.deviceID) {\n        this.messages.push(messages);\n\n        if (this.messages.length === 1) {\n          this.toaster.success('Vehicle is online...');\n        }\n\n        this.center = {\n          lat: parseFloat(messages.payload.location.latitude),\n          lng: parseFloat(messages.payload.location.longitude)\n        };\n        this.apiResponse.speed = parseFloat(messages.payload.location.speed).toFixed(2) || 0.0;\n        this.apiResponse.networkType = this.getNetwork(messages.payload.mobile.type);\n      }\n    });\n  }\n\n  updateLastLocation() {\n    var _this2 = this;\n\n    setInterval( /*#__PURE__*/_asyncToGenerator(function* () {\n      const response = yield _this2.validateAndGetLocation();\n\n      if (_this2.apiResponse && _this2.apiResponse.errorCode) {\n        _this2.toaster.error('This link has expired.');\n      }\n\n      if (response) {\n        _this2.apiResponse.lastLocation = response.lastLocation;\n      }\n    }), 60000);\n  }\n\n  validateAndGetLocation() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this3.apiService.getData(`location/share/get/${_this3.token}`).toPromise();\n    })();\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  openInfoWindow(marker) {\n    this.infoDetail = `<b>Vehicle Name : ${this.apiResponse.vehicleName}</b><br>`;\n\n    if (this.apiResponse.speed) {\n      this.infoDetail += `<b>Speed : ${this.apiResponse.speed} km/h</b><br>`;\n    }\n\n    if (this.apiResponse.networkType) {\n      this.infoDetail += `<b>Network : ${this.apiResponse.networkType}</b>`;\n    }\n\n    this.infoWindow.open(marker);\n  }\n\n  getNetwork(networkType) {\n    switch (networkType) {\n      case '-1':\n        return 'Offline';\n\n      case '0':\n        return 'Unknown';\n\n      case '3':\n        return '2G';\n\n      case '4':\n        return '3G';\n\n      case '5':\n        return '4G';\n\n      default:\n        return undefined;\n    }\n  }\n\n};\n\nLocationShareComponent.ctorParameters = () => [{\n  type: ActivatedRoute\n}, {\n  type: DashCamLocationStreamService\n}, {\n  type: ApiService\n}, {\n  type: ToastrService\n}];\n\nLocationShareComponent.propDecorators = {\n  infoWindow: [{\n    type: ViewChild,\n    args: [MapInfoWindow]\n  }]\n};\nLocationShareComponent = __decorate([Component({\n  selector: 'app-location-share',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LocationShareComponent);\nexport { LocationShareComponent };","map":null,"metadata":{},"sourceType":"module"}