{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-credit-note.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-credit-note.component.css\";\nimport { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport * as moment from \"moment\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { AccountService, ApiService, ListService } from \"src/app/services\";\nimport { Location } from \"@angular/common\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Auth } from \"aws-amplify\";\nlet AddCreditNoteComponent = class AddCreditNoteComponent {\n  constructor(listService, route, toaster, location, accountService, apiService, httpClient) {\n    var _this = this;\n\n    this.listService = listService;\n    this.route = route;\n    this.toaster = toaster;\n    this.location = location;\n    this.accountService = accountService;\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.assetUrl = this.apiService.AssetUrl;\n    this.submitDisabled = false;\n    this.total = 0;\n    this.creditData = {\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      currency: \"CAD\",\n      customerID: null,\n      crRef: \"\",\n      salePerson: null,\n      crDetails: [{\n        commodity: \"\",\n        desc: \"\",\n        qty: 0,\n        qtyUnit: null,\n        rate: 0,\n        rateUnit: null,\n        amount: 0,\n        accountID: null\n      }],\n      remarks: \"\",\n      totalAmt: 0,\n      transactionLog: []\n    };\n    this.accounts = [];\n    this.vendors = [];\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.pageTitle = \"Add\";\n    this.units = [];\n    this.customers = [];\n    this.docs = [];\n    this.oldDocs = [];\n    this.removedDocs = [];\n    this.filesError = '';\n    this.getCurrentUser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.creditData.salePerson = `${_this.currentUser.firstName} ${_this.currentUser.lastName}`;\n    });\n  }\n\n  ngOnInit() {\n    this.creditID = this.route.snapshot.params[`creditID`];\n\n    if (this.creditID) {\n      this.pageTitle = \"Edit\";\n      this.fetchCredit();\n    } else {\n      this.pageTitle = \"Add\";\n    }\n\n    this.fetchAccounts();\n    this.fetchQuantityUnits();\n    this.getCurrentUser();\n    this.listService.fetchCustomers();\n    let customerList = new Array();\n    this.getValidCustomers(customerList);\n    this.customers = customerList;\n  }\n\n  changeUnit(value, i) {\n    this.creditData.crDetails[i].qtyUnit = value;\n    this.creditData.crDetails[i].rateUnit = value;\n  }\n\n  getValidCustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  fetchQuantityUnits() {\n    this.httpClient.get(\"assets/jsonFiles/quantityTypes.json\").subscribe(data => {\n      this.units = data;\n    });\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/fetch/list`).subscribe(res => {\n      this.accounts = res;\n    });\n  }\n\n  refreshVendorData() {\n    this.listService.fetchVendors();\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  addDetails() {\n    let obj = {\n      commodity: \"\",\n      desc: \"\",\n      qty: 0,\n      qtyUnit: null,\n      rate: 0,\n      rateUnit: null,\n      amount: 0,\n      accountID: null\n    };\n    const lastAdded = this.creditData.crDetails[this.creditData.crDetails.length - 1];\n\n    if (lastAdded.commodity !== \"\" && lastAdded.qty !== \"\" && lastAdded.qtyUnit !== null && lastAdded.rate !== \"\" && lastAdded.rateUnit !== null && lastAdded.amount !== 0 && lastAdded.accountID !== null) {\n      this.creditData.crDetails.push(obj);\n    }\n  }\n\n  deleteDetail(d) {\n    this.total -= this.creditData.crDetails[d].amount;\n    this.creditData.crDetails.splice(d, 1);\n  }\n\n  calculateAmount(i) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let total = 0;\n      let amount = _this2.creditData.crDetails[i].qty * _this2.creditData.crDetails[i].rate;\n      _this2.creditData.crDetails[i].amount = parseFloat(amount.toFixed(2));\n\n      _this2.creditData.crDetails.forEach(element => {\n        total += element.amount;\n      });\n\n      _this2.total = total;\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  addNotes() {\n    this.submitDisabled = true;\n    this.creditData.totalAmt = this.total; // create form data instance\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.creditData));\n    this.accountService.postData(`customer-credits`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Credit note added successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  fetchCredit() {\n    this.accountService.getData(`customer-credits/detail/${this.creditID}`).subscribe(res => {\n      this.creditData = res[0];\n      this.carrierID = res[0].pk;\n      this.total = res[0].totalAmt;\n\n      if (res[0].docs.length > 0) {\n        res[0].docs.forEach(x => {\n          let obj = {};\n\n          if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n            obj = {\n              imgPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              docPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          } else {\n            obj = {\n              imgPath: \"assets/img/icon-pdf.png\",\n              docPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          }\n\n          this.oldDocs.push(obj);\n        });\n      }\n    });\n  }\n\n  updateNotes() {\n    this.submitDisabled = true;\n    this.creditData.totalAmt = this.total;\n    this.creditData.removedDocs = this.removedDocs; // create form data instance\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.creditData));\n    this.accountService.putData(`customer-credits/update/${this.creditID}`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {//this.submitDisabled = false;\n            // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        // this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Credit note updated successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  uploadDocs(documents) {\n    this.filesError = '';\n    this.docs = [];\n    let files = [...documents];\n    let filesSize = 0;\n\n    if (files.length > 5) {\n      this.toaster.error(\"Files count limit exceeded\");\n      this.filesError = \"Files should not be more than 5\";\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      filesSize += files[i].size / 1024 / 1024;\n\n      if (filesSize > 10) {\n        this.toaster.error(\"Files size limit exceeded\");\n        this.filesError = 'Files size limit exceeded. Files size should be less than 10mb';\n        return;\n      } else {\n        let name = files[i].name.split(\".\");\n        let ext = name[name.length - 1].toLowerCase();\n\n        if (ext == \"doc\" || ext == \"docx\" || ext == \"pdf\" || ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\") {\n          this.docs.push(files[i]);\n        } else {\n          this.filesError = \"Only .doc, .docx, .pdf, .jpg, .jpeg and png files allowed.\";\n        }\n      }\n    }\n  }\n\n  deleteDocument(name, index) {\n    this.oldDocs.filter(elem => {\n      if (elem.displayName === name) {\n        let obj = {\n          storedName: elem.name,\n          displayName: elem.displayName\n        };\n        this.removedDocs.push(obj);\n        ;\n      }\n    });\n    this.oldDocs.splice(index, 1);\n  }\n\n};\n\nAddCreditNoteComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: Location\n}, {\n  type: AccountService\n}, {\n  type: ApiService\n}, {\n  type: HttpClient\n}];\n\nAddCreditNoteComponent = __decorate([Component({\n  selector: \"app-add-credit-note\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddCreditNoteComponent);\nexport { AddCreditNoteComponent };","map":null,"metadata":{},"sourceType":"module"}