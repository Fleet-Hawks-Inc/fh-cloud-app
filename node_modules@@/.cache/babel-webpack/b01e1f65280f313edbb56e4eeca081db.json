{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./revenue-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./revenue-detail.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService, AccountService } from 'src/app/services';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute } from \"@angular/router\";\nimport * as moment from 'moment';\nimport Constants from 'src/app/pages/fleet/constants';\nlet RevenueDetailComponent = class RevenueDetailComponent {\n  constructor(apiService, accountService, toastr, route) {\n    this.apiService = apiService;\n    this.accountService = accountService;\n    this.toastr = toastr;\n    this.route = route; // vehicleId = null;\n\n    this.start = null;\n    this.end = null;\n    this.allData = [];\n    this.vehicleData = [];\n    this.lastItemSK = '';\n    this.datee = '';\n    this.fuel = [];\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.loaded = false;\n    this.vehicleIdentification = '';\n    this.suggestedVehicles = [];\n    this.totalQty = 0;\n    this.recptData = [];\n    this.orderIDs = [];\n    this.totalMiles = 0;\n    this.totalInv = 0;\n    this.totalRec = 0;\n    this.currTab = \"CAD\";\n    this.currency = 'CAD';\n  }\n\n  ngOnInit() {\n    this.end = moment().format(\"YYYY-MM-DD\");\n    this.start = moment().subtract(5, 'months').format('YYYY-MM-DD');\n    this.vehicleId = this.route.snapshot.params[`vehicleId`];\n    this.fetchRevenueData(); // this.fetchFuel()\n\n    this.fetchVehicleName();\n  }\n\n  fetchVehicleName() {\n    this.apiService.getData(`vehicles/fetch/detail/${this.vehicleId}`).subscribe(result => {\n      this.vehicleData = result.Items;\n    });\n  }\n\n  fetchRevenueData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let newAllData = [];\n      let result = yield _this.apiService.getData(`vehicles/fetch/revenue/report?currency=${_this.currency}&vehicle=${_this.vehicleId}&startDate=${_this.start}&endDate=${_this.end}&lastKey=${_this.lastItemSK}&date=${_this.datee}`).toPromise();\n\n      if (result && result.Items.length > 0) {\n        console.log('if', result);\n\n        for (let index = 0; index < result.Items.length; index++) {\n          const item = result.Items[index];\n\n          if (item.invoiceData && item.invoiceData.length === 0) {\n            newAllData.push(item);\n          }\n        } // if (result.LastEvaluatedKey !== undefined) {\n        //   this.lastItemSK = encodeURIComponent(result.LastEvaluatedKey.tripSK);\n        //   this.datee = encodeURIComponent(result.LastEvaluatedKey.dateCreated)\n        // }\n        // else {\n        //   this.lastItemSK = 'end';\n        // }\n        // this.loaded = true;\n        // for (let i = 0; i < result.Items.length; i++) {\n        //   const data = result.Items[i]\n        //   data.miles = 0;\n        //   for (let tripD of data.tripPlanning) {\n        //     data.miles += Number(tripD.miles);\n        //   }\n        //   this.totalMiles += parseFloat(data.miles)\n        //   for (let invData of data.invoiceData) {\n        //     this.totalInv += parseFloat(invData.finalAmount)\n        //   }\n        //   for (let recData of data.receiptData) {\n        //     for (let rec of recData) {\n        //       this.totalRec += parseFloat(rec.recAmount)\n        //     }\n        //   }\n        // }\n\n      } else {\n        console.log('if else', result);\n      }\n\n      console.log('this.allData', newAllData);\n    })();\n  } //For Switching Tab\n\n\n  changeTab(type) {\n    this.currTab = type;\n    this.allData = [];\n\n    if (this.currTab === \"CAD\") {\n      this.currency = 'CAD';\n      this.totalMiles = 0;\n      this.totalInv = 0;\n      this.totalRec = 0;\n      this.fetchRevenueData();\n    } else if (this.currTab === \"USD\") {\n      this.currency = 'USD';\n      this.totalMiles = 0;\n      this.totalInv = 0;\n      this.totalRec = 0;\n      this.fetchRevenueData();\n    }\n  } // onScroll() {\n  //   if (this.loaded) {\n  //     this.fetchRevenueData();\n  //     // this.fetchFuel();\n  //     // this.fetchVehicleName();\n  //   }\n  //   this.loaded = false;\n  // }\n\n\n  searchFilter() {\n    if (this.start != null && this.end != null) {\n      if (this.start != null && this.end == null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start == null && this.end != null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start > this.end) {\n        this.toastr.error('Start Date should be less then end date.');\n        return false;\n      } else {\n        this.lastItemSK = '';\n        this.allData = [];\n        this.totalMiles = 0;\n        this.totalInv = 0;\n        this.totalRec = 0;\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fetchRevenueData();\n        this.fetchVehicleName();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  fetchFuel() {\n    this.apiService.getData(`fuelEntries/getBy/vehicle/trips/${this.vehicleId}?startDate=${this.start}&endDate=${this.end}`).subscribe(result => {\n      this.fuel = result.Items;\n      let total = 0;\n\n      for (let element of this.fuel) {\n        if (element.data && element.data.qty) {\n          total += parseFloat(element.data.qty);\n        }\n      }\n\n      this.totalQty = total;\n    });\n  }\n\n  generateCSV() {\n    if (this.allData.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.allData.forEach(element => {\n        let invNo = '';\n        let invDate = '';\n        let invAm = '';\n        let recNo = '';\n        let recDate = '';\n        let recAm = '';\n\n        for (let item1 of element.invoiceData) {\n          if (item1.invStatus === 'paid') {\n            invNo = item1.invNo;\n            invDate = item1.txnDate;\n            invAm = item1.finalAmount + item1.charges.freightFee.currency;\n          }\n        }\n\n        for (let item1 of element.receiptData) {\n          for (let item2 of item1) {\n            recNo = item2.recNo;\n            recDate = item2.txnDate;\n            recAm = item2.recAmount + item2.recAmountCur;\n          }\n        }\n\n        let obj = {};\n        obj[\"Order#\"] = element.orderName.replace(/, /g, ' &');\n        obj[\"Trip#\"] = element.tripNo;\n        obj[\"Trip Date\"] = element.dateCreated;\n        obj[\"Total Miles\"] = element.miles;\n        obj[\"Invoice#\"] = invNo;\n        obj[\"Invoice Date\"] = invDate;\n        obj[\"Invoice Amount\"] = invAm;\n        obj[\"Receipt#\"] = recNo;\n        obj[\"Receipt Date\"] = recDate;\n        obj[\"Receipt Amount\"] = recAm;\n        dataObject.push(obj);\n      });\n      let totalObj = {\n        [\"Total Miles\"]: 'Total'\n      };\n      totalObj[\"Trip#\"] = \"\";\n      totalObj[\"Trip Date\"] = \"\";\n      totalObj[\"Total\"] = this.totalMiles;\n      totalObj[\"Invoice#\"] = \"\";\n      totalObj[\"Invoice Date\"] = \"\";\n      totalObj[\"TotalInv\"] = this.totalInv;\n      totalObj[\"Recipt#\"] = \"\";\n      totalObj[\"Recipt Date\"] = \"\";\n      totalObj[\"TotalRec\"] = this.totalRec;\n      dataObject.push(totalObj);\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += ' \\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += ' \\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}Asset-Report.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n};\n\nRevenueDetailComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}];\n\nRevenueDetailComponent = __decorate([Component({\n  selector: 'app-revenue-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], RevenueDetailComponent);\nexport { RevenueDetailComponent };","map":null,"metadata":{},"sourceType":"module"}