{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./map-view.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./map-view.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../services';\nimport { map } from 'rxjs/operators';\nimport { from, forkJoin } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { HereMapService } from '../../../../services/here-map.service';\nimport * as moment from \"moment\";\nlet MapViewComponent = class MapViewComponent {\n  constructor(apiService, toastr, spinner, hereMap) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.hereMap = hereMap;\n    this.vehicles = [];\n    this.assets = [];\n    this.drivers = [];\n    this.codrivers = [];\n    this.tempTrips = [];\n    this.trips = [];\n    this.events = [];\n    this.tripData = {\n      tripPlanning: [],\n      tripStatus: '',\n      tripID: '',\n      driverIDs: [],\n      vehicleIDs: [],\n      assetIDs: [],\n      loc: ''\n    };\n    this.response = '';\n    this.tempTextFieldValues = {\n      tripID: '',\n      trailer: []\n    };\n    this.assetDataVehicleID = '';\n    this.assetDataDriverUsername = '';\n    this.assetDataCoDriverUsername = '';\n    this.informationAsset = [];\n    this.OrderIDs = [];\n    this.allCustomers = [];\n    this.tempIndex = '';\n  }\n\n  ngOnInit() {\n    this.mapShow();\n    this.fetchAllTrips();\n    this.fetchTrips(); // this.fetchCustomers();\n\n    this.fetchVehicles();\n    this.fetchAssets();\n    this.fetchDrivers();\n  }\n\n  fetchAllTrips() {\n    let backgroundColor = '';\n    let borderColor = '';\n    this.apiService.getData('trips').subscribe(result => {\n      result.Items.map(i => {\n        if (i.tripStatus == 'confirmed') {\n          backgroundColor = '#005ce6';\n          borderColor = '#005ce6';\n        } else if (i.tripStatus == 'delivered') {\n          backgroundColor = '#29a329';\n          borderColor = '#29a329';\n        } else if (i.tripStatus == 'dispatched') {\n          backgroundColor = '#0099ff';\n          borderColor = '#0099ff';\n        }\n\n        let eventObj = {\n          title: '#' + i.tripNo + '\\n Status: ' + i.tripStatus,\n          date: moment(i.dateCreated, 'YYYY-MM-DD').format('YYYY-MM-DD'),\n          backgroundColor: backgroundColor,\n          borderColor: borderColor\n        };\n        this.events.push(eventObj);\n      });\n    });\n  }\n\n  mapShow() {\n    this.hereMap.mapSetAPI();\n    this.hereMap.mapInit();\n  }\n\n  emptyAssetModalFields() {\n    // empty the values of asset modal and temp_text_fields after adding\n    this.tempTextFieldValues.vehicleName = '';\n    this.tempTextFieldValues.vehicleID = '';\n    this.tempTextFieldValues.trailer = [];\n    this.tempTextFieldValues.driverName = '';\n    this.tempTextFieldValues.driverUsername = '';\n    this.tempTextFieldValues.coDriverName = '';\n    this.tempTextFieldValues.coDriverUsername = '';\n    this.tempTextFieldValues.trailerName = '';\n    this.assetDataVehicleID = '';\n    this.informationAsset = [];\n    this.assetDataDriverUsername = '';\n    this.assetDataCoDriverUsername = '';\n    $(\".vehicleClass\").removeClass('td_border');\n    $(\".assetClass\").removeClass('td_border');\n    $(\".driverClass\").removeClass('td_border');\n    $(\".codriverClass\").removeClass('td_border');\n  }\n\n  fetchVehicles() {\n    this.apiService.getData('vehicles').subscribe(result => {\n      this.vehicles = result.Items;\n    });\n  }\n\n  fetchAssets() {\n    this.apiService.getData('assets').subscribe(result => {\n      this.assets = result.Items;\n    });\n  }\n\n  fetchDrivers() {\n    this.apiService.getData('drivers').subscribe(result => {\n      result.Items.map(i => {\n        i.fullName = i.firstName + ' ' + i.lastName;\n        return i;\n      });\n      this.drivers = result.Items;\n      this.codrivers = result.Items;\n    });\n  }\n\n  fetchCoDriver(driverID) {\n    this.codrivers = this.drivers.filter(function (obj) {\n      if (obj.driverID !== driverID) {\n        return obj;\n      }\n    });\n  }\n\n  vehicleChange($event, type) {\n    if ($event === undefined) {\n      $(\".vehicleClass\").removeClass('td_border');\n      this.tempTextFieldValues.vehicleName = '';\n      this.tempTextFieldValues.vehicleID = '';\n      this.assetDataVehicleID = '';\n    } else {\n      if (type === 'click') {\n        this.assetDataVehicleID = $event.vehicleID;\n      }\n\n      this.tempTextFieldValues.vehicleName = $event.vehicleIdentification;\n      this.tempTextFieldValues.vehicleID = $event.vehicleID;\n      $(\".vehicleClass\").removeClass('td_border');\n      $(\"#veh_\" + $event.vehicleID).addClass('td_border');\n    }\n  }\n\n  driverChange($event, type, eventType) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if ($event === undefined) {\n        if (type === 'driver') {\n          $(\".driverClass\").removeClass('td_border');\n          _this.tempTextFieldValues.driverName = '';\n          _this.tempTextFieldValues.driverUsername = '';\n          _this.assetDataDriverUsername = '';\n          _this.tempTextFieldValues.driverID = '';\n        } else {\n          $(\".codriverClass\").removeClass('td_border');\n          _this.tempTextFieldValues.coDriverName = '';\n          _this.tempTextFieldValues.coDriverUsername = '';\n          _this.assetDataCoDriverUsername = '';\n          _this.tempTextFieldValues.coDriverID = '';\n        }\n      } else {\n        if (type === 'driver') {\n          // alert('here')\n          yield _this.spinner.show();\n          _this.assetDataCoDriverUsername = ''; //reset the codriver selected\n\n          _this.fetchCoDriver($event.driverID);\n\n          _this.tempTextFieldValues.driverName = $event.fullName;\n          _this.tempTextFieldValues.driverUsername = $event.userName;\n          _this.assetDataCoDriverUsername = '';\n          _this.tempTextFieldValues.driverID = $event.driverID;\n\n          if (eventType === 'click') {\n            _this.assetDataDriverUsername = $event.userName;\n          }\n\n          $(\".driverClass\").removeClass('td_border');\n          $(\"#drivr_\" + $event.driverID).addClass('td_border');\n          yield _this.spinner.hide();\n        } else if (type === 'codriver') {\n          _this.tempTextFieldValues.coDriverName = $event.fullName;\n          _this.tempTextFieldValues.coDriverUsername = $event.userName;\n          _this.tempTextFieldValues.coDriverID = $event.driverID;\n\n          if (eventType === 'click') {\n            _this.assetDataCoDriverUsername = $event.userName;\n          }\n\n          $(\".codriverClass\").removeClass('td_border');\n          $(\"#codrivr_\" + $event.driverID).addClass('td_border');\n        }\n      }\n    })();\n  }\n\n  assetsChange($event, type) {\n    if ($event === undefined) {\n      $(\".assetClass\").removeClass('td_border');\n    } else {\n      if (type === 'change') {\n        this.tempTextFieldValues.trailer = [];\n        $(\".assetClass\").removeClass('td_border');\n        let arayy = [];\n\n        for (let i = 0; i < $event.length; i++) {\n          const element = $event[i];\n          $(\"#asset_\" + element.assetID).addClass('td_border');\n          arayy.push(element.assetID);\n          let objj = {\n            id: element.assetID,\n            name: element.assetIdentification\n          };\n          this.tempTextFieldValues.trailer.push(objj);\n        }\n      } else {\n        let arayy = [];\n        $(\"#asset_\" + $event.assetID).addClass('td_border');\n        let objj = {\n          id: $event.assetID,\n          name: $event.assetIdentification\n        };\n        this.tempTextFieldValues.trailer.push(objj);\n\n        for (let i = 0; i < this.tempTextFieldValues.trailer.length; i++) {\n          const element = this.tempTextFieldValues.trailer[i];\n          arayy.push(element.id);\n        }\n\n        this.informationAsset = arayy;\n      }\n\n      let trailerNames = this.tempTextFieldValues.trailer.map(function (v) {\n        return v.name;\n      });\n      trailerNames = trailerNames.join();\n      this.tempTextFieldValues.trailerName = trailerNames;\n    }\n  }\n\n  saveAssetModalData() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let selectedDriverids = [];\n      let selectedVehicles = [];\n      let selectedAssets = [];\n\n      if (_this2.tempTextFieldValues.coDriverUsername != '' || _this2.tempTextFieldValues.driverUsername != '' || _this2.tempTextFieldValues.vehicleID != '' || _this2.tempTextFieldValues.trailer.length != 0) {\n        let planData = _this2.tripData.tripPlanning;\n        selectedDriverids.push(_this2.tempTextFieldValues.coDriverID);\n        selectedDriverids.push(_this2.tempTextFieldValues.driverID);\n\n        if (_this2.tempTextFieldValues.vehicleID != '' && _this2.tempTextFieldValues.vehicleID != undefined) {\n          if (!selectedVehicles.includes(_this2.tempTextFieldValues.vehicleID)) {\n            selectedVehicles.push(_this2.tempTextFieldValues.vehicleID);\n          }\n        }\n\n        for (let i = 0; i < planData.length; i++) {\n          _this2.tripData.tripPlanning[i].coDriverID = _this2.tempTextFieldValues.coDriverID;\n          _this2.tripData.tripPlanning[i].driverID = _this2.tempTextFieldValues.driverID;\n          _this2.tripData.tripPlanning[i].codriverUsername = _this2.tempTextFieldValues.coDriverUsername;\n          _this2.tripData.tripPlanning[i].driverUsername = _this2.tempTextFieldValues.driverUsername;\n          _this2.tripData.tripPlanning[i].vehicleID = _this2.tempTextFieldValues.vehicleID;\n          _this2.tripData.tripPlanning[i].assetID = [];\n\n          for (let j = 0; j < _this2.tempTextFieldValues.trailer.length; j++) {\n            const element2 = _this2.tempTextFieldValues.trailer[j];\n\n            _this2.tripData.tripPlanning[i].assetID.push(element2.id);\n\n            if (element2.id != '' && element2.id != undefined) {\n              if (!selectedAssets.includes(element2.id)) {\n                selectedAssets.push(element2.id);\n              }\n            }\n          }\n        }\n\n        _this2.tripData.driverIDs = yield selectedDriverids;\n        _this2.tripData.vehicleIDs = yield selectedVehicles;\n        _this2.tripData.assetIDs = yield selectedAssets;\n        _this2.tripData.tripStatus = 'dispatched';\n        _this2.tempTrips[_this2.tempIndex].tripStatus = 'dispatched';\n\n        _this2.apiService.putData('trips', _this2.tripData).subscribe({\n          complete: () => {},\n          error: err => {\n            from(err.error).pipe(map(val => {\n              // We Can Use This Method\n              const key = val.message.match(/\"([^']+)\"/)[1];\n              val.message = val.message.replace(/\".*\"/, 'This Field');\n              _this2.errors[key] = val.message;\n            })).subscribe({\n              complete: () => {\n                _this2.spinner.hide();\n\n                _this2.throwErrors();\n              },\n              error: () => {},\n              next: () => {}\n            });\n          },\n          next: res => {\n            _this2.spinner.hide();\n\n            _this2.response = res;\n            $('#assetModal').modal('hide');\n            _this2.tempIndex = '';\n\n            _this2.toastr.success('Assignment done successfully');\n          }\n        });\n      } else {\n        $(\"#assetModal\").modal('hide');\n        return false;\n      }\n    })();\n  }\n\n  showAssignModal(tripID, index) {\n    this.tempIndex = index;\n    this.emptyAssetModalFields();\n    this.spinner.show();\n    this.OrderIDs = [];\n    this.apiService.getData('trips/' + tripID).subscribe(result => {\n      result = result.Items[0]; // delete result.timeCreated;\n\n      delete result.timeModified;\n      delete result.tripSK;\n      delete result.isDelActiveSK;\n      this.tripData = result;\n      this.OrderIDs = this.tripData['orderId'];\n\n      if (this.tripData.tripPlanning.length === 0) {\n        this.toastr.error('The trip plan for the selected trip is empty. Please create one to assign.');\n        this.spinner.hide();\n        return false;\n      }\n\n      if (this.tripData.tripStatus === 'pending' || this.tripData.tripStatus === 'confirmed') {\n        $(\"#assetModal\").modal('show');\n        this.spinner.hide();\n      } else {\n        this.toastr.error('Assignment is already done. Please refer edit trip to change the previous assignment');\n        this.spinner.hide();\n      }\n    });\n  }\n\n  fetchTrips() {\n    this.spinner.show();\n    const tripResponse = this.apiService.getData('trips/status/confirmed');\n    const orderResponse = this.apiService.getData('orders');\n    const observables = forkJoin([tripResponse, orderResponse]).subscribe(value => {\n      this.orderTripValues(value);\n      this.spinner.hide();\n    });\n  }\n\n  orderTripValues(val) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let fetchedTrip = val[0];\n      let fetchedOrder = val[1];\n\n      for (let i = 0; i < fetchedTrip.Items.length; i++) {\n        let element = fetchedTrip.Items[i];\n\n        if (element.isDeleted == 0) {\n          let tripDate = element.dateCreated;\n\n          if (tripDate != '' && tripDate != undefined) {\n            tripDate = moment(tripDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\n          }\n\n          let tripObj = {\n            pickupLocation: '',\n            deliveryLocation: '',\n            tripID: element.tripID,\n            tripNo: element.tripNo,\n            tripStatus: element.tripStatus,\n            date: tripDate,\n            time: '-',\n            tripPlan: element.tripPlanning,\n            orders: element.orderId,\n            customersArr: []\n          };\n\n          for (let k = 0; k < element.orderId.length; k++) {\n            const element1 = element.orderId[k];\n            fetchedOrder.Items.filter(function (obj) {\n              if (obj.orderID == element1) {\n                let cusObj = {\n                  customerId: obj.customerID,\n                  name: '',\n                  icon: ''\n                };\n                tripObj.customersArr.push(cusObj); //for unique customer-id in array \n\n                tripObj.customersArr = [...new Map(tripObj.customersArr.map(item => [item['customerId'], item])).values()];\n              }\n            });\n          }\n\n          _this3.tempTrips.push(tripObj);\n        }\n      }\n\n      yield _this3.fetchCustomers();\n      yield _this3.getTripsData(_this3.tempTrips);\n    })();\n  }\n\n  throwErrors() {\n    this.form.showErrors(this.errors);\n  }\n\n  getTripsData(tempTrips) {\n    for (let i = 0; i < tempTrips.length; i++) {\n      const element = tempTrips[i];\n      let pickup;\n      let drop;\n\n      if (element.tripPlan.length > 0) {\n        pickup = element.tripPlan[0].location;\n        element.pickupLocation = pickup;\n        element.time = element.tripPlan[0].pickupTime;\n\n        if (element.tripPlan.length >= 2) {\n          let lastloc = element.tripPlan.length - 1;\n          drop = element.tripPlan[lastloc].location;\n          element.deliveryLocation = drop;\n        }\n      }\n    }\n  }\n  /*\r\n    * Get all customers\r\n   */\n\n\n  fetchCustomers() {\n    this.apiService.getData('customers/get/all').subscribe(result => {\n      this.allCustomers = result.Items;\n      this.assignCompanyName();\n    });\n  }\n\n  assignCompanyName() {\n    for (let p = 0; p < this.tempTrips.length; p++) {\n      const element = this.tempTrips[p];\n\n      if (element.customersArr.length > 0) {\n        for (let w = 0; w < element.customersArr.length; w++) {\n          const elementp = element.customersArr[w];\n          this.allCustomers.map(function (obj) {\n            if (obj.customerID == elementp.customerId) {\n              elementp.name = obj.companyName;\n              let custName = obj.companyName.split(' ');\n\n              if (custName[0] != undefined) {\n                elementp.icon = custName[0].charAt(0).toUpperCase();\n              }\n\n              if (custName[1] != undefined) {\n                elementp.icon += custName[1].charAt(0).toUpperCase();\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n};\n\nMapViewComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}];\n\nMapViewComponent = __decorate([Component({\n  selector: 'app-map-view',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], MapViewComponent);\nexport { MapViewComponent };","map":null,"metadata":{},"sourceType":"module"}