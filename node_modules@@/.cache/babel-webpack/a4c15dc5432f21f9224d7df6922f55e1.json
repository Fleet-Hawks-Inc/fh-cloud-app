{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./imported-vehicles.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./imported-vehicles.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ApiService } from '../../../../../services/api.service';\nimport { ToastrService } from 'ngx-toastr';\nimport CSVFileValidator from 'csv-file-validator';\nimport Constants from '../../../constants';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nlet ImportedVehiclesComponent = class ImportedVehiclesComponent {\n  constructor(apiService, toastr, modalService) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.modalService = modalService;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.loaded = false;\n    this.validData = [];\n    this.importVehicles = [];\n    this.isFileValid = false;\n    this.inValidMessages = [];\n    this.importDocs = [];\n    this.check = false;\n    this.submitDisabled = true;\n    this.importData = {\n      module: 'vehicle'\n    };\n  }\n\n  ngOnInit() {\n    this.fetchVehicleImport();\n  }\n\n  chooseFile(event) {\n    let files = event.target.files;\n    let condition = true;\n\n    if (condition) {\n      this.importDocs = [];\n      this.importDocs = files;\n      this.inValidMessages = [];\n      const reader = new FileReader();\n      reader.addEventListener('load', event => {\n        let csvdata = event.target.result;\n      });\n      reader.readAsBinaryString(event.target.files[0]);\n    }\n  }\n\n  validateCSV($event) {\n    console.log($event.srcElement.files[0]);\n    const data = {\n      headers: [{\n        name: 'vehicle_name',\n        inputName: 'vehiclename/number',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (name) {\n          const vname = /^[a-zA-Z0-9\\s]+$/;\n          return vname.test(name);\n        }\n      }, {\n        name: 'vehicle_type',\n        inputName: 'vehicletype',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'vin',\n        inputName: 'vin',\n        required: true,\n        unique: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (name) {\n          const vinno = /^[a-zA-Z0-9]{17,18}$/;\n          return vinno.test(name);\n        }\n      }, {\n        name: 'plate_number',\n        inputName: 'platenumber',\n        required: true,\n        unique: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'year',\n        inputName: 'year',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'make',\n        inputName: 'make',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'country',\n        inputName: 'country',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'province',\n        inputName: 'provincestate',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'status',\n        inputName: 'status',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }]\n    };\n    CSVFileValidator($event.srcElement.files[0], data).then(csvData => {\n      if (csvData.data.length !== 0 && csvData.data.length < 201) {\n        if (csvData.inValidMessages.length === 0) {\n          this.validData = csvData.data;\n          this.check = true;\n          this.submitDisabled = false;\n        } else {\n          this.inValidMessages = csvData.inValidMessages;\n          this.isFileValid = false;\n          this.check = false;\n          this.submitDisabled = true;\n        }\n\n        csvData.data;\n      } else if (csvData.data.length == 0) {\n        this.submitDisabled = true;\n        this.toastr.error(\"There are no records in the file uploaded\");\n      } else {\n        this.submitDisabled = true;\n        this.toastr.error(\"'The file should contain a maximum of 200 records'\");\n      }\n    }).catch(err => {});\n  }\n\n  pwdModalClose() {\n    $('#importDocs').val('');\n    this.inValidMessages = [];\n  }\n\n  fetchVehicleImport() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.loaded = true;\n      let result = yield _this.apiService.getData('importer/get?type=vehicle').toPromise();\n\n      if (result.length === 0) {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        _this.loaded = false;\n      }\n\n      if (result && result.length > 0) {\n        _this.importVehicles = result;\n      }\n\n      _this.loaded = false;\n    })();\n  }\n\n  uploadImport() {\n    if (this.check == true) {\n      if (this.importDocs.length > 0) {\n        const formData = new FormData();\n\n        for (let i = 0; i < this.importDocs.length; i++) {\n          formData.append(\"importDocs\", this.importDocs[i]);\n        } //append other fields\n\n\n        formData.append(\"data\", JSON.stringify(this.importData));\n        this.apiService.postData('importer', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            this.submitDisabled = true;\n            $('#importDocs').val('');\n          },\n          next: res => {\n            this.submitDisabled = false;\n            this.toastr.success(\"The file has been scheduled for processing and you will be notified via email once it is completed\");\n            $('#importDocs').val('');\n            this.importModelRef.close();\n            this.fetchVehicleImport();\n          }\n        });\n      }\n    }\n  }\n\n  openModal() {\n    let ngbModalOptions = {\n      keyboard: false,\n      backdrop: \"static\",\n      windowClass: \"import-model--main\"\n    };\n    this.importModelRef = this.modalService.open(this.importModel, ngbModalOptions);\n  }\n\n  refreshData() {}\n  /**\r\n    * Clears the table filters\r\n    * @param table Table\r\n    */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nImportedVehiclesComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgbModal\n}];\n\nImportedVehiclesComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  vehImporter: [{\n    type: ViewChild,\n    args: ['vehImporter']\n  }],\n  importModel: [{\n    type: ViewChild,\n    args: [\"importModel\", {\n      static: true\n    }]\n  }]\n};\nImportedVehiclesComponent = __decorate([Component({\n  selector: 'app-imported-vehicles',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ImportedVehiclesComponent);\nexport { ImportedVehiclesComponent };","map":null,"metadata":{},"sourceType":"module"}