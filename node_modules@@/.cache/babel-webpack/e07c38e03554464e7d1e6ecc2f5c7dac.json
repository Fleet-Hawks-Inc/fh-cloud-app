{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-settlement.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-settlement.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport * as _ from \"lodash\";\nimport * as moment from \"moment\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { AccountService, ApiService, ListService } from \"../../../../services\";\nimport Constants from \"../../../fleet/constants\";\nimport { Location } from \"@angular/common\";\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nlet AddSettlementComponent = class AddSettlementComponent {\n  constructor(listService, route, location, modalService, toaster, accountService, apiService) {\n    this.listService = listService;\n    this.route = route;\n    this.location = location;\n    this.modalService = modalService;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.apiService = apiService;\n    this.tripMsg = Constants.NO_RECORDS_FOUND;\n    this.noRecordMsg = Constants.NO_RECORDS_FOUND;\n    this.paymentType = '';\n    this.trip = {};\n    this.driverData = {\n      paymentDetails: {\n        paymentType: null,\n        rate: null,\n        waitingPay: null,\n        waitingPayUnit: null,\n        waitingHourAfter: null,\n        deliveryRate: null,\n        deliveryRateUnit: null,\n        loadPayPercentage: null,\n        loadPayPercentageOf: null,\n        loadedMiles: null,\n        loadedMilesUnit: null,\n        emptyMiles: null,\n        emptyMilesUnit: null,\n        emptyMilesTeamUnit: null,\n        emptyMilesTeam: null,\n        loadedMilesTeam: null,\n        loadedMilesTeamUnit: null,\n        payPeriod: null\n      }\n    };\n    this.settlementData = {\n      type: null,\n      entityId: null,\n      setNo: \"\",\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      fromDate: null,\n      toDate: null,\n      prStart: null,\n      prEnd: null,\n      tripIds: [],\n      trpData: [],\n      miles: {\n        tripsTotal: 0,\n        driverTotal: 0,\n        tripsLoaded: 0,\n        driverLoaded: 0,\n        tripsEmpty: 0,\n        driverEmpty: 0,\n        tripsTeam: 0,\n        driverHours: 0,\n        teamHours: 0,\n        totalHours: 0,\n        drivers: [],\n        driverLoadedTeam: 0,\n        driverEmptyTeam: 0\n      },\n      addition: [],\n      deduction: [],\n      additionTotal: 0,\n      deductionTotal: 0,\n      taxObj: {\n        gstPrcnt: 0,\n        pstPrcnt: 0,\n        hstPrcnt: 0,\n        gstAmount: 0,\n        pstAmount: 0,\n        hstAmount: 0,\n        carrLocalTax: 0,\n        carrLocalAmount: 0,\n        carrFedTax: 0,\n        carrFedAmount: 0\n      },\n      paymentTotal: 0,\n      taxes: 0,\n      subTotal: 0,\n      finalTotal: 0,\n      fuelAdd: 0,\n      fuelDed: 0,\n      status: \"unpaid\",\n      paymentLinked: false,\n      pendingPayment: 0,\n      currency: \"CAD\",\n      paymentSelected: [],\n      // paymentInfo: {\n      //   lMiles: 0,\n      //   lMileTeam: 0,\n      //   eMileTeam: 0,\n      //   rate: 0,\n      //   eMiles: 0,\n      //   pRate: 0,\n      //   dRate: 0,\n      //   pType: \"\",\n      //   // drivers: [],\n      // },\n      fuelIds: [],\n      fuelData: [] // expIds: [],\n      // expData: [],\n      // expAdd: 0,\n      // expDed: 0,\n\n    };\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.drivers = [];\n    this.carriers = [];\n    this.ownerOperators = [];\n    this.additionRowData = {\n      tripID: null,\n      chargeName: \"\",\n      desc: \"\",\n      amount: \"\",\n      currency: \"\"\n    };\n    this.deductionRowData = {\n      tripID: null,\n      chargeName: \"\",\n      desc: \"\",\n      amount: \"\",\n      currency: \"\"\n    };\n    this.selectedTrips = [];\n    this.trips = [];\n    this.vehicles = [];\n    this.assets = [];\n    this.tripsObject = [];\n    this.orders = [];\n    this.driverId = \"\";\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.submitDisabled = false;\n    this.settledTrips = [];\n    this.oldTrips = [];\n    this.operatorDrivers = \"\";\n    this.operatorDriversList = [];\n    this.searchDisabled = true;\n    this.finalPayment = 0;\n    this.expenses = [];\n    this.categories = [];\n    this.tripExpenses = [];\n    this.finalTripExpenses = [];\n    this.editDisabled = false;\n    this.driversObj = [];\n    this.drvrPay = 0;\n    this.teamMiles = 0;\n    this.ownDelCouunt = 0;\n    this.ownerLoadedM = 0;\n    this.ownerEmptyM = 0;\n    this.delvCount = 0;\n    this.vehicleIds = [];\n    this.fuelEnteries = [];\n    this.selectedFuelEnteries = [];\n    this.deletedFuelEnteries = [];\n    this.prevSelectEntries = [];\n    this.prevSelectedIds = [];\n    this.dummySettledTrips = [];\n    this.deletedSellmnts = [];\n    this.delTripIds = [];\n    this.delAddedTrips = [];\n    this.selectedExpenses = [];\n    this.prevSelectedExp = [];\n    this.deletedExpEntries = [];\n    this.prevSelectedExpIds = [];\n    this.allCarriers = [];\n    this.allOwnerOperators = [];\n    this.showFuel = \"no\";\n    this.ownerVehicles = [];\n    this.ownerVehicleID = null;\n    this.dummyTrips = [];\n    this.pendingInfo = false;\n    this.dummyDelEntry = [];\n    this.allFuelsDumm = [];\n    this.paymentOptions = [{\n      name: \"Pay Per Mile\",\n      value: \"ppm\"\n    }, {\n      name: \"Percentage\",\n      value: \"pp\"\n    }, {\n      name: \"Pay Per Hour\",\n      value: \"pph\"\n    }, {\n      name: \"Pay Per Delivery\",\n      value: \"ppd\"\n    }, {\n      name: \"Flat Rate\",\n      value: \"pfr\"\n    }];\n    this.paymentAbr = {\n      \"ppm\": \"Pay Per Mile\",\n      \"pp\": \"Percentage\",\n      \"ppd\": \"Pay Per Delivery\",\n      \"pph\": \"Pay Per Hour\",\n      \"pfr\": \"Pay Flat Rate\"\n    };\n    this.ppm = {\n      pType: \"ppm\",\n      loadedMiles: 0,\n      currency: 'CAD',\n      emptyMiles: 0,\n      emptyMilesTeam: 0,\n      loadedMilesTeam: 0,\n      default: false\n    };\n    this.pph = {\n      pType: \"pph\",\n      rate: 0,\n      currency: 'CAD',\n      waitingPay: 0,\n      waitingHourAfter: 0,\n      default: false\n    };\n    this.pp = {\n      pType: \"pp\",\n      loadPayPercentage: 0,\n      loadPayPercentageOf: 0,\n      default: false\n    };\n    this.ppd = {\n      pType: \"ppd\",\n      deliveryRate: 0,\n      currency: 'CAD',\n      default: false\n    };\n    this.pfr = {\n      pType: \"pfr\",\n      flatRate: 0,\n      currency: 'CAD',\n      default: false\n    };\n  }\n\n  ngOnInit() {\n    this.settlementID = this.route.snapshot.params[\"settlementID\"];\n\n    if (this.settlementID) {\n      this.fetchSettlementDetail();\n    }\n\n    this.fetchDrivers();\n    this.fetchAllDrivers();\n    this.fetchCarriers();\n    this.fetchOwnerOperators();\n    this.fetchVehicles();\n    this.fetchAssets();\n    this.fetchOrders(); // this.fetchExpenseCategories();\n  }\n\n  changeCurrency(event) {}\n\n  changePaymentModeForm() {}\n\n  fetchDrivers() {\n    this.apiService.getData(`drivers/settlements/get/list`).subscribe(result => {\n      this.drivers = result;\n    });\n  }\n\n  fetchAllDrivers() {\n    this.apiService.getData(`drivers/get/list`).subscribe(result => {\n      this.driversObj = result;\n    });\n  }\n\n  fetchDriverDetail(driverID) {\n    if (driverID != undefined) {\n      this.isEntity = false;\n      this.driverId = driverID;\n      this.apiService.getData(`drivers/${driverID}`).subscribe(result => {\n        this.driverDetail = result.Items[0];\n\n        if (this.driverDetail.paymentOption && this.driverDetail.paymentOption.length > 0) {\n          this.setPaymentOption(this.driverDetail);\n\n          if (this.settlementData.paymentSelected.length == 0) {\n            this.pendingInfo = true;\n          }\n\n          if (!this.settlementData.currency || this.pendingInfo) {\n            this.showPaymentPopup();\n          }\n        }\n\n        if (this.driverDetail.address && this.driverDetail.address.length > 0) {\n          if (!this.driverDetail.address[0].manual) {\n            this.driverAdrs = this.driverDetail.address[0].userLocation;\n          } else {\n            this.driverAdrs = `${this.driverDetail.address[0].address1} ${this.driverDetail.address[0].address2} ${this.driverDetail.address[0].cityName} ${this.driverDetail.address[0].stateName} ${this.driverDetail.address[0].countryName + this.driverDetail.address[0].zipCode}`;\n          }\n        }\n\n        this.isEntity = true;\n      });\n    }\n  }\n\n  updatePaymentOption() {\n    this.settlementData.paymentSelected = [];\n\n    if (this.paymentType) {\n      switch (this.paymentType) {\n        case \"pph\":\n          this.settlementData.paymentSelected.push(this.pph);\n          break;\n\n        case \"ppm\":\n          this.settlementData.paymentSelected.push(this.ppm);\n          break;\n\n        case \"pp\":\n          this.settlementData.paymentSelected.push(this.pp);\n          break;\n\n        case \"pfr\":\n          this.settlementData.paymentSelected.push(this.pfr);\n          break;\n\n        case \"ppd\":\n          this.settlementData.paymentSelected.push(this.ppd);\n          break;\n      }\n    }\n\n    this.resetCal();\n\n    if (this.trips.length > 0) {\n      this.fetchTrips();\n    } else {\n      this.setTripData();\n    }\n\n    this.closePayment();\n  }\n\n  closePayment() {\n    this.modalService.dismissAll();\n  }\n\n  setPaymentOption(data) {\n    data.paymentOption.forEach(element => {\n      if (element.default) {\n        const type = this.paymentOptions.find(el => el.value == element.pType);\n\n        switch (type.value) {\n          case \"pph\":\n            this.pph = element;\n            this.paymentType = this.pph.pType;\n            this.settlementData.paymentSelected.push(this.pph);\n            break;\n\n          case \"ppm\":\n            this.ppm = element;\n            this.paymentType = this.ppm.pType;\n            this.settlementData.paymentSelected.push(this.ppm);\n            break;\n\n          case \"pp\":\n            this.pp = element;\n            this.paymentType = this.ppm.pType;\n            this.settlementData.paymentSelected.push(this.pp);\n            break;\n\n          case \"pfr\":\n            this.pfr = element;\n            this.paymentType = this.pfr.pType;\n            this.settlementData.paymentSelected.push(this.pfr);\n            break;\n        }\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchVehicles() {\n    this.apiService.getData(`vehicles/get/list`).subscribe(result => {\n      this.vehicles = result;\n    });\n  }\n\n  fetchAssets() {\n    this.apiService.getData(`assets/get/list`).subscribe(result => {\n      this.assets = result;\n    });\n  }\n\n  fetchOrders() {\n    this.apiService.getData(`common/orders/get/list`).subscribe(result => {\n      this.orders = result;\n    });\n  }\n\n  openPaymentModelFor(trip) {\n    this.trip = [];\n    this.trip = trip;\n    this.paymentType = this.trip.paymentSelected[0].pType;\n    let ngbModalOptions = {\n      keyboard: true,\n      windowClass: \"payModal\"\n    };\n    this.modalService.open(this.payModal, ngbModalOptions);\n  }\n\n  updateTripPayment() {\n    if (this.paymentType) {\n      this.trip.paymentSelected = [];\n\n      switch (this.paymentType) {\n        case \"pph\":\n          this.trip.paymentSelected = [this.pph];\n          break;\n\n        case \"ppm\":\n          this.trip.paymentSelected = [this.ppm];\n          break;\n\n        case \"pfr\":\n          this.trip.paymentSelected = [this.pfr];\n          break;\n\n        case \"ppd\":\n          this.trip.paymentSelected = [this.ppd];\n          break;\n\n        case \"pp\":\n          this.trip.paymentSelected = [this.pp];\n          break;\n      }\n\n      for (const trp of this.trips) {\n        if (trp.tripID == this.trip.tripID) {\n          trp.paymentSelected = this.trip.paymentSelected;\n\n          switch (trp.paymentSelected[0].pType) {\n            case \"ppm\":\n              trp.amount = (trp.entityMiles * trp.paymentSelected[0].loadedMiles).toFixed(2);\n              break;\n\n            case \"pfr\":\n              trp.amount = Number(trp.paymentSelected[0].flatRate).toFixed(2);\n              break;\n\n            case \"ppd\":\n              trp.amount = Number(trp.paymentSelected[0].deliveryRate).toFixed(2);\n              break;\n          }\n        }\n      } // this.settlementData.paymentSelected = this.trip.paymentSelected\n\n\n      this.calculateTripAmount();\n      this.closePayment();\n    }\n  }\n\n  fetchTrips() {\n    this.apiService.getData(`common/trips/driver/unsettled?type=${this.settlementData.type}&entityID=${this.settlementData.entityId}&startDate=${this.settlementData.fromDate}&endDate=${this.settlementData.toDate}&operatorDrivers=${this.operatorDrivers}`).subscribe(result => {\n      this.searchDisabled = false;\n      this.trips = result.Items;\n      this.dummyTrips = result.Items;\n      this.tripMsg = Constants.NO_RECORDS_FOUND; // if (result.Items.length === 0) {\n      //   this.tripMsg = Constants.NO_RECORDS_FOUND;\n      // }\n\n      this.setTripData();\n      this.filterByUnit();\n      let stlObj = result.Items.reduce((a, b) => {\n        return a[b[\"tripID\"]] = b[\"isDeleted\"] == 1 ? b[\"tripNo\"] + \"  - Deleted\" : b[\"tripNo\"], a;\n      }, {});\n      this.tripsObject = _.merge(this.tripsObject, stlObj);\n    });\n  }\n\n  setTripData() {\n    let entStat = `${this.settlementData.entityId}:false`;\n\n    for (let i = 0; i < this.trips.length; i++) {\n      const element = this.trips[i];\n      element.pickupLocation = \"\";\n      element.dropLocation = \"\";\n      element.carrID = [];\n      let pickCount = 1;\n      let dropCount = 1;\n      element.selected = false;\n      element.subSelected = false;\n      element.splitArr = [];\n      element.indeterminate = false;\n      element.entityMiles = 0;\n      element.entityDriver = [];\n      element.entityVehicle = [];\n      element.entityAsset = [];\n      element.entityCarrier = [];\n      element.paymentSelected = this.settlementData.paymentSelected;\n      element.amount = 0;\n      element.loadedMiles = 0;\n      element.loadedMilesTeam = 0;\n      element.emptyMiles = 0;\n      element.emptyMilesTeam = 0;\n      element.delivCount = 0;\n\n      for (let j = 0; j < element.tripPlanning.length; j++) {\n        const plan = element.tripPlanning[j];\n\n        if (this.settlementData.type === \"driver\" || this.settlementData.type === \"carrier\") {\n          if (this.settlementData.entityId === plan.driverID || this.settlementData.entityId === plan.coDriverID || this.settlementData.entityId === plan.carrierID) {\n            if (plan.type === 'Delivery') {\n              element.delivCount += 1;\n            }\n\n            if (plan.mileType === 'loaded') {\n              if (this.settlementData.type === 'driver') {\n                if (plan.coDriverID && plan.driverID) {\n                  element.loadedMilesTeam += Number(plan.miles);\n                } else {\n                  element.loadedMiles += Number(plan.miles);\n                }\n              } else {\n                element.loadedMiles += Number(plan.miles);\n              }\n            } else if (this.settlementData.type === \"owner_operator\") {\n              if (this.operatorDriversList.includes(plan.driverID) || this.operatorDriversList.includes(plan.coDriverID)) {\n                element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n                  <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n                pickCount++;\n                element.entityMiles += Number(plan.miles);\n\n                if (!element.entityDriver.includes(plan.driverID)) {\n                  element.entityDriver.push(plan.driverID);\n                }\n\n                if (plan.coDriverID != undefined && plan.coDriverID != null && plan.coDriverID != '') {\n                  if (!element.entityDriver.includes(plan.coDriverID)) {\n                    element.entityDriver.push(plan.coDriverID);\n                  }\n                }\n              } else {\n                element.emptyMiles += Number(plan.miles);\n              }\n            } else {\n              if (this.settlementData.type === 'driver') {\n                if (plan.coDriverID && plan.driverID) {\n                  element.emptyMilesTeam += Number(plan.miles);\n                } else {\n                  element.emptyMiles += Number(plan.miles);\n                }\n              } else {\n                element.emptyMiles += Number(plan.miles);\n              }\n            }\n\n            element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n                    <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n            pickCount++;\n            element.entityMiles += Number(plan.miles);\n\n            if (this.settlementData.entityId === plan.driverID || this.settlementData.entityId === plan.coDriverID) {\n              if (plan.driverID && !element.entityDriver.includes(plan.driverID)) {\n                element.entityDriver.push(plan.driverID);\n              }\n\n              if (plan.coDriverID && !element.entityDriver.includes(plan.coDriverID)) {\n                element.entityDriver.push(plan.coDriverID);\n              }\n            }\n\n            if (plan.vehicleID && !element.entityVehicle.includes(plan.vehicleID)) {\n              element.entityVehicle.push(plan.vehicleID);\n            }\n\n            if (plan.carrierID && !element.entityCarrier.includes(plan.carrierID)) {\n              element.entityCarrier.push(plan.carrierID);\n            }\n\n            for (let f = 0; f < plan.assetID.length; f++) {\n              const elemAsset = plan.assetID[f];\n\n              if (!element.entityAsset.includes(elemAsset)) {\n                element.entityAsset.push(elemAsset);\n              }\n            }\n          }\n        } else if (this.settlementData.type === \"owner_operator\") {\n          if (this.operatorDriversList.includes(plan.driverID) || this.operatorDriversList.includes(plan.coDriverID)) {\n            if (plan.type === 'Delivery') {\n              element.delivCount += 1;\n            }\n\n            if (plan.mileType === 'loaded') {\n              if (this.settlementData.type === 'driver') {\n                if (plan.coDriverID && plan.driverID) {\n                  element.loadedMilesTeam += Number(plan.miles);\n                } else {\n                  element.loadedMiles += Number(plan.miles);\n                }\n              } else {\n                element.loadedMiles += Number(plan.miles);\n              }\n            } else {\n              if (this.settlementData.type === 'driver') {\n                if (plan.coDriverID && plan.driverID) {\n                  element.emptyMilesTeam += Number(plan.miles);\n                } else {\n                  element.emptyMiles += Number(plan.miles);\n                }\n              } else {\n                element.emptyMiles += Number(plan.miles);\n              }\n            }\n\n            element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n                      <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n            pickCount++;\n            element.entityMiles += Number(plan.miles);\n\n            if (!element.entityDriver.includes(plan.driverID) && plan.driverID) {\n              element.entityDriver.push(plan.driverID);\n            }\n\n            if (!element.entityDriver.includes(plan.coDriverID) && plan.coDriverID) {\n              element.entityDriver.push(plan.coDriverID);\n            }\n\n            if (!element.entityVehicle.includes(plan.vehicleID) && plan.vehicleID) {\n              element.entityVehicle.push(plan.vehicleID);\n            }\n\n            if (!element.entityCarrier.includes(plan.carrierID) && plan.carrierID) {\n              element.entityCarrier.push(plan.carrierID);\n            }\n\n            for (let f = 0; f < plan.assetID.length; f++) {\n              const elemAsset = plan.assetID[f];\n\n              if (!element.entityAsset.includes(elemAsset)) {\n                element.entityAsset.push(elemAsset);\n              }\n            }\n          }\n        }\n\n        if (plan.carrierID !== \"\") {\n          if (!element.carrID.includes(plan.carrierID) && plan.carrierID) {\n            element.carrID.push(plan.carrierID);\n          }\n        }\n      } // calculate whole trip amount\n\n\n      if (element.paymentSelected[0] && element.paymentSelected[0].pType) {\n        if (element.paymentSelected[0].pType === 'ppm') {\n          let loadPay = 0;\n          let emPay = 0;\n          let loadteamPay = 0;\n          let empTeamPay = 0;\n          loadPay = element.loadedMiles * element.paymentSelected[0].loadedMiles;\n          emPay = element.emptyMiles * element.paymentSelected[0].emptyMiles;\n\n          if (this.settlementData.type === 'driver') {\n            loadteamPay = element.loadedMilesTeam * element.paymentSelected[0].loadedMilesTeam;\n            empTeamPay = element.emptyMilesTeam * element.paymentSelected[0].emptyMilesTeam;\n          }\n\n          element.amount = Number(loadPay) + Number(emPay) + Number(loadteamPay) + Number(empTeamPay);\n          element.paymentSelected = [this.ppm];\n        } else if (element.paymentSelected[0].pType === 'pfr') {\n          element.amount = Number(element.paymentSelected[0].flatRate).toFixed(2);\n          element.paymentSelected = [this.pfr];\n        } else if (element.paymentSelected[0].pType === 'ppd') {\n          element.amount = element.delivCount * Number(element.paymentSelected[0].deliveryRate);\n          element.paymentselected = [this.ppd];\n        }\n      }\n\n      element.amount = Number(element.amount.toFixed(2));\n\n      if (element.split && element.split.length > 0) {\n        element.split.map(main => {\n          let arrr = {\n            selected: false,\n            splitID: main.splitID,\n            splitName: main.splitName,\n            trips: [],\n            loadedMiles: 0,\n            emptyMiles: 0,\n            loadedMilesTeam: 0,\n            delivCount: 0,\n            emptyMilesTeam: 0,\n            amount: 0\n          };\n\n          if (main.plan) {\n            main.plan.map(c => {\n              if (this.settlementData.type === \"driver\" || this.settlementData.type === \"carrier\") {\n                if (main.stlStatus.includes(entStat)) {\n                  if (this.settlementData.type === \"driver\") {\n                    element.tripPlanning.map(trp => {\n                      if (c === trp.planID) {\n                        if (this.settlementData.entityId === trp.driverID || this.settlementData.entityId === trp.coDriverID) {\n                          if (trp.type === 'Delivery') {\n                            arrr.delivCount += 1;\n                          }\n\n                          if (trp.mileType === 'loaded') {\n                            if (trp.coDriverID && trp.driverID) {\n                              arrr.loadedMilesTeam += Number(trp.miles);\n                            } else {\n                              arrr.loadedMiles += Number(trp.miles);\n                            }\n                          } else {\n                            if (trp.coDriverID && trp.driverID) {\n                              arrr.emptyMilesTeam += Number(trp.miles);\n                            } else {\n                              arrr.emptyMiles += Number(trp.miles);\n                            }\n                          }\n\n                          trp.planLoc = this.setTripLoc(trp);\n                          arrr.trips.push(trp);\n                        }\n                      }\n                    });\n                  } else if (this.settlementData.type === \"carrier\") {\n                    element.tripPlanning.map(trp => {\n                      if (c === trp.planID) {\n                        if (this.settlementData.entityId === trp.carrierID) {\n                          if (trp.type === 'Delivery') {\n                            arrr.delivCount += 1;\n                          }\n\n                          if (trp.mileType === 'loaded') {\n                            arrr.loadedMiles += Number(trp.miles);\n                          } else {\n                            arrr.emptyMiles += Number(trp.miles);\n                          }\n\n                          trp.planLoc = this.setTripLoc(trp);\n                          arrr.trips.push(trp);\n                        }\n                      }\n                    });\n                  }\n                }\n              } else if (this.settlementData.type === \"owner_operator\") {\n                let exstPlanIDs = [];\n\n                for (let index = 0; index < this.operatorDriversList.length; index++) {\n                  const drvr = this.operatorDriversList[index];\n                  entStat = `${drvr}:false`;\n\n                  if (main.stlStatus.includes(entStat)) {\n                    element.tripPlanning.map(trp => {\n                      if (c === trp.planID) {\n                        if (!exstPlanIDs.includes(trp.planID)) {\n                          exstPlanIDs.push(trp.planID);\n\n                          if (this.operatorDriversList.includes(trp.driverID) || this.operatorDriversList.includes(trp.coDriverID)) {\n                            if (trp.type === 'Delivery') {\n                              arrr.delivCount += 1;\n                            }\n\n                            if (trp.mileType === 'loaded') {\n                              arrr.loadedMiles += Number(trp.miles);\n                            } else {\n                              arrr.emptyMiles += Number(trp.miles);\n                            }\n\n                            trp.planLoc = this.setTripLoc(trp);\n                            arrr.trips.push(trp);\n                          }\n                        }\n                      }\n                    });\n                  }\n                }\n              }\n            });\n          }\n\n          if (arrr.trips.length > 0) {\n            if (element.paymentSelected[0] && element.paymentSelected[0].pType) {\n              if (element.paymentSelected[0].pType === 'ppm') {\n                let loadPay1 = 0;\n                let emPay1 = 0;\n                let loadteamPay1 = 0;\n                let empTeamPay1 = 0;\n                loadPay1 = arrr.loadedMiles * element.paymentSelected[0].loadedMiles;\n                emPay1 = arrr.emptyMiles * element.paymentSelected[0].emptyMiles;\n\n                if (this.settlementData.type === 'driver') {\n                  loadteamPay1 = arrr.loadedMilesTeam * element.paymentSelected[0].loadedMilesTeam;\n                  empTeamPay1 = arrr.emptyMilesTeam * element.paymentSelected[0].emptyMilesTeam;\n                }\n\n                arrr.amount = Number(loadPay1) + Number(emPay1) + Number(loadteamPay1) + Number(empTeamPay1);\n              } else if (element.paymentSelected[0].pType === 'pfr') {\n                arrr.amount = Number(element.paymentSelected[0].flatRate.toFixed(2));\n              } else if (element.paymentSelected[0].pType === 'ppd') {\n                arrr.amount = arrr.delivCount * Number(element.paymentSelected[0].deliveryRate);\n              }\n            }\n\n            arrr.amount = Number(arrr.amount.toFixed(2));\n            element.splitArr.push(arrr);\n          }\n        });\n      }\n    }\n  }\n\n  setTripLoc(trp) {\n    let planLoc = \"\";\n\n    if (trp.locMan) {\n      planLoc = `${trp.locData.addr}, ${trp.locData.ctName}, ${trp.locData.sName}, ${trp.locData.cName} ${trp.locData.zip}`;\n    } else {\n      planLoc = trp.location;\n    }\n\n    return planLoc;\n  } // fetchExpenseCategories() {\n  //   this.accountService\n  //     .getData(`expense/categories/list`)\n  //     .subscribe((result: any) => {\n  //       this.categories = result;\n  //     });\n  // }\n\n\n  fetchCarriers() {\n    this.apiService.getData(`contacts/get/type/carrier`).subscribe(result => {\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.allCarriers.push(element);\n        }\n      });\n      this.carriers = result.reduce((a, b) => {\n        return a[b[\"contactID\"]] = b[\"companyName\"], a;\n      }, {});\n    });\n  }\n\n  fetchOwnerOperators() {\n    this.apiService.getData(`contacts/get/type/ownerOperator`).subscribe(result => {\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.allOwnerOperators.push(element);\n        }\n\n        this.ownerOperators = result.reduce((a, b) => {\n          return a[b[\"contactID\"]] = b[\"companyName\"], a;\n        }, {});\n      });\n    });\n  }\n\n  addAdditionalExp() {\n    if (this.additionRowData.tripID != null && this.additionRowData.chargeName != \"\" && this.additionRowData.amount != \"\" && this.settlementData.currency !== \"\") {\n      this.additionRowData.currency = this.settlementData.currency;\n      this.settlementData.addition.push(this.additionRowData);\n      this.additionRowData = {\n        tripID: null,\n        chargeName: \"\",\n        desc: \"\",\n        amount: \"\",\n        currency: this.settlementData.currency\n      };\n      this.calculateAddTotal();\n    }\n  }\n\n  adddeductionExp() {\n    if (this.deductionRowData.tripID != null && this.deductionRowData.chargeName != \"\" && this.deductionRowData.amount != \"\" && this.settlementData.currency !== \"\") {\n      this.deductionRowData.currency = this.settlementData.currency;\n      this.settlementData.deduction.push(this.deductionRowData);\n      this.deductionRowData = {\n        tripID: null,\n        chargeName: \"\",\n        desc: \"\",\n        amount: \"\",\n        currency: this.settlementData.currency\n      };\n      this.calculateDedTotal();\n    }\n  }\n\n  delTripAddData(index, type) {\n    if (type === \"additional\") {\n      this.settlementData.addition.splice(index, 1);\n      this.calculateAddTotal();\n    } else {\n      this.settlementData.deduction.splice(index, 1);\n      this.calculateDedTotal();\n    }\n  }\n\n  calculateAddTotal() {\n    this.settlementData.additionTotal = 0;\n\n    for (let i = 0; i < this.settlementData.addition.length; i++) {\n      const element = this.settlementData.addition[i];\n      this.settlementData.additionTotal += Number(element.amount);\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  calculateDedTotal() {\n    this.settlementData.deductionTotal = 0;\n\n    for (let i = 0; i < this.settlementData.deduction.length; i++) {\n      const element = this.settlementData.deduction[i];\n      this.settlementData.deductionTotal += Number(element.amount);\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  calculateFinalTotal() {\n    this.settlementData.taxes = 0;\n    this.settlementData.subTotal = this.settlementData.paymentTotal + this.settlementData.additionTotal - this.settlementData.deductionTotal;\n\n    if (this.settlementData.type == \"driver\" || this.settlementData.type == \"owner_operator\") {\n      this.settlementData.subTotal = this.settlementData.subTotal + this.settlementData.fuelAdd - this.settlementData.fuelDed;\n    } // trip expense values\n    // this.settlementData.subTotal =\n    //   this.settlementData.subTotal +\n    //   this.settlementData.expAdd -\n    //   this.settlementData.expDed;\n\n\n    if (this.settlementData.type == \"carrier\") {\n      if (this.settlementData.taxObj.carrLocalTax != 0) {\n        this.settlementData.taxObj.carrLocalAmount = this.settlementData.subTotal * this.settlementData.taxObj.carrLocalTax / 100;\n      }\n\n      if (this.settlementData.taxObj.carrFedTax != 0) {\n        this.settlementData.taxObj.carrFedAmount = this.settlementData.subTotal * this.settlementData.taxObj.carrFedTax / 100;\n      }\n\n      this.settlementData.taxObj.carrLocalAmount = this.settlementData.taxObj.carrLocalAmount ? this.settlementData.taxObj.carrLocalAmount : 0;\n      this.settlementData.taxObj.carrFedAmount = this.settlementData.taxObj.carrFedAmount ? this.settlementData.taxObj.carrFedAmount : 0;\n      this.settlementData.taxes = this.settlementData.taxObj.carrLocalAmount + this.settlementData.taxObj.carrFedAmount;\n      let midTerm = this.settlementData.subTotal - Number(this.settlementData.taxes);\n      this.settlementData.finalTotal = +midTerm.toFixed(2);\n    } else if (this.settlementData.type == \"owner_operator\") {\n      this.settlementData.finalTotal = +this.settlementData.subTotal.toFixed(2);\n      this.calculateTaxes();\n    } else {\n      this.settlementData.finalTotal = +this.settlementData.subTotal.toFixed(2);\n    }\n\n    if (this.settlementData.finalTotal == 0) {\n      this.submitDisabled = true;\n    } else {\n      this.submitDisabled = false;\n    }\n\n    this.limitDecimals();\n  }\n\n  limitDecimals() {\n    this.settlementData.miles.driverTotal = Number(this.settlementData.miles.driverTotal.toFixed(2));\n    this.settlementData.miles.driverLoaded = Number(this.settlementData.miles.driverLoaded.toFixed(2));\n    this.settlementData.miles.driverEmpty = Number(this.settlementData.miles.driverEmpty.toFixed(2));\n    this.settlementData.miles.tripsTeam = Number(this.settlementData.miles.tripsTeam.toFixed(2));\n    this.settlementData.miles.tripsTotal = Number(this.settlementData.miles.tripsTotal.toFixed(2));\n    this.settlementData.miles.tripsLoaded = Number(this.settlementData.miles.tripsLoaded.toFixed(2));\n    this.settlementData.miles.tripsEmpty = Number(this.settlementData.miles.tripsEmpty.toFixed(2));\n    this.settlementData.additionTotal = Number(this.settlementData.additionTotal.toFixed(2));\n    this.settlementData.deductionTotal = Number(this.settlementData.deductionTotal.toFixed(2));\n    this.settlementData.paymentTotal = Number(this.settlementData.paymentTotal.toFixed(2));\n    this.settlementData.taxes = Number(this.settlementData.taxes.toFixed(2));\n    this.settlementData.subTotal = Number(this.settlementData.subTotal.toFixed(2));\n    this.settlementData.finalTotal = Number(this.settlementData.finalTotal.toFixed(2));\n    this.settlementData.pendingPayment = Number(this.settlementData.pendingPayment.toFixed(2));\n    this.settlementData.taxObj.gstPrcnt = Number(this.settlementData.taxObj.gstPrcnt.toFixed(2));\n    this.settlementData.taxObj.pstPrcnt = Number(this.settlementData.taxObj.pstPrcnt.toFixed(2));\n    this.settlementData.taxObj.hstPrcnt = Number(this.settlementData.taxObj.hstPrcnt.toFixed(2));\n    this.settlementData.taxObj.gstAmount = Number(this.settlementData.taxObj.gstAmount.toFixed(2));\n    this.settlementData.taxObj.pstAmount = Number(this.settlementData.taxObj.pstAmount.toFixed(2));\n    this.settlementData.taxObj.hstAmount = Number(this.settlementData.taxObj.hstAmount.toFixed(2));\n    this.settlementData.taxObj.carrLocalTax = this.settlementData.taxObj.carrLocalTax ? Number(this.settlementData.taxObj.carrLocalTax) : 0;\n    this.settlementData.taxObj.carrFedTax = this.settlementData.taxObj.carrFedTax ? Number(this.settlementData.taxObj.carrFedTax) : 0;\n    this.settlementData.taxObj.carrLocalAmount = Number(this.settlementData.taxObj.carrLocalAmount.toFixed(2));\n    this.settlementData.taxObj.carrFedTax = this.settlementData.taxObj.carrFedTax ? Number(this.settlementData.taxObj.carrFedTax) : 0;\n    this.settlementData.taxObj.carrFedAmount = Number(this.settlementData.taxObj.carrFedAmount.toFixed(2));\n    this.settlementData.fuelAdd = Number(this.settlementData.fuelAdd.toFixed(2));\n    this.settlementData.fuelDed = Number(this.settlementData.fuelDed.toFixed(2));\n    this.finalPayment = this.settlementData.finalTotal;\n\n    if (this.settlementData.type === \"owner_operator\") {\n      this.deductFromOwnerOperator();\n    }\n  }\n\n  resetCal() {\n    this.settlementData.tripIds = [];\n    this.settlementData.trpData = [];\n    this.settlementData.miles.tripsLoaded = 0;\n    this.settlementData.miles.tripsTotal = 0;\n    this.settlementData.miles.tripsEmpty = 0;\n    this.settlementData.miles.tripsTeam = 0;\n    this.settlementData.miles.teamHours = 0;\n    this.settlementData.miles.totalHours = 0;\n    this.settlementData.miles.driverTotal = 0;\n    this.settlementData.miles.driverLoaded = 0;\n    this.settlementData.miles.driverEmpty = 0;\n    this.settlementData.miles.driverHours = 0;\n    this.settlementData.paymentTotal = 0;\n    this.settlementData.miles.driverLoadedTeam = 0;\n    this.settlementData.miles.driverEmptyTeam = 0;\n    this.selectedTrips = [];\n    this.settlementData.miles.drivers.map(v => {\n      v.total = 0;\n      v.loaded = 0;\n      v.empty = 0;\n      v.hours = 0;\n      v.payment = 0;\n    });\n    this.vehicleIds = [];\n    this.settlementData.finalTotal = 0;\n  }\n\n  selectedTrip(tripID, sub = \"\") {\n    this.resetCal();\n\n    if (sub != \"\") {\n      this.subTrpStat(tripID);\n    }\n\n    this.paymentCalculation(this.trips, \"trip\");\n\n    if (this.settledTrips.length > 0) {\n      this.paymentCalculation(this.settledTrips, \"settled\");\n    }\n  }\n\n  paymentCalculation(trips, type) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.drvrPay = 0;\n      _this.teamMiles = 0;\n      _this.ownDelCouunt = 0;\n      let subTripCount = 0;\n      _this.delvCount = 0;\n\n      for (let i = 0; i < trips.length; i++) {\n        const element = trips[i];\n        subTripCount = 0;\n        let tripSubs = 0;\n        let splitArr = [];\n\n        if (type === \"trip\") {\n          if (trips[i].splitArr) {\n            splitArr = trips[i].splitArr;\n          }\n        } else {\n          splitArr = trips[i].calSplitArr;\n        }\n\n        tripSubs = splitArr.length;\n        splitArr.map(v => {\n          if (v.selected) {\n            subTripCount++;\n          }\n        });\n\n        if (type === \"trip\") {\n          if (element.selected && element.split.length === 0 && subTripCount == 0) {\n            _this.setArray(element);\n\n            _this.wholeTripPlanCalculation(element);\n          } else if (subTripCount > 0) {\n            if (element.indeterminate || element.selected) {\n              _this.setArray(element);\n\n              _this.subTripPlanCalculation(splitArr, element.tripID);\n            }\n          }\n        } else {\n          if (element.split.length === 0 && subTripCount == 0) {\n            _this.setArray(element);\n\n            _this.wholeTripPlanCalculation(element);\n          } else if (subTripCount > 0) {\n            _this.setArray(element);\n\n            _this.subTripPlanCalculation(splitArr, element.tripID);\n          }\n        }\n      } // await this.fetchFuelExpenses();\n      // await this.fetchTripExpenses();\n\n    })();\n  }\n\n  setArray(element) {\n    if (!this.settlementData.tripIds.includes(element.tripID)) {\n      this.settlementData.tripIds.push(element.tripID);\n      let tripAmount = 0; // split is selected\n\n      if (element.indeterminate) {\n        for (const iterator of element.splitArr) {\n          if (iterator.selected) {\n            tripAmount += iterator.amount;\n          }\n        }\n      } else {\n        tripAmount = element.amount;\n      }\n\n      let obj = {\n        id: element.tripID,\n        splitIDs: [],\n        plan: [],\n        amount: tripAmount,\n        paymentSelected: element.paymentSelected\n      };\n      this.settlementData.trpData.push(obj);\n    }\n\n    this.selectedTrips.push(element);\n  }\n\n  wholeTripPlanCalculation(element) {\n    if (this.settlementData.type === \"driver\" || this.settlementData.type === \"carrier\") {\n      for (let t = 0; t < element.tripPlanning.length; t++) {\n        const plan = element.tripPlanning[t];\n        this.driverCarrMilesCal(plan); //  to fetch fuel enteries acc. to vehicle and asset\n\n        this.assignFuelVehicleIDs(plan);\n      }\n\n      this.driverCarrPaymentCal();\n      this.calculateFinalTotal();\n    } else if (this.settlementData.type === \"owner_operator\") {\n      element.tripPlanning.map(plan => {\n        if (this.operatorDriversList.includes(plan.driverID) || this.operatorDriversList.includes(plan.coDriverID)) {\n          if (plan.type === \"Delivery\") {\n            this.ownDelCouunt += 1;\n          }\n\n          this.settlementData.miles.tripsTotal += Number(plan.miles);\n\n          if (plan.mileType === \"loaded\") {\n            this.settlementData.miles.tripsLoaded += Number(plan.miles);\n          } else if (plan.mileType === \"empty\") {\n            this.settlementData.miles.tripsEmpty += Number(plan.miles);\n          } //  to fetch fuel enteries acc. to vehicle and asset\n\n\n          this.assignFuelVehicleIDs(plan);\n        }\n      });\n\n      for (let index = 0; index < this.settlementData.miles.drivers.length; index++) {\n        const oprElement = this.settlementData.miles.drivers[index];\n        let paymentInfor = oprElement.paymentDetails;\n        let driverDeliveryCount = 0;\n        oprElement.loaded = 0;\n        oprElement.empty = 0;\n        this.drvrPay = 0; // if foll calculation is updated then also update in fnc. subTripPlanCalculation\n\n        for (let t = 0; t < element.tripPlanning.length; t++) {\n          const plan = element.tripPlanning[t];\n\n          if (plan.driverID === oprElement.driverID || plan.coDriverID === oprElement.driverID) {\n            if (plan.type === \"Delivery\") {\n              driverDeliveryCount += 1;\n            }\n\n            oprElement.total += Number(plan.miles);\n\n            if (plan.mileType === \"loaded\") {\n              oprElement.loaded += Number(plan.miles);\n              this.ownerLoadedM += Number(plan.miles);\n            } else if (plan.mileType === \"empty\") {\n              oprElement.empty += Number(plan.miles);\n              this.ownerEmptyM += Number(plan.miles);\n            }\n          }\n        } // this.oprDriverPaymentCalc(paymentInfor, oprElement, driverDeliveryCount);\n        // paymentInfor.driverID = oprElement.driverID;\n        // // this.settlementData.paymentInfo.drivers.push(paymentInfor);\n        // if (paymentInfor.paymentType === \"Pay Per Mile\") {\n        //   paymentInfor.loadedMiles = paymentInfor.loadedMiles\n        //     ? paymentInfor.loadedMiles\n        //     : 0;\n        //   paymentInfor.emptyMiles = paymentInfor.emptyMiles\n        //     ? paymentInfor.emptyMiles\n        //     : 0;\n        //   paymentInfor.rate = paymentInfor.rate ? paymentInfor.rate : 0;\n        //   paymentInfor.deliveryRate = paymentInfor.deliveryRate\n        //     ? paymentInfor.deliveryRate\n        //     : 0;\n        //   let loadedMilesPayment =\n        //     oprElement.loaded * Number(paymentInfor.loadedMiles);\n        //   let emptyMilesPayment =\n        //     oprElement.empty * Number(paymentInfor.emptyMiles);\n        //   this.drvrPay = loadedMilesPayment + emptyMilesPayment;\n        // } else if (paymentInfor.paymentType === \"Pay Per Hour\") {\n        //   this.settlementData.paymentTotal =\n        //     oprElement.hours * Number(paymentInfor.rate);\n        // } else if (paymentInfor.paymentType === \"Pay Per Delivery\") {\n        //   this.settlementData.paymentTotal =\n        //     driverDeliveryCount * Number(paymentInfor.deliveryRate);\n        // }\n        //oprElement.payment += this.drvrPay;\n\n      } // final payment will be according to owner operator values\n\n\n      this.oprFinalCal();\n    }\n  }\n\n  calculateTripAmount() {\n    this.settlementData.paymentTotal = 0;\n\n    if (this.settlementData.trpData.length > 0) {\n      for (const element of this.settlementData.trpData) {\n        this.settlementData.paymentTotal += Number(element.amount);\n      }\n    }\n  }\n\n  oprFinalCal() {\n    this.calculateTripAmount();\n    this.calculateFinalTotal(); //   if(this.settlementData.paymentSelected.length>0){\n    //     for(const payment of this.settlementData.paymentSelected){\n    //       switch(payment.pType){\n    //         case \"ppm\":\n    //           let loadedMilesPayment = 0;\n    //           let emptyMilesPayment = 0;\n    //           loadedMilesPayment =\n    //           this.settlementData.miles.tripsLoaded *\n    //           Number(payment.loadedMiles);\n    //           emptyMilesPayment =\n    //           this.settlementData.miles.tripsEmpty *\n    //           Number(payment.emptyMiles);\n    //           this.settlementData.paymentTotal = loadedMilesPayment + emptyMilesPayment;\n    //     break;\n    //     case \"pph\":\n    //       this.settlementData.paymentTotal =\n    //       this.settlementData.miles.totalHours *\n    //       Number(payment.rate);\n    //       break;\n    //     case \"ppd\":\n    //       this.settlementData.paymentTotal =\n    //       this.ownDelCouunt * Number(payment.deliveryRate);\n    //       break;\n    //       case \"pfr\":\n    //         this.settlementData.paymentTotal=this.ownDelCouunt * Number(payment.flatRate)\n    //         break;\n    //       }\n    //   this.calculateFinalTotal();\n    // }\n    // }\n  }\n\n  driverCarrMilesCal(plan) {\n    this.settlementData.miles.tripsTotal += Number(plan.miles);\n\n    if (plan.coDriverID) {\n      if (plan.driverID === this.driverId || plan.coDriverID === this.driverId) {\n        this.teamMiles += Number(plan.miles);\n        this.settlementData.miles.tripsTeam = Number(this.teamMiles.toFixed(2));\n      }\n    }\n\n    if (this.settlementData.type != \"carrier\") {\n      if (plan.mileType === \"loaded\") {\n        this.settlementData.miles.tripsLoaded += Number(plan.miles);\n      } else if (plan.mileType === \"empty\") {\n        this.settlementData.miles.tripsEmpty += Number(plan.miles);\n      }\n\n      if (plan.type === \"Delivery\") {\n        this.delvCount += 1;\n      }\n    } else {\n      if (plan.carrierID == this.settlementData.entityId) {\n        if (plan.mileType === \"loaded\") {\n          this.settlementData.miles.tripsLoaded += Number(plan.miles);\n        } else if (plan.mileType === \"empty\") {\n          this.settlementData.miles.tripsEmpty += Number(plan.miles);\n        }\n\n        if (plan.type === \"Delivery\") {\n          this.delvCount += 1;\n        }\n      }\n    } // selected driver miles calculation\n\n\n    if (plan.driverID === this.driverId || plan.coDriverID === this.driverId) {\n      this.settlementData.miles.driverTotal += Number(plan.miles);\n\n      if (plan.mileType === \"loaded\") {\n        if (plan.coDriverID) {\n          this.settlementData.miles.driverLoadedTeam += Number(plan.miles);\n        } else {\n          this.settlementData.miles.driverLoaded += Number(plan.miles);\n        }\n      } else if (plan.mileType === \"empty\") {\n        if (plan.coDriverID) {\n          this.settlementData.miles.driverEmptyTeam += Number(plan.miles);\n        } else {\n          this.settlementData.miles.driverEmpty += Number(plan.miles);\n        }\n      }\n    }\n  }\n\n  driverCarrPaymentCal() {\n    if (this.settlementData.type === \"driver\") {\n      // driver_hours will be from ELD\n      this.settlementData.miles.driverHours = 0;\n      this.calculateTripAmount(); //   if(this.settlementData.paymentSelected.length>0){\n      //     for(const payment of this.settlementData.paymentSelected){\n      //       switch(payment.pType){\n      //         case \"ppm\":\n      //           let loadedMilesPayment =\n      //       this.settlementData.miles.driverLoaded *\n      //       Number(payment.loadedMiles) +\n      //       this.settlementData.miles.driverLoadedTeam *\n      //       Number(payment.loadedMilesTeam);\n      //     let emptyMilesPayment =\n      //       this.settlementData.miles.driverEmpty *\n      //       Number(payment.emptyMiles) +\n      //       this.settlementData.miles.driverEmptyTeam *\n      //       Number(payment.emptyMilesTeam);\n      //     this.settlementData.paymentTotal =\n      //       loadedMilesPayment + emptyMilesPayment;\n      //           break;\n      //         case \"pph\":\n      //           this.settlementData.paymentTotal =\n      //       this.settlementData.miles.driverHours *\n      //       Number(payment.rate);\n      //           break;\n      //           case \"ppd\":\n      //             this.settlementData.paymentTotal =\n      //       this.delvCount * Number(payment.deliveryRate);\n      //             break;\n      //           case \"pfr\":\n      //             this.settlementData.paymentTotal=this.delvCount* Number(payment.flatRate)\n      //             break;\n      //       }\n      // }\n      //   this.settlementData.miles.totalHours = 0;\n      // }\n    } else if (this.settlementData.type === \"carrier\") {\n      // for(const payment of this.settlementData.paymentSelected){\n      //   switch(payment.pType){\n      //     case \"ppm\":\n      //       let loadedMilesPayment = 0;\n      //   let emptyMilesPayment = 0;\n      //   loadedMilesPayment =\n      //     this.settlementData.miles.tripsLoaded *\n      //     Number(payment.loadedMiles);\n      //   emptyMilesPayment =\n      //     this.settlementData.miles.tripsEmpty *\n      //     Number(payment.emptyMiles);\n      //   this.settlementData.paymentTotal =\n      //     loadedMilesPayment + emptyMilesPayment;\n      //       break;\n      //       case \"pph\":\n      //         this.settlementData.paymentTotal =\n      //     this.settlementData.miles.totalHours *\n      //     Number(payment.rate);\n      //     break;\n      //     case \"ppd\":\n      //       this.settlementData.paymentTotal =\n      //     this.delvCount * Number(payment.deliverRate);\n      //       break;\n      //       case \"pfr\":\n      //         this.settlementData.paymentTotal=this.delvCount* Number(payment.flatRate)\n      //         break;\n      //   }\n      // }\n      this.calculateTripAmount();\n    }\n  }\n\n  subTripPlanCalculation(splitArr, tripID) {\n    let planIds = [];\n\n    for (let index = 0; index < splitArr.length; index++) {\n      const sub = splitArr[index];\n\n      if (sub.selected) {\n        // store the selected sub trip ID\n        this.settlementData.trpData.map(k => {\n          if (k.id === tripID) {\n            if (!k.splitIDs.includes(sub.splitID)) {\n              k.splitIDs.push(sub.splitID);\n            }\n          }\n        });\n\n        if (this.settlementData.type === \"driver\" || this.settlementData.type === \"carrier\") {\n          for (let j = 0; j < sub.trips.length; j++) {\n            const plan = sub.trips[j];\n\n            if (!planIds.includes(plan.planID)) {\n              planIds.push(plan.planID); //  to fetch fuel enteries acc. to vehicle and asset\n\n              this.assignFuelVehicleIDs(plan);\n              this.settlementData.trpData.map(k => {\n                if (k.id === tripID) {\n                  k.plan.push(plan.planID);\n                }\n              });\n            }\n\n            this.driverCarrMilesCal(plan);\n          }\n\n          this.driverCarrPaymentCal();\n        } else if (this.settlementData.type === \"owner_operator\") {\n          sub.trips.map(plan => {\n            if (this.operatorDriversList.includes(plan.driverID) || this.operatorDriversList.includes(plan.coDriverID)) {\n              if (!planIds.includes(plan.planID)) {\n                planIds.push(plan.planID);\n                this.settlementData.trpData.map(k => {\n                  if (k.id === tripID) {\n                    k.plan.push(plan.planID);\n                  }\n                }); //  to fetch fuel enteries acc. to vehicle and asset\n\n                this.assignFuelVehicleIDs(plan);\n              }\n\n              this.settlementData.miles.tripsTotal += Number(plan.miles);\n\n              if (plan.mileType === \"loaded\") {\n                this.settlementData.miles.tripsLoaded += Number(plan.miles);\n              } else if (plan.mileType === \"empty\") {\n                this.settlementData.miles.tripsEmpty += Number(plan.miles);\n              }\n\n              if (plan.type === \"Delivery\") {\n                this.ownDelCouunt += 1;\n              }\n            }\n          }); // if foll calculation is updated then also update in fnc. wholeTripPlanCalculation\n\n          for (let index = 0; index < this.settlementData.miles.drivers.length; index++) {\n            const oprElement = this.settlementData.miles.drivers[index];\n            let paymentInfor = oprElement.paymentOption;\n            let driverDeliveryCount = 0;\n            oprElement.loaded = 0;\n            oprElement.empty = 0;\n            this.drvrPay = 0;\n\n            if (sub.selected) {\n              for (let j = 0; j < sub.trips.length; j++) {\n                const plan = sub.trips[j];\n\n                if (plan.driverID === oprElement.driverID || plan.coDriverID === oprElement.driverID) {\n                  if (plan.type === \"Delivery\") {\n                    driverDeliveryCount += 1;\n                  }\n\n                  oprElement.total += Number(plan.miles);\n\n                  if (plan.mileType === \"loaded\") {\n                    oprElement.loaded += Number(plan.miles);\n                    this.ownerLoadedM += Number(plan.miles);\n                  } else if (plan.mileType === \"empty\") {\n                    oprElement.empty += Number(plan.miles);\n                    this.ownerEmptyM += Number(plan.miles);\n                  }\n                }\n              } // this.oprDriverPaymentCalc(paymentInfor, oprElement, driverDeliveryCount);\n\n\n              paymentInfor.driverID = oprElement.driverID; // this.settlementData.paymentInfo.drivers.push(paymentInfor);\n\n              if (paymentInfor.paymentType === \"ppm\") {\n                paymentInfor.loadedMiles = paymentInfor.loadedMiles ? paymentInfor.loadedMiles : 0;\n                paymentInfor.emptyMiles = paymentInfor.emptyMiles ? paymentInfor.emptyMiles : 0;\n                paymentInfor.rate = paymentInfor.rate ? paymentInfor.rate : 0;\n                paymentInfor.deliveryRate = paymentInfor.deliveryRate ? paymentInfor.deliveryRate : 0;\n                let loadedMilesPayment = oprElement.loaded * Number(paymentInfor.loadedMiles);\n                let emptyMilesPayment = oprElement.empty * Number(paymentInfor.emptyMiles);\n                this.drvrPay = loadedMilesPayment + emptyMilesPayment;\n              } else if (paymentInfor.paymentType === \"pph\") {\n                this.settlementData.paymentTotal = oprElement.hours * Number(paymentInfor.rate);\n              } else if (paymentInfor.paymentType === \"ppd\") {\n                this.settlementData.paymentTotal = driverDeliveryCount * Number(paymentInfor.deliveryRate);\n              }\n\n              oprElement.payment += this.drvrPay;\n            }\n          } // final payment will be according to owner operator values\n\n\n          if (this.contactDetail) {\n            this.oprFinalCal();\n          }\n        }\n      }\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  addRecord() {\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n\n    if (this.settlementData.paymentTotal <= 0) {\n      this.toaster.error(\"Total Payment should not be zero.\");\n      return false;\n    }\n\n    if (this.settlementData.finalTotal <= 0) {\n      this.toaster.error(\"Total should not be zero.\");\n      return false;\n    }\n\n    if (this.settlementData.tripIds.length === 0) {\n      this.toaster.error(\"Please select settlement\");\n      return false;\n    }\n\n    if (this.settlementData.prStart == \"\" || this.settlementData.prEnd == \"\") {\n      this.toaster.error(\"Please select pay period\");\n      return false;\n    }\n\n    if (this.settlementData.prStart == \"\" || this.settlementData.prStart == null || this.settlementData.prEnd == \"\" || this.settlementData.prEnd == null) {\n      this.toaster.error(\"Please select pay period\");\n      return false;\n    }\n\n    if (this.settlementData.type === \"owner_operator\") {\n      this.settlementData.miles.drivers.map(v => {\n        delete v.paymentDetails;\n      });\n    }\n\n    this.submitDisabled = true;\n    this.accountService.postData(\"settlement\", this.settlementData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Settlement added successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  fetchSettlementDetail() {\n    this.accountService.getData(`settlement/detail/${this.settlementID}`).subscribe(result => {\n      this.settlementData = result[0];\n\n      if (this.settlementData.type === \"driver\") {\n        this.driverId = this.settlementData.entityId;\n      }\n\n      this.prevSelectEntries = this.settlementData.fuelData;\n      this.prevSelectedIds = this.settlementData.fuelIds;\n      this.fetchSelectedFuelExpenses(); // this.fetchSelectedTripExpenses();\n\n      this.editDisabled = true;\n\n      if (result[0].taxObj == undefined) {\n        result[0].taxObj = {\n          gstPrcnt: 0,\n          pstPrcnt: 0,\n          hstPrcnt: 0,\n          gstAmount: 0,\n          pstAmount: 0,\n          hstAmount: 0,\n          carrLocalTax: 0,\n          carrFedTax: 0,\n          carrLocalAmount: 0,\n          carrFedAmount: 0\n        };\n      }\n\n      if (this.settlementData.tripIds.length > 0) {\n        this.oldTrips = this.settlementData.tripIds;\n        let stldTrips = encodeURIComponent(JSON.stringify(this.settlementData.tripIds));\n        this.fetchSettledTrips(stldTrips, this.settlementData.trpData);\n      }\n\n      if (this.settlementData.fromDate == undefined) {\n        this.settlementData.fromDate = null;\n      }\n\n      if (this.settlementData.toDate == undefined) {\n        this.settlementData.toDate = null;\n      }\n\n      if (this.settlementData.type === \"owner_operator\") {\n        for (let i = 0; i < this.settlementData.miles.drivers.length; i++) {\n          const element = this.settlementData.miles.drivers[i];\n          this.operatorDriversList.push(element.driverID);\n        }\n      }\n\n      if (this.settlementData.type === \"driver\" || this.settlementData.type === \"carrier\") {\n        this.fetchTrips();\n      } else if (this.settlementData.type === \"owner_operator\") {\n        this.fetchOwnerOperatorDrivers(this.settlementData.entityId);\n      }\n    });\n  }\n\n  fetchSettledTrips(tripIds, trpData) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this2.apiService.getData(`common/trips/driver/settled?entities=${tripIds}`).toPromise(); // this.settledTrips = result;\n\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        let entStat = `${_this2.settlementData.entityId}:true`;\n        element.pickupLocation = \"\";\n        element.dropLocation = \"\";\n        element.carrID = [];\n        let pickCount = 1;\n        let dropCount = 1;\n        element.entityMiles = 0;\n        element.selected = true;\n        element.newSplitArr = [];\n        element.calSplitArr = [];\n        element.subTripCount = 0;\n        element.splitArr = [];\n        element.entityDriver = [];\n        element.entityVehicle = [];\n        element.entityCarrier = [];\n        element.entityAsset = [];\n        element.paymentSelected = _this2.settlementData.paymentSelected;\n        element.amount = 0;\n        element.loadedMiles = 0;\n        element.loadedMilesTeam = 0;\n        element.emptyMiles = 0;\n        element.emptyMilesTeam = 0;\n        element.delivCount = 0;\n\n        _this2.selectedTrips.push(element);\n\n        for (let j = 0; j < element.tripPlanning.length; j++) {\n          const plan = element.tripPlanning[j];\n\n          if (!element.entityDriver.includes(plan.driverID) && plan.driverID) {\n            element.entityDriver.push(plan.driverID);\n          }\n\n          if (!element.entityDriver.includes(plan.coDriverID) && plan.coDriverID) {\n            element.entityDriver.push(plan.coDriverID);\n          }\n\n          if (!element.entityVehicle.includes(plan.vehicleID) && plan.vehicleID) {\n            element.entityVehicle.push(plan.vehicleID);\n          }\n\n          if (!element.entityCarrier.includes(plan.carrierID) && plan.carrierID) {\n            element.entityCarrier.push(plan.carrierID);\n          }\n\n          for (let f = 0; f < plan.assetID.length; f++) {\n            const elemAsset = plan.assetID[f];\n\n            if (!element.entityAsset.includes(elemAsset)) {\n              element.entityAsset.push(elemAsset);\n            }\n          }\n\n          if (_this2.settlementData.type === \"driver\" || _this2.settlementData.type === \"carrier\") {\n            if (_this2.settlementData.entityId === plan.driverID || _this2.settlementData.entityId === plan.coDriverID || _this2.settlementData.entityId === plan.carrierID) {\n              if (plan.type === 'Delivery') {\n                element.delivCount += 1;\n              }\n\n              if (plan.mileType === 'loaded') {\n                if (_this2.settlementData.type === 'driver') {\n                  if (plan.coDriverID && plan.driverID) {\n                    element.loadedMilesTeam += Number(plan.miles);\n                  } else {\n                    element.loadedMiles += Number(plan.miles);\n                  }\n                } else {\n                  element.loadedMiles += Number(plan.miles);\n                }\n              } else {\n                if (_this2.settlementData.type === 'driver') {\n                  if (plan.coDriverID && plan.driverID) {\n                    element.emptyMilesTeam += Number(plan.miles);\n                  } else {\n                    element.emptyMiles += Number(plan.miles);\n                  }\n                } else {\n                  element.emptyMiles += Number(plan.miles);\n                }\n              }\n\n              element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n            <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n              pickCount++;\n              element.entityMiles += Number(plan.miles); // if (plan.type == \"Pickup\") {\n              //   element.pickupLocation += `${pickCount}) ${plan.location} <br>`;\n              //   pickCount++;\n              // }\n              // if (plan.type == \"Delivery\") {\n              //   element.dropLocation += `${dropCount}) ${plan.location} <br>`;\n              //   dropCount++;\n              // }\n            }\n          } else if (_this2.settlementData.type === \"owner_operator\") {\n            if (_this2.operatorDriversList.includes(plan.driverID) || _this2.operatorDriversList.includes(plan.coDriverID)) {\n              if (plan.type === 'Delivery') {\n                element.delivCount += 1;\n              }\n\n              if (plan.mileType === 'loaded') {\n                if (_this2.settlementData.type === 'driver') {\n                  if (plan.coDriverID && plan.driverID) {\n                    element.loadedMilesTeam += Number(plan.miles);\n                  } else {\n                    element.loadedMiles += Number(plan.miles);\n                  }\n                } else {\n                  element.loadedMiles += Number(plan.miles);\n                }\n              } else {\n                if (_this2.settlementData.type === 'driver') {\n                  if (plan.coDriverID && plan.driverID) {\n                    element.emptyMilesTeam += Number(plan.miles);\n                  } else {\n                    element.emptyMiles += Number(plan.miles);\n                  }\n                } else {\n                  element.emptyMiles += Number(plan.miles);\n                }\n              }\n\n              element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n              <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n              pickCount++;\n              element.entityMiles += Number(plan.miles);\n            }\n          }\n\n          if (_this2.settlementData.type === \"driver\" || _this2.settlementData.type === \"owner_operator\") {\n            //  to fetch fuel enteries acc. to vehicle and asset\n            _this2.assignFuelVehicleIDs(plan);\n          }\n\n          if (plan.carrierID !== \"\") {\n            if (!element.carrID.includes(plan.carrierID)) {\n              element.carrID.push(plan.carrierID);\n            }\n          }\n        } // calculate whole trip amount\n\n\n        if (element.paymentSelected[0] && element.paymentSelected[0].pType) {\n          if (element.paymentSelected[0].pType === 'ppm') {\n            let loadPay = 0;\n            let emPay = 0;\n            let loadteamPay = 0;\n            let empTeamPay = 0;\n            loadPay = element.loadedMiles * element.paymentSelected[0].loadedMiles;\n            emPay = element.emptyMiles * element.paymentSelected[0].emptyMiles;\n\n            if (_this2.settlementData.type === 'driver') {\n              loadteamPay = element.loadedMilesTeam * element.paymentSelected[0].loadedMilesTeam;\n              empTeamPay = element.emptyMilesTeam * element.paymentSelected[0].emptyMilesTeam;\n            }\n\n            element.amount = Number(loadPay) + Number(emPay) + Number(loadteamPay) + Number(empTeamPay);\n            element.paymentSelected = [_this2.ppm];\n          } else if (element.paymentSelected[0].pType === 'pfr') {\n            element.amount = Number(element.paymentSelected[0].flatRate).toFixed(2);\n            element.paymentSelected = [_this2.pfr];\n          } else if (element.paymentSelected[0].pType === 'ppd') {\n            element.amount = element.delivCount * Number(element.paymentSelected[0].deliveryRate);\n            element.paymentselected = [_this2.ppd];\n          }\n        }\n\n        element.amount = Number(element.amount.toFixed(2));\n\n        if (_this2.settlementData.trpData) {\n          for (let k = 0; k < _this2.settlementData.trpData.length; k++) {\n            const element2 = _this2.settlementData.trpData[k];\n\n            if (element2.id === element.tripID) {\n              for (let sp = 0; sp < element2.splitIDs.length; sp++) {\n                const splitID = element2.splitIDs[sp];\n                let arrr = {\n                  selected: true,\n                  trips: {}\n                };\n                element.split.map(mainSp => {\n                  if (mainSp.splitID === splitID) {\n                    let obj = {\n                      splitID: mainSp.splitID,\n                      stlName: mainSp.splitName,\n                      plan: mainSp.plan\n                    };\n                    arrr.trips = obj;\n                  }\n                });\n                element.newSplitArr.push(arrr);\n              }\n            }\n          }\n        }\n\n        if (element.split && element.split.length > 0) {\n          element.split.map(main => {\n            let arrr = {\n              selected: true,\n              splitID: main.splitID,\n              splitName: main.splitName,\n              trips: [],\n              loadedMiles: 0,\n              emptyMiles: 0,\n              loadedMilesTeam: 0,\n              delivCount: 0,\n              emptyMilesTeam: 0,\n              amount: 0\n            };\n\n            if (main.plan) {\n              main.plan.map(c => {\n                if (_this2.settlementData.type === \"driver\" || _this2.settlementData.type === \"carrier\") {\n                  if (main.stlStatus.includes(entStat)) {\n                    if (_this2.settlementData.type === \"driver\") {\n                      element.tripPlanning.map(trp => {\n                        if (c === trp.planID) {\n                          if (_this2.settlementData.entityId === trp.driverID || _this2.settlementData.entityId === trp.coDriverID) {\n                            if (trp.type === 'Delivery') {\n                              arrr.delivCount += 1;\n                            }\n\n                            if (trp.mileType === 'loaded') {\n                              if (trp.coDriverID && trp.driverID) {\n                                arrr.loadedMilesTeam += Number(trp.miles);\n                              } else {\n                                arrr.loadedMiles += Number(trp.miles);\n                              }\n                            } else {\n                              if (trp.coDriverID && trp.driverID) {\n                                arrr.emptyMilesTeam += Number(trp.miles);\n                              } else {\n                                arrr.emptyMiles += Number(trp.miles);\n                              }\n                            }\n\n                            trp.planLoc = _this2.setTripLoc(trp);\n                            arrr.trips.push(trp);\n                          }\n                        }\n                      });\n                    } else if (_this2.settlementData.type === \"carrier\") {\n                      element.tripPlanning.map(trp => {\n                        if (c === trp.planID) {\n                          if (_this2.settlementData.entityId === trp.carrierID) {\n                            if (trp.type === 'Delivery') {\n                              arrr.delivCount += 1;\n                            }\n\n                            if (trp.mileType === 'loaded') {\n                              arrr.loadedMiles += Number(trp.miles);\n                            } else {\n                              arrr.emptyMiles += Number(trp.miles);\n                            }\n\n                            trp.planLoc = _this2.setTripLoc(trp);\n                            arrr.trips.push(trp);\n                          }\n                        }\n                      });\n                    }\n                  }\n                } else if (_this2.settlementData.type === \"owner_operator\") {\n                  let exstPlanIDs = [];\n\n                  for (let index = 0; index < _this2.operatorDriversList.length; index++) {\n                    const drvr = _this2.operatorDriversList[index];\n                    entStat = `${drvr}:false`;\n\n                    if (main.stlStatus.includes(entStat)) {\n                      element.tripPlanning.map(trp => {\n                        if (c === trp.planID) {\n                          if (!exstPlanIDs.includes(trp.planID)) {\n                            exstPlanIDs.push(trp.planID);\n\n                            if (_this2.operatorDriversList.includes(trp.driverID) || _this2.operatorDriversList.includes(trp.coDriverID)) {\n                              if (trp.type === 'Delivery') {\n                                arrr.delivCount += 1;\n                              }\n\n                              if (trp.mileType === 'loaded') {\n                                arrr.loadedMiles += Number(trp.miles);\n                              } else {\n                                arrr.emptyMiles += Number(trp.miles);\n                              }\n\n                              trp.planLoc = _this2.setTripLoc(trp);\n                              arrr.trips.push(trp);\n                            }\n                          }\n                        }\n                      });\n                    }\n                  }\n                }\n              });\n            }\n\n            if (arrr.trips.length > 0) {\n              if (element.paymentSelected[0] && element.paymentSelected[0].pType) {\n                if (element.paymentSelected[0].pType === 'ppm') {\n                  let loadPay1 = 0;\n                  let emPay1 = 0;\n                  let loadteamPay1 = 0;\n                  let empTeamPay1 = 0;\n                  loadPay1 = arrr.loadedMiles * element.paymentSelected[0].loadedMiles;\n                  emPay1 = arrr.emptyMiles * element.paymentSelected[0].emptyMiles;\n\n                  if (_this2.settlementData.type === 'driver') {\n                    loadteamPay1 = arrr.loadedMilesTeam * element.paymentSelected[0].loadedMilesTeam;\n                    empTeamPay1 = arrr.emptyMilesTeam * element.paymentSelected[0].emptyMilesTeam;\n                  }\n\n                  arrr.amount = Number(loadPay1) + Number(emPay1) + Number(loadteamPay1) + Number(empTeamPay1);\n                } else if (element.paymentSelected[0].pType === 'pfr') {\n                  arrr.amount = Number(element.paymentSelected[0].flatRate.toFixed(2));\n                } else if (element.paymentSelected[0].pType === 'ppd') {\n                  arrr.amount = arrr.delivCount * Number(element.paymentSelected[0].deliveryRate);\n                }\n              }\n\n              arrr.amount = Number(arrr.amount.toFixed(2));\n              element.splitArr.push(arrr);\n            }\n\n            if (arrr.trips.length > 0) {\n              element.calSplitArr.push(arrr);\n            }\n          });\n        }\n\n        element.newSplitArr.map(spltArr => {\n          spltArr.trips.sub = [];\n\n          if (spltArr.trips.plan && spltArr.trips.plan.length > 0) {\n            spltArr.trips.plan.map(planID => {\n              element.tripPlanning.map(plan => {\n                if (plan.planID === planID) {\n                  plan.planLoc = _this2.setTripLoc(plan);\n                  spltArr.trips.sub.push(plan);\n                }\n              });\n            });\n\n            if (spltArr.trips.sub.length > 0) {\n              element.subTripCount += spltArr.trips.sub.length;\n            }\n          }\n        });\n      }\n\n      _this2.settledTrips = result;\n\n      if (trpData.length > 0 && _this2.settledTrips.length > 0) {\n        for (const stl of _this2.settledTrips) {\n          for (const trp of trpData) {\n            if (trp.id == stl.tripID) {\n              stl.paymentSelected = trp.paymentSelected;\n              stl.amount = trp.amount;\n            }\n          }\n        }\n      }\n\n      _this2.dummySettledTrips = result;\n      let stlObj = result.reduce((a, b) => {\n        return a[b[\"tripID\"]] = b[\"isDeleted\"] == 1 ? b[\"tripNo\"] + \"  - Deleted\" : b[\"tripNo\"], a;\n      }, {});\n      _this2.tripsObject = _.merge(_this2.tripsObject, stlObj);\n      yield _this2.fetchFuelExpenses();\n    })();\n  }\n\n  remStldTrip(tripID, splitID, index, splitIndex) {\n    let selectedTrip = this.dummySettledTrips[index];\n\n    if (splitID !== \"\" && splitID !== undefined) {\n      this.settledTrips[index].calSplitArr.splice(splitIndex, 1);\n    } else {\n      this.settledTrips.splice(index, 1);\n    }\n\n    if (!this.delTripIds.includes(tripID)) {\n      this.delTripIds.push(tripID);\n      let obj = {\n        tripId: tripID,\n        split: []\n      };\n\n      if (splitID !== \"\" && splitID !== undefined) {\n        obj.split.push(splitID);\n        this.settledTrips[index].newSplitArr.splice(splitIndex, 1);\n\n        if (this.settledTrips[index].newSplitArr.length === 0) {\n          this.settledTrips.splice(index, 1);\n        }\n\n        this.formatRemovedTrip(selectedTrip, splitID, false);\n      } else {\n        selectedTrip.selected = false;\n        this.trips.push(selectedTrip);\n        this.selectedTrip(\"\"); // this.paymentCalculation(this.settledTrips, \"settled\");\n      }\n\n      this.deletedSellmnts.push(obj);\n    } else {\n      this.deletedSellmnts.map(v => {\n        if (v.tripId === tripID) {\n          v.split.push(splitID);\n        }\n      });\n      let delIndex = this.delTripIds.indexOf(tripID);\n      this.formatRemovedTrip(selectedTrip, splitID, true, delIndex);\n      this.settledTrips[index].newSplitArr.splice(splitIndex, 1);\n\n      if (this.settledTrips[index].newSplitArr.length === 0) {\n        this.settledTrips.splice(index, 1);\n      }\n    }\n  }\n\n  formatRemovedTrip(selectedTrip, splitID, isExist, delIndex = \"\") {\n    const element = selectedTrip;\n    element.pickupLocation = \"\";\n    element.dropLocation = \"\";\n    element.carrID = [];\n    let pickCount = 1;\n    let dropCount = 1;\n    element.entityMiles = 0;\n\n    for (let j = 0; j < element.tripPlanning.length; j++) {\n      const plan = element.tripPlanning[j];\n\n      if (this.settlementData.type === \"driver\" || this.settlementData.type === \"carrier\") {\n        if (this.settlementData.entityId === plan.driverID || this.settlementData.entityId === plan.coDriverID || this.settlementData.entityId === plan.carrierID) {\n          element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n          <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n          pickCount++;\n          element.entityMiles += Number(plan.miles);\n        }\n      } else if (this.settlementData.type === \"owner_operator\") {\n        if (this.operatorDriversList.includes(plan.driverID) || this.operatorDriversList.includes(plan.coDriverID)) {\n          element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n          <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n          pickCount++;\n          element.entityMiles += Number(plan.miles);\n        }\n      }\n\n      if (plan.carrierID !== \"\") {\n        if (!element.carrID.includes(plan.carrierID)) {\n          element.carrID.push(plan.carrierID);\n        }\n      }\n    }\n\n    if (isExist) {\n      element.split.map(main => {\n        let arrr = {\n          selected: main.selected,\n          splitID: main.splitID,\n          splitName: main.splitName,\n          trips: []\n        };\n\n        if (main.splitID === splitID) {\n          if (main.plan) {\n            main.plan.map(c => {\n              element.tripPlanning.map(trp => {\n                if (c === trp.planID) {\n                  trp.planLoc = this.setTripLoc(trp);\n                  arrr.trips.push(trp);\n                }\n              });\n            });\n          }\n        }\n\n        if (arrr.trips.length > 0) {\n          element.splitArr.push(arrr);\n        }\n      });\n    } else {\n      element.splitArr = [];\n      element.selected = false;\n      element.subSelected = false;\n      element.indeterminate = false;\n\n      if (element.split && element.split.length > 0) {\n        element.split.map(main => {\n          let arrr = {\n            selected: false,\n            splitID: main.splitID,\n            splitName: main.splitName,\n            trips: []\n          };\n\n          if (main.splitID === splitID) {\n            if (main.plan) {\n              main.plan.map(c => {\n                element.tripPlanning.map(trp => {\n                  if (c === trp.planID) {\n                    trp.planLoc = this.setTripLoc(trp);\n                    arrr.trips.push(trp);\n                  }\n                });\n              });\n            }\n          }\n\n          if (arrr.trips.length > 0) {\n            element.splitArr.push(arrr);\n          }\n        });\n      }\n\n      this.trips.push(selectedTrip);\n    }\n\n    this.resetCal();\n    this.paymentCalculation(this.settledTrips, \"settled\");\n  }\n\n  updateRecord() {\n    if (this.settlementData.paymentTotal <= 0) {\n      this.toaster.error(\"Total Payment should not be zero.\");\n      return false;\n    }\n\n    if (this.settlementData.tripIds.length === 0) {\n      this.toaster.error(\"Please select settlement\");\n      return false;\n    }\n\n    if (this.settlementData.prStart == \"\" || this.settlementData.prStart == null || this.settlementData.prEnd == \"\" || this.settlementData.prEnd == null) {\n      this.toaster.error(\"Please select pay period\");\n      return false;\n    }\n\n    this.submitDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n\n    if (this.settlementData.type === \"owner_operator\") {\n      this.settlementData.miles.drivers.map(v => {\n        delete v.paymentDetails;\n      });\n    }\n\n    this.settlementData.pendingPayment = this.settlementData.finalTotal;\n    this.settlementData[\"deletedFuelEnteries\"] = this.deletedFuelEnteries;\n    this.settlementData[\"delExpEntries\"] = this.deletedExpEntries;\n    this.settlementData[\"delStl\"] = this.deletedSellmnts;\n    this.accountService.putData(`settlement/update/${this.settlementID}`, this.settlementData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Settlement updated successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  fetchCarrierDetails(carrierID) {\n    if (carrierID != undefined) {\n      this.isEntity = false;\n      this.apiService.getData(`contacts/detail/${carrierID}`).subscribe(result => {\n        result.Items[0].data.map(v => {\n          let curKey = Object.keys(v);\n          this.isEntity = true;\n\n          if (this.settlementData.type === \"carrier\") {\n            if (curKey[0] === \"carrierData\") {\n              this.contactDetail = v;\n              this.settlementData.taxObj.carrLocalTax = v.carrierData.lTax;\n              this.settlementData.taxObj.carrFedTax = v.carrierData.fTax;\n              let paymentInfo = this.contactDetail.carrierData;\n              this.setPaymentOption(paymentInfo); //   this.settlementData.paymentInfo.pType = paymentInfo.pType;\n              //   this.settlementData.paymentInfo.lMiles = paymentInfo.lm\n              //     ? paymentInfo.lm\n              //     : 0;\n              //   this.settlementData.paymentInfo.eMiles = paymentInfo.em\n              //     ? paymentInfo.em\n              //     : 0;\n              //   this.settlementData.paymentInfo.pRate = paymentInfo.pRate\n              //     ? paymentInfo.pRate\n              //     : 0;\n              //   this.settlementData.paymentInfo.dRate = paymentInfo.dr\n              //     ? paymentInfo.dr\n              //     : 0;\n\n              if (this.settlementData.paymentSelected.length == 0) {\n                this.pendingInfo = true;\n              } // let payCurr = \"CAD\";\n              // if (paymentInfo.pType === \"Pay Per Mile\") {\n              //   payCurr = paymentInfo.lmCur;\n              // } else if (paymentInfo.pType === \"Pay Per Hour\") {\n              //   payCurr = paymentInfo.pRCurr;\n              // } else if (paymentInfo.pType === \"Pay Per Delivery\") {\n              //   payCurr = paymentInfo.drCur;\n              // }\n              // this.settlementData.currency = payCurr;\n\n\n              if (!this.settlementData.currency || this.pendingInfo) {\n                this.showPaymentPopup();\n              }\n            }\n          } else if (this.settlementData.type === \"owner_operator\") {\n            if (curKey[0] === \"opData\") {\n              this.contactDetail = v;\n              let paymentInfo = this.contactDetail.opData;\n              this.setPaymentOption(paymentInfo); // this.settlementData.paymentInfo.pType = paymentInfo.pType;\n              // this.settlementData.paymentInfo.lMiles = paymentInfo.lm\n              //   ? paymentInfo.lm\n              //   : 0;\n              // this.settlementData.paymentInfo.eMiles = paymentInfo.em\n              //   ? paymentInfo.em\n              //   : 0;\n              // this.settlementData.paymentInfo.pRate = paymentInfo.pRate\n              //   ? paymentInfo.pRate\n              //   : 0;\n              // this.settlementData.paymentInfo.dRate = paymentInfo.dr\n              //   ? paymentInfo.dr\n              //   : 0;\n              // let payCurr = \"CAD\";\n              // if (paymentInfo.pType === \"Pay Per Mile\") {\n              //   payCurr = paymentInfo.lmCur;\n              // } else if (paymentInfo.pType === \"Pay Per Hour\") {\n              //   payCurr = paymentInfo.pRCurr;\n              // } else if (paymentInfo.pType === \"Pay Per Delivery\") {\n              //   payCurr = paymentInfo.drCur;\n              // }\n              // this.settlementData.currency = payCurr;\n\n              if (this.settlementData.paymentSelected.length == 0) {\n                this.pendingInfo = true;\n              }\n\n              if (!this.settlementData.currency || this.pendingInfo) {\n                this.showPaymentPopup();\n              }\n\n              this.isEntity = true;\n            }\n          }\n        });\n      });\n    }\n  }\n\n  fetchOwnerOperatorDrivers(operatorID) {\n    this.apiService.getData(`drivers/getby/operator/${operatorID}`).subscribe(result => {\n      this.searchDisabled = false;\n      let operatorDrivers = [];\n\n      if (result.Items.length === 0) {\n        this.tripMsg = Constants.NO_RECORDS_FOUND;\n      }\n\n      if (result.vehicles) {\n        this.ownerVehicles = result.vehicles;\n      }\n\n      for (let i = 0; i < result.Items.length; i++) {\n        const element = result.Items[i];\n\n        if (!this.settlementID) {\n          const obj = {\n            total: 0,\n            loaded: 0,\n            empty: 0,\n            hours: 0,\n            driverID: element.driverID,\n            paymentOption: {},\n            ownerDeduction: false\n          };\n          element.paymentOption.forEach(element => {\n            if (element.default) {\n              obj.paymentOption = element;\n            }\n          });\n          operatorDrivers.push(element.driverID);\n          this.settlementData.miles.drivers.push(obj);\n        } else {\n          this.settlementData.miles.drivers.map(v => {\n            if (v.driverID === element.driverID) {\n              element.paymentOption.forEach(el => {\n                if (el.default) {\n                  v.paymentOption = el;\n                }\n              });\n              operatorDrivers.push(element.driverID);\n            }\n          });\n        }\n      }\n\n      if (operatorDrivers.length > 0) {\n        this.searchDisabled = true;\n        this.operatorDriversList = operatorDrivers;\n        this.operatorDrivers = encodeURIComponent(JSON.stringify(operatorDrivers));\n        this.fetchTrips();\n      }\n    });\n  }\n\n  searchFnc() {\n    if (this.settlementData.entityId) {\n      this.settlementData.miles = {\n        tripsTotal: 0,\n        driverTotal: 0,\n        tripsLoaded: 0,\n        driverLoaded: 0,\n        tripsEmpty: 0,\n        driverEmpty: 0,\n        tripsTeam: 0,\n        driverHours: 0,\n        teamHours: 0,\n        totalHours: 0,\n        drivers: [],\n        driverLoadedTeam: 0,\n        driverEmptyTeam: 0\n      };\n      this.operatorDrivers = \"\";\n      this.searchDisabled = true;\n      this.tripExpenses = [];\n      this.fuelEnteries = [];\n      this.tripMsg = Constants.FETCHING_DATA;\n\n      if (this.settlementData.type == \"driver\" || this.settlementData.type == \"carrier\") {\n        this.fetchTrips();\n      } else if (this.settlementData.type == \"owner_operator\") {\n        this.fetchOwnerOperatorDrivers(this.settlementData.entityId);\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  resetFormValues() {\n    this.settlementData.entityId = null;\n    this.tripsObject = [];\n    this.resetAlldata();\n  }\n\n  resetAlldata() {\n    this.trips = [];\n    this.settlementData.fuelIds = [];\n    this.settlementData.fuelData = [];\n    this.settlementData.deduction = [];\n    this.settlementData.addition = [];\n    this.settlementData.miles.drivers = [];\n    this.settlementData.miles = {\n      tripsTotal: 0,\n      driverTotal: 0,\n      tripsLoaded: 0,\n      driverLoaded: 0,\n      tripsEmpty: 0,\n      driverEmpty: 0,\n      tripsTeam: 0,\n      driverHours: 0,\n      teamHours: 0,\n      totalHours: 0,\n      drivers: [],\n      driverLoadedTeam: 0,\n      driverEmptyTeam: 0\n    };\n    this.settlementData.fuelAdd = 0;\n    this.settlementData.fuelDed = 0;\n    this.settlementData.additionTotal = 0;\n    this.settlementData.deductionTotal = 0;\n    this.settlementData.taxObj = {\n      gstPrcnt: 0,\n      pstPrcnt: 0,\n      hstPrcnt: 0,\n      gstAmount: 0,\n      pstAmount: 0,\n      hstAmount: 0,\n      carrLocalTax: 0,\n      carrLocalAmount: 0,\n      carrFedTax: 0,\n      carrFedAmount: 0\n    };\n    this.settlementData.paymentSelected = [];\n    this.settlementData.paymentTotal = 0;\n    this.settlementData.taxes = 0;\n    this.settlementData.subTotal = 0;\n    this.settlementData.finalTotal = 0;\n    this.finalTripExpenses = [];\n    this.tripExpenses = [];\n    this.tripMsg = Constants.NO_RECORDS_FOUND;\n    this.isEntity = false;\n    this.driverAdrs = '';\n  }\n\n  calculateTaxes() {\n    if (this.settlementData.taxObj.gstPrcnt > 0) {\n      this.settlementData.taxObj.gstAmount = this.settlementData.taxObj.gstPrcnt * this.settlementData.subTotal / 100;\n    }\n\n    if (this.settlementData.taxObj.pstPrcnt > 0) {\n      this.settlementData.taxObj.pstAmount = this.settlementData.taxObj.pstPrcnt * this.settlementData.subTotal / 100;\n    }\n\n    if (this.settlementData.taxObj.hstPrcnt > 0) {\n      this.settlementData.taxObj.hstAmount = this.settlementData.taxObj.hstPrcnt * this.settlementData.subTotal / 100;\n    }\n\n    this.settlementData.taxes = Number(this.settlementData.taxObj.gstAmount) + Number(this.settlementData.taxObj.pstAmount) + Number(this.settlementData.taxObj.hstAmount);\n    this.settlementData.finalTotal = this.settlementData.subTotal - Number(this.settlementData.taxObj.gstAmount) - Number(this.settlementData.taxObj.pstAmount) - Number(this.settlementData.taxObj.hstAmount);\n\n    if (this.settlementData.finalTotal > 0) {\n      this.submitDisabled = false;\n    } else {\n      this.submitDisabled = true;\n    }\n  }\n\n  deductFromOwnerOperator() {\n    this.settlementData.finalTotal = this.finalPayment;\n\n    for (const element of this.settlementData.miles.drivers) {\n      if (element.ownerDeduction) {\n        this.settlementData.finalTotal -= Number(element.payment);\n        this.settlementData.finalTotal = Number(this.settlementData.finalTotal.toFixed(2));\n      }\n    }\n\n    if (this.settlementData.finalTotal > 0) {\n      this.submitDisabled = false;\n    } else {\n      this.submitDisabled = true;\n    }\n  }\n\n  selSubTrip(tripInd, subTripInd) {\n    let selCount = 0;\n    let subtripCount = 0;\n    this.trips[tripInd].splitArr.map(v => {\n      subtripCount += 1;\n\n      if (v.selected) {\n        selCount++;\n      }\n    });\n\n    if (selCount > 0) {\n      this.trips[tripInd].subSelected = true;\n\n      if (selCount === subtripCount) {\n        // this.trips[tripInd].indeterminate = false;\n        this.trips[tripInd].selected = true;\n      } else {\n        this.trips[tripInd].indeterminate = true;\n        this.trips[tripInd].selected = false;\n      }\n    } else {\n      this.trips[tripInd].subSelected = false;\n      this.trips[tripInd].indeterminate = false;\n    }\n\n    this.resetCal();\n    this.paymentCalculation(this.trips, \"trip\");\n\n    if (this.settledTrips.length > 0) {\n      this.paymentCalculation(this.settledTrips, \"settled\");\n    }\n  }\n\n  subTrpStat(tripIndex) {\n    let data = this.trips[tripIndex];\n    this.trips[tripIndex].indeterminate = false;\n\n    if (data.selected) {\n      this.trips[tripIndex].splitArr.map(v => {\n        v.selected = true;\n      });\n    } else {\n      this.trips[tripIndex].splitArr.map(v => {\n        v.selected = false;\n      });\n    }\n  }\n\n  fetchFuelExpenses() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.vehicleIds.length > 0 && (_this3.settlementData.type === \"driver\" || _this3.settlementData.type === \"owner_operator\")) {\n        if (_this3.showFuel === \"yes\") {\n          _this3.settlementData.fuelAdd = 0;\n          _this3.settlementData.fuelDed = 0;\n\n          _this3.fuelQuery();\n        }\n      } else {\n        _this3.fuelEnteries = [];\n        _this3.settlementData.fuelAdd = 0;\n        _this3.settlementData.fuelDed = 0;\n      }\n    })();\n  }\n\n  fuelQuery() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let veh = encodeURIComponent(JSON.stringify(_this4.vehicleIds));\n      let result = yield _this4.apiService.getData(`fuelEntries/get/vehicle/enteries?vehicle=${veh}&start=${_this4.settlementData.fromDate}&end=${_this4.settlementData.toDate}`).toPromise();\n\n      if (_this4.vehicleIds.length > 0) {\n        _this4.fuelEnteries = result;\n        _this4.fuelEnteries = _this4.fuelEnteries.concat(_this4.dummyDelEntry);\n\n        _this4.fuelEnteries.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (elem) {\n            elem.fuelID = elem.data.fuelID;\n            elem.fuelDate = elem.data.date;\n            elem.unitNumber = _this4.vehicles[elem.unitID];\n            elem.cityName = elem.data.city;\n            elem.locationCountry = elem.data.country;\n            elem.fuelCardNumber = elem.data.cardNo;\n            elem.unitOfMeasure = elem.data.uom;\n            elem.subTotal = elem.data.rBeforeTax ? elem.data.rBeforeTax : elem.data.amt;\n            elem.total = elem.data.amt;\n            elem.retailAmount = elem.data.rAmt;\n            elem.billingCurrency = elem.data.currency;\n            elem.add = false;\n            elem.deduction = false;\n            elem.addDisabled = false;\n            elem.subDisabled = false;\n            elem.type = elem.data.type;\n            elem.convert = false;\n            elem.convertRate = 0;\n            elem.currency = _this4.settlementData.currency;\n\n            if (_this4.settlementData.currency !== elem.billingCurrency && _this4.settlementData.currency !== undefined) {\n              elem.convert = true;\n              let convertedValue;\n\n              if (elem.billingCurrency === \"USD\") {\n                elem.total = elem.retailAmount;\n                convertedValue = yield _this4.currencyConverter(elem.billingCurrency, elem.retailAmount, elem.fuelDate);\n              } else {\n                elem.total = elem.subTotal;\n                convertedValue = yield _this4.currencyConverter(elem.billingCurrency, elem.subTotal, elem.fuelDate);\n              }\n\n              elem.subTotal = convertedValue.result;\n              elem.convertRate = convertedValue.rate;\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n\n        _this4.allFuelsDumm = _this4.fuelEnteries;\n\n        _this4.fuelEnteries.sort(function compare(a, b) {\n          let dateA = new Date(a.fuelDate);\n          let dateB = new Date(b.fuelDate);\n          return dateA - dateB;\n        });\n      } else {\n        _this4.fuelEnteries = [];\n        _this4.settlementData.fuelAdd = 0;\n        _this4.settlementData.fuelDed = 0;\n      }\n    })();\n  }\n\n  selectedFuelEntry() {\n    this.settlementData.fuelAdd = 0;\n    this.settlementData.fuelDed = 0;\n    this.settlementData.fuelIds = [];\n    this.settlementData.fuelData = [];\n\n    for (let i = 0; i < this.fuelEnteries.length; i++) {\n      const element = this.fuelEnteries[i];\n\n      if (element.add) {\n        this.settlementData.fuelAdd += Number(element.subTotal);\n        element.subDisabled = true;\n\n        if (!this.settlementData.fuelIds.includes(element.fuelID)) {\n          this.settlementData.fuelIds.push(element.fuelID);\n          let obj = {\n            fuelID: element.fuelID,\n            actAmount: element.total,\n            amount: Number(element.subTotal),\n            action: \"add\",\n            convert: element.convert,\n            convertRate: element.convertRate,\n            baseCurr: element.billingCurrency\n          };\n          this.settlementData.fuelData.push(obj);\n        }\n      } else {\n        element.subDisabled = false;\n      }\n\n      if (element.deduction) {\n        this.settlementData.fuelDed += Number(element.subTotal);\n        element.addDisabled = true;\n\n        if (!this.settlementData.fuelIds.includes(element.fuelID)) {\n          this.settlementData.fuelIds.push(element.fuelID);\n          let obj = {\n            fuelID: element.fuelID,\n            actAmount: element.total,\n            amount: Number(element.subTotal),\n            action: \"sub\",\n            convert: element.convert,\n            convertRate: element.convertRate,\n            baseCurr: element.billingCurrency\n          };\n          this.settlementData.fuelData.push(obj);\n        }\n      } else {\n        element.addDisabled = false;\n      }\n    }\n\n    if (this.settlementID) {\n      this.preFuelEntriesTotal();\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  fetchSelectedFuelExpenses() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.settlementData.fuelIds.length > 0) {\n        let fuelIDs = encodeURIComponent(JSON.stringify(_this5.settlementData.fuelIds));\n        let result = yield _this5.apiService.getData(`fuelEntries/get/selected/ids?fuel=${fuelIDs}`).toPromise();\n        result.map(k => {\n          k.fuelID = k.data.fuelID;\n          k.fuelDate = k.data.date;\n          k.unitNumber = _this5.vehicles[k.unitID];\n          k.cityName = k.data.city;\n          k.locationCountry = k.data.country;\n          k.fuelCardNumber = k.data.cardNo;\n          k.unitOfMeasure = k.data.uom;\n          k.subTotal = k.data.rBeforeTax ? k.data.rBeforeTax : k.data.amt;\n          k.billingCurrency = k.data.currency;\n          k.type = k.data.type;\n\n          _this5.settlementData.fuelData.map(v => {\n            if (v.fuelID === k.fuelID) {\n              k.action = v.action === \"add\" ? \"Added\" : \"Deducted\";\n\n              if (v.convert) {\n                k.convert = v.convert;\n                k.total = v.actAmount;\n                k.convertRate = v.convertRate;\n                k.currency = _this5.settlementData.currency;\n                k.subTotal = v.amount;\n              } else {\n                k.currency = _this5.settlementData.currency;\n                k.convert = false;\n              }\n            }\n          });\n        });\n        _this5.selectedFuelEnteries = result;\n\n        _this5.selectedFuelEnteries.sort(function compare(a, b) {\n          let dateA = new Date(a.fuelDate);\n          let dateB = new Date(b.fuelDate);\n          return dateA - dateB;\n        });\n      }\n    })();\n  }\n\n  delSelectedFuel(fuelID, index) {\n    // this.prevSelectEntries = [];\n    // remove fuel entries from prev Selected\n    let prevInd = this.prevSelectedIds.indexOf(fuelID);\n    this.prevSelectedIds.splice(prevInd, 1);\n    this.prevSelectEntries.map(v => {\n      if (v.fuelID === fuelID) {\n        let ind = this.prevSelectEntries.indexOf(v);\n        this.prevSelectEntries.splice(ind, 1);\n      }\n    });\n\n    if (!this.deletedFuelEnteries.includes(fuelID)) {\n      this.deletedFuelEnteries.push(fuelID); // let ind = this.settlementData.fuelIds.indexOf(fuelID);\n      // this.settlementData.fuelIds.splice(ind, 1);\n\n      this.settlementData.fuelAdd = 0;\n      this.settlementData.fuelDed = 0;\n      this.settlementData.fuelData.map(v => {\n        if (v.fuelID === fuelID) {\n          let ind = this.settlementData.fuelData.indexOf(v);\n          this.settlementData.fuelData.splice(ind, 1);\n          this.preFuelEntriesTotal();\n        }\n      }); // this.prevSelectEntries = this.settlementData.fuelData;\n      // this.prevSelectedIds = this.settlementData.fuelIds;\n      // this.fuelTotal();\n      // this.settlementData.fuelData = [];\n\n      this.dummyDelEntry.push(this.selectedFuelEnteries[index]);\n      this.fuelEnteries.push(this.selectedFuelEnteries[index]);\n      this.selectedFuelEnteries.splice(index, 1);\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  preFuelEntriesTotal() {\n    this.prevSelectEntries.map(v => {\n      if (v.action === \"add\") {\n        this.settlementData.fuelAdd += Number(v.amount);\n      } else if (v.action === \"sub\") {\n        this.settlementData.fuelDed += Number(v.amount);\n      }\n    });\n    this.prevSelectEntries.map(v => {\n      this.settlementData.fuelData.push(v);\n    });\n    this.prevSelectedIds.map(v => {\n      if (!this.settlementData.fuelIds.includes(v)) {\n        this.settlementData.fuelIds.push(v);\n      }\n    });\n  }\n\n  fuelTotal() {\n    this.settlementData.fuelData.map(v => {\n      if (v.action === \"add\") {\n        this.settlementData.fuelAdd += Number(v.amount);\n      } else if (v.action === \"sub\") {\n        this.settlementData.fuelDed += Number(v.amount);\n      }\n    });\n  }\n\n  assignFuelVehicleIDs(plan) {\n    if (plan.vehicleID) {\n      if (!this.vehicleIds.includes(plan.vehicleID)) {\n        this.vehicleIds.push(plan.vehicleID);\n      }\n    }\n\n    if (plan.assetID.length > 0) {\n      plan.assetID.map(ast => {\n        if (!this.vehicleIds.includes(ast)) {\n          this.vehicleIds.push(ast);\n        }\n      });\n    }\n  }\n\n  checkSearchDisable() {\n    if (this.settlementData.type !== null && this.settlementData.entityId !== null && this.settlementData.fromDate !== null && this.settlementData.toDate !== null) {\n      this.searchDisabled = false;\n    } else {\n      this.searchDisabled = true;\n    }\n  }\n\n  currencyConverter(curr, amount, date) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this6.accountService.getData(`settlement/currency/convert/${curr}/${_this6.settlementData.currency}/${amount}/${date}`).toPromise();\n    })();\n  }\n\n  checkFuelVisibility(event) {\n    this.showFuel = event.target.value;\n\n    if (this.showFuel === \"yes\") {\n      this.fuelQuery();\n    }\n  }\n\n  filterByUnit() {\n    if (this.settlementData.type === \"owner_operator\") {\n      if (this.ownerVehicleID && this.ownerVehicleID.length > 0) {\n        const tripArr = [];\n\n        for (const element of this.dummyTrips) {\n          let flag = false;\n\n          if (element.vehicleIDs && element.vehicleIDs.length > 0) {\n            element.vehicleIDs.map(v => {\n              if (this.ownerVehicleID.includes(v)) {\n                flag = true;\n              }\n            });\n          }\n\n          if (flag) {\n            tripArr.push(element);\n          }\n        }\n\n        const fulArr = [];\n\n        for (const iterator of this.allFuelsDumm) {\n          if (this.ownerVehicleID.includes(iterator.unitID)) {\n            fulArr.push(iterator);\n          }\n        }\n\n        this.trips = tripArr;\n        this.fuelEnteries = fulArr;\n      } else {\n        this.trips = this.dummyTrips;\n        this.fuelEnteries = this.allFuelsDumm;\n      }\n    }\n  }\n\n  showPaymentPopup() {\n    this.pendingInfo = false;\n    $(\"#infoModal\").modal(\"show\");\n  }\n\n  openPaymentModal() {\n    let ngbModalOptions = {\n      keyboard: true,\n      windowClass: \"preview\"\n    };\n    this.modalService.open(this.paymentOptModal, ngbModalOptions);\n  }\n\n};\n\nAddSettlementComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Location\n}, {\n  type: NgbModal\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}, {\n  type: ApiService\n}];\n\nAddSettlementComponent.propDecorators = {\n  paymentOptModal: [{\n    type: ViewChild,\n    args: [\"paymentOptModal\", {\n      static: false\n    }]\n  }],\n  payModal: [{\n    type: ViewChild,\n    args: [\"payModal\", {\n      static: false\n    }]\n  }]\n};\nAddSettlementComponent = __decorate([Component({\n  selector: \"app-add-settlement\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddSettlementComponent);\nexport { AddSettlementComponent };","map":null,"metadata":{},"sourceType":"module"}