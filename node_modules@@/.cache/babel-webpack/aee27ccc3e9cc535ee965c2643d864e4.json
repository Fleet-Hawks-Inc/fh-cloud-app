{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./order-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./order-detail.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { AccountService, ApiService, ListService } from \"../../../../services\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { environment } from \"src/environments/environment\";\nimport { ToastrService } from \"ngx-toastr\";\nimport * as html2pdf from \"html2pdf.js\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { PdfViewerComponent } from \"ng2-pdf-viewer\";\nimport * as moment from \"moment\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { Location } from \"@angular/common\";\nimport { Auth } from \"aws-amplify\";\nlet OrderDetailComponent = class OrderDetailComponent {\n  constructor(apiService, accountService, modalService, domSanitizer, route, toastr, listService, location) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.accountService = accountService;\n    this.modalService = modalService;\n    this.domSanitizer = domSanitizer;\n    this.route = route;\n    this.toastr = toastr;\n    this.listService = listService;\n    this.location = location;\n    this.environment = environment.isFeatureEnabled;\n    this.noLogsMsg = Constants.NO_RECORDS_FOUND;\n    this.carrierEmail = \"\";\n    this.isCopy = false;\n    this.docs = [];\n    this.attachments = [];\n    this.tripDocs = [];\n    this.localPhotos = [];\n    this.uploadedDocs = [];\n    this.selectedItem = \"\";\n    this.consineeData = [];\n    this.shipperData = [];\n    this.Asseturl = this.apiService.AssetUrl;\n    this.shipperReceiversInfos = [];\n    this.totalTax = 0;\n    this.shippersObjects = {};\n    this.receiversObjects = {};\n    this.customersObjects = {};\n    this.totalPickups = 0;\n    this.totalDrops = 0;\n    this.templateList = [\"assets/img/invoice.png\", \"assets/img/invoice.png\"];\n    this.orderDocs = [];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"\");\n    this.pdFile = \"https://vadimdez.github.io/ng2-pdf-viewer/assets/pdf-test.pdf\";\n    this.pageVariable = 1;\n    /**\r\n     * Form props\r\n     */\n\n    this.customerID = \"\";\n    this.orderNumber = \"\";\n    this.orderMode = \"\";\n    this.showInvBtn = false;\n    this.customerName = \"\";\n    this.customerAddress = \"\";\n    this.cityAndState = \"\";\n    this.customerStateName = \"\";\n    this.customerCountryName = \"\";\n    this.customerPhone = \"\";\n    this.customerEmail = \"\";\n    this.customerfax = \"\";\n    this.customerPo = \"\";\n    this.reference = \"\";\n    this.cusConfirmation = \"\"; // creation = '';\n\n    this.createdDate = \"\";\n    this.createdTime = \"\";\n    this.additionalContactName = \"\";\n    this.additionalPhone = \"\";\n    this.additionalEmail = \"\";\n    this.additionalDetails = {\n      sealType: \"\",\n      sealNo: \"\",\n      loadType: {\n        hazMat: false,\n        oversize: false,\n        reefer: false,\n        tanker: false\n      },\n      refeerTemp: {\n        maxTemprature: \"\",\n        maxTempratureUnit: \"\",\n        minTemprature: \"\",\n        minTempratureUnit: \"\"\n      },\n      trailerType: \"\",\n      uploadedDocs: []\n    };\n    this.charges = {\n      freightFee: {\n        amount: 0,\n        currency: \"\",\n        type: \"\"\n      },\n      fuelSurcharge: {\n        amount: 0,\n        currency: \"\",\n        type: \"\"\n      },\n      accessorialFeeInfo: {\n        accessorialFee: [],\n        total: 0\n      },\n      accessorialDeductionInfo: {\n        accessorialDeduction: [],\n        total: 0\n      }\n    };\n    this.discount = {\n      amount: 0,\n      unit: \"\"\n    };\n    this.milesInfo = {\n      calculateBy: \"\",\n      totalMiles: \"\"\n    };\n    this.taxesInfo = [];\n    this.taxesTotal = 0;\n    this.totalCharges = 0;\n    this.advances = 0;\n    this.balance = 0;\n    this.assetTypes = {};\n    this.milesArr = [];\n    this.allPhotos = [];\n    this.carrierID = \"\";\n    this.stateCode = \"\";\n    this.zeroRated = false;\n    this.isInvoice = false;\n    this.vehicles = [];\n    this.assets = [];\n    this.isInvoiced = false;\n    this.isModalShow = false;\n    this.isShow = false;\n    this.generateBtnDisabled = false;\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.invGenStatus = false;\n    this.orderStatus = \"\";\n    this.emailData = {\n      emails: [],\n      isSingle: false\n    };\n    this.subject = \"\";\n    this.hideEdit = false;\n    this.isGenerate = true;\n    this.emailDocs = [];\n    this.invDocs = [];\n    this.newInvDocs = [];\n    this.attachedDocs = [];\n    this.isEmail = false;\n    this.slideConfig = {\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    this.brokerage = {\n      carrierID: \"\",\n      instructions: \"\",\n      amount: \"\",\n      brokerageAmount: \"\",\n      currency: \"\",\n      orderNo: \"\",\n      miles: \"\",\n      today: moment().format(\"YYYY-MM-DD\")\n    };\n    this.carrierData = {\n      name: \"\",\n      email: \"\",\n      address: \"\",\n      phone: \"\"\n    };\n    this.showModal = false;\n    this.showBolModal = false;\n    this.userEmails = [];\n    this.orderInvData = {\n      additionalContact: null,\n      carrierData: {\n        address: \"\",\n        companyName: \"\",\n        phone: \"\",\n        email: \"\",\n        fax: \"\",\n        carrierID: \"\",\n        termsInfo: {\n          logo: \"\",\n          tagLine: \"\",\n          terms: ''\n        }\n      },\n      charges: {\n        accessorialDeductionInfo: {\n          accessorialDeduction: []\n        },\n        accessorialFeeInfo: {\n          accessorialFee: []\n        },\n        freightFee: {\n          amount: 0,\n          currency: \"\",\n          type: \"\"\n        },\n        fuelSurcharge: {\n          amount: 0,\n          currency: \"\",\n          type: \"\"\n        },\n        cusAddressID: \"\",\n        customerID: \"\"\n      },\n      data: [],\n      finalAmount: 0,\n      phone: \"\",\n      subTotal: 0,\n      taxesAmt: 0\n    };\n    this.companyLogoSrc = \"\";\n    this.orderLogs = [];\n    this.recallStatus = false;\n    this.isFlag = true;\n    this.showBtns = false;\n    this.brokerageDisabled = false;\n    this.singleDisabled = true;\n    this.documentsArr = [{\n      id: 1,\n      docName: 'Invoice',\n      value: 'invoice',\n      checked: true,\n      disabled: true\n    }, {\n      id: 2,\n      docName: 'Bill of Lading',\n      value: 'bol',\n      checked: false,\n      disabled: false\n    }, {\n      id: 3,\n      docName: 'Proof of Delivery',\n      value: 'pod',\n      checked: false,\n      disabled: false\n    }, {\n      id: 4,\n      docName: 'Other',\n      value: 'other',\n      checked: false,\n      disabled: false\n    }];\n    this.invDate = '';\n    this.getCurrentUser = /*#__PURE__*/_asyncToGenerator(function* () {\n      let currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.carrierEmail = currentUser.email;\n    });\n    this.today = new Date();\n    this.txnDate = new Date().toISOString().slice(0, 10);\n  }\n\n  ngOnInit() {\n    this.listService.getDocsModalList.subscribe(res => {\n      if (res && res.docType != null && res.docType != '') {\n        if (res.module === 'order') {\n          this.docType = res.docType;\n          this.uploadBolPods(res);\n        }\n      }\n    });\n    this.orderID = this.route.snapshot.params[\"orderID\"];\n    this.fetchOrder();\n    this.fetchInvoiceData();\n    this.fetchOrderLogs();\n    this.getCurrentUser();\n  }\n  /**\r\n   * fetch order data\r\n   */\n\n\n  fetchOrder() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.docs = [];\n\n      _this2.apiService.getData(`orders/detail/${_this2.orderID}`).subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (result) {\n          _this2.newOrderData = result;\n          result = result.Items[0];\n\n          if (result.brkCarrID) {\n            _this2.brokerage.carrierID = result.brkCarrID;\n          }\n\n          if (result.brkIns) {\n            _this2.brokerage.instructions = result.brkIns;\n          }\n\n          if (result.brkAmount) {\n            _this2.brokerage.brokerageAmount = result.brkAmount;\n          }\n\n          if (result.recall) {\n            _this2.recallStatus = true;\n          }\n\n          _this2.brokerage.orderNo = result.orderNumber;\n          _this2.brokerage.miles = result.milesInfo.totalMiles;\n          _this2.brokerage.currency = result.charges.freightFee.currency;\n\n          if (result.stateTaxID != undefined && result.stateTaxID != \"\") {\n            _this2.stateCode = result.stateCode;\n          }\n\n          if (result.tripData) {\n            _this2.tripData = result.tripData;\n          }\n\n          _this2.zeroRated = result.zeroRated;\n          _this2.carrierID = result.carrierID;\n          _this2.customerID = result.customerID;\n\n          if (result.invData && result.invData.invID && result.invData.invID != '') {\n            _this2.invoiceID = result.invData.invID;\n            _this2.invDate = yield _this2.getInvDate(_this2.invoiceID);\n          }\n\n          if (result.invoiceGenerate || result.orderStatus === \"created\" || result.orderStatus === \"confirmed\") {\n            _this2.hideEdit = true;\n            _this2.isGenerate = false;\n          }\n\n          if (result.orderStatus === 'delivered' || result.recall) {\n            _this2.hideEdit = false;\n          }\n\n          _this2.orderStatus = result.orderStatus;\n          _this2.cusAddressID = result.cusAddressID;\n          _this2.customerAddress = result.customerAddress;\n          _this2.customerName = result.customerName;\n          _this2.cityAndState = result.cityAndState;\n          _this2.customerCountryName = result.customerCountryName;\n          _this2.customerPhone = result.customerPhone;\n          _this2.customerEmail = result.customerEmail;\n          _this2.showInvBtn = true;\n          _this2.reference = result.reference;\n          _this2.cusConfirmation = result.cusConfirmation == 'NA' ? '' : result.cusConfirmation;\n          _this2.createdDate = result.createdDate;\n          _this2.createdTime = result.timeCreated;\n\n          if (result.additionalContact != null && result.additionalContact.label != undefined) {\n            _this2.additionalContactName = result.additionalContact.label;\n          } else {\n            _this2.additionalContactName = result.additionalContact;\n          }\n\n          _this2.additionalPhone = result.phone;\n          _this2.additionalEmail = result.email;\n          _this2.isInvoiced = result.invoiceGenerate;\n          _this2.shipperReceiversInfos = result.shippersReceiversInfo;\n\n          for (let u = 0; u < _this2.shipperReceiversInfos.length; u++) {\n            const element = _this2.shipperReceiversInfos[u];\n            _this2.additionalDetails.sealType = result.additionalDetails.sealType ? result.additionalDetails.sealType.replace(\"_\", \" \") : \"-\";\n            _this2.additionalDetails.sealNo = result.additionalDetails.sealNo;\n            _this2.additionalDetails.loadType = result.additionalDetails.loadType;\n            _this2.additionalDetails.refeerTemp = result.additionalDetails.refeerTemp;\n            _this2.additionalDetails.trailerType = result.additionalDetails.trailerType ? result.additionalDetails.trailerType.replace(\"_\", \" \") : \"-\";\n            _this2.additionalDetails.uploadedDocs = result.additionalDetails.uploadedDocs;\n            _this2.charges = result.charges;\n            _this2.discount = result.discount;\n            _this2.milesInfo = result.milesInfo;\n            _this2.taxesInfo = result.taxesInfo;\n            _this2.orderNumber = result.orderNumber;\n            _this2.orderMode = result.orderMode;\n            _this2.subject = `Invoice: ${_this2.orderMode} - ${_this2.orderNumber}`;\n            _this2.milesArr = [];\n          }\n\n          for (let i = 0; i < _this2.taxesInfo.length; i++) {\n            if (_this2.taxesInfo[i].amount) {\n              _this2.taxesTotal = _this2.taxesTotal + _this2.taxesInfo[i].amount;\n            }\n          }\n\n          _this2.milesArr = result.shippersReceiversInfo;\n          let freightFee = isNaN(_this2.charges.freightFee.amount) ? 0 : _this2.charges.freightFee.amount;\n          let fuelSurcharge = isNaN(_this2.charges.fuelSurcharge.amount) ? 0 : _this2.charges.fuelSurcharge.amount;\n          let accessorialFeeInfo = isNaN(_this2.charges.accessorialFeeInfo.total) ? 0 : _this2.charges.accessorialFeeInfo.total;\n          let accessorialDeductionInfo = isNaN(_this2.charges.accessorialDeductionInfo.total) ? 0 : _this2.charges.accessorialDeductionInfo.total;\n          let totalAmount = parseFloat(freightFee) + parseFloat(fuelSurcharge) + parseFloat(accessorialFeeInfo) - parseFloat(accessorialDeductionInfo);\n          _this2.taxableAmount = totalAmount * parseInt(_this2.taxesTotal) / 100;\n\n          if (!_this2.zeroRated) {\n            _this2.totalCharges = totalAmount + _this2.taxableAmount;\n          } else {\n            _this2.totalCharges = totalAmount;\n          } // this.advances = result.advance;\n          // this.balance = this.totalCharges - this.advances;\n\n\n          _this2.balance = _this2.totalCharges;\n\n          if (result.attachments != undefined && result.attachments.length > 0) {\n            _this2.attachments = result.attachments.map(x => ({\n              docPath: `${x}`,\n              name: x,\n              ext: x.split(\".\")[1]\n            }));\n          }\n\n          if (result.tripDocs != undefined && result.tripDocs.length > 0) {\n            _this2.tripDocs = result.tripDocs.map(x => ({\n              imgPath: `${x.urlPath}`,\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            }));\n          }\n\n          if (result.uploadedDocs !== undefined && result.uploadedDocs.length > 0) {\n            yield _this2.showDocs(result.uploadedDocs);\n          }\n\n          if (result.customerEmail && result.customerEmail != '') {\n            _this2.emailData.emails.push({\n              label: result.customerEmail\n            });\n          }\n\n          _this2.emailDocs = [..._this2.docs, ..._this2.attachments, ..._this2.tripDocs];\n          _this2.invStatus = result.invStatus ? result.invStatus : 'NA';\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(), err => {});\n    })();\n  }\n\n  showDocs(documents) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.docs = [];\n      _this3.newInvDocs = [];\n      _this3.emailDocs = [];\n      documents.forEach(x => {\n        if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n          const obj = {\n            imgPath: `${x.urlPath}`,\n            docPath: `${x.urlPath}`,\n            displayName: x.displayName,\n            name: x.storedName,\n            ext: x.storedName.split(\".\")[1],\n            type: x.type ? x.type : 'other'\n          };\n\n          _this3.docs.push(obj);\n        } else {\n          const obj = {\n            imgPath: \"assets/img/icon-pdf.png\",\n            docPath: `${x.urlPath}`,\n            displayName: x.displayName,\n            name: x.storedName,\n            ext: x.storedName.split(\".\")[1],\n            type: x.type ? x.type : 'other'\n          };\n\n          _this3.docs.push(obj);\n        }\n      });\n      _this3.newInvDocs = [..._this3.newInvDocs, ..._this3.docs];\n      _this3.emailDocs = [..._this3.docs, ..._this3.attachments, ..._this3.tripDocs];\n    })();\n  }\n\n  openEmailInv() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let ngbModalOptions = {\n        keyboard: false,\n        backdrop: \"static\",\n        windowClass: \"order-send__email\"\n      };\n      _this4.emailCopyRef = _this4.modalService.open(_this4.emailInvoiceModal, ngbModalOptions);\n    })();\n  }\n\n  sendEmailInv() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let newDocs = [];\n\n      for (const item of _this5.emailDocs) {\n        newDocs.push({\n          filename: item.displayName,\n          path: item.docPath\n        });\n      }\n\n      const data = {\n        docs: newDocs,\n        emails: _this5.userEmails,\n        subject: _this5.subject,\n        sendCopy: _this5.isCopy,\n        isSingle: _this5.emailData.isSingle\n      };\n      let result = yield _this5.apiService.getData(`orders/emailInvoice/${_this5.orderID}?data=${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n      if (result) {\n        // this.emailRef.close();\n        _this5.emailCopyRef.close();\n\n        _this5.toastr.success(\"Email send successfully!\");\n\n        _this5.isEmail = false;\n        _this5.userEmails = [];\n\n        if (_this5.emailData.emails.length > 0) {\n          _this5.emailData.emails = [];\n\n          _this5.emailData.emails.push({\n            label: _this5.customerEmail\n          });\n        }\n\n        _this5.subject = `Invoice: ${_this5.orderMode} - ${_this5.orderNumber}`;\n      } else {\n        _this5.isEmail = false;\n      }\n    })();\n  }\n\n  showInv() {\n    let ngbModalOptions = {\n      keyboard: true,\n      windowClass: \"preview--invoice\"\n    };\n    this.previewRef = this.modalService.open(this.previewInvoiceModal, ngbModalOptions);\n    this.newInvDocs = this.invDocs;\n  }\n\n  addEmails() {\n    this.isFlag = true;\n    this.isEmail = true;\n\n    if (this.emailData.emails.length === 0) {\n      this.toastr.error(\"Please enter at least one email\");\n      this.isEmail = false;\n      return;\n    }\n\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    this.emailData.emails.forEach(elem => {\n      let result = re.test(String(elem.label).toLowerCase());\n\n      if (!result) {\n        this.toastr.error(\"Please enter valid email(s)\");\n        this.isFlag = false;\n        this.isEmail = false;\n        return;\n      } else {\n        if (!this.userEmails.includes(elem.label)) {\n          this.userEmails.push(elem.label);\n        }\n      }\n    });\n\n    if (this.subject == \"\") {\n      this.toastr.error(\"Please enter subject\");\n      this.isEmail = false;\n      return;\n    }\n\n    if (this.isFlag) {\n      this.sendEmailInv();\n    }\n  }\n\n  sendEmailOnly() {\n    this.isEmail = true;\n    this.sendEmailInv();\n  }\n\n  generate() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.isShow = true;\n      var data = document.getElementById(\"print_wrap\");\n      html2pdf(data, {\n        margin: [0.5, 0.3, 0.5, 0.3],\n        pagebreak: {\n          mode: 'avoid-all',\n          before: \"print_wrap\"\n        },\n        filename: \"invoice.pdf\",\n        image: {\n          type: \"jpeg\",\n          quality: 0.98\n        },\n        html2canvas: {\n          dpi: 300,\n          letterRendering: true,\n          allowTaint: true,\n          useCORS: true\n        },\n        jsPDF: {\n          unit: \"in\",\n          format: \"a4\",\n          orientation: \"portrait\"\n        }\n      });\n\n      _this6.previewRef.close();\n\n      _this6.docSelRef.close();\n\n      _this6.invDocs = _this6.attachedDocs;\n    })();\n  }\n\n  openDocModal() {\n    let obj = {\n      type: 'order',\n      docLength: this.docs.length\n    };\n    this.listService.openDocTypeMOdal(obj);\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n  generatePDF() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.isShow = true; // await this.saveInvoice();\n      // await this.invoiceGenerated();\n      // await this.fetchOrder();\n\n      _this7.generateBtnDisabled = true;\n      yield _this7.saveInvoice();\n    })();\n  }\n\n  downloadPdf() {\n    var data = document.getElementById(\"print_wrap\");\n    html2pdf(data, {\n      margin: [0.5, 0.3, 0.5, 0.3],\n      pagebreak: {\n        mode: 'avoid-all',\n        before: \"print_wrap\"\n      },\n      filename: \"invoice.pdf\",\n      image: {\n        type: \"jpeg\",\n        quality: 0.98\n      },\n      html2canvas: {\n        dpi: 300,\n        letterRendering: true,\n        allowTaint: true,\n        useCORS: true\n      },\n      jsPDF: {\n        unit: \"in\",\n        format: \"a4\",\n        orientation: \"portrait\"\n      }\n    });\n    this.previewRef.close();\n  }\n\n  openDocumentModal(type) {\n    this.printBtnType = type;\n\n    if (this.docs.length > 0) {\n      let ngbModalOptions = {\n        keyboard: false,\n        backdrop: \"static\",\n        windowClass: \"docs-selection__main\"\n      };\n      this.docSelRef = this.modalService.open(this.documentSelectionModal, ngbModalOptions);\n    }\n  }\n\n  documentSelection() {\n    let types = [];\n    this.documentsArr.filter(x => x.checked).map(x => {\n      if (!types.includes(x.value)) {\n        types.push(x.value);\n      }\n    });\n\n    if (types.length > 1) {\n      this.singleDisabled = false;\n    } else {\n      this.singleDisabled = true;\n    }\n\n    this.newInvDocs = this.attachedDocs.filter(function (doc) {\n      return types.indexOf(doc.type) > -1;\n    });\n  }\n\n  pageRendered(event) {\n    this.pdfComponent.pdfViewer.currentScaleValue = \"page-fit\";\n  }\n\n  getInvDate(orderID) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this8.accountService.getData(`order-invoice/detail/invDate/${orderID}`).toPromise();\n\n      if (result && result.length > 0 && result[0].txnDate) {\n        return result[0].txnDate;\n      }\n    })();\n  }\n\n  saveInvoice() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      // this.generateBtnDisabled = true;\n      _this9.invoiceData[`transactionLog`] = [];\n      _this9.invoiceData[`invNo`] = _this9.orderNumber;\n      _this9.invoiceData[`invType`] = \"orderInvoice\";\n      _this9.invoiceData[`invStatus`] = \"open\";\n      _this9.invoiceData[`amountReceived`] = 0;\n      _this9.invoiceData[`amountPaid`] = 0;\n      _this9.invoiceData[`fullPayment`] = false;\n      _this9.invoiceData[`balance`] = _this9.totalCharges;\n      _this9.invoiceData[`txnDate`] = _this9.txnDate;\n      _this9.invoiceData[`orderID`] = _this9.orderID;\n      _this9.invoiceData[`cusConfirmation`] = _this9.cusConfirmation;\n      _this9.invoiceData[`zeroRated`] = _this9.zeroRated;\n      _this9.invoiceData[`currency`] = _this9.brokerage.currency;\n\n      _this9.accountService.postData(`order-invoice`, _this9.invoiceData).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n            _this9.errors[val.context.key] = val.message;\n          })).subscribe({\n            complete: () => {\n              _this9.generateBtnDisabled = false; // this.throwErrors();\n            },\n            error: () => {\n              _this9.generateBtnDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          _this9.isInvoiced = true;\n\n          _this9.toastr.success(\"Invoice Added Successfully.\");\n\n          _this9.downloadPdf();\n\n          _this9.isGenerate = false;\n          $(\"#previewInvoiceModal\").modal(\"hide\");\n        }\n      });\n    })();\n  } // async invoiceGenerated() {\n  //   this.invGenStatus = true;\n  //   let result = await this.apiService\n  //     .getData(\n  //       `orders/invoiceStatus/${this.orderID}/${this.orderNumber}/${this.invGenStatus}`\n  //     )\n  //     .toPromise();\n  //   this.isInvoice = result.Attributes.invoiceGenerate;\n  // }\n\n\n  previewModal() {\n    $(\"#templateSelectionModal\").modal(\"hide\");\n    setTimeout(function () {\n      $(\"#previewInvoiceModal\").modal(\"show\");\n    }, 500);\n  } // delete uploaded images and documents\n\n\n  delete(type, name, index) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      // let record = {\n      //   eventID: this.orderID,\n      //   type: type,\n      //   name: name,\n      //   date: this.createdDate,\n      //   time: this.createdTime\n      // }\n      if (confirm(\"Are you sure you want to delete?\") === true) {\n        yield _this10.apiService.deleteData(`orders/uploadDelete/${_this10.orderID}/${name}/${type}`).toPromise();\n\n        if (type == \"attachment\") {\n          _this10.attachments.splice(index, 1);\n        } else {\n          _this10.docs.splice(index, 1);\n\n          _this10.newInvDocs.splice(index, 1);\n        }\n\n        _this10.toastr.success(\"Document deleted successfully\");\n      }\n    })();\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = \"\";\n\n    if (ext == \"doc\" || ext == \"docx\" || ext == \"xlsx\") {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"https://docs.google.com/viewer?url=\" + val + \"&embedded=true\");\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  }\n\n  uploadBolPods(res) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < res.documents.length; i++) {\n        const element = res.documents[i];\n        let name = element.name.split(\".\");\n        let ext = name[name.length - 1];\n\n        if (ext != \"jpg\" && ext != \"jpeg\" && ext != \"png\" && ext != \"pdf\") {\n          $(\"#bolUpload\").val(\"\");\n\n          _this11.toastr.error(\"Only image and pdf files are allowed\");\n\n          return false;\n        }\n      }\n\n      for (let i = 0; i < res.documents.length; i++) {\n        _this11.uploadedDocs.push(res.documents[i]);\n      } // create form data instance\n\n\n      const formData = new FormData(); // append photos if any\n\n      for (let i = 0; i < _this11.uploadedDocs.length; i++) {\n        formData.append(\"uploadedDocs\", _this11.uploadedDocs[i]);\n      }\n\n      let result = yield _this11.apiService.postData(`orders/uploadDocs/${_this11.orderID}/${_this11.docType}`, formData, true).toPromise();\n\n      if (result && result.length > 0) {\n        yield _this11.showDocs(result);\n      }\n    })();\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      let files = [];\n      _this12.uploadedDocs = [];\n      files = [...event.target.files];\n      let totalCount = _this12.docs.length + files.length;\n\n      if (totalCount > 4) {\n        _this12.uploadedDocs = [];\n        $(\"#bolUpload\").val(\"\");\n\n        _this12.toastr.error(\"Only 4 documents can be uploaded\");\n\n        return false;\n      } else {\n        for (let i = 0; i < files.length; i++) {\n          const element = files[i];\n          let name = element.name.split(\".\");\n          let ext = name[name.length - 1];\n\n          if (ext != \"jpg\" && ext != \"jpeg\" && ext != \"png\" && ext != \"pdf\") {\n            $(\"#bolUpload\").val(\"\");\n\n            _this12.toastr.error(\"Only image and pdf files are allowed\");\n\n            return false;\n          }\n        }\n\n        for (let i = 0; i < files.length; i++) {\n          _this12.uploadedDocs.push(files[i]);\n        } // create form data instance\n\n\n        const formData = new FormData(); // append photos if any\n\n        for (let i = 0; i < _this12.uploadedDocs.length; i++) {\n          formData.append(\"uploadedDocs\", _this12.uploadedDocs[i]);\n        }\n\n        let result = yield _this12.apiService.postData(`orders/uploadDocs/${_this12.orderID}`, formData, true).toPromise();\n        _this12.invDocs = [];\n        _this12.uploadedDocs = [];\n\n        if (result.length > 0) {\n          result.forEach(x => {\n            let obj = {};\n\n            if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n              obj = {\n                imgPath: `${x.urlPath}`,\n                docPath: `${x.urlPath}`,\n                displayName: x.displayName,\n                name: x.storedName,\n                ext: x.storedName.split(\".\")[1],\n                type: x.type ? x.type : 'other'\n              };\n            } else {\n              obj = {\n                imgPath: \"assets/img/icon-pdf.png\",\n                docPath: `${x.urlPath}`,\n                displayName: x.displayName,\n                name: x.storedName,\n                ext: x.storedName.split(\".\")[1],\n                type: x.type ? x.type : 'other'\n              };\n            }\n\n            _this12.invDocs.push(obj);\n          });\n        }\n\n        _this12.attachedDocs = _this12.invDocs;\n        _this12.newInvDocs = _this12.invDocs;\n\n        _this12.toastr.success(\"BOL/POD uploaded successfully\");\n\n        _this12.uploadBol.nativeElement.value = \"\";\n        yield _this12.fetchOrder();\n      }\n    })();\n  }\n\n  setSrcValue() {}\n\n  caretClickShipper(i, j) {\n    if ($(\"#shipperArea-\" + i + \"-\" + j).children(\"i\").hasClass(\"fa-caret-right\")) {\n      $(\"#shipperArea-\" + i + \"-\" + j).children(\"i\").removeClass(\"fa-caret-right\");\n      $(\"#shipperArea-\" + i + \"-\" + j).children(\"i\").addClass(\"fa-caret-down\");\n    } else {\n      $(\"#shipperArea-\" + i + \"-\" + j).children(\"i\").addClass(\"fa-caret-right\");\n      $(\"#shipperArea-\" + i + \"-\" + j).children(\"i\").removeClass(\"fa-caret-down\");\n    }\n  }\n\n  caretClickReceiver(i, j) {\n    if ($(\"#receiverArea-\" + i + \"-\" + j).children(\"i\").hasClass(\"fa-caret-right\")) {\n      $(\"#receiverArea-\" + i + \"-\" + j).children(\"i\").removeClass(\"fa-caret-right\");\n      $(\"#receiverArea-\" + i + \"-\" + j).children(\"i\").addClass(\"fa-caret-down\");\n    } else {\n      $(\"#receiverArea-\" + i + \"-\" + j).children(\"i\").addClass(\"fa-caret-right\");\n      $(\"#receiverArea-\" + i + \"-\" + j).children(\"i\").removeClass(\"fa-caret-down\");\n    }\n  }\n\n  fetchInvoiceData() {\n    this.apiService.getData(`orders/invoice/${this.orderID}`).subscribe(result => {\n      this.invoiceData = result[0];\n      this.orderInvData = result[0];\n      this.carrierDetails = result[0].carrierData;\n      this.isInvoice = true;\n\n      if (this.orderInvData.carrierData.termsInfo.logo && this.orderInvData.carrierData.termsInfo.logo != \"\") {\n        this.companyLogoSrc = `${this.orderInvData.carrierData.termsInfo.logo}`;\n      }\n\n      if (this.invoiceData.assets != undefined) {\n        this.assets = this.invoiceData.assets;\n      }\n\n      if (this.invoiceData.vehicles != undefined) {\n        this.vehicles = this.invoiceData.vehicles;\n      }\n\n      if (result[0].uploadedDocs !== undefined && result[0].uploadedDocs.length > 0) {\n        result[0].uploadedDocs.forEach(x => {\n          let obj = {};\n\n          if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n            obj = {\n              imgPath: `${x.urlPath}`,\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1],\n              type: x.type ? x.type : 'other'\n            };\n          } else {\n            obj = {\n              imgPath: \"assets/img/icon-pdf.png\",\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1],\n              type: x.type ? x.type : 'other'\n            };\n          }\n\n          this.invDocs.push(obj);\n        });\n      }\n\n      this.attachedDocs = this.invDocs;\n      this.newInvDocs = this.invDocs;\n      this.showBtns = true;\n    });\n  }\n\n  downloadBrokeragePdf() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this13.fetchCarrierDetails();\n      _this13.showModal = true;\n      let data = {\n        carrierData: _this13.carrierData,\n        brokerage: _this13.brokerage,\n        orderData: _this13.orderInvData,\n        showModal: _this13.showModal,\n        companyLogo: _this13.companyLogoSrc,\n        carrierEmail: _this13.carrierEmail,\n        orderID: _this13.orderID,\n        type: \"detail\"\n      };\n\n      _this13.listService.triggerBrokeragePdf(data);\n    })();\n  }\n\n  fetchCarrierDetails() {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      _this14.brokerageDisabled = true;\n      let result = yield _this14.apiService.getData(`contacts/detail/${_this14.brokerage.carrierID}`).toPromise();\n      result = result.Items[0];\n      _this14.carrierData.name = result.cName;\n      _this14.carrierData.email = result.workEmail;\n      _this14.carrierData.phone = result.workPhone;\n\n      if (result.adrs[0].manual) {\n        if (result.adrs[0].add1 !== \"\") {\n          _this14.carrierData.address = `${result.adrs[0].add1} ${result.adrs[0].add2} ${result.adrs[0].ctyName}, ${result.adrs[0].sName}, ${result.adrs[0].cName}`;\n        }\n      } else {\n        _this14.carrierData.address = result.adrs[0].userLoc;\n      }\n\n      _this14.brokerageDisabled = false;\n    })();\n  }\n\n  downloadBolPdf() {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this15.fetchBOLDetails();\n      _this15.showBolModal = true;\n      let data = {\n        orderData: result.shipmentsData ? result.shipmentsData : [],\n        showModal: _this15.showBolModal,\n        companyLogo: _this15.companyLogoSrc,\n        assets: result.assets ? result.assets : [],\n        drivers: result.drivers ? result.drivers : [],\n        vehicles: result.vehicles ? result.vehicles : [],\n        finalAmount: result.finalAmount,\n        carrierData: _this15.carrierDetails,\n        orderNumber: _this15.orderNumber,\n        date: _this15.today\n      };\n\n      _this15.listService.triggerBolPdf(data);\n    })();\n  }\n\n  fetchOrderLogs() {\n    this.apiService.getData(`auditLogs/details/${this.orderID}`).subscribe(res => {\n      this.orderLogs = res.Items;\n\n      if (this.orderLogs.length > 0) {\n        this.orderLogs.map(k => {\n          k.dateAndTime = `${k.createdDate} ${k.createdTime}`;\n\n          if (k.eventParams.userName !== undefined) {\n            const newString = k.eventParams.userName.split(\"_\");\n            k.userFirstName = newString[0];\n            k.userLastName = newString[1];\n          }\n\n          if (k.eventParams.number !== undefined) {\n            k.entityNumber = k.eventParams.number;\n          }\n\n          if (k.eventParams.name !== undefined) {\n            if (k.eventParams.name.includes(\"_\")) {\n              const newString = k.eventParams.name.split(\"_\");\n              k.firstName = newString[0];\n              k.lastName = newString[1];\n            }\n          }\n        });\n        this.orderLogs.sort((a, b) => {\n          return new Date(b.dateAndTime).valueOf() - new Date(a.dateAndTime).valueOf();\n        });\n      }\n    });\n  }\n\n  fetchBOLDetails() {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this16.apiService.getData(`orders/get/bol/data/${_this16.orderID}`).toPromise();\n      return result;\n    })();\n  }\n\n  sendEmailCopy(value) {\n    if (value) {\n      this.isCopy = true;\n    } else {\n      this.isCopy = false;\n    }\n  }\n\n};\n\nOrderDetailComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: AccountService\n}, {\n  type: NgbModal\n}, {\n  type: DomSanitizer\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: ListService\n}, {\n  type: Location\n}];\n\nOrderDetailComponent.propDecorators = {\n  previewInvoiceModal: [{\n    type: ViewChild,\n    args: [\"previewInvoiceModal\", {\n      static: true\n    }]\n  }],\n  emailInvoiceModal: [{\n    type: ViewChild,\n    args: [\"emailInvoiceModal\", {\n      static: true\n    }]\n  }],\n  documentSelectionModal: [{\n    type: ViewChild,\n    args: [\"documentSelectionModal\", {\n      static: true\n    }]\n  }],\n  emailInvoice: [{\n    type: ViewChild,\n    args: [\"emailInvoice\", {\n      static: true\n    }]\n  }],\n  uploadBol: [{\n    type: ViewChild,\n    args: [\"uploadBol\", {\n      static: true\n    }]\n  }],\n  pdfComponent: [{\n    type: ViewChild,\n    args: [PdfViewerComponent, {\n      static: false\n    }]\n  }]\n};\nOrderDetailComponent = __decorate([Component({\n  selector: \"app-order-detail\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OrderDetailComponent);\nexport { OrderDetailComponent };","map":null,"metadata":{},"sourceType":"module"}