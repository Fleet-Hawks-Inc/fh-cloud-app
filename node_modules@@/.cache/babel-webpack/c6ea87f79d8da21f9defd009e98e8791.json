{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-vendor-payment.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-vendor-payment.component.css\";\nimport { Component } from \"@angular/core\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport * as moment from \"moment\";\nimport { Location } from \"@angular/common\";\nimport { ListService } from \"src/app/services/list.service\";\nimport { AccountService } from \"src/app/services/account.service\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { ToastrService } from \"ngx-toastr\";\nlet AddVendorPaymentComponent = class AddVendorPaymentComponent {\n  constructor(listService, accountService, location, toaster) {\n    this.listService = listService;\n    this.accountService = accountService;\n    this.location = location;\n    this.toaster = toaster;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.paymentData = {\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      vendorID: null,\n      refNo: \"\",\n      currency: \"CAD\",\n      accountID: null,\n      payMode: null,\n      payModeNo: \"\",\n      payModeDate: null,\n      billIds: [],\n      billData: [],\n      advIds: [],\n      advData: [],\n      total: {\n        subTotal: 0,\n        advTotal: 0,\n        finalTotal: 0\n      }\n    };\n    this.vendors = [];\n    this.paymentMode = [{\n      name: \"Cash\",\n      value: \"cash\"\n    }, {\n      name: \"Cheque\",\n      value: \"cheque\"\n    }, {\n      name: \"EFT\",\n      value: \"eft\"\n    }, {\n      name: \"Credit Card\",\n      value: \"credit_card\"\n    }, {\n      name: \"Debit Card\",\n      value: \"debit_card\"\n    }, {\n      name: \"Demand Draft\",\n      value: \"demand_draft\"\n    }];\n    this.paymentLabel = \"\";\n    this.bills = [];\n    this.advancePayments = [];\n    this.submitDisabled = false;\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n  }\n\n  ngOnInit() {\n    this.listService.fetchVendors();\n    let vendorList = new Array();\n    this.getValidVendors(vendorList);\n    this.vendors = vendorList;\n    this.listService.fetchChartAccounts();\n    this.accounts = this.listService.accountsList;\n  }\n\n  getValidVendors(vendorList) {\n    let ids = [];\n    this.listService.vendorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          vendorList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  showPaymentFields(type) {\n    if (type === \"credit_card\") {\n      this.paymentLabel = \"Credit Card\";\n    } else if (type === \"debit_card\") {\n      this.paymentLabel = \"Debit Card\";\n    } else if (type === \"demand_draft\") {\n      this.paymentLabel = \"Demand Draft\";\n    } else if (type === \"eft\") {\n      this.paymentLabel = \"EFT\";\n    } else if (type === \"cash\") {\n      this.paymentLabel = \"Cash\";\n    } else if (type === \"cheque\") {\n      this.paymentLabel = \"Cheque\";\n    }\n\n    this.paymentData.payModeNo = \"\";\n    this.paymentData.payModeDate = null;\n  }\n\n  fetchVendorData() {\n    this.bills = [];\n    this.advancePayments = [];\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.dataMessageAdv = Constants.FETCHING_DATA;\n    this.fetchVendorBills();\n    this.fetchVendorAdvance();\n  }\n\n  fetchVendorBills() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.paymentData.vendorID) {\n        let result = yield _this.accountService.getData(`bills/vendor/all/${_this.paymentData.vendorID}?currency=${_this.paymentData.currency}`).toPromise();\n\n        if (result.length === 0) {\n          _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        result.map(v => {\n          v.selected = false;\n          v.prevPaidAmount = Number(v.total.finalTotal) - Number(v.balance);\n          v.paidStatus = false;\n          v.fullPayment = false;\n          v.paidAmount = 0;\n          v.newStatus = v.status.replace(\"_\", \" \");\n        });\n        _this.bills = result;\n      } else {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n    })();\n  }\n\n  fetchVendorAdvance() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.paymentData.vendorID) {\n        let result = yield _this2.accountService.getData(`advance/allPayments/entity/${_this2.paymentData.vendorID}/${_this2.paymentData.currency}`).toPromise();\n\n        if (result.length === 0) {\n          _this2.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n        }\n\n        result.map(v => {\n          v.selected = false;\n          v.prevPaidAmount = Number(v.amount) - Number(v.pendingPayment);\n          v.paidStatus = false;\n          v.fullPayment = false;\n          v.paidAmount = 0;\n          v.newStatus = v.status.replace(\"_\", \" \");\n        });\n        _this2.advancePayments = result;\n      } else {\n        _this2.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n      }\n    })();\n  }\n\n  assignFullPayment(index, data) {\n    if (data.fullPayment) {\n      this.bills[index].paidAmount = this.bills[index].balance;\n      this.bills[index].status = \"deducted\";\n    } else {\n      this.bills[index].paidAmount = 0;\n      this.bills[index].status = \"open\";\n    }\n\n    this.billsTotal();\n  }\n\n  assignFullPaymentAdv(index, data) {\n    if (data.fullPayment) {\n      this.advancePayments[index].paidAmount = this.advancePayments[index].pendingPayment;\n      this.advancePayments[index].status = \"deducted\";\n    } else {\n      this.advancePayments[index].paidAmount = 0;\n      this.advancePayments[index].status = \"not_deducted\";\n    }\n\n    this.advanceTotal();\n  }\n\n  billsTotal() {\n    this.paymentData.total.subTotal = 0;\n    this.paymentData.billIds = [];\n    this.paymentData.billData = [];\n\n    for (let i = 0; i < this.bills.length; i++) {\n      const element = this.bills[i];\n\n      if (element.selected) {\n        this.paymentData.total.subTotal += Number(element.paidAmount);\n        let status = \"\";\n\n        if (Number(element.paidAmount) === Number(element.balance)) {\n          status = \"paid\";\n        } else if (Number(element.paidAmount) > 0 && Number(element.paidAmount) < Number(element.balance)) {\n          status = \"partially_paid\";\n        } else {\n          status = \"open\";\n        }\n\n        element.status = status;\n\n        if (!this.paymentData.billIds.includes(element.billID)) {\n          this.paymentData.billIds.push(element.billID);\n          let obj = {\n            billID: element.billID,\n            status: status,\n            paidAmount: element.paidAmount,\n            totalAmount: element.balance,\n            pendingAmount: Number(element.balance) - Number(element.paidAmount)\n          };\n          this.paymentData.billData.push(obj);\n        }\n      }\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  calculateFinalTotal() {\n    this.paymentData.total.finalTotal = this.paymentData.total.subTotal - this.paymentData.total.advTotal;\n  }\n\n  advanceTotal() {\n    this.paymentData.total.advTotal = 0;\n    this.paymentData.advIds = [];\n    this.paymentData.advData = [];\n\n    for (let i = 0; i < this.advancePayments.length; i++) {\n      const element = this.advancePayments[i];\n\n      if (element.selected) {\n        this.paymentData.total.advTotal += Number(element.paidAmount);\n        let status = \"\";\n\n        if (Number(element.paidAmount) === Number(element.pendingPayment)) {\n          status = \"deducted\";\n        } else if (Number(element.paidAmount) > 0 && Number(element.paidAmount) < Number(element.pendingPayment)) {\n          status = \"partially_deducted\";\n        } else {\n          status = \"not_deducted\";\n        }\n\n        element.status = status;\n\n        if (!this.paymentData.advIds.includes(element.paymentID)) {\n          this.paymentData.advIds.push(element.paymentID);\n          let obj = {\n            paymentID: element.paymentID,\n            status: status,\n            paidAmount: element.paidAmount,\n            totalAmount: element.pendingPayment,\n            pendingAmount: Number(element.pendingPayment) - Number(element.paidAmount)\n          };\n          this.paymentData.advData.push(obj);\n        }\n      }\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  addRecord() {\n    this.submitDisabled = true;\n    this.accountService.postData(\"purchase-payments\", this.paymentData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Payment added successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n};\n\nAddVendorPaymentComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: AccountService\n}, {\n  type: Location\n}, {\n  type: ToastrService\n}];\n\nAddVendorPaymentComponent = __decorate([Component({\n  selector: \"app-add-vendor-payment\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddVendorPaymentComponent);\nexport { AddVendorPaymentComponent };","map":null,"metadata":{},"sourceType":"module"}