{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-receipt.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-receipt.component.css\";\nimport { AccountService, ApiService } from \"./../../../../services\";\nimport { ListService } from \"./../../../../services/list.service\";\nimport { Component } from \"@angular/core\";\nimport { ToastrService } from \"ngx-toastr\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { Router } from \"@angular/router\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport * as moment from \"moment\";\nlet AddReceiptComponent = class AddReceiptComponent {\n  constructor(listService, accountService, toastr, apiService, router, route) {\n    this.listService = listService;\n    this.accountService = accountService;\n    this.toastr = toastr;\n    this.apiService = apiService;\n    this.router = router;\n    this.route = route;\n    this.pageTitle = \"Add Receipt\";\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n    this.customers = [];\n    this.customersObjects = {};\n    this.invoices = [];\n    this.accounts = [];\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.totalAmount = 0;\n    this.receiptData = {\n      currency: \"CAD\",\n      customerID: [],\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      recNo: null,\n      recAmount: 0,\n      totalAmount: 0,\n      discount: 0,\n      recAmountCur: \"CAD\",\n      accountID: null,\n      paymentMode: null,\n      paymentModeNo: null,\n      paymentModeDate: null,\n      charges: {\n        addition: [],\n        deduction: [],\n        addTotal: 0,\n        dedTotal: 0,\n        addAccountID: null,\n        dedAccountID: null\n      },\n      paidInvoices: [],\n      transactionLog: [],\n      invAmount: 0\n    };\n    this.paymentMode = [{\n      name: \"Cash\",\n      value: \"cash\"\n    }, {\n      name: \"Cheque\",\n      value: \"cheque\"\n    }, {\n      name: \"EFT\",\n      value: \"eft\"\n    }, {\n      name: \"Credit Card\",\n      value: \"creditCard\"\n    }, {\n      name: \"Debit Card\",\n      value: \"debitCard\"\n    }, {\n      name: \"Demand Draft\",\n      value: \"demandDraft\"\n    }];\n    this.advancePayments = [];\n    this.paymentLabel = \"\";\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.submitDisabled = false;\n    this.orderInvoices = [];\n    this.totalReceivedAmt = 0;\n    this.accList = [];\n    this.advErr = \"\";\n    this.newTotal = 0;\n    this.totalErr = false;\n    this.paidAmtErr = false;\n    this.currency = \"CAD\";\n    this.totalCur = \"CAD\";\n    this.rate = 0;\n    this.searchDisabled = false;\n    this.additionFields = {\n      charge: \"\",\n      desc: \"\",\n      amount: 0\n    };\n    this.dedFields = {\n      charge: \"\",\n      desc: \"\",\n      amount: 0\n    };\n    this.journalPrev = [];\n    this.convertedText = \"\";\n  }\n\n  ngOnInit() {\n    this.listService.fetchCustomers();\n    this.fetchCustomersByIDs();\n    this.fetchAccounts();\n    this.recID = this.route.snapshot.params[`recID`];\n\n    if (this.recID) {\n      this.pageTitle = \"Edit Receipt\";\n    } else {\n      this.pageTitle = \"Add Receipt\";\n    }\n\n    let customerList = new Array();\n    this.getValidCustomers(customerList);\n    this.customers = customerList;\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/get/list/all`).subscribe(result => {\n      this.accounts = result;\n      console.log('this.accounts', this.accounts);\n    });\n  }\n\n  getValidCustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  recCurFn(e) {\n    this.totalCur = e;\n  }\n\n  getInvoices() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.receiptData.customerID.length > 0) {\n        _this.searchDisabled = true;\n        _this.newTotal = 0;\n        _this.receiptData.totalAmount = 0;\n        _this.receiptData.discount = 0;\n        _this.receiptData.recAmount = 0;\n        _this.advancePayments = [];\n        _this.orderInvoices = [];\n        _this.invoices = [];\n        _this.dataMessage = Constants.FETCHING_DATA;\n        const customerIDs = encodeURIComponent(JSON.stringify(_this.receiptData.customerID));\n\n        _this.accountService.getData(`order-invoice/customer/${customerIDs}?currency=${_this.receiptData.recAmountCur}`).subscribe(res => {\n          if (res.length === 0) {\n            _this.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          if (res !== undefined) {\n            _this.orderInvoices = res;\n\n            _this.orderInvoices.map(v => {\n              v.payDisable = false;\n              v.discount = 0;\n              v.invStatus = v.invStatus ? v.invStatus.replace(\"_\", \" \") : \"\";\n            });\n\n            for (const op of _this.orderInvoices) {\n              _this.newTotal += op.balance;\n              _this.totalAmount = Number(_this.newTotal.toFixed(2));\n            }\n          }\n        });\n\n        _this.accountService.getData(`invoices/customer/${customerIDs}?currency=${_this.receiptData.recAmountCur}`).subscribe(result => {\n          _this.searchDisabled = false;\n\n          if (result.length === 0) {\n            _this.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          if (result !== undefined) {\n            _this.invoices = result;\n\n            _this.invoices.map(v => {\n              v.payDisable = false;\n              v.discount = 0;\n              v.invStatus = v.invStatus.replace(\"_\", \" \");\n            });\n\n            for (const op of _this.invoices) {\n              _this.newTotal += op.balance;\n              _this.totalAmount = Number(_this.newTotal.toFixed(2));\n            }\n          }\n        });\n      }\n    })();\n  }\n\n  getConvertedCur(convertCurr) {\n    if (this.currency !== convertCurr) {\n      this.convertedText = \"Fetching...\";\n      this.accountService.getData(`receipts/convert/${this.currency}/${convertCurr}/${this.receiptData.recAmount}`).subscribe(res => {\n        this.rate = res.rate.toFixed(2);\n        this.receiptData.recAmount = res.result.toFixed(2);\n        this.convertedText = `1 ${this.currency} = ${this.rate} ${convertCurr}`;\n        this.getJournalPreview();\n      });\n    } else {\n      this.getJournalPreview();\n      this.findReceivedAmtFn();\n    }\n  }\n\n  refreshAccount() {\n    // this.listService.fetchChartAccounts(); \n    this.fetchAccounts();\n  }\n\n  fetchAdvancePayments() {\n    this.dataMessageAdv = Constants.FETCHING_DATA;\n    const fromDate = null;\n    const toDate = null;\n    this.accountService.getData(`advance/entity/${this.receiptData.customerID}?from=${fromDate}\n          &to=${toDate}`).subscribe(result => {\n      if (result.length === 0) {\n        this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.advancePayments = result;\n      this.advancePayments.map(v => {\n        v.selected = false;\n\n        if (v.payMode) {\n          v.payMode = v.payMode.replace(\"_\", \" \");\n        }\n\n        v.fullPayment = false;\n        v.payDisable = false;\n        v.paidAmount = 0;\n        v.paidStatus = false;\n        v.status = v.status.replace(\"_\", \" \");\n        v.errText = \"\";\n        v.prevPaidAmount = Number(v.amount) - Number(v.pendingPayment);\n        v.prevPaidAmount = v.prevPaidAmount.toFixed(2);\n      });\n    });\n  }\n  /*\r\n   * Get all customers's IDs of names from api\r\n   */\n\n\n  fetchCustomersByIDs() {\n    this.apiService.getData(\"contacts/get/list\").subscribe(result => {\n      this.customersObjects = result;\n    });\n  }\n\n  showPaymentFields(type) {\n    if (type === \"creditCard\") {\n      this.paymentLabel = \"Credit Card\";\n    } else if (type === \"debitCard\") {\n      this.paymentLabel = \"Debit Card\";\n    } else if (type === \"demandDraft\") {\n      this.paymentLabel = \"Demand Card\";\n    } else if (type === \"eft\") {\n      this.paymentLabel = \"EFT\";\n    } else if (type === \"cash\") {\n      this.paymentLabel = \"Cash\";\n    } else if (type === \"cheque\") {\n      this.paymentLabel = \"Cheque\";\n    }\n  }\n\n  getAmountOrder(j) {\n    if (this.orderInvoices[j].fullPayment === true) {\n      this.orderInvoices[j].payDisable = true;\n      this.orderInvoices[j].amountPaid = Number(this.orderInvoices[j].balance.toFixed(2)) - Number(this.orderInvoices[j].discount.toFixed(2));\n    } else {\n      this.orderInvoices[j].payDisable = false;\n      this.orderInvoices[j].amountPaid = 0;\n    }\n\n    this.applyDiscount(j, \"order\");\n    this.findReceivedAmtFn();\n  }\n\n  getAmountManual(k) {\n    this.invoices[k].balance = Number(this.invoices[k].balance.toFixed(2));\n    this.invoices[k].discount = Number(this.invoices[k].discount.toFixed(2));\n\n    if (this.invoices[k].fullPayment === true) {\n      this.invoices[k].amountPaid = Number(this.invoices[k].balance) - Number(this.invoices[k].discount);\n    } else {\n      this.invoices[k].amountPaid = 0;\n    }\n\n    this.applyDiscount(k, \"inv\");\n    this.findReceivedAmtFn();\n  }\n\n  getPaidInvoices() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const paidInvoices = [];\n\n      for (const element of _this2.orderInvoices) {\n        if (element.amountPaid !== 0 && element.amountPaid !== undefined) {\n          const obj = {\n            invID: element.invID,\n            invNo: element.invNo,\n            fullPayment: element.fullPayment,\n            invType: \"orderInvoice\",\n            amountPaid: element.amountPaid,\n            balance: element.balance,\n            invCur: element.charges.freightFee.currency,\n            discount: element.discount,\n            invBalance: element.invBalance\n          };\n          paidInvoices.push(obj);\n        }\n      }\n\n      for (const element of _this2.invoices) {\n        if (element.amountPaid !== 0 && element.amountPaid !== undefined) {\n          const obj = {\n            invID: element.invID,\n            invNo: element.invNo,\n            fullPayment: element.fullPayment,\n            invType: \"manual\",\n            amountPaid: element.amountPaid,\n            balance: element.balance,\n            invCur: element.invCur,\n            discount: element.discount,\n            invBalance: element.invBalance\n          };\n          paidInvoices.push(obj);\n        }\n      }\n\n      _this2.receiptData[`paidInvoices`] = paidInvoices;\n    })();\n  }\n\n  matchPayment() {\n    for (const element of this.invoices) {\n      if (element.amountPaid === element.balance) {\n        element.fullPayment = true;\n      } else {\n        element.fullPayment = false;\n      }\n    }\n\n    for (const element of this.orderInvoices) {\n      if (element.amountPaid === element.balance) {\n        element.fullPayment = true;\n      } else {\n        element.fullPayment = false;\n      }\n    }\n  }\n\n  getInvoiceArr() {\n    this.getPaidInvoices();\n    this.receiptData.totalAmount = 0;\n    this.receiptData.paidInvoices.map(v => {\n      this.receiptData.totalAmount += Number(v.amountPaid);\n    });\n  }\n\n  addReceipt() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.receiptData.recAmount === 0) {\n        _this3.toastr.error(\"Select invoice\");\n      } else {\n        if (_this3.receiptData.charges.addTotal > 0 && _this3.receiptData.charges.addAccountID === null) {\n          _this3.toastr.error(\"Please select addition account\");\n\n          return false;\n        }\n\n        if (_this3.receiptData.charges.dedTotal > 0 && _this3.receiptData.charges.dedAccountID === null) {\n          _this3.toastr.error(\"Please select deduction account\");\n\n          return false;\n        }\n\n        _this3.submitDisabled = true;\n        _this3.errors = {};\n        _this3.hasError = false;\n        _this3.hasSuccess = false;\n\n        _this3.getInvoiceArr();\n\n        _this3.receiptData.invAmount = _this3.totalReceivedAmt;\n\n        _this3.accountService.postData(\"receipts\", _this3.receiptData).subscribe({\n          complete: () => {},\n          error: err => {\n            from(err.error).pipe(map(val => {\n              val.message = val.message.replace(/\".*\"/, \"This Field\");\n              _this3.errors[val.context.key] = val.message;\n            })).subscribe({\n              complete: () => {\n                _this3.submitDisabled = false; // this.throwErrors();\n              },\n              error: () => {\n                _this3.submitDisabled = false;\n              },\n              next: () => {}\n            });\n          },\n          next: res => {\n            _this3.submitDisabled = false;\n            _this3.response = res;\n\n            _this3.toastr.success(\"Receipt added successfully.\");\n\n            _this3.router.navigateByUrl(\"/accounts/receipts/list\");\n          }\n        });\n      }\n    })();\n  }\n\n  findReceivedAmtFn() {\n    this.matchPayment();\n    this.totalReceivedAmt = 0;\n\n    for (const element of this.invoices) {\n      this.totalReceivedAmt += element.amountPaid;\n    }\n\n    for (const element of this.orderInvoices) {\n      this.totalReceivedAmt += element.amountPaid;\n    }\n\n    this.receiptData.recAmount = this.totalReceivedAmt + this.receiptData.charges.addTotal - this.receiptData.charges.dedTotal;\n    this.limitDecimals();\n\n    if (this.receiptData.recAmount > this.totalAmount) {\n      this.totalErr = true;\n    } else {\n      this.totalErr = false;\n    }\n\n    this.getJournalPreview();\n  }\n\n  limitDecimals() {\n    this.totalReceivedAmt = Number(this.totalReceivedAmt.toFixed(2));\n    this.receiptData.charges.addTotal = Number(this.receiptData.charges.addTotal.toFixed(2));\n    this.receiptData.discount = Number(this.receiptData.discount.toFixed(2));\n    this.receiptData.charges.dedTotal = Number(this.receiptData.charges.dedTotal.toFixed(2));\n    this.receiptData.recAmount = Number(this.receiptData.recAmount.toFixed(2));\n    this.totalAmount = Number(this.totalAmount.toFixed(2));\n  }\n\n  addAdditionRow() {\n    if (this.additionFields.charge != \"\" && this.additionFields.amount > 0) {\n      this.receiptData.charges.addition.push(this.additionFields);\n      this.additionFields = {\n        charge: \"\",\n        desc: \"\",\n        amount: 0\n      };\n      this.calcAdditionTotal();\n    }\n  }\n\n  calcAdditionTotal() {\n    this.receiptData.charges.addTotal = 0;\n    this.receiptData.charges.addition.forEach(element => {\n      this.receiptData.charges.addTotal += Number(element.amount);\n    });\n    this.findReceivedAmtFn();\n  }\n\n  delAddData(index) {\n    this.receiptData.charges.addition.splice(index, 1);\n    this.calcAdditionTotal();\n  }\n\n  addDeductionRow() {\n    if (this.dedFields.charge != \"\" && this.dedFields.amount > 0) {\n      this.receiptData.charges.deduction.push(this.dedFields);\n      this.dedFields = {\n        charge: \"\",\n        desc: \"\",\n        amount: 0\n      };\n      this.calcDedTotal();\n    }\n  }\n\n  calcDedTotal() {\n    this.receiptData.charges.dedTotal = 0;\n    this.receiptData.charges.deduction.forEach(element => {\n      this.receiptData.charges.dedTotal += Number(element.amount);\n    });\n    this.findReceivedAmtFn();\n  }\n\n  delDedData(index) {\n    this.receiptData.charges.deduction.splice(index, 1);\n    this.calcDedTotal();\n  }\n\n  calDiscountTotal() {\n    this.receiptData.discount = 0;\n    this.invoices.map(v => {\n      if (v.amountPaid > 0) {\n        this.receiptData.discount += Number(v.discount);\n      }\n    });\n    this.orderInvoices.map(v => {\n      if (v.amountPaid > 0) {\n        this.receiptData.discount += Number(v.discount);\n      }\n    });\n    this.findReceivedAmtFn();\n  }\n\n  applyDiscount(index, type) {\n    if (type === \"order\") {\n      let userPay = Number(this.orderInvoices[index].discount) + Number(this.orderInvoices[index].amountPaid);\n\n      if (userPay < 0 || userPay > this.orderInvoices[index].balance) {\n        this.orderInvoices[index].discount = 0;\n      }\n\n      userPay = Number(this.orderInvoices[index].discount) + Number(this.orderInvoices[index].amountPaid);\n      this.orderInvoices[index][\"invBalance\"] = this.orderInvoices[index].balance - userPay;\n\n      if (this.orderInvoices[index][\"invBalance\"] < 0) {\n        this.totalErr = true;\n      } else {\n        this.totalErr = false;\n      }\n    } else if (type === \"inv\") {\n      let userPay = Number(this.invoices[index].discount) + Number(this.invoices[index].amountPaid);\n\n      if (userPay < 0 || userPay > this.invoices[index].balance) {\n        this.invoices[index].discount = 0;\n      }\n\n      userPay = Number(this.invoices[index].discount) + Number(this.invoices[index].amountPaid);\n      this.invoices[index][\"invBalance\"] = this.invoices[index].balance - userPay;\n\n      if (this.invoices[index][\"invBalance\"] < 0) {\n        this.totalErr = true;\n      } else {\n        this.totalErr = false;\n      }\n    }\n\n    this.calDiscountTotal();\n  }\n\n  getJournalPreview() {\n    this.getInvoiceArr();\n    this.journalPrev = [];\n    let jtype = [];\n\n    if (this.receiptData.recAmount > 0) {\n      if (!jtype.includes(\"first\")) {\n        let obj = {\n          accName: this.receiptData.accountID,\n          amount: this.receiptData.recAmount,\n          type: \"debit\",\n          jType: \"receipt amount\",\n          cType: \"recpt\"\n        };\n        jtype.push(\"first\");\n        this.journalPrev.push(obj);\n      }\n\n      if (!jtype.includes(\"recv\")) {\n        let obj = {\n          accName: \"1200 - Accounts Receivable\",\n          amount: Number(this.totalReceivedAmt) + Number(this.receiptData.discount),\n          type: \"credit\",\n          jType: \"accounts receivable\",\n          cType: \"recv\"\n        };\n        jtype.push(\"recv\");\n        this.journalPrev.push(obj);\n      }\n    }\n\n    if (this.receiptData.charges.dedTotal > 0) {\n      if (!jtype.includes(\"ded\")) {\n        let obj = {\n          accName: this.receiptData.charges.dedAccountID,\n          amount: this.receiptData.charges.dedTotal,\n          type: \"debit\",\n          jType: \"deduction charges\",\n          cType: \"ded\"\n        };\n        jtype.push(\"ded\");\n        this.journalPrev.push(obj);\n      }\n    }\n\n    if (this.receiptData.discount > 0) {\n      if (!jtype.includes(\"disc\")) {\n        let obj = {\n          accName: \"5240 - Early Payment Purchase Discount\",\n          amount: this.receiptData.discount,\n          type: \"debit\",\n          jType: \"discount\",\n          cType: \"dis\"\n        };\n        jtype.push(\"disc\");\n        this.journalPrev.push(obj);\n      }\n    }\n\n    if (this.receiptData.charges.addTotal > 0) {\n      if (!jtype.includes(\"add\")) {\n        let obj = {\n          accName: this.receiptData.charges.addAccountID,\n          amount: this.receiptData.charges.addTotal,\n          type: \"credit\",\n          jType: \"addition charges\",\n          cType: \"add\"\n        };\n        jtype.push(\"add\");\n        this.journalPrev.push(obj);\n      }\n    }\n  }\n\n};\n\nAddReceiptComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}];\n\nAddReceiptComponent = __decorate([Component({\n  selector: \"app-add-receipt\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddReceiptComponent);\nexport { AddReceiptComponent };","map":null,"metadata":{},"sourceType":"module"}