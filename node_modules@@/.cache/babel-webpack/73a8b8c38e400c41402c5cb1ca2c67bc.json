{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./map-dashboard.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./map-dashboard.component.css\";\nimport { animate, style, transition, trigger } from \"@angular/animations\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { MapInfoWindow } from \"@angular/google-maps\";\nimport { Subject } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport { ApiService } from \"../../services\";\nlet MapDashboardComponent = class MapDashboardComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.environment = environment.isFeatureEnabled;\n    this.title = \"Map Dashboard\";\n    this.visible = false;\n    this.width = \"100%\";\n    this.height = \"100%\";\n    this.infoDetail = \"No data\";\n    this.searchTerm = new Subject(); // Google Maps\n\n    this.mapOptions = {\n      center: {\n        lat: 48.48248695279594,\n        lng: -99.0688673798094\n      },\n      zoomControl: true,\n      mapTypeControl: true,\n      streetViewControl: false,\n      fullscreenControl: true,\n      zoom: 5,\n      mapId: '620eb1a41a9e36d4'\n    };\n    this.lat = -104.618896;\n    this.lng = 50.44521;\n    this.driverMarkerOptions = {\n      draggable: false,\n      icon: 'assets/driver-marker.png',\n      animation: google.maps.Animation.DROP\n    };\n    this.assetMarkerOptions = {\n      draggable: false,\n      icon: 'assets/asset-marker.png',\n      animation: google.maps.Animation.DROP\n    };\n    this.vehicleMarkerOptions = {\n      draggable: false,\n      icon: 'assets/vehicle-marker.png',\n      animation: google.maps.Animation.DROP\n    };\n    this.driverPositions = [];\n    this.assetPositions = [];\n    this.vehicleDashPositions = [];\n    this.isControlAdded = false;\n    this.frontEndData = {\n      drivers: {}\n    };\n    this.activeTrips = [];\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.getCurrentDriverLocation();\n      yield _this.getCurrentAssetLocation();\n      yield _this.getVehicleLocationByDashCam();\n    })();\n  }\n  /**\r\n   * Get driver location for last 24 hours\r\n   */\n\n\n  getCurrentDriverLocation() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.apiService.getData('dashboard/drivers/getCurrentDriverLocation').subscribe(data => {\n        if (data) {\n          _this2.driverPositions = [];\n\n          for (const key in data) {\n            const value = data[key];\n            const speedVal = parseInt(value.speed) / 3.6;\n\n            _this2.driverPositions.push({\n              position: {\n                lng: parseFloat(value.lng),\n                lat: parseFloat(value.lat)\n              },\n              data: {\n                userId: value.userId,\n                time: `${new Date(value.timeCreated).toLocaleDateString()} | ${new Date(value.timeCreated).toLocaleTimeString()}`,\n                speed: speedVal.toFixed(2),\n                driverId: key,\n                altitude: parseInt(value.altitude).toFixed(2),\n                location: value.location\n              }\n            });\n          }\n        } else {// console.log('No data');\n        }\n      });\n    })();\n  }\n  /**\r\n  * Get driver location for last 24 hours\r\n  */\n\n\n  getCurrentAssetLocation() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.apiService.getData('dashboard/assets/getCurrentAssetLocation').subscribe(data => {\n        if (data) {\n          _this3.assetPositions = [];\n\n          for (const asset of data) {\n            _this3.assetPositions.push({\n              position: {\n                lng: parseFloat(asset.lng),\n                lat: parseFloat(asset.lat)\n              },\n              data: {\n                assetIdentification: asset.assetIdentification,\n                time: `${new Date(asset.timeModified).toLocaleDateString()} | ${new Date(asset.timeModified).toLocaleTimeString()}`,\n                speed: asset.speed,\n                assetID: asset.assetID,\n                altitude: parseInt(asset.altitude).toFixed(2),\n                battery: asset.battery,\n                temp: asset.temp,\n                location: asset.location\n              }\n            });\n          }\n        } else {// console.log('No data');\n        }\n      });\n    })();\n  }\n  /**\r\n  * Get vehicle location by dashCam\r\n  */\n\n\n  getVehicleLocationByDashCam() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.apiService.getData('dashboard/vehicle/getLocationViaDashCam').subscribe(data => {\n        if (data) {\n          _this4.vehicleDashPositions = [];\n\n          for (const devices of data) {\n            _this4.vehicleDashPositions.push({\n              position: {\n                lng: parseFloat(devices.location.lng),\n                lat: parseFloat(devices.location.lat)\n              },\n              data: {\n                vehicleIdentification: devices.vehicleIdentification,\n                time: `${new Date(devices.timeModified).toLocaleDateString()} | ${new Date(devices.timeModified).toLocaleTimeString()}`,\n                speed: devices.location.speed || 0.00,\n                vehicleID: devices.vehicleID,\n                location: devices.location.label,\n                deviceId: devices.deviceSerialNo.split('#')[1]\n              }\n            });\n          }\n        } else {// Do nothing\n        }\n      });\n    })();\n  }\n\n  openInfoWindow(marker, data, infoType) {\n    let content;\n\n    switch (infoType) {\n      case 'driver':\n        this.infoDetail = this.prepareDriverInfoTemplate(data);\n        break;\n\n      case 'asset':\n        this.infoDetail = this.prepareAssetInfoTemplate(data);\n        break;\n\n      case 'vehicle':\n        this.infoDetail = this.prepareVehicleInfoTemplate(data);\n        break;\n\n      default:\n        throw new Error('Unable to get Marker type info');\n    }\n\n    this.infoWindow.open(marker);\n  }\n\n  prepareDriverInfoTemplate(data) {\n    return `<a href='#/fleet/drivers/detail/${data.driverId}' target=_blank'><h4> Driver: ${data.userId}</h4></a> \n    Speed: ${data.speed} KM/H | Altitude: ${data.altitude} <br/> <br/>\n    Time : ${data.time} <br/><br/>\n    `;\n  }\n\n  prepareAssetInfoTemplate(data) {\n    // console.log('data', data);\n    return `<b> Asset: ${data.assetIdentification}</b><br/>\n    Speed: ${data.speed} | Altitude: ${data.altitude} <br/>\n    Time : ${data.time}<br/> \n    Temp. : ${data.temp} | Battery : ${data.battery}\n    <br/>\n    <a class='link' target='_blank' href = '#/fleet/tracking/asset-tracker/${data.assetIdentification}?assetId=${data.assetID}' style='color:blue;font-size:9px'>Asset Report</a> | \n    <a href='#/fleet/assets/detail/${data.assetID}' target=_blank'>Asset Details</a>\n     `;\n  }\n\n  prepareVehicleInfoTemplate(data) {\n    return `<b>Vehicle: ${data.vehicleIdentification}</b></b><br/>\n   <span> Speed: ${parseFloat(data.speed).toFixed(2)} KM/H</span><br/>   \n      <a class='link' target='_blank' href = '#/fleet/tracking/vehicle-dash-cam-tracker/${data.deviceId}?vehicleId=${data.vehicleID}' style='color:blue;font-size:9px'>Realtime view</a> | \n      <a class='link' target='_blank' href ='#/fleet/vehicles/detail/${data.vehicleID}' style='color:blue;font-size:9px'>Vehicle details</a>\n        `;\n  }\n\n  valuechange() {\n    this.visible = !this.visible;\n  }\n\n  ngAfterViewInit() {}\n\n  refresh() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.getCurrentAssetLocation();\n      yield _this5.getVehicleLocationByDashCam();\n    })();\n  }\n\n};\n\nMapDashboardComponent.ctorParameters = () => [{\n  type: ApiService\n}];\n\nMapDashboardComponent.propDecorators = {\n  infoWindow: [{\n    type: ViewChild,\n    args: [MapInfoWindow]\n  }]\n};\nMapDashboardComponent = __decorate([Component({\n  selector: \"app-map-dashboard\",\n  template: __NG_CLI_RESOURCE__0,\n  animations: [trigger(\"slideInOut\", [transition(\":enter\", [style({\n    transform: \"translateX(100%)\"\n  }), animate(\"400ms\", style({\n    transform: \"translateX(0%)\"\n  }))]), transition(\":leave\", [animate(\"400ms\", style({\n    transform: \"translateX(100%)\"\n  }))])])],\n  styles: [__NG_CLI_RESOURCE__1]\n})], MapDashboardComponent);\nexport { MapDashboardComponent };","map":null,"metadata":{},"sourceType":"module"}