{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./sales-invoices-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./sales-invoices-list.component.css\";\nimport { Component } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { AccountService, ApiService } from 'src/app/services';\nlet SalesInvoicesListComponent = class SalesInvoicesListComponent {\n  constructor(accountService, toaster, apiService) {\n    this.accountService = accountService;\n    this.toaster = toaster;\n    this.apiService = apiService;\n    this.isSearch = false;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.allInvoices = [];\n    this.filterData = {\n      customerID: null,\n      startDate: '',\n      endDate: '',\n      lastItemSK: ''\n    };\n    this.lastItemSK = '';\n    this.loaded = false;\n    this.customersObjects = {};\n    this.emailDisabled = false;\n  }\n\n  ngOnInit() {\n    this.fetchSales();\n    this.fetchCustomersByIDs();\n  }\n  /*\r\n  * Get all customers's IDs of names from api\r\n  */\n\n\n  fetchCustomersByIDs() {\n    this.apiService.getData('contacts/get/list').subscribe(result => {\n      this.customersObjects = result;\n    });\n  }\n\n  voidOrderInvoice(i, saleID) {\n    if (confirm(\"Are you sure you want to void?\") === true) {\n      this.accountService.deleteData(`sales-invoice/delete/${saleID}`).subscribe(res => {\n        if (res) {\n          this.allInvoices[i].status = 'voided';\n          this.allInvoices[i].payStatus = '';\n        }\n      });\n    }\n  }\n\n  fetchSales(refresh) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this.lastItemSK = '';\n        _this.allInvoices = [];\n      }\n\n      if (_this.lastItemSK !== 'end') {\n        _this.accountService.getData(`sales-invoice/paging?customer=${_this.filterData.customerID}&startDate=${_this.filterData.startDate}&endDate=${_this.filterData.endDate}&lastKey=${_this.lastItemSK}`).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (result) {\n            if (result.length === 0) {\n              _this.isSearch = false;\n              _this.dataMessage = Constants.NO_RECORDS_FOUND;\n            }\n\n            if (result.length > 0) {\n              _this.isSearch = false;\n              result.map(v => {\n                _this.allInvoices.push(v);\n              });\n\n              if (_this.allInvoices[_this.allInvoices.length - 1].sk !== undefined) {\n                _this.lastItemSK = encodeURIComponent(_this.allInvoices[_this.allInvoices.length - 1].sk);\n              } else {\n                _this.lastItemSK = 'end';\n              } // this.loaded = true;\n\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  searchSale() {\n    if (this.filterData.customerID !== '' || this.filterData.startDate !== '' || this.filterData.endDate !== '' || this.filterData.lastItemSK !== '') {\n      if (this.filterData.startDate !== '' && this.filterData.endDate === '') {\n        this.toaster.error('Please select both start and end dates.');\n        return false;\n      } else if (this.filterData.startDate === '' && this.filterData.endDate !== '') {\n        this.toaster.error('Please select both start and end dates.');\n        return false;\n      } else if (this.filterData.startDate > this.filterData.endDate) {\n        this.toaster.error('Start date should be less then end date');\n        return false;\n      } else {\n        this.isSearch = true;\n        this.allInvoices = [];\n        this.lastItemSK = '';\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fetchSales();\n      }\n    }\n  }\n\n  resetFilter() {\n    this.isSearch = true;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filterData = {\n      customerID: null,\n      startDate: '',\n      endDate: '',\n      lastItemSK: ''\n    };\n    this.lastItemSK = '';\n    this.allInvoices = [];\n    this.fetchSales();\n  }\n\n  deleteSale(id) {\n    if (confirm('Are you sure you want to delete?') === true) {\n      this.accountService.deleteData(`sales-invoice/delete/${id}`).subscribe(res => {\n        if (res) {\n          this.dataMessage = Constants.FETCHING_DATA;\n          this.allInvoices = [];\n          this.lastItemSK = '';\n          this.fetchSales();\n          this.toaster.success('Order deleted successfully!');\n        }\n      });\n    }\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.fetchSales();\n    }\n\n    this.loaded = false;\n  }\n\n  sendConfirmationEmail(i, saleID) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.emailDisabled = true;\n      let result = yield _this2.accountService.getData(`sales-invoice/send/confirmation-email/${saleID}`).toPromise();\n      _this2.emailDisabled = false;\n\n      if (result) {\n        _this2.toaster.success(\"Email sent successfully\");\n\n        _this2.allInvoices[i].status = 'sent';\n      } else {\n        _this2.toaster.error(\"Something went wrong.\");\n      }\n    })();\n  }\n\n};\n\nSalesInvoicesListComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: ApiService\n}];\n\nSalesInvoicesListComponent = __decorate([Component({\n  selector: 'app-sales-invoices-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SalesInvoicesListComponent);\nexport { SalesInvoicesListComponent };","map":null,"metadata":{},"sourceType":"module"}