{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-account.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-account.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../services/api.service';\nimport { AccountService } from '../../../services';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, debounceTime, distinctUntilChanged, switchMap, catchError } from 'rxjs/operators';\nimport { from, Subject, throwError } from 'rxjs';\nimport { HereMapService } from '../../../services';\nimport { Location } from '@angular/common';\nimport { passwordStrength } from 'check-password-strength';\nimport { Router } from '@angular/router';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet AddAccountComponent = class AddAccountComponent {\n  constructor(apiService, toaster, accountService, location, HereMap, router, countryStateCity) {\n    this.apiService = apiService;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.location = location;\n    this.HereMap = HereMap;\n    this.router = router;\n    this.countryStateCity = countryStateCity;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.CCC = '';\n    this.DBAName = '';\n    this.SCAC = '';\n    this.CSA = false;\n    this.CTPAT = false;\n    this.PIP = false;\n    this.cargoInsurance = '';\n    this.email = '';\n    this.userName = '';\n    this.carrierName = '';\n    this.findingWay = '';\n    this.firstName = '';\n    this.lastName = '';\n    this.liabilityInsurance = '';\n    this.password = '';\n    this.confirmPassword = '';\n    this.phone = '';\n    this.fax = '';\n    this.bizCountry = null;\n    this.uploadedLogo = '';\n    this.referral = {\n      name: '',\n      company: '',\n      phone: '',\n      email: ''\n    };\n    this.fleets = {\n      curtainSide: 0,\n      dryVans: 0,\n      flatbed: 0,\n      reefers: 0,\n      totalFleets: 1,\n      trailers: 0,\n      trucks: 0\n    };\n    this.size = \"Normal\";\n    this.lang = \"en\";\n    this.theme = \"light\";\n    this.addressDetails = [{\n      addressType: 'yard',\n      defaultYard: true,\n      countryName: '',\n      countryCode: '',\n      stateCode: '',\n      stateName: '',\n      cityName: '',\n      zipCode: '',\n      address: '',\n      geoCords: {\n        lat: '',\n        lng: ''\n      },\n      manual: false,\n      states: [],\n      cities: []\n    }];\n    this.banks = [{\n      branchName: '',\n      accountNumber: '',\n      transitNumber: '',\n      routingNumber: '',\n      institutionNumber: '',\n      addressDetails: [{\n        addressType: 'branch',\n        countryName: '',\n        countryCode: '',\n        stateCode: '',\n        stateName: '',\n        cityName: '',\n        zipCode: '',\n        address: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        manual: false,\n        bankStates: [],\n        bankCities: []\n      }]\n    }];\n    this.submitDisabled = false;\n    this.searchTerm = new Subject();\n    this.statesObject = {};\n    this.countriesObject = {};\n    this.citiesObject = {};\n    this.newAddress = [];\n    this.addressCountries = [];\n    this.uploadedPhotos = [];\n    this.showAddress = false;\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.errors = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.yardDefault = false;\n    this.passwordValidation = {\n      upperCase: false,\n      lowerCase: false,\n      number: false,\n      specialCharacters: false,\n      length: false\n    };\n    this.siteKey = '6LckOPUdAAAAAInZHt4GWtTfwWJkhUa5RNlH22ud';\n    this.selectedFileNames = new Map();\n  }\n\n  ngOnInit() {\n    this.getCarrierData();\n    this.searchLocation(); // search location on keyup\n\n    $(document).ready(() => {// this.carrierForm = $('#carrierForm').validate();\n    });\n  }\n\n  getCarrierData() {\n    this.apiService.getData('carriers/getCarrier').subscribe(res => {\n      if (res.Items.length > 0) {\n        let data = res.Items[0];\n        this.firstName = data.firstName;\n        this.lastName = data.lastName;\n        this.phone = data.phone;\n        this.fax = data.fax;\n        this.userName = data.userName;\n        this.email = data.email;\n        this.findingWay = data.findingWay;\n        this.carrierID = data.carrierID;\n        this.referral = data.referral;\n      }\n    });\n  }\n\n  geocodingSearch(value) {\n    this.HereMap.geoCode(value);\n  } // Show password\n\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  togglecpwdfieldTextType() {\n    this.cpwdfieldTextType = !this.cpwdfieldTextType;\n  }\n  /**\r\n   * address\r\n   */\n\n\n  clearUserLocation(i) {\n    this.addressDetails[i][`userLocation`] = '';\n    this.addressDetails[i].geoCords.lat = '';\n    this.addressDetails[i].geoCords.lng = '';\n    this.addressDetails[i].countryCode = '';\n    this.addressDetails[i].stateCode = '';\n    this.addressDetails[i].countryName = '';\n    this.addressDetails[i].stateName = '';\n    this.addressDetails[i].cityName = '';\n    this.addressDetails[i].zipCode = '';\n    this.addressDetails[i].address = '';\n    $('div').removeClass('show-search__result');\n  }\n\n  clearBankLocation(i, bankIndex) {\n    this.banks[bankIndex].addressDetails[i][`userLocation`] = '';\n    this.banks[bankIndex].addressDetails[i].geoCords.lat = '';\n    this.banks[bankIndex].addressDetails[i].geoCords.lng = '';\n    this.banks[bankIndex].addressDetails[i].countryName = '';\n    this.banks[bankIndex].addressDetails[i].countryCode = '';\n    this.banks[bankIndex].addressDetails[i].stateCode = '';\n    this.banks[bankIndex].addressDetails[i].stateName = '';\n    this.banks[bankIndex].addressDetails[i].cityName = '';\n    this.banks[bankIndex].addressDetails[i].zipCode = '';\n    this.banks[bankIndex].addressDetails[i].address = '';\n    $('div').removeClass('show-search__result');\n  }\n\n  manAddress(event, i) {\n    if (event.target.checked) {\n      $(event.target).closest('.address-item').addClass('open');\n      this.addressDetails[i][`userLocation`] = '';\n      this.addressDetails[i].geoCords.lat = '';\n      this.addressDetails[i].geoCords.lng = '';\n      this.addressDetails[i].countryCode = '';\n      this.addressDetails[i].stateCode = '';\n      this.addressDetails[i].countryName = '';\n      this.addressDetails[i].stateName = '';\n      this.addressDetails[i].cityName = '';\n      this.addressDetails[i].zipCode = '';\n      this.addressDetails[i].address = '';\n    } else {\n      $(event.target).closest('.address-item').removeClass('open');\n      this.addressDetails[i][`userLocation`] = '';\n      this.addressDetails[i].geoCords.lat = '';\n      this.addressDetails[i].geoCords.lng = '';\n      this.addressDetails[i].countryCode = '';\n      this.addressDetails[i].stateCode = '';\n      this.addressDetails[i].countryName = '';\n      this.addressDetails[i].stateName = '';\n      this.addressDetails[i].cityName = '';\n      this.addressDetails[i].zipCode = '';\n      this.addressDetails[i].address = '';\n    }\n  }\n\n  manBankAddress(event, i, bankIndex) {\n    if (event.target.checked) {\n      $(event.target).closest('.address-item').addClass('open');\n      this.banks[bankIndex].addressDetails[i][`userLocation`] = '';\n      this.banks[bankIndex].addressDetails[i].geoCords.lat = '';\n      this.banks[bankIndex].addressDetails[i].geoCords.lng = '';\n      this.banks[bankIndex].addressDetails[i].countryCode = '';\n      this.banks[bankIndex].addressDetails[i].stateCode = '';\n      this.banks[bankIndex].addressDetails[i].countryName = '';\n      this.banks[bankIndex].addressDetails[i].stateName = '';\n      this.banks[bankIndex].addressDetails[i].cityName = '';\n      this.banks[bankIndex].addressDetails[i].zipCode = '';\n      this.banks[bankIndex].addressDetails[i].address = '';\n    } else {\n      $(event.target).closest('.address-item').removeClass('open');\n      this.banks[bankIndex].addressDetails[i][`userLocation`] = '';\n      this.banks[bankIndex].addressDetails[i].geoCords.lat = '';\n      this.banks[bankIndex].addressDetails[i].geoCords.lng = '';\n      this.banks[bankIndex].addressDetails[i].countryCode = '';\n      this.banks[bankIndex].addressDetails[i].stateCode = '';\n      this.banks[bankIndex].addressDetails[i].countryName = '';\n      this.banks[bankIndex].addressDetails[i].stateName = '';\n      this.banks[bankIndex].addressDetails[i].cityName = '';\n      this.banks[bankIndex].addressDetails[i].zipCode = '';\n      this.banks[bankIndex].addressDetails[i].address = '';\n    }\n  }\n\n  getStates(countryCode, index) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.addressDetails[index].stateCode = '';\n      _this.addressDetails[index].cityName = '';\n      _this.addressDetails[index].states = yield _this.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getCities(stateCode, index, countryCode) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.addressDetails[index].cityName = '';\n      _this2.addressDetails[index].countryName = yield _this2.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this2.addressDetails[index].stateName = yield _this2.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this2.addressDetails[index].cities = yield _this2.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  getBankStates(countryCode, index, bankIndex) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.banks[bankIndex].addressDetails[index].stateCode = '';\n      _this3.banks[bankIndex].addressDetails[index].cityName = '';\n      _this3.banks[bankIndex].addressDetails[index].bankStates = yield _this3.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getBankCities(stateCode, index, countryCode, bankIndex) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.banks[bankIndex].addressDetails[index].cityName = '';\n      _this4.banks[bankIndex].addressDetails[index].countryName = yield _this4.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this4.banks[bankIndex].addressDetails[index].stateName = yield _this4.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this4.banks[bankIndex].addressDetails[index].bankCities = yield _this4.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  addAddress() {\n    if (this.addressDetails.length === 3) {\n      // to restrict to add max 3 addresses, can increase in future by changing this value only\n      this.toaster.warning('Maximum 3 addresses are allowed.');\n    } else {\n      this.addressDetails.push({\n        addressType: '',\n        defaultYard: false,\n        countryName: '',\n        countryCode: '',\n        stateCode: '',\n        stateName: '',\n        cityName: '',\n        zipCode: '',\n        address: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        manual: false,\n        states: [],\n        cities: []\n      });\n    }\n  }\n\n  remove(obj, i, addressID = null) {\n    if (obj === 'address') {\n      this.addressDetails.splice(i, 1);\n    }\n  }\n\n  searchLocation() {\n    this.searchTerm.pipe(map(e => {\n      $('.map-search__results').hide();\n      $(e.target).closest('div').addClass('show-search__result');\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.HereMap.searchForOnBoard(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      this.searchResults = res;\n    });\n  }\n\n  userAddress(i, item) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.addressDetails[i][`userLocation`] = item.address;\n      let result = yield _this5.getAddressDetail(item.place_id);\n\n      if (result !== undefined) {\n        _this5.addressDetails[i].geoCords.lat = result.position.lat;\n        _this5.addressDetails[i].geoCords.lng = result.position.lng;\n        _this5.addressDetails[i].countryName = result.address.CountryFullName;\n        _this5.addressDetails[i].countryCode = result.address.Country;\n        _this5.addressDetails[i].stateCode = result.address.State;\n        _this5.addressDetails[i].stateName = result.address.StateName;\n        _this5.addressDetails[i].cityName = result.address.City;\n        _this5.addressDetails[i].zipCode = result.address.Zip;\n        _this5.addressDetails[i].address = result.address.StreetAddress;\n        $('div').removeClass('show-search__result');\n      }\n    })();\n  }\n\n  getAddressDetail(id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this6.apiService.getData(`pcMiles/detail/${id}`).toPromise();\n      return result;\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  bankAddress(i, item, bankIndex) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.banks[bankIndex].addressDetails[i][`userLocation`] = item.address;\n      const result = yield _this7.getAddressDetail(item.place_id);\n\n      if (result !== undefined) {\n        _this7.banks[bankIndex].addressDetails[i].geoCords.lat = result.position.lat;\n        _this7.banks[bankIndex].addressDetails[i].geoCords.lng = result.position.lng;\n        _this7.banks[bankIndex].addressDetails[i].countryName = result.address.CountryFullName;\n        _this7.banks[bankIndex].addressDetails[i].countryCode = result.address.Country;\n        _this7.banks[bankIndex].addressDetails[i].stateCode = result.address.State;\n        _this7.banks[bankIndex].addressDetails[i].stateName = result.address.StateName;\n        _this7.banks[bankIndex].addressDetails[i].cityName = result.address.City;\n        _this7.banks[bankIndex].addressDetails[i].zipCode = result.address.Zip;\n        _this7.banks[bankIndex].addressDetails[i].address = result.address.StreetAddress;\n        $('div').removeClass('show-search__result');\n      }\n    })();\n  }\n\n  defaultYardFn(e, index) {\n    if (e === true) {\n      this.addressDetails[index].defaultYard = true;\n      this.yardDefault = true;\n    }\n\n    for (let i = 0; i < this.addressDetails.length; i++) {\n      if (i !== index) {\n        this.addressDetails[i].defaultYard = false;\n      }\n    }\n\n    if (e === false) {\n      this.addressDetails[index].defaultYard = false;\n    }\n  }\n\n  setYardDefault(event, index) {\n    if (event === 'mailing') {\n      this.addressDetails[index].defaultYard = false;\n    }\n  }\n\n  predefinedAccounts() {\n    const res = this.accountService.getData('chartAc/addpredefinedClass').toPromise();\n\n    if (res) {\n      setTimeout(() => {\n        this.accountService.getData('chartAc/predefinedAccounts').subscribe(result => {\n          this.toaster.success('Predefined  Accounts Created.');\n        });\n      }, 1500);\n    }\n  }\n\n  onAddCarrier() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.hasError = false;\n      _this8.hasSuccess = false;\n      _this8.submitDisabled = true;\n\n      _this8.hideErrors();\n\n      for (const el of _this8.addressDetails) {\n        delete el.states;\n        delete el.cities;\n\n        if (el.countryCode !== '' && el.stateCode !== '' && el.cityName !== '') {\n          const fullAddress = `${el.address} ${el.cityName}\n    ${el.stateCode} ${el.countryCode}`;\n          let result = yield _this8.HereMap.geoCode(fullAddress);\n\n          if (result.items.length > 0) {\n            result = result.items[0];\n            el.geoCords.lat = result.position.lat;\n            el.geoCords.lng = result.position.lng;\n          }\n        }\n      }\n\n      for (const op of _this8.banks) {\n        for (const addressElement of op.addressDetails) {\n          delete addressElement.bankStates;\n          delete addressElement.bankCities;\n\n          if (addressElement.countryCode !== '' && addressElement.stateCode !== '' && addressElement.cityName !== '') {\n            const fullAddress = `${addressElement.address} ${addressElement.cityName}\n      ${addressElement.stateCode} ${addressElement.countryCode}`;\n            let result = yield _this8.HereMap.geoCode(fullAddress);\n\n            if (result.items.length > 0) {\n              result = result.items[0];\n              addressElement.geoCords.lat = result.position.lat;\n              addressElement.geoCords.lng = result.position.lng;\n            }\n          }\n        }\n      }\n\n      const getYardDefault = _this8.addressDetails.filter(address => {\n        return address.defaultYard === true;\n      });\n\n      if (getYardDefault.length === 0) {\n        _this8.yardDefault = false;\n      } else {\n        _this8.yardDefault = true;\n      }\n\n      for (let i = 0; i < _this8.addressDetails.length; i++) {\n        if (_this8.addressDetails[i].addressType === 'yard') {\n          if (_this8.addressDetails[i].manual) {\n            if (_this8.addressDetails[i].countryCode !== '' && _this8.addressDetails[i].stateCode !== '' && _this8.addressDetails[i].cityName !== '' && _this8.addressDetails[i].zipCode !== '' && _this8.addressDetails[i].address !== '') {\n              _this8.yardAddress = true;\n            }\n          } else if (!_this8.addressDetails[i].manual) {\n            if (_this8.addressDetails[i][`userLocation`] !== '') {\n              _this8.yardAddress = true;\n            }\n          }\n\n          break;\n        } else {\n          _this8.yardAddress = false;\n        }\n      }\n\n      if (_this8.yardAddress && _this8.yardDefault) {\n        const data = {\n          carrierID: _this8.carrierID,\n          entityType: 'carrier',\n          CCC: _this8.CCC,\n          DBAName: _this8.DBAName,\n          DOT: _this8.DOT,\n          EIN: _this8.EIN,\n          MC: _this8.MC,\n          SCAC: _this8.SCAC,\n          cargoInsurance: _this8.cargoInsurance,\n          email: _this8.email,\n          userName: _this8.userName,\n          CTPAT: _this8.CTPAT,\n          CSA: _this8.CSA,\n          PIP: _this8.PIP,\n          carrierName: _this8.carrierName.trim(),\n          findingWay: _this8.findingWay,\n          bizCountry: _this8.bizCountry,\n          firstName: _this8.firstName,\n          lastName: _this8.lastName,\n          liabilityInsurance: _this8.liabilityInsurance,\n          password: _this8.password,\n          addressDetails: _this8.addressDetails,\n          phone: _this8.phone,\n          fax: _this8.fax,\n          fleets: {\n            curtainSide: _this8.fleets.curtainSide,\n            dryVans: _this8.fleets.dryVans,\n            flatbed: _this8.fleets.flatbed,\n            reefers: _this8.fleets.reefers,\n            totalFleets: _this8.fleets.totalFleets,\n            trailers: _this8.fleets.trailers,\n            trucks: _this8.fleets.trucks\n          },\n          banks: _this8.banks\n        };\n\n        if (_this8.findingWay === 'Referral') {\n          data[`referral`] = _this8.referral;\n        }\n\n        if (data.bizCountry === 'CA') {\n          data.MC = null;\n          data.DOT = null;\n        } // create form data instance\n\n\n        const formData = new FormData(); // append photos if any\n\n        for (let i = 0; i < _this8.uploadedPhotos.length; i++) {\n          formData.append('uploadedPhotos', _this8.uploadedPhotos[i]);\n        } // append other fields\n\n\n        formData.append('data', JSON.stringify(data));\n\n        _this8.apiService.putData('carriers', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            from(err.error).pipe(map(val => {\n              // val.message = val.message.replace(/\".*\"/, 'This Field');\n              _this8.errors[val.context.key] = val.message;\n            })).subscribe({\n              complete: () => {\n                _this8.throwErrors();\n\n                _this8.submitDisabled = true;\n              },\n              error: () => {},\n              next: () => {\n                _this8.submitDisabled = true;\n              }\n            });\n          },\n          next: res => {\n            localStorage.setItem('isProfileComplete', 'true');\n\n            _this8.predefinedAccounts();\n\n            _this8.response = res;\n            _this8.submitDisabled = true;\n\n            _this8.toaster.success('Carrier completed successfully.');\n\n            _this8.router.navigate(['/Map-Dashboard']);\n          }\n        });\n      } else {\n        _this8.toaster.error('Yard address is mandatory and atleast one yard as default is mandatory');\n      }\n    })();\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v === 'userName' || v === 'email' || v === 'carrierName') {\n        $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n      }\n\n      if (v === 'cognito') {\n        this.toaster.error(this.errors[v]);\n      }\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  selectPhoto(event) {\n    const files = [...event.target.files];\n    this.uploadedPhotos = [];\n    this.uploadedPhotos.push(files[0]);\n  }\n\n  validatePassword(password) {\n    let passwordVerify = passwordStrength(password);\n\n    if (passwordVerify.contains.includes('lowercase')) {\n      this.passwordValidation.lowerCase = true;\n    } else {\n      this.passwordValidation.lowerCase = false;\n    }\n\n    if (passwordVerify.contains.includes('uppercase')) {\n      this.passwordValidation.upperCase = true;\n    } else {\n      this.passwordValidation.upperCase = false;\n    }\n\n    if (passwordVerify.contains.includes('symbol')) {\n      this.passwordValidation.specialCharacters = true;\n    } else {\n      this.passwordValidation.specialCharacters = false;\n    }\n\n    if (passwordVerify.contains.includes('number')) {\n      this.passwordValidation.number = true;\n    } else {\n      this.passwordValidation.number = false;\n    }\n\n    if (passwordVerify.length >= 8) {\n      this.passwordValidation.length = true;\n    } else {\n      this.passwordValidation.length = false;\n    }\n\n    if (password.includes('.') || password.includes('-')) {\n      this.passwordValidation.specialCharacters = true;\n    }\n  }\n\n};\n\nAddAccountComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}, {\n  type: Location\n}, {\n  type: HereMapService\n}, {\n  type: Router\n}, {\n  type: CountryStateCityService\n}];\n\nAddAccountComponent = __decorate([Component({\n  selector: 'app-add-account',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddAccountComponent);\nexport { AddAccountComponent };","map":null,"metadata":{},"sourceType":"module"}