{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-reminder.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-reminder.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services/api.service';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport constants from '../../../constants';\nimport * as moment from 'moment';\nlet AddReminderComponent = class AddReminderComponent {\n  constructor(apiService, route, router, toastr, location) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.toastr = toastr;\n    this.location = location;\n    this.entityID = null;\n    this.taskID = null;\n    this.reminderData = {\n      entityID: '',\n      type: constants.REMINDER_SERVICE,\n      tasks: {\n        remindByUnit: 'time',\n        taskID: '',\n        remindByDays: 1,\n        odometer: 0,\n        time: '1',\n        timeUnit: 'month'\n      },\n      status: '',\n      subscribers: '',\n      lastServiceDate: '',\n      lastServiceOdometer: 0,\n      createdDate: '',\n      createdTime: ''\n    };\n    this.time = 1;\n    this.timeType = 'day';\n    this.serviceTask = {\n      taskType: constants.TASK_SERVICE,\n      taskName: '',\n      description: ''\n    };\n    this.vehicles = [];\n    this.users = [];\n    this.groups = [];\n    this.groupData = {\n      groupName: '',\n      groupType: constants.GROUP_USERS,\n      description: '',\n      groupMembers: []\n    };\n    this.finalSubscribers = [];\n    this.errors = {};\n    this.Error = '';\n    this.Success = '';\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.taskData = [];\n    this.submitDisabled = false;\n    this.currentDate = moment().format('YYYY-MM-DD');\n    this.subscribers = [];\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.reminderID = _this.route.snapshot.params[`reminderID`];\n\n      _this.fetchServiceTasks();\n\n      if (_this.reminderID) {\n        _this.pageTitle = 'Edit Service Reminder';\n        yield _this.fetchReminderByID();\n      } else {\n        _this.pageTitle = 'Add Service Reminder';\n      }\n\n      yield _this.fetchVehicles();\n    })();\n  }\n\n  fetchServiceTasks() {\n    this.apiService.getData('tasks?type=service').subscribe(result => {\n      this.taskData = result;\n    });\n  }\n\n  fetchVehicles() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this2.apiService.getData('vehicles/list/minor').toPromise();\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          _this2.vehicles.push(element);\n        }\n\n        if (element.isDeleted === 1 && _this2.reminderData.entityID === element.vehicleID) {\n          _this2.entityID = null;\n        }\n      });\n    })();\n  }\n\n  fetchReminderByID() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this3.apiService.getData('reminders/detail/' + _this3.reminderID).toPromise();\n      result = result.Items[0];\n      _this3.reminderData[`reminderID`] = _this3.reminderID;\n      _this3.reminderData[`createdDate`] = result.createdDate;\n      _this3.reminderData[`createdTime`] = result.createdTime;\n      _this3.reminderData[`timeCreated`] = result.timeCreated;\n      _this3.reminderData[`status`] = result.status;\n      _this3.reminderData.type = result.type;\n      _this3.reminderData.entityID = result.entityID;\n      _this3.entityID = result.entityID;\n      _this3.taskID = result.tasks.taskID;\n      _this3.reminderData.tasks.odometer = result.tasks.odometer;\n      _this3.reminderData.tasks.time = result.tasks.time;\n      _this3.reminderData.tasks.timeUnit = result.tasks.timeUnit;\n      _this3.reminderData.lastServiceDate = result.lastServiceDate;\n      _this3.reminderData.lastServiceOdometer = result.lastServiceOdometer;\n      _this3.reminderData.subscribers = result.subscribers;\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  addReminder() {\n    this.hideErrors();\n    this.submitDisabled = true;\n\n    switch (this.reminderData.tasks.timeUnit) {\n      case 'day':\n        {\n          this.numberOfDays = this.time * 1;\n          break;\n        }\n\n      case 'month':\n        {\n          this.numberOfDays = this.time * 30;\n          break;\n        }\n\n      case 'week':\n        {\n          this.numberOfDays = this.time * 7;\n          break;\n        }\n\n      case 'year':\n        {\n          this.numberOfDays = this.time * 365;\n          break;\n        }\n\n      default:\n        {\n          this.numberOfDays = this.time * 0;\n          break;\n        }\n    }\n\n    this.reminderData.tasks.remindByDays = this.numberOfDays;\n    this.reminderData.entityID = this.entityID != null ? this.entityID : null;\n    this.reminderData.tasks.taskID = this.taskID != null ? this.taskID : null;\n    this.apiService.postData('reminders', this.reminderData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toastr.success('Service Reminder Added Successfully!');\n        this.cancel();\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  } // UPDATING REMINDER\n\n\n  updateReminder() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.hideErrors();\n\n      _this4.submitDisabled = true;\n\n      switch (_this4.reminderData.tasks.timeUnit) {\n        case 'day':\n          {\n            _this4.numberOfDays = _this4.time * 1;\n            break;\n          }\n\n        case 'month':\n          {\n            _this4.numberOfDays = _this4.time * 30;\n            break;\n          }\n\n        case 'week':\n          {\n            _this4.numberOfDays = _this4.time * 7;\n            break;\n          }\n\n        case 'year':\n          {\n            _this4.numberOfDays = _this4.time * 365;\n            break;\n          }\n\n        default:\n          {\n            _this4.numberOfDays = _this4.time * 0;\n            break;\n          }\n      }\n\n      _this4.reminderData.tasks.remindByDays = _this4.numberOfDays;\n      _this4.reminderData.entityID = _this4.entityID != null ? _this4.entityID : null;\n      _this4.reminderData.tasks.taskID = _this4.taskID != null ? _this4.taskID : null;\n\n      _this4.apiService.putData('reminders', _this4.reminderData).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, 'This Field');\n            _this4.errors[val.context.key] = val.message;\n          })).subscribe({\n            complete: () => {\n              _this4.submitDisabled = false; // this.throwErrors();\n            },\n            error: () => {\n              _this4.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          _this4.response = res;\n          _this4.submitDisabled = false;\n\n          _this4.toastr.success('Service reminder updated successfully!');\n\n          _this4.Success = '';\n\n          _this4.cancel();\n        }\n      });\n    })();\n  } // SERVICE TASK\n\n\n  addServiceTask() {\n    this.apiService.postData('tasks', this.serviceTask).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {// this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        $('#addServiceTasks').modal('toggle');\n        this.toastr.success('Service Task Added Successfully');\n        this.fetchServiceTasks();\n      }\n    });\n  }\n\n  refreshTaskData() {\n    this.fetchServiceTasks();\n  }\n\n};\n\nAddReminderComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: Location\n}];\n\nAddReminderComponent = __decorate([Component({\n  selector: 'app-add-reminder',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddReminderComponent);\nexport { AddReminderComponent };","map":null,"metadata":{},"sourceType":"module"}