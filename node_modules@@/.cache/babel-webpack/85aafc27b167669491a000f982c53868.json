{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./chart-of-accounts.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./chart-of-accounts.component.css\";\nimport { AccountService, ListService } from \"../../../../services\";\nimport { Component } from \"@angular/core\";\nimport { ToastrService } from \"ngx-toastr\";\nimport Constants from \"../../../fleet/constants\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as _ from \"lodash\";\nlet ChartOfAccountsComponent = class ChartOfAccountsComponent {\n  constructor(accountService, toaster, listService) {\n    this.accountService = accountService;\n    this.toaster = toaster;\n    this.listService = listService;\n    this.modalTitle = \"Add Account\";\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.accounts = [];\n    this.newAccounts = [];\n    this.lastItemSK = \"\";\n    this.filter = {\n      actType: null,\n      actName: null\n    };\n    this.classData = {\n      acClassName: \"\",\n      acClassDesc: \"\"\n    };\n    this.classDisabled = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear(),\n      month: 12,\n      day: 31\n    };\n    this.receivedActID = \"\";\n    this.fetchedID = null;\n    this.actName = null;\n    this.actClassID = null;\n    this.actType = null;\n    this.mainactType = null;\n    this.actDash = false;\n    this.opnBalCAD = 0;\n    this.opnBalTypeCAD = \"debit\";\n    this.transactionLogCAD = [];\n    this.opnBalUSD = 0;\n    this.opnBalTypeUSD = \"debit\";\n    this.transactionLogUSD = [];\n    this.transLogCAD = false;\n    this.transLogUSD = false;\n    this.internalActID = \"\";\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.acClasses = [];\n    this.submitDisabled = false;\n    this.deactivatePredefined = true;\n    this.addPredefined = false;\n    this.disableSearch = false;\n    this.loaded = false;\n    this.actNoError = false;\n    this.actNameError = false;\n    this.accountsClassObjects = {};\n  }\n\n  ngOnInit() {\n    this.checkPredefinedAccounts();\n    this.fetchAccounts();\n    this.getAcClasses();\n    this.fetchAccountClassByIDs();\n  }\n\n  preAccounts() {\n    this.addPredefined = true;\n    const res = this.accountService.getData(\"chartAc/addpredefinedClass\").toPromise();\n\n    if (res) {\n      setTimeout(() => {\n        this.accountService.getData(\"chartAc/predefinedAccounts\").subscribe(result => {\n          this.fetchAccounts();\n          this.fetchAccountClassByIDs();\n          this.getAcClasses();\n          this.toaster.success(\"Predefined  Accounts Created.\");\n        });\n      }, 1500);\n    }\n  }\n\n  deleteAccount(actID) {// this.accountService.deleteData(`chartAc/${this.carrierID}/${actID}`).subscribe((res) => {\n    //   this.toaster.success('Account Deleted Successfully.');\n    //   this.listService.fetchChartAccounts();\n    //   });\n  }\n\n  showAcModal() {\n    this.fetchedID = null;\n    this.actName = \"\";\n    this.actType = \"\";\n    this.actNo = null;\n    this.actDesc = \"\";\n    this.actDash = false;\n    this.internalActID = \"\";\n    this.opnBalCAD = null;\n    this.opnBalTypeCAD = \"debit\";\n    this.actDate = \"\";\n    this.closingAmtCAD = null;\n    this.transactionLogCAD = [];\n    this.transLogCAD = false;\n    this.opnBalUSD = null;\n    this.opnBalTypeUSD = \"debit\";\n    this.closingAmtUSD = null;\n    this.transactionLogUSD = [];\n    this.transLogUSD = false;\n    this.modalTitle = \"Add Account\";\n    $(\"#addAccountModal\").modal(\"show\");\n  }\n\n  onChangeType(value, type) {\n    if (type === \"CAD\") {\n      this.opnBalTypeCAD = value;\n    } else {\n      this.opnBalTypeUSD = value;\n    }\n  }\n\n  fetchAccountClassByIDs() {\n    this.accountService.getData(\"chartAc/get/accountClass/list/all\").subscribe(result => {\n      this.accountsClassObjects = result;\n    });\n  }\n\n  searchAccounts() {\n    if (this.filter.actType !== \"\" || this.filter.actType !== null || this.filter.actName !== null || this.filter.actName !== \"\") {\n      this.disableSearch = true;\n      this.accounts = [];\n      this.lastItemSK = \"\";\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.fetchAccounts();\n    }\n  }\n\n  resetFilter() {\n    this.disableSearch = true;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filter = {\n      actType: null,\n      actName: null\n    };\n    this.lastItemSK = \"\";\n    this.accounts = [];\n    this.fetchAccounts();\n  }\n\n  fetchAccounts(refresh) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this.lastItemSK = \"\";\n        _this.accounts = [];\n      }\n\n      if (_this.lastItemSK !== \"end\") {\n        let name = null;\n        let type = null;\n\n        if (_this.filter.actType !== null || _this.filter.actName !== null) {\n          if (_this.filter.actType !== null && _this.filter.actType !== \"\") {\n            type = _this.filter.actType;\n          }\n\n          if (_this.filter.actName !== null && _this.filter.actName !== \"\") {\n            name = _this.filter.actName.toLowerCase();\n          }\n\n          _this.dataMessage = Constants.FETCHING_DATA;\n        }\n\n        _this.accountService.getData(`chartAc/paging?actName=${name}&actType=${type}&lastKey=${_this.lastItemSK}`).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (result) {\n            if (result.length === 0) {\n              _this.disableSearch = false;\n              _this.dataMessage = Constants.NO_RECORDS_FOUND;\n            }\n\n            if (result.length > 0) {\n              _this.disableSearch = false;\n              result.map(v => {\n                v.first = v.actName.substring(0, v.actName.indexOf(\" \"));\n                v.last = v.actName.substring(v.actName.indexOf(\" \") + 1, v.actName.length);\n\n                _this.accounts.push(v);\n              });\n\n              if (_this.accounts[_this.accounts.length - 1].sk !== undefined) {\n                _this.lastItemSK = encodeURIComponent(_this.accounts[_this.accounts.length - 1].sk);\n              } else {\n                _this.lastItemSK = \"end\";\n              }\n\n              const newArray = _.sortBy(_this.accounts, [\"actNo\"]); // sort by account number\n\n\n              _this.accounts = newArray;\n              _this.loaded = true;\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n\n      if (_this.deactivatePredefined === false) {\n        _this.dataMessage = \"Please add predefined accounts\";\n      }\n    })();\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.fetchAccounts();\n    }\n\n    this.loaded = false;\n  }\n\n  checkPredefinedAccounts() {\n    this.accountService.getData(`chartAc/get/internalID/list/all`).subscribe(res => {\n      if (res.ACT0 !== undefined && res.ACT251 !== undefined) {\n        this.deactivatePredefined = true;\n      } else {\n        this.deactivatePredefined = false;\n        this.dataMessage = \"Please add predefined accounts\";\n      }\n    });\n  }\n\n  validateAcNumber(actNo) {\n    if (actNo !== null && actNo !== \"\") {\n      this.accountService.getData(`chartAc/validate/accountNumber/${actNo}`).subscribe(res => {\n        if (res === true) {\n          this.actNoError = true;\n        } else {\n          this.actNoError = false;\n        }\n      });\n    }\n  }\n\n  validateAcName(actName) {\n    if (actName !== null && actName !== \"\") {\n      actName = actName.replace(/\\s+/g, \" \").trim(); // trim the double or more spaces if in between words\n\n      this.accountService.getData(`chartAc/validate/accountName/${actName}`).subscribe(res => {\n        if (res === true) {\n          this.actNameError = true;\n        } else {\n          this.actNameError = false;\n        }\n      });\n    }\n  }\n\n  addAccount() {\n    this.submitDisabled = true;\n    const data = {\n      actName: this.actName,\n      actType: this.actType,\n      actNo: this.actNo,\n      actClassID: this.actClassID,\n      mainactType: this.mainactType,\n      actDesc: this.actDesc,\n      actDash: this.actDash,\n      opnBalCAD: this.opnBalCAD,\n      opnBalTypeCAD: this.opnBalTypeCAD,\n      actDate: this.actDate,\n      transactionLogCAD: [],\n      closingAmtCAD: 0,\n      opnBalUSD: this.opnBalUSD,\n      opnBalTypeUSD: this.opnBalTypeUSD,\n      transactionLogUSD: [],\n      closingAmtUSD: 0,\n      internalActID: \"\"\n    };\n    this.accountService.postData(\"chartAc\", data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.lastItemSK = \"\";\n        this.accounts = [];\n        this.fetchAccounts();\n        this.toaster.success(\"Account Added Successfully.\");\n        $(\"#addAccountModal\").modal(\"hide\");\n        this.actName = \"\";\n        this.actType = \"\";\n        this.mainactType = \"\";\n        this.actNo = null;\n        this.actClassID = \"\";\n        this.actDesc = \"\";\n        this.actDash = false;\n        this.opnBalCAD = null;\n        this.opnBalTypeCAD = \"debit\";\n        this.actDate = \"\";\n        this.closingAmtCAD = null;\n        this.transactionLogCAD = [];\n        this.opnBalUSD = null;\n        this.opnBalTypeUSD = \"debit\";\n        this.closingAmtUSD = null;\n        this.transactionLogUSD = [];\n        this.internalActID = \"\";\n        this.transLogCAD = false;\n        this.transLogUSD = false;\n      }\n    });\n  }\n\n  editAccount(ID) {\n    this.fetchedID = ID;\n    this.modalTitle = \"Edit Account\";\n    $(\"#addAccountModal\").modal(\"show\");\n\n    if (ID !== \"\" && ID !== undefined) {\n      this.fetchAccount(ID);\n    } else {\n      this.actName = \"\";\n      this.actType = \"\";\n      this.mainactType = \"\";\n      this.actClassID = \"\";\n      this.actNo = null;\n      this.actDesc = \"\";\n      this.actDash = false;\n      this.internalActID = \"\";\n      this.opnBalCAD = null;\n      this.opnBalTypeCAD = \"debit\";\n      this.actDate = \"\";\n      this.closingAmtCAD = null;\n      this.opnBalUSD = null;\n      this.opnBalTypeUSD = \"debit\";\n      this.closingAmtUSD = null;\n    }\n  }\n\n  fetchAccount(ID) {\n    this.getAcClasses();\n    this.fetchedID = ID;\n    this.resetFormValues();\n    this.accountService.getData(`chartAc/account/details/${ID}`).subscribe(res => {\n      this.actName = res.actName;\n      this.actType = res.actType;\n      this.mainactType = res.mainactType;\n      this.actClassID = res.actClassID;\n      this.actNo = res.actNo;\n      this.actDesc = res.actDesc;\n      this.actDash = res.actDash;\n      this.internalActID = res.internalActID;\n      this.opnBalCAD = res.opnBalCAD;\n      this.opnBalTypeCAD = res.opnBalTypeCAD;\n      this.actDate = res.actDate;\n      this.closingAmtCAD = res.closingAmtCAD;\n      this.transactionLogCAD = res.transactionLogCAD;\n      this.opnBalUSD = res.opnBalUSD;\n      this.opnBalTypeUSD = res.opnBalTypeUSD;\n      this.closingAmtUSD = res.closingAmtUSD;\n      this.transactionLogUSD = res.transactionLogUSD;\n\n      if (this.transactionLogCAD.length > 0) {\n        this.transLogCAD = true;\n      }\n\n      if (this.transactionLogUSD.length > 0) {\n        this.transLogUSD = true;\n      }\n    });\n  }\n\n  updateAccount(ID) {\n    this.submitDisabled = true;\n    const data = {\n      actID: ID,\n      actName: this.actName,\n      actType: this.actType,\n      mainactType: this.mainactType,\n      actClassID: this.actClassID,\n      actNo: this.actNo,\n      actDesc: this.actDesc,\n      actDash: this.actDash,\n      opnBalCAD: this.opnBalCAD,\n      opnBalTypeCAD: this.opnBalTypeCAD,\n      actDate: this.actDate,\n      transactionLogCAD: this.transactionLogCAD,\n      closingAmtCAD: this.closingAmtCAD,\n      opnBalUSD: this.opnBalUSD,\n      opnBalTypeUSD: this.opnBalTypeUSD,\n      transactionLogUSD: this.transactionLogUSD,\n      closingAmtUSD: this.closingAmtUSD,\n      internalActID: this.internalActID\n    };\n    this.accountService.putData(`chartAc/update/${ID}`, data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.lastItemSK = \"\";\n        this.accounts = [];\n        this.fetchAccounts();\n        this.toaster.success(\"Account Updated Successfully.\");\n        $(\"#addAccountModal\").modal(\"hide\");\n        this.actName = \"\";\n        this.actType = \"\";\n        this.mainactType = \"\";\n        this.actClassID = \"\";\n        this.actNo = null;\n        this.internalActID = \"\";\n        this.actDash = false;\n        this.actDesc = \"\";\n        this.opnBalCAD = null;\n        this.opnBalTypeCAD = \"debit\";\n        this.actDate = \"\";\n        this.closingAmtCAD = null;\n        this.transactionLogCAD = [];\n        this.transLogCAD = false;\n        this.opnBalUSD = null;\n        this.opnBalTypeUSD = \"debit\";\n        this.closingAmtUSD = null;\n        this.transactionLogUSD = [];\n        this.transLogUSD = false;\n      }\n    });\n  }\n\n  hideModal() {\n    $(\"#addAccountModal\").modal(\"hide\");\n    this.transLogCAD = false;\n    this.transLogUSD = false;\n  }\n\n  refreshData() {\n    this.disableSearch = true;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filter = {\n      actType: null,\n      actName: null\n    };\n    this.lastItemSK = \"\";\n    this.accounts = [];\n    this.fetchAccounts();\n  }\n\n  addAcClass() {\n    this.classDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.accountService.postData(\"chartAc/acClass/add\", this.classData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.classDisabled = false;\n          },\n          error: () => {\n            this.classDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.getAcClasses();\n        this.classDisabled = false;\n        this.response = res;\n        $(\"#addAccountClassModal\").modal(\"hide\");\n        this.classData = {\n          acClassName: \"\",\n          acClassDesc: \"\"\n        };\n        this.toaster.success(\"Account class added successfully.\");\n      }\n    });\n  }\n\n  getAcClasses() {\n    this.accountService.getData(\"chartAc/get/acClasses\").subscribe(res => {\n      this.acClasses = res;\n    });\n  }\n\n  refreshClass() {\n    this.getAcClasses();\n  }\n\n  resetFormValues() {\n    this.actName = \"\";\n    this.actType = \"\";\n    this.mainactType = \"\";\n    this.actNo = null;\n    this.actClassID = \"\";\n    this.actDesc = \"\";\n    this.actDash = false;\n    this.opnBalCAD = null;\n    this.opnBalTypeCAD = \"debit\";\n    this.actDate = \"\";\n    this.closingAmtCAD = null;\n    this.transactionLogCAD = [];\n    this.opnBalUSD = null;\n    this.opnBalTypeUSD = \"debit\";\n    this.closingAmtUSD = null;\n    this.transactionLogUSD = [];\n    this.internalActID = \"\";\n    this.transLogCAD = false;\n    this.transLogUSD = false;\n  }\n\n};\n\nChartOfAccountsComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: ListService\n}];\n\nChartOfAccountsComponent = __decorate([Component({\n  selector: \"app-chart-of-accounts\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ChartOfAccountsComponent);\nexport { ChartOfAccountsComponent };","map":null,"metadata":{},"sourceType":"module"}