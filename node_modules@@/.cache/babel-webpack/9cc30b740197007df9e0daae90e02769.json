{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./company-profile.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./company-profile.component.css\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { from } from 'rxjs';\nimport { ApiService } from '../../../../services';\nimport { passwordStrength } from 'check-password-strength';\nimport { ToastrService } from 'ngx-toastr';\nimport { Auth } from 'aws-amplify';\nimport { compare, numericAsync, password, pattern, prop, ReactiveFormConfig, required, RxFormBuilder } from '@rxweb/reactive-form-validators';\nimport { InvokeHeaderFnService } from 'src/app/services/invoke-header-fn.service';\nlet CompanyProfileComponent = class CompanyProfileComponent {\n  constructor(route, apiService, toastr, formBuilder, headerFnService) {\n    this.route = route;\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.headerFnService = headerFnService;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.companyID = '';\n    this.carriers = [];\n    this.logoSrc = '';\n    this.countryList = {};\n    this.stateList = {};\n    this.any = {};\n    this.showData = false;\n    this.bank = {\n      branchName: '',\n      accountNumber: '',\n      transitNumber: '',\n      routingNumber: '',\n      institutionNumber: '',\n      addressDetails: [{\n        addressType: '',\n        countryName: '',\n        countryCode: '',\n        stateCode: '',\n        stateName: '',\n        cityName: '',\n        zipCode: '',\n        address: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        manual: false\n      }]\n    };\n    this.submitDisabled = false;\n    this.pwdData = {\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    };\n    this.errors = {};\n    this.response = '';\n    this.hasSuccess = false;\n    this.passwordValidation = {\n      upperCase: false,\n      lowerCase: false,\n      number: false,\n      specialCharacters: false,\n      length: false\n    };\n    this.oldPassError = '';\n    this.showVerification = false;\n    this.userNameExists = false;\n    this.userNameExistsErr = '';\n    this.carrierNameExists = false;\n    this.carrierNameErr = '';\n    this.emailExistsExists = false;\n    this.emailExistsErr = '';\n    this.subCompanies = [];\n    this.showSubCompany = false;\n    this.accountSettings = [];\n    ReactiveFormConfig.set({\n      'validationMessage': {\n        \"required\": \"This field is required\",\n        \"email\": \"Email is invalid.\",\n        \"compare\": \"Passwords does not match.\"\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.userInfo = new UserInfo();\n    this.companyID = this.route.snapshot.params[`companyID`];\n    this.userInfoFormGroup = this.formBuilder.formGroup(this.userInfo);\n    this.fetchCarrier();\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  pwdModalClose() {\n    $('#changePasswordModal').modal('hide');\n    this.pwdData = {\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    };\n  }\n\n  onChangePassword() {\n    let username = this.apiService.getCarrierUserName();\n    this.submitDisabled = true;\n    this.hideErrors();\n    const data = {\n      userName: username,\n      oldPassword: this.pwdData.oldPassword,\n      newPassword: this.pwdData.newPassword\n    };\n\n    try {\n      Auth.currentAuthenticatedUser().then(user => {\n        return Auth.changePassword(user, data.oldPassword, data.newPassword);\n      }).then(data => {\n        if (data == 'SUCCESS') {\n          this.response = data;\n          this.hasSuccess = true;\n          this.submitDisabled = false;\n          this.toastr.success('Password updated successfully');\n          this.pwdModalClose();\n          this.pwdData = {\n            oldPassword: '',\n            newPassword: '',\n            confirmPassword: ''\n          };\n        }\n      }).catch(err => {\n        if (err._type = \"NotAuthorizedException\") {\n          this.submitDisabled = false;\n          this.errors[err.code] = err.message;\n          this.throwErrors();\n          this.oldPassError = \"Incorrect Password\";\n        } else {\n          this.submitDisabled = false;\n          this.errors[err.code] = err.message;\n          this.throwErrors();\n          this.oldPassError = err.message;\n        }\n      });\n    } catch (error) {\n      this.errors[\"error\"] = error;\n      this.throwErrors();\n    }\n  }\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  toggleOldFieldTextType() {\n    this.oldFieldTextType = !this.oldFieldTextType;\n  }\n\n  togglecpwdfieldTextType() {\n    this.cpwdfieldTextType = !this.cpwdfieldTextType;\n  }\n\n  validatePassword(password) {\n    let passwordVerify = passwordStrength(password);\n\n    if (passwordVerify.contains.includes('lowercase')) {\n      this.passwordValidation.lowerCase = true;\n    } else {\n      this.passwordValidation.lowerCase = false;\n    }\n\n    if (passwordVerify.contains.includes('uppercase')) {\n      this.passwordValidation.upperCase = true;\n    } else {\n      this.passwordValidation.upperCase = false;\n    }\n\n    if (passwordVerify.contains.includes('symbol')) {\n      this.passwordValidation.specialCharacters = true;\n    } else {\n      this.passwordValidation.specialCharacters = false;\n    }\n\n    if (passwordVerify.contains.includes('number')) {\n      this.passwordValidation.number = true;\n    } else {\n      this.passwordValidation.number = false;\n    }\n\n    if (passwordVerify.length >= 8) {\n      this.passwordValidation.length = true;\n    } else {\n      this.passwordValidation.length = false;\n    }\n\n    if (password.includes('.') || password.includes('-')) {\n      this.passwordValidation.specialCharacters = true;\n    }\n  }\n\n  onChangeHideErrors(fieldname = '') {\n    $('[name=\"' + fieldname + '\"]').removeClass('error').next().remove('label');\n  }\n\n  fetchCarrier() {\n    this.apiService.getData(`carriers/${this.companyID}`).subscribe(result => {\n      if (result.Items && result.Items.length > 0) {\n        this.carriers = result.Items[0];\n\n        if (this.carriers.accountSettings && this.carriers.accountSettings != undefined) {\n          this.accountSettings = this.carriers.accountSettings;\n        }\n\n        if (!this.carriers.referral && this.carriers.findingWay === 'Referral') {\n          this.carriers.referral = {};\n        }\n\n        if (result.Items.length > 0) {\n          this.showData = true;\n        }\n\n        if (this.carriers.uploadedLogo === '' || this.carriers.uploadedLogo === undefined) {\n          this.logoSrc = 'assets/img/logo.png';\n        } else {\n          this.logoSrc = `${this.Asseturl}/${this.carriers.carrierID}/${this.carriers.uploadedLogo}`;\n        }\n\n        if (this.carriers.subCompInfo && this.carriers.subCompInfo.length > 0) {\n          this.subCompanies = this.carriers.subCompInfo;\n        }\n\n        if (!this.carriers.parentID) {\n          this.showSubCompany = true;\n        }\n      }\n    });\n  }\n\n  addSubCompany() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const data = {\n        userName: _this.userInfo.username,\n        email: _this.userInfo.email,\n        password: _this.userInfo.compPassword,\n        firstName: _this.userInfo.firstName,\n        lastName: _this.userInfo.lastName,\n        carrierName: _this.userInfo.carrierName\n      };\n      const result = yield _this.apiService.postData(`carriers/sub-company/add`, data).toPromise();\n\n      if (result) {\n        _this.clearForm();\n\n        localStorage.setItem(\"subCompany\", 'yes');\n\n        _this.headerComponentFunction();\n\n        _this.toastr.success('Sub company added successfully');\n\n        _this.fetchCarrier();\n      } else {\n        _this.toastr.error('Something went wrong!');\n\n        return false;\n      }\n    })();\n  }\n\n  validateUsername() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = {\n        userName: _this2.userInfo.username\n      };\n\n      if (_this2.userInfo.username) {\n        _this2.apiService.postData(`carriers/validate/username`, data).subscribe(result => {\n          if (!result) {\n            _this2.userNameExists = true;\n            _this2.userNameExistsErr = 'Username already exists';\n          } else {\n            _this2.userNameExists = false;\n            _this2.userNameExistsErr = '';\n          }\n        });\n      }\n    })();\n  }\n\n  validateEmail() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = {\n        email: _this3.userInfo.email\n      };\n\n      if (_this3.userInfo.email) {\n        _this3.apiService.postData(`carriers/validate/email`, data).subscribe(result => {\n          if (!result) {\n            _this3.emailExistsExists = true;\n            _this3.emailExistsErr = 'Email already exists';\n          } else {\n            _this3.emailExistsExists = false;\n            _this3.emailExistsErr = '';\n          }\n        });\n      }\n    })();\n  }\n\n  validateCompanyName() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = {\n        carrierName: _this4.userInfo.carrierName\n      };\n\n      if (_this4.userInfo.carrierName) {\n        _this4.apiService.postData(`carriers/validate/carriername`, data).subscribe(result => {\n          if (!result) {\n            _this4.carrierNameExists = true;\n            _this4.carrierNameErr = 'Registered Company Name already exists';\n          } else {\n            _this4.carrierNameExists = false;\n            _this4.carrierNameErr = '';\n          }\n        });\n      }\n    })();\n  }\n\n  headerComponentFunction() {\n    this.headerFnService.callHeaderFn();\n  }\n\n  clearForm() {\n    this.userInfoFormGroup.reset();\n    $(\"#addCompanyModal\").modal('hide');\n  }\n\n};\n\nCompanyProfileComponent.ctorParameters = () => [{\n  type: ActivatedRoute\n}, {\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: RxFormBuilder\n}, {\n  type: InvokeHeaderFnService\n}];\n\nCompanyProfileComponent = __decorate([Component({\n  selector: 'app-company-profile',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], CompanyProfileComponent);\nexport { CompanyProfileComponent };\n\nclass VerificationInfo {}\n\n__decorate([prop(), required({\n  message: \"Verification code cannot be blank.\"\n}), numericAsync({\n  message: \"Only numbers allowed.\",\n  allowDecimal: false\n})], VerificationInfo.prototype, \"verificationCode\", void 0);\n\nclass UserInfo {}\n\n__decorate([required(), pattern({\n  expression: {\n    'onlyAlpha': /^(?=[a-zA-Z0-9.]{6,20}$)(?!.*[.]{2})[^.].*[^.]$/\n  },\n  message: \"Username should be at-least 6 characters long and can be a combination of numbers, letters  and dot(.).\"\n})], UserInfo.prototype, \"username\", void 0);\n\n__decorate([required(), prop()], UserInfo.prototype, \"email\", void 0);\n\n__decorate([required(), prop(), password({\n  validation: {\n    maxLength: 15,\n    minLength: 8,\n    upperCase: true,\n    digit: true,\n    alphabet: true,\n    specialCharacter: true\n  },\n  message: \"Password must be of length 8 or more with combination of uppercase, lowercase, numbers & special characters.\"\n})], UserInfo.prototype, \"compPassword\", void 0);\n\n__decorate([required(), compare({\n  fieldName: 'password',\n  message: \"Password does not match.\"\n})], UserInfo.prototype, \"confirmPassword\", void 0);\n\n__decorate([required()], UserInfo.prototype, \"firstName\", void 0);\n\n__decorate([required()], UserInfo.prototype, \"lastName\", void 0);\n\n__decorate([required()], UserInfo.prototype, \"carrierName\", void 0);","map":null,"metadata":{},"sourceType":"module"}