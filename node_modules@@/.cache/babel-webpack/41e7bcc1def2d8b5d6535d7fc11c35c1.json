{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./shared-modals.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./shared-modals.component.css\";\n\nconst ct = require(\"countries-and-timezones\");\n\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ApiService } from \"../../../services/api.service\";\nimport { from, Subject } from \"rxjs\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { map } from \"rxjs/operators\";\nimport { ListService } from \"../../../services\";\nimport * as moment from \"moment\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nlet SharedModalsComponent = class SharedModalsComponent {\n  constructor(apiService, modalService, toastr, listService) {\n    this.apiService = apiService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.listService = listService;\n    this.countriesList = [];\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.manufacturers = [];\n    this.models = [];\n    this.assetManufacturers = [];\n    this.assetModels = [];\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.destroy$ = new Subject();\n    this.errors = {};\n    this.deletedAddress = [];\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.errorAbstract = false;\n    this.stateData = {\n      countryID: \"\",\n      stateName: \"\",\n      stateCode: \"\"\n    };\n    this.cityData = {\n      countryID: \"\",\n      stateID: \"\",\n      cityName: \"\"\n    };\n    this.vehicleMakeData = {\n      manufacturerName: \"\"\n    };\n    this.vehicleModelData = {\n      manufacturerID: \"\",\n      modelName: \"\"\n    };\n    this.assetMakeData = {\n      manufacturerName: \"\"\n    };\n    this.assetModelData = {\n      manufacturerID: \"\",\n      modelName: \"\"\n    };\n    this.test = [];\n    this.assets = [];\n    this.fuelTypes = [];\n    this.nullVar = null;\n    this.abstractValid = false;\n    this.finalPrefix = \"\";\n    this.abstractDocs = [];\n    this.uploadedDocs = [];\n    this.isSubmitted = false;\n    this.carrierYards = [];\n    this.absDocs = [];\n    this.documentTypeList = [];\n    this.cycles = [];\n    this.ownerOperators = [];\n    this.licCountries = []; // Issues variables ends\n\n    this.issuesData = {\n      issueName: \"\",\n      currentStatus: \"OPEN\",\n      unitID: \"\",\n      unitType: \"vehicle\",\n      reportedDate: moment().format(\"YYYY-MM-DD\"),\n      description: \"\",\n      odometer: null,\n      reportedBy: \"\",\n      assignedTo: \"\"\n    };\n    this.vehicleModal = false;\n    this.vehicles = [];\n    this.tasks = [];\n    this.uploadedPhotos = [];\n    this.serviceData = {\n      programName: \"\",\n      description: \"\",\n      vehicles: [],\n      serviceScheduleDetails: [{\n        serviceTask: \"\",\n        repeatByTime: \"\",\n        repeatByTimeUnit: \"\",\n        repeatByOdometer: \"\"\n      }]\n    };\n    this.taskData = {\n      taskType: \"service\",\n      taskName: \"\",\n      description: \"\"\n    };\n    this.inspectionForms = [];\n    this.groups = [];\n    this.drivers = [];\n    this.groupData = {\n      groupName: \"\",\n      groupType: \"vehicles\",\n      description: \"\",\n      groupMembers: []\n    };\n    this.localPhotos = [];\n    this.activeTab = 1;\n    this.users = [];\n    const date = new Date();\n    this.getcurrentDate = {\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate()\n    };\n    this.birthDateMinLimit = {\n      year: date.getFullYear() - 60,\n      month: date.getMonth() + 12,\n      day: date.getDate()\n    };\n    this.birthDateMaxLimit = {\n      year: date.getFullYear() - 18,\n      month: date.getMonth() + 12,\n      day: date.getDate()\n    };\n    this.listService.fetchAppendIssues().subscribe(res => {\n      this.issuesData.unitID = res.name;\n      this.issuesData.unitType = res.type;\n      this.issuesData.odometer = res.odometer;\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.fetchApis();\n\n      $(document).ready(() => {\n        _this.form = $(\"#stateForm\").validate();\n        _this.form = $(\"#cityForm\").validate();\n        _this.form = $(\"#vehicleMakeForm\").validate();\n        _this.form = $(\"#vehicleModelForm\").validate();\n        _this.form = $(\"#assetMakeForm\").validate();\n        _this.form = $(\"#assetModelForm\").validate();\n        _this.form = $(\"#serviceProgramForm\").validate();\n      });\n    })();\n  }\n\n  fetchApis() {\n    this.subscription = this.listService.otherModelList.subscribe(res => {\n      if (res === \"veh-program\") {\n        let ngbModalOptions = {\n          backdrop: \"static\",\n          keyboard: false,\n          windowClass: \"vehicle-prog__main\"\n        };\n        const vehModal = this.modalService.open(this.vehProgramModal, ngbModalOptions);\n        vehModal.result.then(data => {\n          this.clearServiceProg();\n          this.listService.separateModals(\"\");\n        }, reason => {\n          this.clearServiceProg();\n          this.listService.separateModals(\"\");\n        });\n        this.fetchVehicles();\n        this.fetchTasks();\n      } else if (res === \"logIssue\") {\n        let ngbModalOptions = {\n          backdrop: \"static\",\n          keyboard: false,\n          windowClass: \"add-issue__main\"\n        };\n        this.issueModal = this.modalService.open(this.addIssueModal, ngbModalOptions);\n        this.issueModal.result.then(data => {\n          this.clearIssueData();\n          this.listService.separateModals(\"\");\n        }, reason => {\n          this.clearIssueData();\n          this.listService.separateModals(\"\");\n        });\n        this.fetchVehicles();\n        this.fetchAssets();\n        this.fetchUsers();\n      } else if (res === \"\") {\n        this.issueModal.close();\n      }\n    });\n  }\n\n  fetchInspectionForms() {\n    this.apiService.getData(\"inspectionForms/type/vehicle\").subscribe(result => {\n      this.inspectionForms = result.Items;\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  fetchGroups() {\n    this.apiService.getData(`groups/getGroup/${this.groupData.groupType}`).subscribe(result => {\n      // this.groups = result.Items;\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.groups.push(element);\n        }\n      });\n    });\n  }\n\n  fetchDrivers() {\n    this.apiService.getData(\"drivers\").subscribe(result => {\n      // this.drivers = result.Items;\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.drivers.push(element);\n        }\n      });\n    });\n  }\n\n  fetchAssetModels() {\n    this.apiService.getData(\"assetModels\").subscribe(result => {\n      this.assetModels = result.Items;\n    });\n  }\n\n  fetchAssets() {\n    this.apiService.getData(\"assets\").subscribe(result => {\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.assets.push(element);\n        }\n      });\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n  /**\r\n   *   add vehicle model\r\n   * */\n\n\n  addVehicleModel() {\n    this.hideErrors();\n    this.apiService.postData(\"vehicleModels\", this.vehicleModelData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        $(\"#addVehicleModelModal\").modal(\"hide\");\n        this.toastr.success(\"Vehicle Model Added Successfully.\"); //this.listService.fetchModels();\n      }\n    });\n  }\n  /**\r\n   * add asset make\r\n   */\n\n\n  addAssetMake() {\n    this.hideErrors();\n    this.apiService.postData(\"assetManufacturers\", this.assetMakeData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        $(\"#addAssetMakeModal\").modal(\"hide\");\n        this.toastr.success(\"Asset Make Added Successfully.\"); // this.listService.fetchAssetManufacturers();\n      }\n    });\n  }\n  /**\r\n   * add asset model\r\n   */\n  // add vehicle model\n\n\n  addAssetModel() {\n    this.hideErrors();\n    this.apiService.postData(\"assetModels\", this.assetModelData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        $(\"#addAssetModelModal\").modal(\"hide\");\n        this.toastr.success(\"Asset Model Added Successfully.\"); // this.listService.fetchAssetModels();\n\n        this.assetModelData.manufacturerID = \"\";\n        this.assetMakeData.manufacturerName = \"\";\n      }\n    });\n  }\n\n  addDocument() {\n    this.serviceData.serviceScheduleDetails.push({\n      serviceTask: \"\",\n      repeatByTime: \"\",\n      repeatByTimeUnit: \"\",\n      repeatByOdometer: \"\"\n    });\n  }\n\n  addServiceProgram() {\n    this.hideErrors();\n    this.apiService.postData(\"servicePrograms\", this.serviceData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.listService.fetchServicePrograms();\n        $(\"#addVehicleProgramModal\").modal(\"hide\");\n        this.toastr.success(\"Service added successfully\");\n        this.modalService.dismissAll();\n      }\n    });\n  }\n\n  addServiceTask() {\n    this.hideErrors();\n    this.apiService.postData(\"tasks\", this.taskData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.toastr.success(\"Service Task added successfully\");\n        $(\"#addServiceTaskModal\").modal(\"hide\");\n        this.taskData[\"taskName\"] = \"\";\n        this.taskData[\"description\"] = \"\";\n        this.listService.fetchTasks();\n      }\n    });\n  }\n\n  fetchVehicles() {\n    this.apiService.getData(\"vehicles\").subscribe({\n      error: () => {},\n      next: result => {\n        result.Items.forEach(element => {\n          if (element.isDeleted === 0) {\n            this.vehicles.push(element);\n          }\n        });\n      }\n    });\n  }\n\n  fetchTasks() {\n    this.apiService.getData(\"tasks\").subscribe({\n      error: () => {},\n      next: result => {\n        // this.tasks = result.Items;\n        result.Items.forEach(element => {\n          if (element.taskType === \"service\") {\n            this.tasks.push(element);\n          }\n        });\n      }\n    });\n  }\n\n  removeTasks(i) {\n    this.serviceData.serviceScheduleDetails.splice(i, 1);\n  }\n\n  changeTab(value) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.activeTab = value;\n    })();\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event, i) {\n    let files = [...event.target.files];\n\n    if (i != null) {\n      if (this.uploadedDocs[i] == undefined) {\n        this.uploadedDocs[i] = files;\n      }\n    } else {\n      this.abstractDocs = [];\n      this.abstractDocs = files;\n    }\n  } // Show password\n\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  togglecpwdfieldTextType() {\n    this.cpwdfieldTextType = !this.cpwdfieldTextType;\n  }\n\n  onChangeHideErrors(fieldname = \"\") {\n    $('[name=\"' + fieldname + '\"]').removeClass(\"error\").next().remove(\"label\");\n  } // ISSUE SECTION\n\n\n  addIssue() {\n    this.hideErrors(); // create form data instance\n\n    const formData = new FormData(); // append other fields\n\n    formData.append(\"data\", JSON.stringify(this.issuesData)); // this.apiService.postData('issues/', data).subscribe({\n\n    this.apiService.postData(\"issues\", formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.toastr.success(\"Issue Added successfully\");\n        this.listService.separateModals('');\n        this.clearIssueData();\n        let issueVehicleID = localStorage.getItem(\"issueVehicleID\");\n        issueVehicleID = issueVehicleID.slice(1, -1);\n        this.listService.fetchVehicleIssues(issueVehicleID);\n        this.listService.fetchAssetsIssues(issueVehicleID);\n      }\n    });\n  }\n\n  issuesUnitType(value) {\n    this.issuesData.unitID = \"\";\n    this.issuesData.unitType = value;\n  }\n\n  clearIssueData() {\n    this.issuesData = {\n      issueName: \"\",\n      currentStatus: \"OPEN\",\n      unitID: \"\",\n      unitType: \"vehicle\",\n      reportedDate: \"\",\n      description: \"\",\n      odometer: null,\n      reportedBy: \"\",\n      assignedTo: \"\"\n    };\n  }\n\n  fetchUsers() {\n    this.apiService.getData(\"common/users\").subscribe(result => {\n      result[\"Items\"].map(r => {\n        if (r.isDeleted === 0) {\n          this.users.push(r);\n        }\n      });\n    });\n  }\n\n  clearAssetMake() {\n    this.assetMakeData.manufacturerName = \"\";\n  }\n\n  clearServiceProg() {\n    this.serviceData.programName = \"\";\n    this.serviceData.description = \"\";\n    this.serviceData.serviceScheduleDetails = [{\n      serviceTask: \"\",\n      repeatByTime: \"\",\n      repeatByTimeUnit: \"\",\n      repeatByOdometer: \"\"\n    }];\n    this.serviceData.vehicles = [];\n  }\n\n  clearServiceTask() {\n    this.taskData = {\n      taskType: \"service\",\n      taskName: \"\",\n      description: \"\"\n    };\n  }\n\n};\n\nSharedModalsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: NgbModal\n}, {\n  type: ToastrService\n}, {\n  type: ListService\n}];\n\nSharedModalsComponent.propDecorators = {\n  vehProgramModal: [{\n    type: ViewChild,\n    args: [\"vehProgramModal\", {\n      static: true\n    }]\n  }],\n  addIssueModal: [{\n    type: ViewChild,\n    args: [\"addIssueModal\", {\n      static: true\n    }]\n  }],\n  assetModelsModal: [{\n    type: ViewChild,\n    args: [\"assetModelsModal\", {\n      static: true\n    }]\n  }]\n};\nSharedModalsComponent = __decorate([Component({\n  selector: \"app-shared-modals\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SharedModalsComponent);\nexport { SharedModalsComponent };","map":null,"metadata":{},"sourceType":"module"}