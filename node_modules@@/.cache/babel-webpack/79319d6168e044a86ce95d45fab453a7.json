{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { Auth } from 'aws-amplify';\nimport { EMPTY, from } from 'rxjs';\nimport { switchMap } from 'rxjs/internal/operators';\nlet SafetyService = class SafetyService {\n  constructor(http) {\n    this.http = http;\n    this.jwt = '';\n    this.safetyServiceUrl = environment.SafetyServiceUrl;\n    /*\r\n      * Getting CarrierId from current LoggedIn User\r\n    */\n\n    this.getCarrierID = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        const response = yield Auth.currentSession();\n\n        if (response) {\n          return response.idToken.payload.carrierID;\n        } else {\n          return undefined;\n        }\n      } catch (error) {\n        return undefined;\n      }\n    });\n    this.jwt = localStorage.getItem('jwt');\n  }\n\n  getJwt(url, data) {\n    const headers = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.safetyServiceUrl + url, data, this.httpOptions);\n  }\n\n  postData(url, data, formData = false) {\n    let headers;\n    let selectedCarrier = localStorage.getItem('xfhCarrierId') != null ? localStorage.getItem('xfhCarrierId') : '';\n\n    if (formData) {\n      headers = {\n        headers: new HttpHeaders({\n          'x-fleethawks-carrier-id': selectedCarrier\n        })\n      };\n    } else {\n      headers = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'x-fleethawks-carrier-id': selectedCarrier\n        })\n      };\n    }\n\n    return this.http.post(this.safetyServiceUrl + url, data, headers);\n  }\n\n  putData(url, data, formData = false) {\n    let headers;\n    let selectedCarrier = localStorage.getItem('xfhCarrierId') != null ? localStorage.getItem('xfhCarrierId') : '';\n\n    if (formData) {\n      headers = {\n        headers: new HttpHeaders({\n          'x-fleethawks-carrier-id': selectedCarrier\n        })\n      };\n    } else {\n      headers = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'x-fleethawks-carrier-id': selectedCarrier\n        })\n      };\n    }\n\n    return this.http.put(this.safetyServiceUrl + url, data, headers);\n  }\n\n  getData(url) {\n    // const headers =  {headers: new  HttpHeaders({ 'Content-Type': 'application/json',\n    //   'x-auth-token': this.jwt})\n    // };\n    let isCarrier = localStorage.getItem('carrierID') != null ? localStorage.getItem('carrierID') : '';\n    let selectedCarrier = localStorage.getItem('xfhCarrierId') != null ? localStorage.getItem('xfhCarrierId') : '';\n    const headers = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'fh-carrier-id': isCarrier,\n        'x-fleethawks-carrier-id': selectedCarrier\n      })\n    };\n    return this.http.get(this.safetyServiceUrl + url, headers);\n  }\n\n  deleteData(url) {\n    // this.getHeaders();\n    // const headers =  {headers: new  HttpHeaders({ 'Content-Type': 'application/json',\n    //   'x-auth-token': this.jwt})\n    // };\n    let selectedCarrier = localStorage.getItem('xfhCarrierId') != null ? localStorage.getItem('xfhCarrierId') : '';\n    const headers = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'x-fleethawks-carrier-id': selectedCarrier\n      })\n    };\n    return this.http.delete(this.safetyServiceUrl + url, headers);\n  }\n\n  getHeaders() {\n    from(Auth.currentSession()).pipe(switchMap(auth => {\n      const jwt = auth.accessToken.jwtToken;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${jwt}`,\n          'Content-Type': 'application/json'\n        })\n      };\n      return EMPTY;\n    })).subscribe();\n  }\n\n  getDatatablePostData(url, data) {\n    // this.getHeaders();\n    const headers = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }; // const headers =  {headers: new  HttpHeaders({ 'Content-Type': 'application/json',\n    //   'x-auth-token': this.jwt})\n    // };\n\n    return this.http.post(this.safetyServiceUrl + url, data, headers);\n  }\n\n};\n\nSafetyService.ctorParameters = () => [{\n  type: HttpClient\n}];\n\nSafetyService = __decorate([Injectable({\n  providedIn: 'root'\n})], SafetyService);\nexport { SafetyService };","map":null,"metadata":{},"sourceType":"module"}