{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./fuel-entry-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./fuel-entry-list.component.css\";\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ApiService } from '../../../../services/api.service';\nimport { DatePipe } from '@angular/common';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Constants from '../../constants';\nimport { environment } from '../../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\nimport { ViewEncapsulation } from '@angular/core';\nimport { SelectionType, ColumnMode } from \"@swimlane/ngx-datatable\";\nimport { Router } from '@angular/router';\nlet FuelEntryListComponent = class FuelEntryListComponent {\n  constructor(apiService, toastr, spinner, httpClient, el, router) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.httpClient = httpClient;\n    this.el = el;\n    this.router = router;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.title = 'Fuel Entries List';\n    this.fromDate = '';\n    this.toDate = '';\n    this.fuelID = '';\n    this.uploadedDocs = [];\n    this.disable = false;\n    this.vehicles = [];\n    this.reviewing = false;\n    this.csvHeader = [];\n    this.vehicleList = {};\n    this.assetList = {};\n    this.driverList = {};\n    this.vendorList = {};\n    this.WEXCodeList = {};\n    this.fuelCodeList = {};\n    this.countries = [];\n    this.checked = false;\n    this.isChecked = false;\n    this.headCheckbox = false;\n    this.fuelCheckCount = null;\n    this.countryName = '';\n    this.formattedFromDate = '';\n    this.formattedToDate = '';\n    this.fuelList = [];\n    this.suggestedUnits = [];\n    this.vehicleID = '';\n    this.amount = '';\n    this.SelectionType = SelectionType;\n    this.ColumnMode = ColumnMode;\n    this.vehicleIdentification = '';\n    this.unitID = null;\n    this.assetUnitID = null;\n    this.start = '';\n    this.end = '';\n    this.lastTimeCreated = '';\n    this.totalRecords = 0;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = '';\n    this.error = {\n      hasError: false,\n      message: '',\n      attributes: []\n    };\n    this.fuelNext = false;\n    this.fuelPrev = true;\n    this.fuelDraw = 0;\n    this.fuelPrevEvauatedKeys = [''];\n    this.fuelStartPoint = 1;\n    this.fuelEndPoint = this.pageLength;\n    this.allVehicles = [];\n    this.allAssets = [];\n    this.wexCategories = {};\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.rowHeight = 60;\n    this.headerHeight = 70;\n    this.pageLimit = 10;\n    this.loaded = false;\n    this.dataColumns = [{\n      width: '12%',\n      field: 'data.date',\n      header: 'Date Time',\n      type: \"date\"\n    }, {\n      width: '12%',\n      field: 'data.cardNo',\n      header: 'Fuel Card #',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'data.unitNo',\n      header: 'Unit #',\n      type: 'text'\n    }, {\n      width: '12%',\n      field: 'data.useType',\n      header: 'Use Type',\n      type: 'text'\n    }, {\n      width: '12%',\n      field: 'data.type',\n      header: ' Type',\n      type: 'text'\n    }, {\n      width: '12%',\n      field: 'data.amt',\n      header: 'Fuel Amount',\n      type: 'text'\n    }, {\n      width: '12%',\n      field: 'data.site',\n      header: 'Site',\n      type: 'text'\n    }, {\n      width: '12%',\n      field: 'data.city',\n      header: 'Province',\n      type: 'text'\n    }];\n  }\n\n  ngOnInit() {\n    this.fetchVendorList(); //   this.fuelEntriesCount();\n\n    this.fetchVehicleList();\n    this.fetchAssetList();\n    this.fetchWEXCode();\n    this.fetchDriverList();\n    this.fetchAllAssets();\n    this.fetchAllVehicles();\n    this.fetchWexCategories();\n    this.initDataTable();\n    $(document).ready(() => {\n      setTimeout(() => {\n        $('#DataTables_Table_0_wrapper .dt-buttons').addClass('custom-dt-buttons').prependTo('.page-buttons');\n      }, 1800);\n    });\n  }\n\n  onFuelSelect(event) {\n    let value = event.selected[0];\n    let fuelID = value.fuelSK.split('#')[1];\n    this.router.navigate([`/fleet/fuel/detail/${fuelID}`]);\n  }\n\n  onScroll(offsetY) {\n    const viewHeight = this.el.nativeElement.getBoundingClientRect().height - this.headerHeight;\n\n    if (offsetY + viewHeight + this.fuelList.length * this.rowHeight) {\n      let limit = this.pageLimit;\n\n      if (this.fuelList.length === 0) {\n        const pageSize = Math.ceil(viewHeight / this.rowHeight);\n        limit = Math.max(pageSize, this.pageLimit);\n      }\n\n      if (this.loaded) {\n        this.initDataTable();\n      }\n\n      this.loaded = false;\n    }\n  }\n\n  setUnit(unitID, unitName) {\n    this.unitName = unitName;\n    this.unitID = unitID;\n    this.suggestedUnits = [];\n  }\n\n  fetchWexCategories() {\n    this.httpClient.get('assets/jsonFiles/fuel/wexCategories.json').subscribe(result => {\n      this.wexCategories = result;\n    });\n  }\n\n  getSuggestions(value) {\n    value = value.toLowerCase();\n\n    if (value != '') {\n      this.apiService.getData(`vehicles/suggestion/${value}`).subscribe(result => {\n        result = result.Items;\n        this.suggestedUnits = [];\n\n        for (let i = 0; i < result.length; i++) {\n          this.suggestedUnits.push({\n            unitID: result[i].vehicleID,\n            unitName: result[i].vehicleIdentification\n          });\n        }\n\n        this.getAssetsSugg(value);\n      });\n    } else {\n      this.suggestedUnits = [];\n    }\n  }\n\n  getAssetsSugg(value) {\n    value = value.toLowerCase();\n\n    if (value != '') {\n      this.apiService.getData(`assets/suggestion/${value}`).subscribe(result => {\n        result = result.Items;\n\n        for (let i = 0; i < result.length; i++) {\n          this.suggestedUnits.push({\n            unitID: result[i].assetID,\n            unitName: result[i].assetIdentification\n          });\n        }\n      });\n    } else {\n      this.suggestedUnits = [];\n    }\n  }\n\n  fetchVendorList() {\n    this.apiService.getData('vendors').subscribe(result => {\n      result.forEach(element => {\n        this.vendorList[element.contactID] = element.companyName;\n      });\n    });\n  }\n\n  fetchVehicleList() {\n    this.apiService.getData('vehicles/get/list').subscribe(result => {\n      this.vehicleList = result;\n    });\n  }\n\n  fetchAssetList() {\n    this.apiService.getData('assets/get/list').subscribe(result => {\n      this.assetList = result;\n    });\n  }\n\n  fetchDriverList() {\n    this.apiService.getData('drivers/get/list').subscribe(result => {\n      this.driverList = result;\n    });\n  }\n\n  fetchCountries() {\n    this.apiService.getData('countries').subscribe(result => {\n      this.countries = result.Items;\n    });\n  }\n\n  fetchFuelTypeList() {\n    this.apiService.getData('fuelTypes/get/list').subscribe(result => {\n      this.fuelCodeList = result;\n    });\n  }\n\n  fetchWEXCode() {\n    this.httpClient.get('assets/jsonFiles/fuel/wexFuelType.json').subscribe(result => {\n      result.forEach(element => {\n        this.WEXCodeList[element.code] = element.type;\n      });\n    });\n  } // fuelEntriesCount() {\n  //   this.apiService.getData('fuelEntries/get/count?unitID=' + this.unitID + '&from=' + this.start + '&to=' + this.end + '&asset=' + this.assetUnitID).subscribe({\n  //     complete: () => { },\n  //     error: () => { },\n  //     next: (result: any) => {\n  //       this.totalRecords = result.Count;\n  //       if (this.unitID != null || this.start != '' || this.end != '' || this.assetUnitID != null) {\n  //         this.fuelEndPoint = this.totalRecords;\n  //       }\n  //       this.initDataTable();\n  //     },\n  //   });\n  // }\n\n\n  showTopValues() {\n    const data = {\n      fromDate: this.fromDate,\n      toDate: this.toDate\n    };\n    return;\n  } // deleteFuelEntry(fuelID) {\n  //   if (confirm('Are you sure you want to delete?') === true) {\n  //     this.apiService\n  //     .getData(`fuelEntries/isDeleted/${fuelID}/` + 1)\n  //     .subscribe((result: any) => {\n  //       this.fuelList = [];\n  //       this.fuelEntriesCount();\n  //       this.initDataTable();\n  //       this.fuelDraw = 0;\n  //       this.dataMessage = Constants.FETCHING_DATA;\n  //       this.lastEvaluatedKey = '';\n  //       this.toastr.success('Fuel Entry Deleted Successfully!');\n  //     });\n  //   }\n  // }\n\n\n  deleteFuelEntry(fuelID) {\n    if (confirm('Are you sure you want to delete?') === true) {\n      // let record = {\n      //   date: eventData.createdDate,\n      //   time: eventData.createdTime,\n      //   eventID: eventData.fuelID\n      // }\n      this.apiService.deleteData(`fuelEntries/delete/${fuelID}`).subscribe(result => {\n        this.fuelList = [];\n        this.fuelDraw = 0;\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.lastEvaluatedKey = ''; //this.fuelEntriesCount();\n\n        this.toastr.success('Fuel Entry Deleted Successfully!');\n        this.initDataTable();\n      });\n    }\n  }\n\n  initDataTable() {\n    this.apiService.getData('fuelEntries/fetch/records?unitID=' + this.unitID + '&from=' + this.start + '&to=' + this.end + '&asset=' + this.assetUnitID + '&lastKey=' + this.lastEvaluatedKey + '&timeCreated=' + this.lastTimeCreated).subscribe(result => {\n      this.loaded = true;\n\n      if (result.Items.length == 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.suggestedUnits = []; // this.getStartandEndVal();\n\n      result[`Items`].forEach(element => {\n        let date = moment(element.data.date);\n\n        if (element.data.time) {\n          let time = moment(element.data.time, 'h mm a');\n          date.set({\n            hour: time.get('hour'),\n            minute: time.get('minute')\n          });\n          date = date.format('MMM Do YYYY, h:mm a');\n        } else {\n          date = date.format('MMM Do YYYY');\n        }\n\n        element.dateTime = date; // element.fuelTime=moment(element.fuelTime).format('h:mm a')\n      });\n      this.fuelList = this.fuelList.concat(_.orderBy(result.Items, [obj => new Date(obj.data.date)], ['desc']));\n\n      if (result.LastEvaluatedKey.fuelSK !== undefined) {\n        // for prev button\n        this.lastEvaluatedKey = encodeURIComponent(result.LastEvaluatedKey.fuelSK);\n\n        if (result.LastEvaluatedKey.timeCreated !== undefined) {\n          this.lastTimeCreated = result.LastEvaluatedKey.timeCreated;\n        }\n\n        this.loaded = true;\n      } else {\n        this.lastEvaluatedKey = 'end';\n      }\n    });\n  }\n\n  searchFilter() {\n    if (this.fromDate !== '' || this.toDate !== '' || this.unitID !== null || this.assetUnitID !== null) {\n      if (this.fromDate !== '') {\n        this.start = this.fromDate;\n      }\n\n      if (this.toDate !== '') {\n        this.end = this.toDate;\n      }\n\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.fuelList = [];\n      this.lastEvaluatedKey = '';\n      this.initDataTable(); //this.fuelEntriesCount();\n    } else {\n      return false;\n    }\n  }\n\n  resetFilter() {\n    this.unitID = null;\n    this.fromDate = '';\n    this.toDate = '';\n    this.assetUnitID = null;\n    this.start = '';\n    this.end = '';\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.fuelList = [];\n    this.lastEvaluatedKey = '';\n    this.lastTimeCreated = '';\n    this.initDataTable(); //this.fuelEntriesCount();\n    //this.resetCountResult();\n  } // getStartandEndVal() {\n  //   this.fuelStartPoint = this.fuelDraw * this.pageLength + 1;\n  //   this.fuelEndPoint = this.fuelStartPoint + this.pageLength - 1;\n  // }\n  // next button func\n\n\n  nextResults() {\n    this.fuelNext = true;\n    this.fuelPrev = true;\n    this.fuelDraw += 1;\n    this.initDataTable(); //this.getStartandEndVal();\n  } // prev button func\n\n\n  prevResults() {\n    this.fuelNext = true;\n    this.fuelPrev = true;\n    this.fuelDraw -= 1;\n    this.lastEvaluatedKey = this.fuelPrevEvauatedKeys[this.fuelDraw];\n    this.initDataTable(); //this.getStartandEndVal();\n  }\n\n  resetCountResult() {\n    this.fuelStartPoint = 1;\n    this.fuelEndPoint = this.pageLength;\n    this.fuelDraw = 0;\n  }\n\n  fetchAllVehicles() {\n    this.apiService.getData('vehicles').subscribe(result => {\n      this.allVehicles = result.Items;\n    });\n  }\n\n  fetchAllAssets() {\n    this.apiService.getData('assets').subscribe(result => {\n      result.Items.forEach(e => {\n        if (e.assetType == 'reefer') {\n          let obj = {\n            assetID: e.assetID,\n            assetIdentification: e.assetIdentification\n          };\n          this.allAssets.push(obj);\n        }\n      });\n    });\n  }\n\n  refreshData() {\n    this.unitID = null;\n    this.fromDate = '';\n    this.toDate = '';\n    this.assetUnitID = null;\n    this.start = '';\n    this.end = '';\n    this.lastEvaluatedKey = '';\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.fuelList = [];\n    this.totalRecords = 0;\n    this.initDataTable(); // this.fuelEntriesCount();\n\n    this.resetCountResult();\n  }\n\n  selectDoc(event) {\n    this.error.hasError = false;\n    this.error.message = '';\n    this.error.attributes = [];\n    let files = event.target.files;\n    let condition = true;\n\n    for (let i = 0; i < files.length; i++) {\n      const element = files[i];\n      let name = element.name.split('.');\n      let ext = name[name.length - 1].toLowerCase();\n\n      if (ext != 'csv') {\n        $('#uploadedDocs').val('');\n        $('#petroDocs').val('');\n        condition = false;\n        this.toastr.error('Only csv is allowed');\n        return false;\n      }\n    }\n\n    if (condition) {\n      this.uploadedDocs = [];\n      this.uploadedDocs = files;\n      const reader = new FileReader();\n      reader.addEventListener('load', event => {\n        let csvdata = event.target.result;\n        this.csvHeader = this.parseCSV(csvdata);\n      });\n      reader.readAsBinaryString(event.target.files[0]); //this.postDocument();\n    } else {\n      this.error.hasError = true;\n      this.error.message = \"Unable to upload\";\n    }\n  }\n\n  parseCSV(data) {\n    this.csvHeader = [];\n    let newLinebrk = data.split(\"\\n\");\n    let csvHeader = newLinebrk[0].split(',');\n    return csvHeader;\n  }\n\n  validateCSV() {\n    const data = [\"Exchange Rate\", \"Card #\", \"Site City\", \"Site Name\", \"Prov/St Abb.\", 'DEF AMT', \"DEF QTY\", \"Odometer\", \"Unit #\", \"UOM\", \"Date\", \"Time\", \"Driver Id\", \"Discount Rate\", \"Reefer AMT\", \"Tractor\", \"Tractor AMT\", \"Billed Price\", \"Reefer QTY\", \"Retail Price\"];\n    let match = true;\n    const parsedData = this.csvHeader.map(element => element.includes('\\r') ? element.replace('\\r', '') : element);\n\n    if (parsedData && parsedData.length > 0) {\n      data.forEach(element => {\n        if (!parsedData.includes(element)) {\n          this.error.attributes.push(element);\n          match = false;\n        }\n      });\n    }\n\n    return match;\n  }\n\n  postDocument() {\n    this.error.hasError = false;\n    this.error.message = '';\n\n    if (this.validateCSV()) {\n      if (this.uploadedDocs.length > 0) {\n        this.reviewing = true;\n        const formData = new FormData();\n\n        for (let i = 0; i < this.uploadedDocs.length; i++) {\n          formData.append(\"uploadedDocs\", this.uploadedDocs[i]);\n        }\n\n        this.apiService.postData('fuelEntries/import/BVD', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            this.reviewing = false;\n            this.error.hasError = true;\n            this.error.message = err;\n          },\n          next: res => {\n            this.error.hasError = false;\n            this.error.message = '';\n            this.error.attributes = [];\n            this.toastr.success(\"Uploaded Successfully\");\n            $('#uploadedDocs').val('');\n            this.reviewing = false;\n          }\n        });\n      }\n    } else {\n      this.error.hasError = true;\n\n      if (this.error.attributes.length > 0) {\n        this.error.message += this.error.attributes.join(',');\n      }\n\n      this.error.message += \" CSV Headers are missing\";\n      this.reviewing = false;\n      this.uploadedDocs = [];\n    }\n  }\n\n  validatePetro() {\n    const data = [\"Sales Date\", \"Sales Time\", \"Card #\", \"City\", \"Province\", \"Product\", \"Volume\", \"Net Unit Price\", \"FET + FCT\", \"Prov. TAX\", \"GST/HST\", \"PST\", \"Amount\", \"Odometer\", \"Doc ID\", \"Driver Name\"];\n    let match = true;\n\n    try {\n      const parseData = this.csvHeader.map(element => {\n        if (element) {\n          return JSON.parse(element);\n        } else {\n          return element;\n        }\n      });\n\n      if (parseData && parseData.length > 0) {\n        data.forEach(element => {\n          if (!parseData.includes(element)) {\n            this.error.attributes.push(element);\n            match = false;\n          }\n        });\n      } else {\n        match = false;\n      }\n\n      return match;\n    } catch (err) {\n      this.error.hasError = true;\n      this.error.message = \"Unable to Parse\";\n      this.reviewing = false;\n    }\n  }\n\n  postPetroDoc() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.reviewing = true;\n      _this.error.hasError = false;\n      _this.error.message = '';\n      const val = yield _this.validatePetro();\n\n      if (val) {\n        if (_this.uploadedDocs.length > 0) {\n          const formData = new FormData();\n\n          for (let i = 0; i < _this.uploadedDocs.length; i++) {\n            formData.append(\"uploadedDocs\", _this.uploadedDocs[i]);\n          }\n\n          _this.apiService.postData('fuelEntries/import/petro', formData, true).subscribe({\n            complete: () => {},\n            error: err => {\n              _this.reviewing = false;\n              _this.error.hasError = true;\n              _this.error.message = err;\n            },\n            next: res => {\n              _this.error.hasError = false;\n              _this.error.message = '';\n              _this.error.attributes = [];\n\n              _this.toastr.success(\"Uploaded Successfully\");\n\n              $('#petroDocs').val('');\n              _this.reviewing = false;\n            }\n          });\n        }\n      } else {\n        _this.error.hasError = true;\n\n        if (_this.error.attributes.length > 0) {\n          _this.error.message = `CSV Headers are missing: ${_this.error.attributes.join(',')}`;\n        }\n\n        _this.reviewing = false;\n        _this.uploadedDocs = [];\n      }\n    })();\n  }\n  /**\r\n    * Clears the table filters\r\n    * @param table Table\r\n    */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nFuelEntryListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HttpClient\n}, {\n  type: ElementRef\n}, {\n  type: Router\n}];\n\nFuelEntryListComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }]\n};\nFuelEntryListComponent = __decorate([Component({\n  selector: 'app-fuel-entry-list',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [DatePipe],\n  encapsulation: ViewEncapsulation.None,\n  styles: [__NG_CLI_RESOURCE__1]\n})], FuelEntryListComponent);\nexport { FuelEntryListComponent };","map":null,"metadata":{},"sourceType":"module"}