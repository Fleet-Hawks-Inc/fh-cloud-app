{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./invoice-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./invoice-list.component.css\";\nimport { AccountService, ApiService } from \"../../../../services\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ToastrService } from \"ngx-toastr\";\nimport Constants from \"../../../fleet/constants\";\nimport { Router } from \"@angular/router\";\nimport * as moment from 'moment';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport * as html2pdf from \"html2pdf.js\";\nlet InvoiceListComponent = class InvoiceListComponent {\n  constructor(accountService, apiService, toaster, router, modalService) {\n    this.accountService = accountService;\n    this.apiService = apiService;\n    this.toaster = toaster;\n    this.router = router;\n    this.modalService = modalService;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.invoices = [];\n    this.fetchedManualInvoices = [];\n    this.fetchedOrderInvoices = [];\n    this.customersObjects = {};\n    this.totalCAD = 0;\n    this.totalUSD = 0;\n    this.exportLoading = false;\n    this.openInvoices = [];\n    this.openTotalCAD = 0;\n    this.openTotalUSD = 0;\n    this.paidInvoices = [];\n    this.unPaidInvoices = [];\n    this.paidTotalCAD = 0;\n    this.paidTotalUSD = 0;\n    this.emailedInvoices = [];\n    this.emailedTotalUSD = 0;\n    this.emailedTotalCAD = 0;\n    this.partiallyPaidInvoices = [];\n    this.partiallyPaidTotalCAD = 0;\n    this.partiallyPaidTotalUSD = 0;\n    this.voidedInvoices = [];\n    this.voidedTotalCAD = 0;\n    this.voidedTotalUSD = 0;\n    this.invoiceTypeObject = {\n      all: \"all\",\n      open: \"Open\",\n      paid: \"paid\",\n      partially_paid: \"Partial Paid\",\n      unpaid: \"Unpaid\"\n    };\n    this.allData = []; // Order Invoice\n\n    this.orderInvoices = [];\n    this.openOrderInvoices = [];\n    this.paidOrderInvoices = [];\n    this.unPaidOrderInvoices = [];\n    this.emailedOrderInvoices = [];\n    this.partiallyPaidOrderInvoices = [];\n    this.voidedOrderInvoices = [];\n    this.filter = {\n      startDate: null,\n      endDate: null,\n      category: null,\n      searchValue: null,\n      invNo: null,\n      customer: null,\n      invType: null\n    };\n    this.lastItemSK = \"\";\n    this.lastItemOrderSK = \"\";\n    this.loaded = false;\n    this.loadedOrder = false;\n    this.disableSearch = false;\n    this.disableSearchOrder = false;\n    this.searchActive = false;\n    this.invoicesCAD = [];\n    this.invoicesUSD = [];\n    this.overdueTotalCAD = 0;\n    this.overdueTotalUSD = 0;\n  }\n\n  ngOnInit() {\n    this.lastItemSK = \"\";\n    this.lastItemOrderSK = \"\";\n    this.invoices = [];\n    this.orderInvoices = [];\n    this.fetchCustomersByIDs();\n    this.fetchInvoices();\n    this.getInvoices();\n  }\n\n  fetchInvoices() {\n    this.accountService.getData(\"order-invoice/all/invoices\").subscribe(res => {\n      this.fetchedOrderInvoices = res;\n      this.getTotalInvoices(this.fetchedOrderInvoices, \"order\");\n    });\n    this.accountService.getData(\"invoices/all/invoices\").subscribe(res => {\n      this.fetchedManualInvoices = res;\n      this.getTotalInvoices(this.fetchedManualInvoices, \"manual\");\n    });\n  } // getTotalOrderInvoices(invoices: any) {\n  //   if (invoices.length > 0) {\n  //     for (const element of invoices) {\n  //       if (element.invStatus === 'open') {\n  //         this.openTotal = this.openTotal + Number(element.finalAmount);\n  //         this.openTotal = +(this.openTotal).toFixed(2);\n  //       } else if (element.invStatus === 'paid') {\n  //         this.paidTotal = this.paidTotal + Number(element.finalAmount);\n  //         this.paidTotal = +(this.paidTotal).toFixed(2);\n  //       } else if (element.invStatus === 'emailed') {\n  //         this.emailedTotal = this.emailedTotal + Number(element.finalAmount);\n  //         this.emailedTotal = +(this.emailedTotal).toFixed(2);\n  //       } else if (element.invStatus === 'partially_paid') {\n  //         this.partiallyPaidTotal = this.partiallyPaidTotal + Number(element.finalAmount);\n  //         this.partiallyPaidTotal = +(this.partiallyPaidTotal).toFixed(2);\n  //       } else if (element.invStatus === 'voided') {\n  //         this.voidedTotal = this.voidedTotal + Number(element.finalAmount);\n  //         this.voidedTotal = +(this.voidedTotal).toFixed(2);\n  //       }\n  //     }\n  //     this.total = this.openTotal + this.paidTotal + this.emailedTotal + this.partiallyPaidTotal + this.voidedTotal;\n  //     this.total = +(this.total).toFixed(2);\n  //   }\n  // }\n\n\n  getTotalInvoices(invoices, type) {\n    // const invoicesCAD = [];\n    // const invoicesUSD = [];\n    this.openTotalUSD = 0;\n    this.paidTotalUSD = 0;\n    this.emailedTotalUSD = 0;\n    this.partiallyPaidTotalUSD = 0;\n    this.voidedTotalUSD = 0;\n    this.openTotalCAD = 0;\n    this.paidTotalCAD = 0;\n    this.emailedTotalCAD = 0;\n    this.partiallyPaidTotalCAD = 0;\n    this.voidedTotalCAD = 0;\n    this.overdueTotalCAD = 0;\n    this.overdueTotalUSD = 0;\n\n    if (type === \"manual\") {\n      invoices.map(e => {\n        if (e.invCur === \"CAD\") {\n          this.invoicesCAD.push(e);\n        } else {\n          this.invoicesUSD.push(e);\n        }\n      });\n    } else {\n      invoices.map(e => {\n        if (e.charges.freightFee.currency === \"CAD\") {\n          this.invoicesCAD.push(e);\n        } else {\n          this.invoicesUSD.push(e);\n        }\n      });\n    }\n\n    if (this.invoicesCAD.length > 0 || this.invoicesUSD.length > 0) {\n      for (const element of this.invoicesCAD) {\n        if (element.invStatus === \"open\") {\n          this.openTotalCAD = this.openTotalCAD + Number(element.finalAmount);\n          this.openTotalCAD = +this.openTotalCAD.toFixed(2);\n        } else if (element.invStatus === \"paid\") {\n          this.paidTotalCAD = this.paidTotalCAD + Number(element.finalAmount);\n          this.paidTotalCAD = +this.paidTotalCAD.toFixed(2);\n        } else if (element.invStatus === \"emailed\") {\n          this.emailedTotalCAD = this.emailedTotalCAD + Number(element.finalAmount);\n          this.emailedTotalCAD = +this.emailedTotalCAD.toFixed(2);\n        } else if (element.invStatus === \"partially_paid\" || element.invStatus === \"partially paid\") {\n          this.partiallyPaidTotalCAD = this.partiallyPaidTotalCAD + Number(element.finalAmount);\n          this.partiallyPaidTotalCAD = +this.partiallyPaidTotalCAD.toFixed(2);\n        } else if (element.invStatus === \"voided\") {\n          this.voidedTotalCAD = this.voidedTotalCAD + Number(element.finalAmount);\n          this.voidedTotalCAD = +this.voidedTotalCAD.toFixed(2);\n        } else if (element.invStatus === \"overdue\") {\n          this.overdueTotalCAD = this.overdueTotalCAD + Number(element.finalAmount);\n          this.overdueTotalCAD = +this.overdueTotalCAD.toFixed(2);\n        }\n      }\n\n      for (const element of this.invoicesUSD) {\n        if (element.invStatus === \"open\") {\n          this.openTotalUSD = this.openTotalUSD + Number(element.finalAmount);\n          this.openTotalUSD = +this.openTotalUSD.toFixed(2);\n        } else if (element.invStatus === \"paid\") {\n          this.paidTotalUSD = this.paidTotalUSD + Number(element.finalAmount);\n          this.paidTotalUSD = +this.paidTotalUSD.toFixed(2);\n        } else if (element.invStatus === \"emailed\") {\n          this.emailedTotalUSD = this.emailedTotalUSD + Number(element.finalAmount);\n          this.emailedTotalUSD = +this.emailedTotalUSD.toFixed(2);\n        } else if (element.invStatus === \"partially_paid\" || element.invStatus === \"partially paid\") {\n          this.partiallyPaidTotalUSD = this.partiallyPaidTotalUSD + Number(element.finalAmount);\n          this.partiallyPaidTotalUSD = +this.partiallyPaidTotalUSD.toFixed(2);\n        } else if (element.invStatus === \"voided\") {\n          this.voidedTotalUSD = this.voidedTotalUSD + Number(element.finalAmount);\n          this.voidedTotalUSD = +this.voidedTotalUSD.toFixed(2);\n        } else if (element.invStatus === \"overdue\") {\n          this.overdueTotalUSD = this.overdueTotalUSD + Number(element.finalAmount);\n          this.overdueTotalUSD = +this.overdueTotalUSD.toFixed(2);\n        }\n      }\n\n      this.totalUSD = this.openTotalUSD + this.paidTotalUSD + this.emailedTotalUSD + this.partiallyPaidTotalUSD + this.voidedTotalUSD + this.overdueTotalUSD;\n      this.totalUSD = +this.totalUSD.toFixed(2);\n      this.totalCAD = this.openTotalCAD + this.paidTotalCAD + this.emailedTotalCAD + this.partiallyPaidTotalCAD + this.voidedTotalCAD + this.overdueTotalCAD;\n      this.totalCAD = +this.totalCAD.toFixed(2);\n    }\n  }\n\n  getInvoices(refresh) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let searchParam = null;\n      let searchParamOrder = null;\n      _this.disableSearch = true;\n\n      if (refresh === true) {\n        _this.lastItemSK = \"\";\n        _this.invoices = [];\n        _this.openInvoices = [];\n        _this.paidInvoices = [];\n        _this.emailedInvoices = [];\n        _this.partiallyPaidInvoices = [];\n        _this.voidedInvoices = [];\n        _this.unPaidInvoices = [];\n      }\n\n      if (_this.lastItemSK !== \"end\") {\n        if (_this.filter.category !== null && _this.filter.category !== \"\") {\n          searchParam = _this.filter.category === 'invNo' || _this.filter.category === 'cusConfirm' ? encodeURIComponent(`\"${_this.filter.searchValue}\"`) : _this.filter.searchValue; // searchParam = searchParam.toUpperCase();\n        } else {\n          searchParam = null;\n        }\n\n        let result = yield _this.accountService.getData(`invoices/paging?searchValue=${searchParam}&startDate=${_this.filter.startDate}&endDate=${_this.filter.endDate}&lastKey=${_this.lastItemSK}&category=${_this.filter.category}&invType=${_this.filter.invType}`).toPromise(); // .subscribe(async (result: any) => {\n\n        if (result.length === 0) {\n          // this.dataMessage = Constants.NO_RECORDS_FOUND;\n          _this.loaded = true;\n          _this.disableSearch = false; // this.categorizeInvoices(result);\n        }\n\n        if (result.length > 0) {\n          for (let index = 0; index < result.length; index++) {\n            const element = result[index];\n            _this.disableSearch = false;\n            element.invStatus = element.invStatus.replace(\"_\", \" \");\n\n            _this.invoices.push(element);\n          }\n\n          if (_this.invoices[_this.invoices.length - 1].sk !== undefined) {\n            _this.lastItemSK = encodeURIComponent(_this.invoices[_this.invoices.length - 1].sk);\n          } else {\n            _this.lastItemSK = \"end\";\n          }\n\n          _this.loaded = true;\n\n          _this.categorizeInvoices(_this.invoices);\n\n          if (_this.searchActive) {\n            _this.invoicesCAD = [];\n            _this.invoicesUSD = [];\n\n            _this.getTotalInvoices(_this.invoices, \"manual\");\n          }\n        } // });\n\n      } // Order invoices\n\n\n      searchParamOrder = yield _this.getOrderInvoices(refresh, searchParamOrder);\n    })();\n  }\n\n  emptyPrevCalculation() {\n    this.totalCAD = 0;\n    this.totalUSD = 0;\n    this.openTotalCAD = 0;\n    this.openTotalUSD = 0;\n    this.paidTotalCAD = 0;\n    this.paidTotalUSD = 0;\n    this.partiallyPaidTotalCAD = 0;\n    this.partiallyPaidTotalUSD = 0;\n    this.voidedTotalCAD = 0;\n    this.voidedTotalUSD = 0;\n    this.invoicesUSD = [];\n    this.invoicesCAD = [];\n  }\n\n  resetValue() {\n    this.filter.searchValue = null;\n  }\n\n  getOrderInvoices(refresh, searchParamOrder) {\n    var _this2 = this;\n\n    if (refresh === true) {\n      this.lastItemOrderSK = \"\";\n      this.orderInvoices = [];\n      this.openOrderInvoices = [];\n      this.paidOrderInvoices = [];\n      this.unPaidOrderInvoices = [];\n      this.emailedOrderInvoices = [];\n      this.partiallyPaidOrderInvoices = [];\n      this.voidedOrderInvoices = [];\n    }\n\n    if (this.lastItemOrderSK !== \"end\") {\n      if (this.filter.category !== null && this.filter.category !== \"\") {\n        searchParamOrder = this.filter.category === 'invNo' || this.filter.category === 'cusConfirm' ? encodeURIComponent(`\"${this.filter.searchValue}\"`) : this.filter.searchValue;\n      } else {\n        searchParamOrder = null;\n      }\n\n      this.accountService.getData(`order-invoice/paging?searchValue=${searchParamOrder}&startDate=${this.filter.startDate}&endDate=${this.filter.endDate}&lastKey=${this.lastItemOrderSK}&category=${this.filter.category}&invType=${this.filter.invType}`).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          if (result.length === 0) {\n            _this2.disableSearchOrder = false;\n            _this2.dataMessage = Constants.NO_RECORDS_FOUND;\n            _this2.loadedOrder = true;\n\n            _this2.categorizeOrderInvoices(result);\n          }\n\n          if (result.length > 0) {\n            _this2.disableSearchOrder = false;\n\n            for (let index = 0; index < result.length; index++) {\n              const element = result[index];\n              element.invStatus = element.invStatus.replace(\"_\", \" \");\n\n              _this2.orderInvoices.push(element);\n            }\n\n            if (_this2.orderInvoices[_this2.orderInvoices.length - 1].sk !== undefined) {\n              _this2.lastItemOrderSK = encodeURIComponent(_this2.orderInvoices[_this2.orderInvoices.length - 1].sk);\n            } else {\n              _this2.lastItemOrderSK = \"end\";\n            }\n\n            _this2.loadedOrder = true;\n\n            _this2.categorizeOrderInvoices(_this2.orderInvoices);\n\n            if (_this2.searchActive) {\n              // this.invoicesCAD = [];\n              // this.invoicesUSD = [];\n              _this2.getTotalInvoices(_this2.orderInvoices, \"order\");\n            }\n\n            _this2.searchActive = false;\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    return searchParamOrder;\n  }\n\n  onScroll() {\n    if (this.loaded && this.loadedOrder) {\n      this.getInvoices();\n    }\n  }\n\n  routeFn(invID, type) {\n    if (type === \"manual\") {\n      this.router.navigateByUrl(`/accounts/invoices/detail/${invID}`);\n    } else {\n      this.router.navigateByUrl(`/accounts/invoices/load-invoice-detail/${invID}`);\n    }\n  }\n\n  categorizeOrderInvoices(invoices) {\n    if (invoices.length > 0) {\n      this.openOrderInvoices = [];\n      this.paidOrderInvoices = [];\n      this.unPaidOrderInvoices = [];\n      this.emailedOrderInvoices = [];\n      this.partiallyPaidOrderInvoices = [];\n      this.voidedOrderInvoices = [];\n\n      for (const element of invoices) {\n        if (element.invStatus === \"open\") {\n          this.openOrderInvoices.push(element);\n          this.unPaidOrderInvoices.push(element);\n        } else if (element.invStatus === \"paid\") {\n          this.paidOrderInvoices.push(element);\n        } else if (element.invStatus === \"emailed\") {\n          this.emailedOrderInvoices.push(element);\n        } else if (element.invStatus === \"partially paid\") {\n          this.partiallyPaidOrderInvoices.push(element);\n          this.unPaidOrderInvoices.push(element);\n        } else if (element.invStatus === \"voided\") {\n          this.voidedOrderInvoices.push(element);\n        }\n      }\n    } else {\n      this.openOrderInvoices = [];\n      this.paidOrderInvoices = [];\n      this.unPaidOrderInvoices = [];\n      this.emailedOrderInvoices = [];\n      this.partiallyPaidOrderInvoices = [];\n      this.voidedOrderInvoices = [];\n    }\n  }\n\n  categorizeInvoices(invoices) {\n    if (invoices.length > 0) {\n      this.openInvoices = [];\n      this.paidInvoices = [];\n      this.unPaidInvoices = [];\n      this.emailedInvoices = [];\n      this.partiallyPaidInvoices = [];\n      this.voidedInvoices = [];\n      this.findOverDueInvoice(this.openInvoices);\n\n      for (const element of invoices) {\n        if (element.invStatus === \"open\") {\n          this.openInvoices.push(element);\n          this.unPaidInvoices.push(element);\n          this.findOverDueInvoice(this.openInvoices);\n        } else if (element.invStatus === \"paid\") {\n          this.paidInvoices.push(element);\n        } else if (element.invStatus === \"emailed\") {\n          this.emailedInvoices.push(element);\n        } else if (element.invStatus === \"partially paid\") {\n          this.partiallyPaidInvoices.push(element);\n          this.unPaidInvoices.push(element);\n        } else if (element.invStatus === \"voided\") {\n          this.voidedInvoices.push(element);\n        }\n      }\n    } else {\n      this.openInvoices = [];\n      this.paidInvoices = [];\n      this.emailedInvoices = [];\n      this.partiallyPaidInvoices = [];\n      this.voidedInvoices = [];\n      this.unPaidInvoices = [];\n    }\n  }\n\n  findOverDueInvoice(invoices) {\n    for (const operator of invoices) {\n      const curDate = new Date().getTime();\n      const dueDate = Date.parse(operator.invDueDate);\n\n      if (curDate >= dueDate) {\n        delete operator.invStatus;\n        operator[`invStatus`] = \"overdue\";\n      } else {\n        operator[`invStatus`] = \"open\";\n      }\n    }\n  }\n  /*\r\n   * Get all customers's IDs of names from api\r\n   */\n\n\n  fetchCustomersByIDs() {\n    this.apiService.getData(\"contacts/get/list\").subscribe(result => {\n      this.customersObjects = result;\n    });\n  }\n\n  voidInvoice(invID) {\n    if (confirm(\"Are you sure you want to void?\") === true) {\n      this.disableSearch = true;\n      this.disableSearchOrder = true;\n      this.accountService.deleteData(`invoices/manual/${invID}`).subscribe(result => {\n        if (result !== undefined) {\n          this.lastItemSK = \"\";\n          this.lastItemOrderSK = \"\";\n          this.totalCAD = 0;\n          this.totalUSD = 0;\n          this.openInvoices = [];\n          this.openTotalCAD = 0;\n          this.openTotalUSD = 0;\n          this.paidInvoices = [];\n          this.unPaidInvoices = [];\n          this.paidTotalCAD = 0;\n          this.paidTotalUSD = 0;\n          this.emailedInvoices = [];\n          this.emailedTotalCAD = 0;\n          this.emailedTotalUSD = 0;\n          this.partiallyPaidInvoices = [];\n          this.partiallyPaidTotalCAD = 0;\n          this.partiallyPaidTotalUSD = 0;\n          this.voidedInvoices = [];\n          this.voidedTotalCAD = 0;\n          this.voidedTotalUSD = 0;\n          this.invoices = [];\n          this.fetchedManualInvoices = [];\n          this.orderInvoices = [];\n          this.openOrderInvoices = [];\n          this.paidOrderInvoices = [];\n          this.unPaidOrderInvoices = [];\n          this.emailedOrderInvoices = [];\n          this.partiallyPaidOrderInvoices = [];\n          this.voidedOrderInvoices = [];\n          this.fetchedOrderInvoices = [];\n          this.fetchInvoices();\n          this.getInvoices();\n          this.toaster.success(\"Invoice Deleted Successfully.\");\n        }\n      });\n    }\n  }\n\n  changeStatus(invID) {\n    this.invID = invID;\n    $(\"#updateStatusModal\").modal(\"show\");\n  }\n\n  editFn(invID) {\n    this.router.navigateByUrl(`/accounts/invoices/edit/${invID}`);\n  }\n\n  updateInvStatus() {\n    this.accountService.getData(`invoices/status/${this.invID}/${this.invNewStatus}`).subscribe(() => {\n      this.toaster.success(\"Invoice Status Updated Successfully.\");\n      this.fetchInvoices();\n      $(\"#updateStatusModal\").modal(\"hide\");\n    });\n  }\n\n  voidOrderInvoice(invID, orderID, orderNo) {\n    if (confirm(\"Are you sure you want to void?\") === true) {\n      this.disableSearch = true;\n      this.disableSearchOrder = true;\n      this.accountService.deleteData(`order-invoice/delete/${invID}`).subscribe(() => {\n        this.invGenStatus = false;\n        this.apiService.getData(`orders/invoiceStatus/${orderID}/${orderNo}/${this.invGenStatus}`).subscribe(res => {\n          if (res !== undefined) {\n            this.lastItemSK = \"\";\n            this.lastItemOrderSK = \"\";\n            this.totalCAD = 0;\n            this.totalUSD = 0;\n            this.openInvoices = [];\n            this.openTotalCAD = 0;\n            this.openTotalUSD = 0;\n            this.paidInvoices = [];\n            this.unPaidInvoices = [];\n            this.paidTotalCAD = 0;\n            this.paidTotalUSD = 0;\n            this.emailedInvoices = [];\n            this.emailedTotalCAD = 0;\n            this.emailedTotalUSD = 0;\n            this.partiallyPaidInvoices = [];\n            this.partiallyPaidTotalCAD = 0;\n            this.partiallyPaidTotalUSD = 0;\n            this.voidedInvoices = [];\n            this.voidedTotalCAD = 0;\n            this.voidedTotalUSD = 0;\n            this.invoices = [];\n            this.fetchedManualInvoices = [];\n            this.orderInvoices = [];\n            this.openOrderInvoices = [];\n            this.paidOrderInvoices = [];\n            this.unPaidOrderInvoices = [];\n            this.emailedOrderInvoices = [];\n            this.partiallyPaidOrderInvoices = [];\n            this.voidedOrderInvoices = [];\n            this.fetchedOrderInvoices = [];\n            this.fetchInvoices();\n            this.getInvoices();\n            this.toaster.success(\"Invoice Deleted Successfully.\");\n          }\n        });\n      });\n    }\n  }\n\n  searchFilter() {\n    if (this.filter.endDate !== null || this.filter.startDate !== null || this.filter.searchValue !== null || this.filter.category !== null || this.filter.invType !== null) {\n      // this.dataMessage = Constants.FETCHING_DATA;\n      if (this.filter.startDate !== \"\" && this.filter.endDate === \"\") {\n        this.toaster.error(\"Please select both start and end dates.\");\n        return false;\n      } else if (this.filter.startDate === \"\" && this.filter.endDate !== \"\") {\n        this.toaster.error(\"Please select both start and end dates.\");\n        return false;\n      } else if (this.filter.startDate > this.filter.endDate) {\n        this.toaster.error(\"Start date should be less than end date\");\n        return false;\n      } else {\n        this.disableSearch = true;\n        this.disableSearchOrder = true;\n        this.searchActive = true;\n        this.invoices = [];\n        this.orderInvoices = [];\n        this.lastItemSK = \"\";\n        this.lastItemOrderSK = \"\";\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.emptyPrevCalculation();\n        this.getInvoices();\n      }\n    }\n  }\n\n  setMessage() {\n    if (this.invoices.length === 0 && this.orderInvoices.length === 0) {\n      this.dataMessage = Constants.NO_RECORDS_FOUND;\n    }\n  }\n\n  resetFilter() {\n    this.disableSearch = true;\n    this.disableSearchOrder = true; // this.searchActive = true;\n\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filter = {\n      startDate: null,\n      endDate: null,\n      category: null,\n      searchValue: null,\n      invNo: null,\n      customer: null,\n      invType: null\n    };\n    this.lastItemSK = \"\";\n    this.lastItemOrderSK = \"\";\n    this.totalCAD = 0;\n    this.totalUSD = 0;\n    this.openInvoices = [];\n    this.openTotalCAD = 0;\n    this.openTotalUSD = 0;\n    this.paidInvoices = [];\n    this.unPaidInvoices = [];\n    this.paidTotalCAD = 0;\n    this.paidTotalUSD = 0;\n    this.emailedInvoices = [];\n    this.emailedTotalUSD = 0;\n    this.emailedTotalCAD = 0;\n    this.partiallyPaidInvoices = [];\n    this.partiallyPaidTotalCAD = 0;\n    this.partiallyPaidTotalUSD = 0;\n    this.voidedInvoices = [];\n    this.voidedTotalCAD = 0;\n    this.voidedTotalUSD = 0;\n    this.invoices = [];\n    this.orderInvoices = [];\n    this.fetchedManualInvoices = [];\n    this.fetchedOrderInvoices = [];\n    this.emptyPrevCalculation();\n    this.fetchInvoices();\n    this.getInvoices();\n  }\n\n  refreshData() {\n    this.disableSearch = true;\n    this.disableSearchOrder = true;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filter = {\n      startDate: null,\n      endDate: null,\n      category: null,\n      searchValue: null,\n      invNo: null,\n      customer: null,\n      invType: null\n    };\n    this.lastItemSK = \"\";\n    this.lastItemOrderSK = \"\";\n    this.totalCAD = 0;\n    this.totalUSD = 0;\n    this.openInvoices = [];\n    this.openTotalCAD = 0;\n    this.openTotalUSD = 0;\n    this.paidInvoices = [];\n    this.unPaidInvoices = [];\n    this.paidTotalCAD = 0;\n    this.paidTotalUSD = 0;\n    this.emailedInvoices = [];\n    this.emailedTotalCAD = 0;\n    this.emailedTotalUSD = 0;\n    this.partiallyPaidInvoices = [];\n    this.partiallyPaidTotalCAD = 0;\n    this.partiallyPaidTotalUSD = 0;\n    this.voidedInvoices = [];\n    this.voidedTotalCAD = 0;\n    this.voidedTotalUSD = 0;\n    this.invoices = [];\n    this.orderInvoices = [];\n    this.fetchedManualInvoices = [];\n    this.fetchedOrderInvoices = [];\n    this.fetchInvoices();\n    this.getInvoices();\n  }\n\n  getData(refresh) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.allData = [];\n      let searchParam = null;\n      let searchParamOrder = null;\n\n      if (refresh == true) {\n        _this3.lastItemOrderSK = \"\";\n        _this3.lastItemSK = \"\";\n      }\n\n      if (_this3.lastItemSK == \"end\" || _this3.lastItemOrderSK == \"end\") {\n        if (_this3.filter.category !== null && _this3.filter.category !== \"\") {\n          searchParamOrder = _this3.filter.category === 'invNo' || _this3.filter.category === 'cusConfirm' ? encodeURIComponent(`\"${_this3.filter.searchValue}\"`) : _this3.filter.searchValue;\n        } else {\n          searchParamOrder = null;\n        }\n\n        if (_this3.filter.category !== null && _this3.filter.category !== \"\") {\n          searchParam = _this3.filter.category === 'invNo' || _this3.filter.category === 'cusConfirm' ? encodeURIComponent(`\"${_this3.filter.searchValue}\"`) : _this3.filter.searchValue;\n        } else {\n          searchParam = null;\n        }\n\n        let result = yield _this3.accountService.getData(`invoices/export?searchValue=${searchParam}&startDate=${_this3.filter.startDate}&endDate=${_this3.filter.endDate}&lastKey=${_this3.lastItemSK}&category=${_this3.filter.category}&invType=${_this3.filter.invType}`).toPromise();\n\n        if (result && result.length > 0) {\n          _this3.allData = _this3.allData.concat(result);\n        }\n\n        let orderInvoice = yield _this3.accountService.getData(`order-invoice/export?searchValue=${searchParamOrder}&startDate=${_this3.filter.startDate}&endDate=${_this3.filter.endDate}&lastKey=${_this3.lastItemOrderSK}&category=${_this3.filter.category}&invType=${_this3.filter.invType}`).toPromise();\n\n        if (orderInvoice && orderInvoice.length > 0) {\n          _this3.allData = _this3.allData.concat(orderInvoice);\n        }\n      }\n    })();\n  }\n\n  generateCSV() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.exportLoading = true;\n      let dataObject = [];\n      let csvArray = [];\n\n      try {\n        yield _this4.getData();\n\n        if (_this4.allData.length > 0) {\n          for (const element of _this4.allData) {\n            let obj = {};\n            obj[\"invoice#\"] = element.invNo;\n            obj[\"Date\"] = element.txnDate;\n            obj[\"Customer\"] = _this4.customersObjects[element.customerID];\n            obj[\"Order#\"] = element.invNo;\n            obj[\"Freight Amount\"] = element.charges !== undefined ? element.charges.freightFee.amount : \"-\";\n            obj[\"Tax\"] = element.taxesAmt === undefined ? element.taxAmount : element.taxesAmt;\n            obj[\"Total Amount\"] = element.subTotal;\n            obj[\"Amount Received\"] = element.amountReceived;\n            obj[\"Balance\"] = element.balance;\n            obj[\"Due Date\"] = element.invDueDate;\n            obj[\"Invoice Status\"] = element.invStatus;\n            dataObject.push(obj);\n          }\n\n          let headers = Object.keys(dataObject[0]).join(',');\n          headers += '\\n';\n          csvArray.push(headers);\n\n          for (const element of dataObject) {\n            let value = Object.values(element).join(',');\n            value += '\\n';\n            csvArray.push(value);\n          }\n\n          const blob = new Blob(csvArray, {\n            type: 'text/csv;charset=utf-8'\n          });\n          const link = document.createElement('a');\n\n          if (link.download !== undefined) {\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}-invoice.csv`);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          }\n\n          _this4.exportLoading = false;\n        } else {\n          _this4.toaster.success(\"No Data Found\");\n\n          _this4.exportLoading = false;\n        }\n      } catch (error) {\n        _this4.exportLoading = false;\n      }\n    })();\n  }\n\n  openPDFPreview() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.exportLoading = true;\n      yield _this5.getData();\n      let ngbModalOptions = {\n        keyboard: true,\n        windowClass: \"preview\"\n      };\n      _this5.preview = _this5.modalService.open(_this5.previewInvoiceModal, ngbModalOptions);\n      _this5.exportLoading = false;\n    })();\n  }\n\n  generatePDF() {\n    let data = document.getElementById(\"print_wrap\");\n    html2pdf(data, {\n      margin: 0,\n      pagebreak: {\n        mode: \"avoid-all\"\n      },\n      filename: \"invoice.pdf\",\n      image: {\n        type: \"jpeg\",\n        quality: 0.98\n      },\n      html2Canvas: {\n        dpi: 200,\n        letterRendering: true\n      },\n      jsPDF: {\n        unit: \"in\",\n        format: \"a4\",\n        orientation: \"landscape\"\n      }\n    });\n    $(\"#previewInvoiceModal\").modal(\"hide\");\n  }\n\n};\n\nInvoiceListComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: Router\n}, {\n  type: NgbModal\n}];\n\nInvoiceListComponent.propDecorators = {\n  previewInvoiceModal: [{\n    type: ViewChild,\n    args: [\"previewInvoiceModal\", {\n      static: true\n    }]\n  }]\n};\nInvoiceListComponent = __decorate([Component({\n  selector: \"app-invoice-list\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], InvoiceListComponent);\nexport { InvoiceListComponent };","map":null,"metadata":{},"sourceType":"module"}