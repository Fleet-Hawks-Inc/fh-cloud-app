{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./api.service\";\nexport class HereMapService {\n  constructor(http, apiService) {\n    var _this = this;\n\n    this.http = http;\n    this.apiService = apiService;\n    this.origin = '50.458573,-104.639188';\n    this.destination = '51.056646,-114.144170';\n    this.totalWayPoints = new Array();\n    this.totalDistance = '00';\n    this.totalTime = '00';\n    this.viaPoints = new Array();\n    this.apiKey = environment.mapConfig.apiKey;\n    /**\r\n     * Initialize maps\r\n     */\n\n    this.mapSetAPI = () => {\n      return this.platform = new H.service.Platform({\n        'apikey': this.apiKey\n      });\n    };\n\n    this.mapInit = () => {\n      const defaultLayers = this.platform.createDefaultLayers();\n      this.map = new H.Map(document.getElementById('map'), defaultLayers.vector.normal.truck, {\n        zoom: 4.5,\n        center: {\n          lat: 45.8598584,\n          lng: -94.526364\n        },\n        pixelRatio: window.devicePixelRatio || 1\n      }); //   let provider = this.map.getBaseLayer().getProvider();\n      //   var style = new H.map.Style('/assets/hereMapStyles/defaultDark/dark/dark.yaml',\n      //   'https://js.api.here.com/v3/3.1/styles/omv/');\n      // // set the style on the existing layer\n      // provider.setStyle(style)\n      // const mapTileService = this.platform.getMapTileService({\n      //   type: 'base'\n      // });\n      // const parameters = {\n      //   congestion: true,\n      //   ppi: 320\n      // };\n      // // possible value  'normal.day', and 'normal.night'\n      // const tileLayer = mapTileService.createTileLayer(\n      //   'trucktile',\n      //   'normal.night',\n      //   256,\n      //   'png',\n      //   parameters\n      // );\n      // This display the current traffic detail -> Green Means Free, Yellow means Moderate Congestion\n      // Red means High Congestion\n      //this.map.addLayer(defaultLayers.vector.normal.traffic);\n      // this.map.addLayer(tileLayer);\n      // // This display the traffic incidents - by default its updated in every 3 mins\n      //this.map.addLayer(defaultLayers.vector.normal.trafficincidents);\n      // this.map.setBaseLayer(tileLayer);\n      // this.getCurrentLocation();\n\n      const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(this.map));\n      behavior.disable(H.mapevents.Behavior.WHEELZOOM);\n      this.ui = H.ui.UI.createDefault(this.map, defaultLayers);\n      this.ui.getControl('mapsettings').setDisabled(false);\n      this.ui.getControl('mapsettings').setAlignment('bottom-left');\n      this.ui.getControl('zoom').setAlignment('bottom-left');\n      this.ui.getControl('scalebar').setAlignment('bottom-left');\n      this.ui.getControl('mapsettings').setVisibility(true); //   let mapSettings = this.ui.getControl('mapsettings');\n      //   let zoom = this.ui.getControl('zoom');\n      //   let scalebar = this.ui.getControl('scalebar');\n      //   mapSettings\n      //   zoom.setAlignment('bottom-left');\n      //   scalebar.setAlignment('bottom-left');\n\n      return this.map;\n    };\n    /*\r\n    AutoSuggest Search Api v7\r\n    */\n    // searchLocation = async (query) => {\n    //   this.platform = new H.service.Platform({\n    //     'apikey': this.apiKey,\n    //   });\n    //   if (query !== '') {\n    //     const service = this.platform.getSearchService();\n    //     const response = await service.autosuggest(\n    //       {\n    //         at: `51.271096,-114.275941`,\n    //         limit: 5,\n    //         q: query,\n    //         lang: 'en',\n    //       }\n    //     );\n    //     let newData = [];\n    //     response.items.forEach(element => {\n    //       if (element.address != undefined) {\n    //         newData.push(element);\n    //       }\n    //     });\n    //     return newData;\n    //   }\n    // }\n\n\n    this.searchForOnBoard = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (value) {\n        let data = {\n          query: value\n        };\n        let result = yield _this.apiService.getData(`pcMiles/onboard/suggestions/${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n        if (result != null) {\n          return result.items;\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.searchLocation = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (value) {\n        let data = {\n          query: value\n        };\n        let result = yield _this.apiService.getData(`pcMiles/suggestions/${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n        if (result != null) {\n          return result.items;\n        }\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  httpOptions() {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      })\n    };\n    return httpOptions;\n  }\n  /**\r\n   * This method get current location of user. Currently it is using browsser navigater to get location\r\n   * TODO: Get Current location form GPS device\r\n   */\n\n\n  getCurrentLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.start = position.coords.latitude + ',' + position.coords.longitude;\n        this.map.setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        const currentLoc = new H.map.Marker({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        this.map.removeObjects(this.map.getObjects());\n        this.map.addObject(currentLoc);\n      });\n    }\n  }\n  /*\r\n    AutoSuggest Search Api v6\r\n  */\n\n\n  searchLocationOld(query) {\n    const URL = 'https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json';\n    return this.http.get(URL + '?apiKey=' + this.apiKey + '&query=' + query).pipe(map(response => {\n      return this.searchResults = response['suggestions'];\n    }));\n  } // returns the response\n\n\n  searchEntries(query) {\n    return this.searchLocation(query);\n  }\n\n  getRoutingParameters() {\n    const driveMode = this.driveModes || 'fastest'; // Default is fastest other option is short\n\n    const alternatives = 3; // Reading it from Settings table\n\n    const parameters = {\n      mode: `${driveMode};truck`,\n      waypoint0: 'geo!' + this.origin,\n      waypoint1: 'geo!' + this.destination,\n      representation: 'display',\n      routeAttributes: 'summary',\n      units: 'imperial',\n      alternatives,\n      tollVehicleType: 'truck',\n      rollups: 'none,tollsys,country,total'\n    };\n\n    if (this.totalWayPoints.length > 0) {\n      this.totalWayPoints.forEach(element => {\n        let counter = 2;\n        const waypointValue = `waypoint${counter}`;\n        parameters[waypointValue] = element;\n        counter = counter + 1;\n      });\n    }\n\n    return parameters;\n  }\n  /**\r\n   * Get coordinates for specified location\r\n   * @param value location name\r\n   */\n\n\n  geoCode(value) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.platform = new H.service.Platform({\n        'apikey': _this2.apiKey\n      });\n\n      const service = _this2.platform.getSearchService();\n\n      return service.geocode({\n        q: value,\n        show: 'tz'\n      });\n    })();\n  }\n  /**\r\n   * Get coordinates for specified location\r\n   * @param value location name\r\n   */\n\n\n  revGeoCode(cords) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.platform = new H.service.Platform({\n        'apikey': _this3.apiKey\n      });\n\n      const service = _this3.platform.getSearchService();\n\n      let result = yield service.reverseGeocode({\n        at: `${cords.lat},${cords.lng},150`,\n        limit: '1'\n      });\n      return result;\n    })();\n  } // public async getImageMap(value:any){\n  //   let coords=await this.geoCode(value)\n  //   try{\n  //   if(coords){\n  //   const result=`https://image.maps.ls.hereapi.com/mia/1.6/mapview?apiKey=${this.apiKey}&c=${coords}`\n  //   return result\n  //   }\n  //   else{\n  //     return \"Coords not found.\"\n  //   }\n  // }\n  // catch(error){\n  //   \n  // }\n  // }\n\n\n  calculateRoute(coordinates, additionalSpec) {\n    try {\n      this.viaPoints = [];\n\n      if (coordinates.length > 2) {\n        coordinates.forEach(element => {\n          this.viaPoints.push(element);\n        });\n        this.viaPoints.shift();\n        this.viaPoints.pop();\n      } // ['51.044978,-114.063311', '51.081848,-113.925807', '51.205534,-114.001558', '51.127017,-114.008666']\n\n\n      const alternatives = 3;\n      let params = {\n        transportMode: `truck`,\n        routingMode: 'fast',\n        origin: coordinates[0],\n        via: new H.service.Url.MultiValueQueryParameter(this.viaPoints),\n        destination: coordinates[coordinates.length - 1],\n        truckRestrictionPenalty: 'soft',\n        grossWeight: \"\",\n        weightPerAxle: \"\",\n        width: \"\",\n        length: \"\",\n        height: additionalSpec != undefined ? additionalSpec[\"height\"] : 400,\n        \"avoid[features]\": \"tollRoad\",\n        traffic: 'disabled',\n        representation: 'display',\n        units: 'imperial',\n        alternatives,\n        return: 'polyline,actions,instructions,summary,travelSummary,turnByTurnActions,elevation,routeHandle,passthrough,incidents',\n        spans: 'truckAttributes,duration,speedLimit'\n      };\n      this.router = this.platform.getRoutingService(null, 8);\n      this.map.removeObjects(this.map.getObjects());\n      const routeColors = ['#2980b9', '#2980b9', '#2980b9', '#2980b9', '#2980b9'];\n      this.router.calculateRoute(params, route => {\n        if (route.routes) {\n          // route.routes.forEach((section, i) => {\n          //   \n          //   // decode LineString from the flexible polyline\n          route.routes[0].sections.forEach(item => {\n            const linestring = H.geo.LineString.fromFlexiblePolyline(item.polyline); // Create a polyline to display the route:\n\n            const polyline = new H.map.Polyline(linestring, {\n              style: {\n                lineWidth: 5,\n                strokeColor: \"#2980b9\"\n              }\n            }); //   polyline.addEventListener('tap', function(evt) {\n            //     // Log 'tap' and 'mouse' events:\n            //     \n            // });\n            // Total Distance in KM\n\n            this.totalDistance = item.travelSummary.length / 1000;\n            const factor = 0.621371;\n            this.totalDistance = this.totalDistance.toFixed(2) * factor + ' Miles'; // \n            //   var bubble = new H.ui.InfoBubble(item.departure.place.location, {\n            //     content: `<b>${this.totalDistance}</b>`\n            //  });\n            //   // Add info bubble to the UI:\n            //   this.ui.addBubble(bubble);\n            // Total Travel Time in hours & mins\n\n            const h = Math.floor(item.travelSummary.duration / 3600);\n            const m = Math.floor(item.travelSummary.duration % 3600 / 60);\n            this.totalTime = h + ' hour' + '  ' + m + ' mins'; // let poly = H.geo.LineString.fromFlexiblePolyline(item.polyline).getLatLngAltArray();\n            // Create a marker for the start point:\n\n            const startIcon = new H.map.Icon(\"/assets/img/mapIcon/start.png\", {\n              size: {\n                w: 16,\n                h: 16\n              }\n            });\n            const startMarker = new H.map.Marker(item.departure.place.location, {\n              icon: startIcon\n            }); // Create a marker for the end point:\n\n            const destIcon = new H.map.Icon(\"/assets/img/mapIcon/dest.png\", {\n              size: {\n                w: 36,\n                h: 36\n              }\n            });\n            const endMarker = new H.map.Marker(item.arrival.place.location, {\n              icon: destIcon\n            }); // Add the route polyline and the two markers to the map:\n\n            this.map.addObjects([polyline, startMarker, endMarker]);\n            this.map.setZoom(10); // And zoom to its bounding rectangle\n\n            this.map.getViewModel().setLookAtData({\n              bounds: polyline.getBoundingBox()\n            });\n          });\n        }\n      });\n    } catch (erro) {}\n  }\n\n}\n\nHereMapService.ɵfac = function HereMapService_Factory(t) {\n  return new (t || HereMapService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApiService));\n};\n\nHereMapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HereMapService,\n  factory: HereMapService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module"}