{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./fuel-entry-details.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./fuel-entry-details.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../services/api.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient } from '@angular/common/http';\nimport { HereMapService } from '../../../../services';\nimport { environment } from '../../../../../environments/environment';\nimport * as moment from 'moment';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet FuelEntryDetailsComponent = class FuelEntryDetailsComponent {\n  constructor(apiService, route, router, toastr, HereMap, httpClient, countryStateCity) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.toastr = toastr;\n    this.HereMap = HereMap;\n    this.httpClient = httpClient;\n    this.countryStateCity = countryStateCity;\n    this.environment = environment.isFeatureEnabled;\n    this.title = 'Fuel Entry';\n    this.Asseturl = this.apiService.AssetUrl;\n    /********** Form Fields ***********/\n\n    this.fuelData = {\n      fuelID: '',\n      billingCurrency: '',\n      unitType: '',\n      unitID: '',\n      ppu: '',\n      fuelDateTime: '',\n      amountPaid: '',\n      amount: '',\n      quantity: '',\n      retailPpu: '',\n      retailAmount: '',\n      rBeforeTax: '',\n      fuelDate: '',\n      fuelTime: '',\n      fuelType: '',\n      paidBy: '',\n      DEFFuelQty: '',\n      DEFFuelQtyAmt: '',\n      fuelCardNumber: '',\n      paymentMode: '',\n      site: '',\n      countryName: '',\n      stateName: '',\n      cityName: '',\n      tripID: '',\n      unitNo: '',\n      fuelProvider: '',\n      discountAmount: '',\n      discountType: '',\n      transactionID: '',\n      unitNumber: '',\n      useType: '',\n      taxes: [],\n      unitOfMeasure: '',\n      billingCountry: '',\n      category: '',\n      groupCategory: '',\n      carrierFee: '',\n      conversionRate: '',\n      reference: '',\n      reimburseToDriver: false,\n      deductFromPay: false,\n      fuelEntryImages: [],\n      odometer: 0,\n      description: '',\n      uploadedPhotos: []\n    };\n    this.vehicleList = {};\n    this.assetList = {};\n    this.tripList = {};\n    this.vendorList = {};\n    this.WEXTaxCodeList = {};\n    this.WEXDiscountCodeList = {};\n    this.fuelTypeWEXCode = {};\n    this.fuelTypeListCode = {};\n    this.WEXuseTypeCodeList = {};\n    this.fuelEntryImages = [];\n    this.existingPhotos = [];\n    this.tripID = '';\n    this.fuelID = '';\n    this.vehicles = [];\n    this.assets = [];\n    this.vendors = [];\n    this.trips = [];\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.errors = {};\n    this.vendorName = '';\n    this.vehicleData = [];\n    this.ReeferData = [];\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.countryList = {};\n    this.stateList = {};\n    this.any = {};\n    this.taxTypeList = {};\n    this.discountList = {};\n    this.driverList = {};\n    this.wexCategories = {};\n    this.Error = '';\n    this.Success = '';\n  }\n\n  ngOnInit() {\n    this.fuelID = this.route.snapshot.params[`fuelID`];\n    this.fetchVehicleList();\n    this.fetchAssetList();\n    this.fetchTripList();\n    this.fetchVendorList(); //this.fetchFuelTypeList();\n\n    this.fetchWEXCode();\n    this.fetchTaxWEXCode();\n    this.fetchWEXDiscountCode();\n    this.fetchWEXuseTypeCode();\n    this.carrierID = this.apiService.getCarrierID();\n    this.fetchWexCategories(); // this.HereMap.mapSetAPI();\n    //this.map = this.HereMap.mapInit();\n\n    this.fetchTaxTypeFromID();\n    this.fetchDiscFromID();\n    this.fetchDriverList();\n    this.fetchFuelEntry();\n  }\n\n  fetchWexCategories() {\n    this.httpClient.get('assets/jsonFiles/fuel/wexCategories.json').subscribe(result => {\n      this.wexCategories = result;\n    });\n  }\n\n  fetchVehicleList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.apiService.getData('vehicles/get/list').subscribe(result => {\n        this.vehicleList = result;\n      });\n    });\n  }\n\n  fetchVendorList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.apiService.getData('vendors').subscribe(result => __awaiter(this, void 0, void 0, function* () {\n        result.forEach(element => __awaiter(this, void 0, void 0, function* () {\n          this.vendorList[element.contactID] = yield element.companyName;\n        }));\n      }));\n    });\n  }\n\n  fetchDriverList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.apiService.getData('drivers/get/list').subscribe(result => {\n        this.driverList = result;\n      });\n    });\n  }\n\n  fetchTaxWEXCode() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.httpClient.get('assets/jsonFiles/fuel/wexTaxType.json').subscribe(result => {\n        this.WEXTaxCodeList = result;\n      });\n    });\n  }\n\n  fetchTaxTypeFromID() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.httpClient.get('assets/jsonFiles/fuel/fuelTaxes.json').subscribe(result => {\n        result.Items.forEach(element => {\n          this.taxTypeList[element.fuelTaxID] = element.fuelTaxName;\n        });\n      });\n    });\n  }\n\n  fetchDiscFromID() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.httpClient.get('assets/jsonFiles/fuel/fuelDiscounts.json').subscribe(result => {\n        result.Items.forEach(element => {\n          this.discountList[element.fuelDiscountID] = element.fuelDiscountName;\n        });\n      });\n    });\n  }\n\n  fetchWEXDiscountCode() {\n    this.httpClient.get('assets/jsonFiles/fuel/wexDiscountType.json').subscribe(result => {\n      this.WEXDiscountCodeList = result;\n    });\n  }\n\n  fetchWEXuseTypeCode() {\n    this.WEXuseTypeCodeList = {\n      0: \"non-fuel\",\n      1: \"Vehicle\",\n      2: \"Reefer product\"\n    };\n  }\n\n  fetchAssetList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.apiService.getData('assets/get/list').subscribe(result => {\n        this.assetList = result;\n      });\n    });\n  } // async fetchFuelTypeList() {\n  //   await this.apiService.getData('fuelTypes/get/list').subscribe((result: any) => {\n  //     this.fuelTypeListCode = result;\n  //   });\n  // }\n\n\n  fetchWEXCode() {\n    this.httpClient.get('assets/jsonFiles/fuel/wexFuelType.json').subscribe(result => {\n      result.forEach(element => {\n        this.fuelTypeWEXCode[element.code] = element.name;\n      });\n    });\n  }\n\n  fetchTripList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.apiService.getData('trips/get/list').subscribe(result => {\n        this.tripList = result;\n      });\n    });\n  }\n\n  fetchVendorData(vendorID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.apiService.getData('vendors/' + vendorID).subscribe(result => {// this.vendorAddress = result.Items[0].address;\n        // const lat = this.vendorAddress[0].geoCords.lat;\n        // const lng = this.vendorAddress[0].geoCords.lng;\n        // const markers = new H.map.Marker(\n        //   {\n        //     lat: lat, lng: lng\n        //   });\n        // this.map.addObject(markers);\n        // this.map.setCenter({\n        //   lat: lat,\n        //   lng: lng\n        // });\n      });\n    });\n  }\n\n  showFn(i) {\n    $('#readMoreTaxDiv' + i).show();\n    $('#showBtn' + i).hide();\n    $('#hideBtn' + i).show();\n  }\n\n  hideFn(i) {\n    $('#readMoreTaxDiv' + i).hide();\n    $('#showBtn' + i).show();\n    $('#hideBtn' + i).hide();\n  }\n\n  fetchFuelEntry() {\n    //console.log(this.fuelID)\n    this.apiService.getData('fuelEntries/' + this.fuelID).subscribe(result => __awaiter(this, void 0, void 0, function* () {\n      //console.log(result)\n      let tax = [];\n      result = result.Items[0]; //  console.log(result.uploadedPhotos);\n\n      if (Array.isArray(result.data.tax) && result.data.tax.length > 0) {\n        // console.log(result.data.tax)\n        result.data.tax.forEach(element => {\n          let singleTax = {\n            taxCode: element.taxCode,\n            amount: element.amount\n          };\n          tax.push(singleTax);\n        });\n      } else {\n        tax = [{\n          taxCode: '',\n          amount: 0\n        }];\n      }\n\n      let date = moment(result.data.date);\n\n      if (result.data.time) {\n        let time = moment(result.data.time, 'h mm a');\n        date.set({\n          hour: time.get('hour'),\n          minute: time.get('minute')\n        });\n        date = date.format('MMM Do YYYY, h:mm a');\n      } else {\n        date = date.format('MMM Do YYYY');\n      }\n\n      this.carrierID = result.carrierID;\n      this.fuelData.fuelID = this.fuelID;\n      this.fuelData.billingCurrency = result.data.currency, this.fuelData.unitType = result.data.useType;\n      this.fuelData.unitID = result.unitID;\n      this.fuelData.unitNo = result.data.unitNo;\n      this.fuelData.unitOfMeasure = result.data.uom; // this.fuelData.discountType = this.discountList[result.data.discType];\n\n      this.fuelData.discountAmount = result.data.discAmt;\n      this.fuelData.fuelCardNumber = result.data.cardNo;\n      this.fuelData.ppu = result.data.ppu;\n      this.fuelData.amount = result.data.amt;\n      this.fuelData.retailPpu = result.data.rPpu;\n      this.fuelData.retailAmount = result.data.rAmt;\n      this.fuelData.rBeforeTax = result.data.rBeforeTax;\n      this.fuelData.fuelType = result.data.type;\n      this.fuelData.transactionID = result.data.transID;\n      this.fuelData.fuelProvider = result.data.fuelProvider;\n      this.fuelData.amountPaid = result.data.amt;\n      this.fuelData.fuelDateTime = date;\n      this.fuelData.paidBy = result.driverID;\n      this.fuelData.fuelCardNumber = result.data.cardNo;\n      this.fuelData.site = result.data.site;\n      this.fuelData.countryName = yield this.countryStateCity.GetSpecificCountryNameByCode(result.data.country);\n      this.fuelData.stateName = result.data.city + \", \" + (yield this.countryStateCity.GetStateNameFromCode(result.data.state, result.data.country));\n      this.fuelData.cityName = result.data.city;\n      this.fuelData.odometer = result.data.odometer;\n      this.fuelData.quantity = result.data.qty;\n      this.fuelData.fuelProvider = result.data.fuelProvider;\n      this.fuelData.reference = result.data.transID;\n      this.fuelData.taxes = tax;\n    }));\n  }\n\n  deleteImage(i) {\n    // this.carrierID =  this.apiService.getCarrierID();\n    // this.awsUS.deleteFile(this.carrierID, this.fuelData.additionalDetails.uploadedPhotos[i]);\n    this.fuelData.uploadedPhotos.splice(i, 1);\n    this.fuelEntryImages.splice(i, 1);\n    this.toastr.success('Image Deleted Successfully!');\n  }\n\n  deleteFuelEntry(fuelID) {\n    this.apiService.deleteData('fuelEntries/' + fuelID).subscribe(result => {\n      this.toastr.success('Fuel Entry Deleted Successfully!');\n      this.router.navigateByUrl('/fleet/expenses/fuel/list');\n    });\n  } // delete uploaded images and documents\n\n\n  delete(name) {\n    this.apiService.deleteData(`fuelEntries/uploadDelete/${this.fuelID}/${name}`).subscribe(() => {\n      window.location.reload();\n      this.toastr.success(\"Image is Successfully deleted\");\n    });\n  }\n\n};\n\nFuelEntryDetailsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: HereMapService\n}, {\n  type: HttpClient\n}, {\n  type: CountryStateCityService\n}];\n\nFuelEntryDetailsComponent = __decorate([Component({\n  selector: 'app-fuel-entry-details',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], FuelEntryDetailsComponent);\nexport { FuelEntryDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}