{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./issue-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./issue-list.component.css\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\nimport Constants from '../../../constants';\nimport { environment } from '../../../../../../environments/environment';\nimport * as _ from 'lodash';\nlet IssueListComponent = class IssueListComponent {\n  constructor(apiService, modalService, router, spinner, toastr) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.modalService = modalService;\n    this.router = router;\n    this.spinner = spinner;\n    this.toastr = toastr;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.title = 'Issues List';\n    this.issues = [];\n    this.get = _.get;\n    this.driverList = {};\n    this.vehicleList = {};\n    this.assetList = {};\n    this.dtOptions = {};\n    this.unitID = null;\n    this.unitName = '';\n    this.issueName = '';\n    this.issueStatus = null;\n    this.suggestedUnits = [];\n    this.usersList = {};\n    this.assetUnitName = '';\n    this.assetUnitID = null;\n    this.suggestedUnitsAssets = [];\n    this.totalRecords = 20;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = '';\n    this.issuesNext = false;\n    this.issuesPrev = true;\n    this.issuesDraw = 0;\n    this.issuesPrevEvauatedKeys = [''];\n    this.issuesStartPoint = 1;\n    this.issuesEndPoint = this.pageLength; // allVehicles = [];\n    // allAssets = [];\n\n    this.suggestedIssues = [];\n    this.loaded = false;\n    this.searchValue = null;\n    this.category = null;\n    this.categoryFilter = [{\n      'name': 'Vehicle',\n      'value': 'vehicle'\n    }, {\n      'name': 'Asset',\n      'value': 'asset'\n    }]; // columns of data table\n\n    this.dataColumns = [{\n      width: '12%',\n      field: 'unitType',\n      header: 'Unit Type',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'vehicleasset',\n      header: 'Vehicle/Asset',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'issueName',\n      header: 'Issue Name',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'reportedDate',\n      header: 'Reported On',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'reportedBy',\n      header: 'Reported By',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'assignedTo',\n      header: 'Assigned To',\n      type: \"text\"\n    }, {\n      width: '12%',\n      field: 'currentStatus',\n      header: 'Status',\n      type: \"text\"\n    }];\n    this.getSuggestions = _.debounce(function (searchvalue) {\n      searchvalue = searchvalue.toLowerCase();\n\n      if (searchvalue != '') {\n        this.apiService.getData(`issues/get/suggestions/${searchvalue}`).subscribe(result => {\n          this.suggestedIssues = result;\n        });\n      } else {\n        this.suggestedIssues = [];\n      }\n    }, 800);\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.initDataTable();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.setToggleOptions();\n\n      _this2.setEmployeeOptions();\n\n      yield _this2.initDataTable();\n\n      _this2.fetchVehicleList();\n\n      _this2.fetchDriverList();\n\n      _this2.fetchAssetList();\n\n      _this2.fetchUsersList(); // this.fetchAllAssets();\n      // this.fetchAllVehicles();\n\n\n      $(document).ready(() => {\n        setTimeout(() => {\n          $('#DataTables_Table_0_wrapper .dt-buttons').addClass('custom-dt-buttons').prependTo('.page-buttons');\n        }, 1800);\n      });\n    })();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  setEmployeeOptions() {\n    this.employeeOptions = [{\n      'value': 'vehicle',\n      'name': 'Vehicle'\n    }, {\n      'value': 'asset',\n      'name': 'Asset'\n    }];\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  setIssue(value) {\n    this.issueName = value;\n    this.suggestedIssues = [];\n  }\n\n  fetchVehicleList() {\n    this.apiService.getData('vehicles/get/list').subscribe(result => {\n      this.vehicleList = result;\n    });\n  }\n\n  fetchDriverList() {\n    this.apiService.getData('drivers/get/list').subscribe(result => {\n      this.driverList = result;\n    });\n  }\n\n  fetchAssetList() {\n    this.apiService.getData('assets/get/list').subscribe(result => {\n      this.assetList = result;\n    });\n  }\n\n  fetchUsersList() {\n    this.apiService.getData('common/users/get/list').subscribe(result => {\n      this.usersList = result;\n    });\n  }\n\n  deleteIssue(entryID, issueName) {\n    if (confirm('Are you sure you want to delete?') === true) {\n      this.apiService.deleteData(`issues/isDeleted/${entryID}/${issueName}/` + 1).subscribe(result => {\n        this.issuesDraw = 0;\n        this.lastEvaluatedKey = '';\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.initDataTable();\n        this.issues = [];\n        this.toastr.success('Issue Deleted Successfully!');\n      });\n    }\n  }\n\n  initDataTable() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.lastEvaluatedKey !== 'end') {\n        _this3.apiService.getData('issues/fetch/records?searchValue=' + _this3.searchValue + '&category=' + _this3.category + '&issueName=' + _this3.issueName + '&currentStatus=' + _this3.issueStatus + '&lastKey=' + _this3.lastEvaluatedKey).subscribe(result => {\n          if (result.Items.length === 0) {\n            _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n            _this3.loaded = true;\n          }\n\n          _this3.suggestedIssues = [];\n\n          if (result.Items.length > 0) {\n            if (result.LastEvaluatedKey !== undefined) {\n              _this3.lastEvaluatedKey = encodeURIComponent(result.LastEvaluatedKey.sk);\n            } else {\n              _this3.lastEvaluatedKey = 'end';\n            }\n\n            _this3.issues = _this3.issues.concat(result.Items);\n            _this3.loaded = true;\n          }\n        });\n      }\n    })();\n  }\n\n  categoryChange() {\n    this.searchValue = null;\n  }\n\n  searchFilter() {\n    if (this.searchValue != null || this.issueName != '' || this.issueStatus != null || this.category != null) {\n      if (this.searchValue != null && this.category == null) {\n        this.toastr.error('Please select both searchValue and category ');\n        return false;\n      } else if (this.searchValue == null && this.category != null) {\n        this.toastr.error('Please select both searchValue and category ');\n        return false;\n      } else {\n        this.lastEvaluatedKey = '';\n        this.issues = [];\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.initDataTable();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  clearInput() {\n    this.suggestedIssues = null;\n  }\n\n  clearSuggestions() {\n    this.issueName = null;\n  }\n\n  resetFilter() {\n    if (this.searchValue != null || this.issueName != '' || this.issueStatus != null || this.category != null) {\n      this.searchValue = null;\n      this.unitName = '';\n      this.issueName = '';\n      this.issueStatus = null;\n      this.category = null;\n      this.suggestedIssues = [];\n      this.lastEvaluatedKey = '';\n      this.initDataTable();\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.issues = [];\n    } else {\n      return false;\n    }\n  } // fetchAllVehicles() {\n  //   this.apiService.getData('vehicles').subscribe((result: any) => {\n  //     this.allVehicles = result.Items;\n  //   });\n  // }\n  // fetchAllAssets() {\n  //   this.apiService.getData('assets').subscribe((result: any) => {\n  //     this.allAssets = result.Items;\n  //   });\n  // }\n\n\n  refreshData() {\n    this.searchValue = null;\n    this.unitName = '';\n    this.issueName = '';\n    this.issueStatus = null;\n    this.category = null;\n    this.suggestedIssues = [];\n    this.lastEvaluatedKey = '';\n    this.initDataTable();\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.issues = [];\n  }\n\n  cloneIssue(id) {}\n  /**\r\n  * Clears the table filters\r\n  * @param table Table\r\n  */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nIssueListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: NgbModal\n}, {\n  type: Router\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ToastrService\n}];\n\nIssueListComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nIssueListComponent = __decorate([Component({\n  selector: 'app-issue-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], IssueListComponent);\nexport { IssueListComponent };","map":null,"metadata":{},"sourceType":"module"}