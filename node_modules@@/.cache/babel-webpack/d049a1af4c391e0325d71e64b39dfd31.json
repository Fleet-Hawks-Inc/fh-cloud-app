{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./expense.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./expense.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { ToastrService } from 'ngx-toastr';\nimport * as moment from 'moment';\nimport { ActivatedRoute } from \"@angular/router\";\nimport Constants from 'src/app/pages/fleet/constants';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { AccountService } from \"src/app/services\";\nlet ExpenseComponent = class ExpenseComponent {\n  constructor(apiService, toastr, route, spinner, accountService) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.route = route;\n    this.spinner = spinner;\n    this.accountService = accountService;\n    this.data = [];\n    this.allData = [];\n    this.vehicleData = [];\n    this.startDate = '';\n    this.endDate = '';\n    this.start = null;\n    this.end = null;\n    this.lastItemSK = '';\n    this.datee = '';\n    this.expDate = '';\n    this.loaded = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.date = new Date();\n    this.exportData = [];\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.lastEvaluatedKey = '';\n    this.fuel = [];\n    this.payments = [];\n    this.expensePay = [];\n    this.filter = {\n      startDate: null,\n      endDate: null,\n      type: null,\n      paymentNo: null\n    };\n    this.serviceLogData = [];\n    this.payment = [];\n    this.driver = [];\n    this.lastExpPay = '';\n    this.totalExpense = 0;\n  }\n\n  ngOnInit() {\n    this.end = moment().format(\"YYYY-MM-DD\");\n    this.start = moment().subtract(1, 'months').format('YYYY-MM-DD');\n    this.vehicleId = this.route.snapshot.params[`vehicleId`];\n    this.fetchTrpByVehicle();\n    this.fetchVehicleName();\n    this.fetchFuelByVehicle();\n    this.fetchSlogByVehicle();\n    this.fetchExpensePayment(); // this.fetchVehiclesList();\n  }\n\n  fetchDriverPayment() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this.accountService.getData(`driver-payments/get/driver/payment?drivers=${encodeURIComponent(JSON.stringify(_this.driver))}`).toPromise();\n      _this.payments = result;\n\n      if (result.length === 0) {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n    })();\n  }\n\n  fetchExpensePayment() {\n    if (this.lastExpPay !== 'end') {\n      this.accountService.getData(`expense/get/expense/pay/byTrp/${encodeURIComponent(JSON.stringify(this.vehicleId))}?startDate=${this.start}&endDate=${this.end}&lastKey=${this.lastExpPay}&date=${this.expDate}`).subscribe(result => {\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        for (let i = 0; i < result.Items.length; i++) {\n          const expenseData = result.Items[i];\n          this.totalExpense += parseFloat(expenseData.finalTotal);\n        }\n\n        if (result.LastEvaluatedKey !== undefined) {\n          this.lastExpPay = encodeURIComponent(result.LastEvaluatedKey.sk);\n          this.expDate = encodeURIComponent(result.LastEvaluatedKey.transDate);\n        } else {\n          this.lastExpPay = 'end';\n        }\n\n        this.loaded = true;\n        this.expensePay = this.expensePay.concat(result.Items);\n      });\n    }\n  }\n\n  fetchSlogByVehicle() {\n    this.apiService.getData(`serviceLogs/getBy/vehicle/name/trips/${this.vehicleId}?startDate=${this.start}&endDate=${this.end}`).subscribe(result => {\n      this.serviceLogData = result.Items;\n\n      if (result.Items.length === 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n    });\n  } // fetchVehiclesList() {\n  //   this.apiService.getData(\"vehicles/get/list\").subscribe((result: any) => {\n  //     this.vehicleList = result;\n  //   });\n  // }\n\n\n  fetchVehicleName() {\n    this.apiService.getData(`vehicles/fetch/detail/${this.vehicleId}`).subscribe(result => {\n      this.vehicleData = result.Items;\n\n      if (result.Items.length === 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n    });\n  }\n\n  fetchFuelByVehicle() {\n    this.apiService.getData(`fuelEntries/getBy/vehicle/trips/${this.vehicleId}?startDate=${this.start}&endDate=${this.end}`).subscribe(result => {\n      this.fuel = result.Items;\n\n      if (result.Items.length === 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n    });\n  }\n\n  fetchTrpByVehicle() {\n    if (this.lastItemSK !== 'end') {\n      this.apiService.getData(`vehicles/fetch/TripData?vehicle=${this.vehicleId}&startDate=${this.start}&endDate=${this.end}&lastKey=${this.lastItemSK}&date=${this.datee}`).subscribe(result => {\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        this.allData = this.allData.concat(result.Items);\n\n        for (let veh of this.allData) {\n          let dataa = veh;\n          veh.miles = 0;\n\n          for (let element of dataa.tripPlanning) {\n            veh.miles += Number(element.miles);\n          }\n\n          for (let driv of dataa.driverIDs) {\n            this.driver.push(driv);\n          }\n        }\n\n        this.fetchDriverPayment();\n\n        if (result.LastEvaluatedKey !== undefined) {\n          this.lastItemSK = encodeURIComponent(result.Items[result.Items.length - 1].tripSK);\n          this.datee = encodeURIComponent(result.Items[result.Items.length - 1].dateCreated);\n        } else {\n          this.lastItemSK = 'end';\n        }\n\n        this.loaded = true;\n      });\n    }\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.fetchTrpByVehicle();\n    }\n\n    this.loaded = false;\n  }\n\n  onScrollExpense() {\n    if (this.loaded) {\n      this.fetchExpensePayment();\n    }\n\n    this.loaded = false;\n  }\n\n  searchFilter() {\n    if (this.start != null && this.end != null) {\n      if (this.start != null && this.end == null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start == null && this.end != null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start > this.end) {\n        this.toastr.error('Start Date should be less then end date.');\n        return false;\n      } else {\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.lastItemSK = '';\n        this.lastExpPay = '';\n        this.allData = [];\n        this.fuel = [];\n        this.serviceLogData = [];\n        this.payments = [];\n        this.expensePay = [];\n        this.totalExpense = 0;\n        this.fetchTrpByVehicle();\n        this.fetchFuelByVehicle();\n        this.fetchSlogByVehicle();\n        this.fetchExpensePayment();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  generateCSV() {\n    if (this.expensePay.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.expensePay.forEach(element => {\n        let obj = {};\n        obj[\"Vehicle Name/Number\"] = element.vehicleName;\n        obj[\"Expense Type\"] = element.categoryName;\n        obj[\"Amount\"] = element.finalTotal + \" \" + element.currency;\n        dataObject.push(obj);\n      });\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += ' \\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += ' \\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}VehicleExpense-Report.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n};\n\nExpenseComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: AccountService\n}];\n\nExpenseComponent = __decorate([Component({\n  selector: 'app-expense',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ExpenseComponent);\nexport { ExpenseComponent };","map":null,"metadata":{},"sourceType":"module"}