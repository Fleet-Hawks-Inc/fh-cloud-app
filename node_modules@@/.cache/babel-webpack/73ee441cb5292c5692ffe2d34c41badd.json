{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-route.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-route.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService, ListService } from '../../../../services';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { from, Subject, throwError } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { NgbCalendar, NgbDateAdapter } from '@ng-bootstrap/ng-bootstrap';\nimport { HereMapService } from '../../../../services';\nimport { map, debounceTime, distinctUntilChanged, switchMap, catchError } from 'rxjs/operators';\nlet AddRouteComponent = class AddRouteComponent {\n  constructor(apiService, route, router, toastr, spinner, ngbCalendar, dateAdapter, hereMap, listService) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.ngbCalendar = ngbCalendar;\n    this.dateAdapter = dateAdapter;\n    this.hereMap = hereMap;\n    this.listService = listService;\n    this.searchTerm = new Subject();\n    this.searchTerm1 = new Subject();\n    this.mapVisible = true;\n    this.errors = {};\n    this.routeData = {\n      routeNo: '',\n      routeName: '',\n      notes: '',\n      vehicleID: null,\n      assetID: null,\n      driverID: null,\n      coDriverID: null,\n      miles: 0,\n      sourceInfo: {\n        address: '',\n        city: '',\n        state: '',\n        country: '',\n        zipCode: ''\n      },\n      recurring: {\n        route: false,\n        type: '',\n        date: ''\n      },\n      destInfo: {\n        address: '',\n        city: '',\n        state: '',\n        country: '',\n        zipCode: ''\n      },\n      stops: []\n    };\n    this.newCoords = [];\n    this.countries = [];\n    this.sourceStates = [];\n    this.destinationStates = [];\n    this.sourceCities = [];\n    this.destinationCities = [];\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.mapView = false;\n    this.stopsData = [];\n    this.new_length = 0;\n    this.routeID = '';\n    this.destinationStop = true;\n    this.dailyClass = '';\n    this.weekClass = '';\n    this.biClass = '';\n    this.isDaily = false;\n    this.routeBtnStatus = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.routeID = _this.route.snapshot.params['routeID'];\n\n      if (_this.routeID != undefined) {\n        _this.pageTitle = 'Edit Route';\n      } else {\n        _this.mapShow();\n\n        _this.pageTitle = 'Add Route';\n      }\n\n      _this.searchLocation();\n\n      if (_this.routeID != undefined) {\n        yield _this.fetchRouteByID();\n      }\n\n      _this.listService.fetchVehicles();\n\n      _this.listService.fetchDrivers();\n\n      _this.listService.fetchAssets();\n\n      $('#recurringBtn').on('click', function () {\n        if (this.checked === true) {\n          $('#recurringRadioDiv').css('display', 'block');\n          $('#recurringDate').css('display', 'block');\n        } else {\n          $('#recurringRadioDiv').css('display', 'none');\n          $('#recurringDate').css('display', 'none');\n        }\n      });\n      let vehicleList = new Array();\n\n      _this.getValidVehicles(vehicleList);\n\n      _this.vehicles = vehicleList;\n      let driverList = new Array();\n\n      _this.getValidDrivers(driverList);\n\n      _this.drivers = driverList;\n      _this.coDrivers = driverList;\n      let assetList = new Array();\n\n      _this.getValidAssets(assetList);\n\n      _this.assets = assetList;\n    })();\n  }\n\n  getValidVehicles(vehicleList) {\n    let ids = [];\n    this.listService.vehicleList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.vehicleIdentification && element2.isDeleted === 1 && element2.vehicleID === this.routeData.vehicleID) {\n          this.routeData.vehicleID = null;\n        }\n\n        if (element2.vehicleIdentification && element2.isDeleted === 0 && !ids.includes(element2.vehicleID)) {\n          vehicleList.push(element2);\n          ids.push(element2.vehicleID);\n        }\n      });\n    });\n  }\n\n  getValidDrivers(driverList) {\n    let ids = [];\n    this.listService.driversList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.driverID)) {\n          driverList.push(element2);\n          ids.push(element2.driverID);\n        }\n\n        if (element2.isDeleted === 1) {\n          if (this.routeData.driverID === element2.driverID) {\n            this.routeData.driverID = null;\n          }\n\n          if (this.routeData.coDriverID === element2.driverID) {\n            this.routeData.coDriverID = null;\n          }\n        }\n      });\n    });\n  }\n\n  getValidAssets(assetList) {\n    let ids = [];\n    this.listService.assetsList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 1 && element2.assetID === this.routeData.assetID) {\n          this.routeData.assetID = null;\n        }\n\n        if (element2.isDeleted === 0 && !ids.includes(element2.assetID)) {\n          assetList.push(element2);\n          ids.push(element2.assetID);\n        }\n      });\n    });\n  }\n\n  eventCheck(event) {\n    const value = event.target.checked;\n\n    if (value === true) {\n      this.mapVisible = true;\n      this.mapShow();\n\n      if (this.routeData.stops.length > 1) {\n        this.getCoords(this.routeData.stops);\n      }\n    } else {\n      this.mapVisible = false;\n    }\n  }\n\n  searchLocation() {\n    let target;\n    this.searchTerm.pipe(map(e => {\n      $('.map-search__results').hide();\n      $(e.target).closest('div').addClass('show-search__result');\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.hereMap.searchEntries(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      this.searchResults = res;\n    });\n  }\n\n  getCoords(data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.newCoords = [];\n\n      for (let i = 0; i < data.length; i++) {\n        const element = data[i];\n\n        _this2.newCoords.push(`${element.lat},${element.lng}`);\n      }\n\n      yield _this2.getMiles();\n\n      _this2.hereMap.calculateRoute(_this2.newCoords);\n    })();\n  }\n\n  getCoordsEdit(data) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all(data.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (item) {\n          let result = yield _this3.hereMap.geoCode(item.name);\n\n          _this3.newCoords.push(`${result.items[0].position.lat},${result.items[0].position.lng}`);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n\n      _this3.hereMap.calculateRoute(_this3.newCoords);\n\n      _this3.newCoords = [];\n    })();\n  }\n\n  getMiles() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.routeData.miles = 0;\n      let switchCoordinates = [];\n\n      _this4.routeData.stops.forEach(coordinates => {\n        let newPoint = coordinates.lng + \",\" + coordinates.lat;\n        switchCoordinates.push(newPoint);\n      });\n\n      let stops = switchCoordinates.join(\";\");\n\n      _this4.apiService.getData('trips/calculate/pc/miles?type=mileReport&stops=' + stops).subscribe(result => {\n        _this4.routeData.miles = result;\n      });\n    })();\n  }\n\n  calculateActualMiles(miles) {\n    this.actualMiles += miles;\n  }\n\n  resetCodrivers() {\n    this.routeData.coDriverID = null;\n  }\n\n  mapShow() {\n    this.mapView = true;\n    setTimeout(() => {\n      this.hereMap.mapSetAPI();\n      this.hereMap.mapInit();\n    }, 100);\n  }\n\n  addRoute() {\n    if (this.routeData.recurring.route === true) {\n      if (this.routeData.recurring.type == '') {\n        this.toastr.error('Please select recurring type');\n        return false;\n      }\n    }\n\n    this.routeBtnStatus = true;\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.hideErrors();\n    this.apiService.postData('routes', this.routeData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.routeBtnStatus = false;\n          },\n          error: () => {\n            this.routeBtnStatus = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.routeBtnStatus = false;\n        this.toastr.success('Route added successfully.');\n        this.router.navigateByUrl('/dispatch/routes/list');\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  getAddressDetail(id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this5.apiService.getData(`pcMiles/detail/${id}`).toPromise();\n      return result;\n    })();\n  }\n\n  assignLocation(elem, data, index = '') {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      // const result = await this.hereMap.geoCode(label);\n      // const labelResult = result.items[0];\n      let item = {\n        name: '',\n        notes: '',\n        state: '',\n        country: '',\n        lat: '',\n        lng: ''\n      };\n      let result = yield _this6.getAddressDetail(data.place_id);\n\n      if (result != undefined) {\n        item = {\n          name: data.address,\n          notes: '',\n          state: result.address.StateName,\n          country: result.address.CountryFullName,\n          lat: result.position.lat,\n          lng: result.position.lng\n        };\n\n        if (elem === 'source') {\n          _this6.setSourceValue(data, result);\n\n          _this6.routeData.stops[0] = item;\n        } else if (elem === 'destination') {\n          _this6.setDestinationValue(data, result);\n\n          let stopLen = _this6.routeData.stops.length;\n\n          if (stopLen == 0) {\n            _this6.routeData.stops[0] = {\n              name: '',\n              notes: '',\n              country: '',\n              state: '',\n              lat: '',\n              lng: ''\n            };\n            _this6.routeData.stops[1] = item;\n          } else if (stopLen == 1 || stopLen == 2) {\n            _this6.routeData.stops[1] = item;\n          } else if (stopLen > 2) {\n            _this6.routeData.stops[stopLen - 1] = item;\n          }\n        } else {\n          if (result.position != undefined) {\n            _this6.routeData.stops[index]['lat'] = result.position.lat;\n            _this6.routeData.stops[index]['lng'] = result.position.lng;\n          }\n\n          if (result.address.CountryFullName !== undefined) {\n            _this6.routeData.stops[index]['country'] = `${result.address.CountryFullName}`;\n          }\n\n          if (result.address.StateName !== undefined) {\n            _this6.routeData.stops[index]['state'] = `${result.address.StateName}`;\n          }\n\n          _this6.routeData.stops[index]['name'] = data.address;\n\n          if (index == 0 || index == _this6.routeData.stops.length - 1) {\n            if (index === 0) {\n              _this6.setSourceValue(data, result);\n            } else {\n              _this6.setDestinationValue(data, result);\n            }\n          }\n        }\n\n        _this6.searchResults = false;\n\n        _this6.reinitMap();\n\n        $('div').removeClass('show-search__result');\n      }\n    })();\n  }\n\n  setSourceValue(labelResult, data) {\n    this.routeData.sourceInfo['address'] = '';\n    this.routeData.sourceInfo['country'] = '';\n    this.routeData.sourceInfo['state'] = '';\n    this.routeData.sourceInfo['city'] = '';\n    this.routeData.sourceInfo['zipCode'] = '';\n    this.routeData.sourceInfo['address'] = `${labelResult.address}`;\n\n    if (data.address.CountryFullName !== undefined) {\n      this.routeData.sourceInfo['country'] = `${data.address.CountryFullName}`;\n    }\n\n    if (data.address.StateName !== undefined) {\n      this.routeData.sourceInfo['state'] = `${data.address.StateName} (${data.address.State})`;\n    }\n\n    if (data.address.City !== undefined) {\n      this.routeData.sourceInfo['city'] = `${data.address.City}`;\n    }\n\n    if (data.address.Zip !== undefined) {\n      this.routeData.sourceInfo['zipCode'] = `${data.address.Zip}`;\n    }\n  }\n\n  setDestinationValue(labelResult, data) {\n    this.routeData.destInfo['address'] = '';\n    this.routeData.destInfo['country'] = '';\n    this.routeData.destInfo['state'] = '';\n    this.routeData.destInfo['city'] = '';\n    this.routeData.destInfo['zipCode'] = '';\n    this.routeData.destInfo['address'] = `${labelResult.address}`;\n\n    if (data.address.CountryFullName !== undefined) {\n      this.routeData.destInfo['country'] = `${data.address.CountryFullName}`;\n    }\n\n    if (data.address.StateName !== undefined) {\n      this.routeData.destInfo['state'] = `${data.address.StateName} (${data.address.State})`;\n    }\n\n    if (data.address.City !== undefined) {\n      this.routeData.destInfo['city'] = `${data.address.City}`;\n    }\n\n    if (data.address.Zip !== undefined) {\n      this.routeData.destInfo['zipCode'] = `${data.address.Zip}`;\n    }\n  }\n\n  addStops() {\n    const item = {\n      name: '',\n      notes: ''\n    };\n    let allStops = this.routeData.stops;\n    const length = this.routeData.stops.length;\n    allStops.splice(length - 1, 0, item);\n\n    if (length > 2) {\n      allStops[allStops.length - 1].name = this.routeData.destInfo['address'];\n    } else {\n      allStops[length].name = this.routeData.destInfo['address'];\n    }\n\n    this.routeData.stops = [];\n    setTimeout(() => {\n      this.routeData.stops = allStops;\n    }, 0.5);\n  }\n\n  removeStops(i) {\n    this.routeData.stops.splice(i, 1);\n    setTimeout(() => {\n      this.reinitMap();\n    }, 0.5);\n  }\n\n  fetchRouteByID() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this7.apiService.getData('routes/' + _this7.routeID).toPromise();\n      result = result.Items[0];\n      _this7.routeData['routeNo'] = result.routeNo;\n      _this7.routeData['routeName'] = result.routeName;\n      _this7.routeData['notes'] = result.notes;\n      _this7.routeData['vehicleID'] = result.vehicleID;\n      _this7.routeData['assetID'] = result.assetID;\n      _this7.routeData['driverID'] = result.driverID;\n      _this7.routeData['coDriverID'] = result.coDriverID;\n      _this7.routeData['miles'] = result.miles;\n      _this7.routeData['sourceInfo'] = {\n        address: result.sourceInfo.address,\n        country: result.sourceInfo.country,\n        state: result.sourceInfo.state,\n        city: result.sourceInfo.city,\n        zipCode: result.sourceInfo.zipCode\n      };\n      _this7.routeData.recurring = {\n        route: result.recurring.route,\n        type: result.recurring.type,\n        date: result.recurring.date\n      };\n      _this7.routeData.destInfo = {\n        address: result.destInfo.address,\n        country: result.destInfo.country,\n        state: result.destInfo.state,\n        city: result.destInfo.city,\n        zipCode: result.destInfo.zipCode\n      };\n      _this7.routeData.stops = result.stops;\n\n      if (result.recurring.route === true) {\n        $(\"#recurringRadioDiv\").css('display', 'block');\n        $(\"#recurringDate\").css('display', 'block');\n      }\n\n      if (result.recurring.type == 'daily') {\n        _this7.dailyClass = 'selRecc';\n        _this7.weekClass = '';\n        _this7.biClass = '';\n      } else if (result.recurring.type == 'weekly') {\n        _this7.isDaily = true;\n        _this7.dailyClass = '';\n        _this7.weekClass = 'selRecc';\n        _this7.biClass = '';\n      } else if (result.recurring.type == 'biweekly') {\n        _this7.isDaily = true;\n        _this7.dailyClass = '';\n        _this7.weekClass = '';\n        _this7.biClass = 'selRecc';\n      }\n\n      _this7.routeData['timeCreated'] = result.timeCreated; // show map route\n\n      _this7.destinationStop = true;\n      _this7.mapVisible = true;\n\n      if (result.stops.length > 1) {\n        _this7.getCoordsEdit(result.stops);\n      }\n\n      _this7.mapShow();\n    })();\n  }\n\n  updateRoute() {\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.routeBtnStatus = true;\n\n    if (this.routeData.recurring.route === true) {\n      if (this.routeData.recurring.type == '') {\n        this.toastr.error('Please select recurring type.');\n        return false;\n      }\n    }\n\n    this.routeData['routeID'] = this.route.snapshot.params['routeID'];\n    this.apiService.putData('routes', this.routeData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.routeBtnStatus = false;\n          },\n          error: () => {\n            this.routeBtnStatus = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.routeBtnStatus = false;\n        this.router.navigateByUrl('/dispatch/routes/list');\n        this.toastr.success('Route updated successfully.');\n      }\n    });\n  }\n\n  selectRecurring(event) {\n    $('.reccRoute').removeClass('selRecc');\n    $('#' + event.target.id).closest('label').addClass('selRecc');\n\n    if (event.target.id != 'dailyRecurringRadioBtn') {\n      this.isDaily = true;\n    } else {\n      this.isDaily = false;\n    }\n  }\n\n  reinitMap() {\n    if (this.routeData.stops.length > 1) {\n      this.getCoords(this.routeData.stops);\n    }\n  }\n\n  refreshDriverData() {\n    this.listService.fetchDrivers();\n  }\n\n  refreshAssetData() {\n    this.listService.fetchAssets();\n  }\n\n  refreshVehicleData() {\n    this.listService.fetchVehicles();\n  }\n\n};\n\nAddRouteComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: NgbCalendar\n}, {\n  type: NgbDateAdapter\n}, {\n  type: HereMapService\n}, {\n  type: ListService\n}];\n\nAddRouteComponent = __decorate([Component({\n  selector: 'app-add-route',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddRouteComponent);\nexport { AddRouteComponent };","map":null,"metadata":{},"sourceType":"module"}