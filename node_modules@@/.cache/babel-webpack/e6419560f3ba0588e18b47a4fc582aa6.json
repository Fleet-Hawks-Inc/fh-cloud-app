{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-driver-payment.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-driver-payment.component.css\";\nimport { Component } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport * as moment from \"moment\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { AccountService, ApiService, ListService } from \"src/app/services\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { Location } from \"@angular/common\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nlet AddDriverPaymentComponent = class AddDriverPaymentComponent {\n  constructor(listService, route, router, toaster, accountService, apiService, httpClient, modalService, location, countryStateCity) {\n    var _this = this;\n\n    this.listService = listService;\n    this.route = route;\n    this.router = router;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.modalService = modalService;\n    this.location = location;\n    this.countryStateCity = countryStateCity;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n    this.paymentData = {\n      paymentTo: null,\n      entityId: null,\n      paymentNo: \"\",\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      fromDate: null,\n      toDate: null,\n      settlementIds: [],\n      advancePayIds: [],\n      payMode: null,\n      payModeNo: \"\",\n      payModeDate: null,\n      settledAmount: 0,\n      vacPayPer: 0,\n      vacPayAmount: 0,\n      totalAmount: 0,\n      currency: \"CAD\",\n      taxdata: {\n        payPeriod: null,\n        stateCode: null,\n        federalCode: \"claim_code_1\",\n        provincialCode: null,\n        cpp: 0,\n        ei: 0,\n        federalTax: 0,\n        provincialTax: 0,\n        emplCPP: 0,\n        emplEI: 0\n      },\n      taxes: 0,\n      advance: 0,\n      finalAmount: 0,\n      accountID: null,\n      settlData: [],\n      advData: [],\n      transactionLog: [],\n      gstHstPer: 0,\n      gstHstAmt: 0,\n      isVendorPayment: false,\n      vendorId: ''\n    };\n    this.drivers = [];\n    this.carriers = [];\n    this.ownerOperators = [];\n    this.payModeLabel = \"\";\n    this.settlements = [];\n    this.trips = [];\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.submitDisabled = true;\n    this.searchDisabled = true;\n    this.taxErr = \"\";\n    this.advErr = \"\";\n    this.gstError = \"\";\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.advancePayments = [];\n    this.accList = [];\n    this.payPeriods = [];\n    this.states = [];\n    this.claimCodes = [];\n    this.provincalClaimCodes = [];\n    this.editDisabled = false;\n    this.showModal = false;\n    this.allDrivers = [];\n    this.allCarriers = [];\n    this.allOwnOpr = [];\n    this.vendorCompanyName = \"\";\n    this.corporateDriver = false;\n    this.getDriverDetails = /*#__PURE__*/_asyncToGenerator(function* () {\n      const result = yield _this.apiService.getData(`drivers/cheque/data/${_this.paymentData.entityId}`).toPromise();\n\n      if (result && result.Items.length > 0) {\n        const driverDetails = result.Items[0];\n\n        if (result.Items[0].vendorName && result.Items[0].vendorName != \"\" && result.Items[0].venAddress && result.Items[0].venAddress.length > 0) {\n          _this.corporateDriver = true;\n          _this.vendorCompanyName = result.Items[0].vendorName;\n          _this.paymentData.vendorId = result.Items[0].vendor;\n\n          if (result.Items[0].venAddress && result.Items[0].venAddress.length > 0) {\n            _this.vendorAddress = result.Items[0].venAddress[0];\n          }\n        } else {\n          _this.corporateDriver = false;\n        }\n      }\n    });\n    this.isVendor = false;\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.subscription = _this2.listService.paymentSaveList.subscribe(res => {\n        if (res.openFrom == 'addForm') {\n          _this2.addRecord();\n        }\n      });\n      _this2.paymentID = _this2.route.snapshot.params[\"paymentID\"];\n\n      if (_this2.paymentID) {\n        _this2.fetchPaymentDetail();\n      } else {\n        _this2.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      _this2.fetchDrivers();\n\n      _this2.fetchCarriers();\n\n      _this2.fetchOwnerOperators();\n\n      _this2.fetchAccounts();\n\n      _this2.listService.fetchChartAccounts();\n\n      _this2.accounts = _this2.listService.accountsList;\n\n      _this2.fetchPayPeriods();\n\n      yield _this2.getStates();\n\n      _this2.fetchClaimCodes();\n    })();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  fetchDrivers() {\n    this.apiService.getData(`drivers/get/all/active`).subscribe(result => {\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.allDrivers.push(element);\n        }\n      });\n      this.drivers = result.Items.reduce((a, b) => {\n        return a[b[\"driverID\"]] = b[\"isDeleted\"] === 1 ? b[\"firstName\"] + b[\"lastName\"] + \" - Deleted\" : b[\"firstName\"] + b[\"lastName\"], a;\n      }, {});\n    });\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/get/all/list`).subscribe(result => {\n      this.accList = result;\n    });\n  }\n\n  fetchCarriers() {\n    this.apiService.getData(\"contacts/get/type/carrier\").subscribe(result => {\n      // this.carriers = result;\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.allCarriers.push(element);\n        }\n      });\n      this.carriers = result.reduce((a, b) => {\n        return a[b[\"contactID\"]] = b[\"isDeleted\"] == 1 ? b[\"companyName\"] + \"  - Deleted\" : b[\"companyName\"], a;\n      }, {});\n    });\n  }\n\n  refreshAccount() {\n    this.listService.fetchChartAccounts();\n  }\n\n  fetchOwnerOperators() {\n    this.apiService.getData(`contacts/get/type/ownerOperator`).subscribe(result => {\n      // this.ownerOperators = result;\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.allOwnOpr.push(element);\n        }\n      });\n      this.ownerOperators = result.reduce((a, b) => {\n        return a[b[\"contactID\"]] = b[\"isDeleted\"] == 1 ? b[\"companyName\"] + \"  - Deleted\" : b[\"companyName\"], a;\n      }, {});\n    });\n  }\n\n  changePaymentMode(type) {\n    let label = \"\";\n\n    if (type == \"cash\") {\n      label = \"Cash\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"cheque\") {\n      label = \"Cheque\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"eft\") {\n      label = \"EFT\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"credit_card\") {\n      label = \"Credit Card\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"debit_card\") {\n      label = \"Debit Card\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"demand_draft\") {\n      label = \"Demand Draft\";\n      this.paymentData.payModeNo = \"\";\n    }\n\n    this.payModeLabel = label;\n    this.paymentData.payModeDate = null;\n  }\n\n  resetEntityVal() {\n    this.paymentData.entityId = null;\n  }\n\n  fetchSettlements() {\n    this.settlements = [];\n    this.advancePayments = [];\n\n    if (!this.paymentID && this.paymentData.entityId != null) {\n      if (this.paymentData.fromDate !== null && this.paymentData.toDate == null) {\n        this.toaster.error(\"Please select to date\");\n        return false;\n      }\n\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.searchDisabled = true;\n      this.accountService.getData(`settlement/entity/${this.paymentData.entityId}?from=${this.paymentData.fromDate}&to=${this.paymentData.toDate}&type=${this.paymentData.paymentTo}&curr=${this.paymentData.currency}`).subscribe(result => {\n        if (result.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        this.searchDisabled = false;\n        this.settlements = result;\n        this.settlements.map(v => {\n          v.currency = v.currency ? v.currency : \"CAD\";\n          v.selected = false;\n          v.fullPayment = false;\n          v.paidAmount = 0;\n          v.newtype = v.type.replace(\"_\", \" \");\n          v.paidStatus = false;\n          v.pendingPayment = Number(v.pendingPayment.toFixed(2));\n          v.prevPaidAmount = Number(v.finalTotal) - Number(v.pendingPayment);\n          v.prevPaidAmount = v.prevPaidAmount.toFixed(2);\n          v.status = v.status.replace(\"_\", \" \");\n          v.errText = \"\";\n        });\n      });\n      this.fetchAdvancePayments();\n    } else {\n      return false;\n    }\n  }\n\n  fetchtrips() {\n    this.apiService.getData(`common/trips/get/list`).subscribe(result => {\n      this.trips = result;\n    });\n  }\n\n  selectedSettlements() {\n    this.paymentData.settlementIds = [];\n    this.paymentData.settlData = [];\n\n    for (const element of this.settlements) {\n      if (element.selected) {\n        if (!this.paymentData.settlementIds.includes(element.sttlID)) {\n          let obj = {\n            settlementId: element.sttlID,\n            status: element.status,\n            paidAmount: element.status === \"unpaid\" ? element.paidAmount : Number(element.finalTotal) - Number(element.pendingPayment),\n            totalAmount: element.status === \"unpaid\" ? element.finalTotal : element.pendingPayment,\n            pendingAmount: element.pendingPayment\n          };\n          this.paymentData.settlementIds.push(element.sttlID);\n          this.paymentData.settlData.push(obj);\n        }\n      }\n    }\n\n    this.paymentCalculation();\n  }\n\n  paymentCalculation() {\n    this.paymentData.totalAmount = 0;\n    this.paymentData.finalAmount = 0;\n    this.paymentData.advance = 0;\n    this.paymentData.settledAmount = 0;\n    let selectCount = 0;\n\n    for (const element of this.settlements) {\n      if (element.selected) {\n        if (element.paidAmount > 0) {\n          selectCount += 1;\n        }\n\n        this.paymentData.settledAmount += Number(element.paidAmount); // this.paymentData.totalAmount += Number(element.paidAmount);\n\n        this.paymentData.settlData.map(v => {\n          if (element.sttlID === v.settlementId) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.pendingPayment) - Number(element.paidAmount);\n\n            if (Number(element.paidAmount) === Number(element.pendingPayment)) {\n              v.status = \"paid\";\n            } else if (Number(element.paidAmount) < Number(element.pendingPayment)) {\n              v.status = \"partially_paid\";\n            } else {\n              v.status = \"unpaid\";\n            }\n\n            v.paidAmount = v.paidAmount.toFixed(2);\n          }\n        });\n      }\n    }\n\n    for (const element of this.advancePayments) {\n      if (element.selected) {\n        this.paymentData.advance += Number(element.paidAmount);\n        this.paymentData.advData.map(v => {\n          if (element.paymentID === v.paymentID) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.pendingPayment) - Number(element.paidAmount);\n\n            if (Number(element.paidAmount) === Number(element.pendingPayment)) {\n              v.status = \"deducted\";\n            } else if (Number(element.paidAmount) < Number(element.pendingPayment)) {\n              v.status = \"partially_deducted\";\n            } else {\n              v.status = \"not_deducted\";\n            }\n\n            v.paidAmount = v.paidAmount.toFixed(2);\n          }\n        });\n      }\n    }\n\n    if (selectCount > 0) {\n      this.submitDisabled = false;\n    } else {\n      this.submitDisabled = true;\n    }\n\n    this.calculateFinalTotal();\n\n    if (this.paymentData.paymentTo === \"driver\") {\n      this.calculatePayroll();\n    }\n  }\n\n  calculateFinalTotal() {\n    this.paymentData.advance = this.paymentData.advance ? Number(this.paymentData.advance) : 0;\n    this.paymentData.taxes = this.paymentData.taxes ? Number(this.paymentData.taxes) : 0;\n    this.paymentData.settledAmount = this.paymentData.settledAmount ? Number(this.paymentData.settledAmount) : 0;\n    this.paymentData.totalAmount = Number(this.paymentData.settledAmount) + Number(this.paymentData.vacPayAmount);\n    this.paymentData.totalAmount = this.paymentData.totalAmount ? Number(this.paymentData.totalAmount) : 0;\n    this.paymentData.finalAmount = this.paymentData.totalAmount - this.paymentData.taxes - this.paymentData.taxdata.cpp - this.paymentData.taxdata.ei - this.paymentData.advance + this.paymentData.gstHstAmt;\n    this.paymentData.finalAmount = Number(this.paymentData.finalAmount).toFixed(2);\n\n    if (this.paymentData.finalAmount > 0) {\n      this.submitDisabled = false;\n    } else {\n      this.submitDisabled = true;\n    }\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  addRecord() {\n    if (this.paymentData.settlementIds.length === 0) {\n      this.toaster.error(\"Please select settlement(s)\");\n      return false;\n    }\n\n    if (this.isVendor && this.paymentData.gstHstPer === 0) {\n      this.toaster.error(\"GST/HST value cannot be 0\");\n      return false;\n    }\n\n    if (this.paymentData.finalAmount <= 0) {\n      this.toaster.error(\"Net payable should be greater than 0\");\n      return false;\n    }\n\n    for (const element of this.settlements) {\n      if (element.selected) {\n        if (element.paidAmount === 0) {\n          this.toaster.error(\"Please select settlement amount\");\n          return false;\n        }\n      }\n    }\n\n    this.submitDisabled = true;\n    this.accountService.postData(\"driver-payments\", this.paymentData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Driver payment added successfully.\");\n        this.router.navigateByUrl(\"/accounts/payments/driver-payments/list\");\n        let obj = {\n          type: '',\n          openFrom: ''\n        };\n        this.listService.triggerPaymentSave(obj);\n        let payObj = {\n          showModal: false,\n          page: \"\"\n        };\n        this.listService.openPaymentChequeModal(payObj);\n      }\n    });\n  }\n\n  fetchPaymentDetail() {\n    this.accountService.getData(`driver-payments/detail/${this.paymentID}`).subscribe(result => {\n      this.editDisabled = true;\n      this.paymentData = result[0];\n\n      if (this.paymentData.payMode) {\n        this.paymentData.payMode = this.paymentData.payMode.replace(\"_\", \" \");\n      } else {\n        this.paymentData.payMode = \"\";\n      }\n\n      this.paymentData.paymentTo = this.paymentData.paymentTo.replace(\"_\", \" \");\n      let settlementIDs = [];\n      this.paymentData.settlData.map(v => {\n        settlementIDs.push(v.settlementId);\n      });\n      this.fetchSettledData(settlementIDs);\n    });\n  }\n\n  updateRecord() {\n    if (this.paymentData.settlementIds.length === 0) {\n      this.toaster.error(\"Please select settlement(s)\");\n      return false;\n    }\n\n    if (this.paymentData.finalAmount <= 0) {\n      this.toaster.error(\"Net payable should be greated than 0\");\n      return false;\n    }\n\n    for (const element of this.settlements) {\n      if (element.selected) {\n        if (element.paidAmount === 0) {\n          this.toaster.error(\"Please select settlement amount\");\n          return false;\n        }\n      }\n    }\n\n    this.submitDisabled = true;\n    this.accountService.putData(`driver-payments/${this.paymentID}`, this.paymentData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Driver payment updated successfully.\");\n        this.router.navigateByUrl(\"/accounts/payments/driver-payments/list\");\n      }\n    });\n  }\n\n  assignFullPayment(type, index, data) {\n    if (type === \"settlement\") {\n      if (data.fullPayment) {\n        this.settlements[index].paidAmount = data.pendingPayment;\n        this.settlements[index].paidStatus = true;\n      } else {\n        this.settlements[index].paidAmount = 0;\n        this.settlements[index].paidStatus = false;\n      }\n    } else {\n      if (data.fullPayment) {\n        this.advancePayments[index].paidAmount = data.pendingPayment;\n        this.advancePayments[index].paidStatus = true;\n      } else {\n        this.advancePayments[index].paidAmount = 0;\n        this.advancePayments[index].paidStatus = false;\n      }\n\n      this.selectedAdvancepayments();\n    }\n\n    this.paymentCalculation();\n  }\n\n  fetchSettledData(settlementIDs) {\n    let ids = encodeURIComponent(JSON.stringify(settlementIDs));\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.accountService.getData(`settlement/get/selected?entities=${ids}`).subscribe(result => {\n      this.settlements = result;\n      this.settlements.map(v => {\n        v.paidAmount = 0;\n        v.newtype = v.type.replace(\"_\", \" \");\n        v.status = v.status.replace(\"_\", \" \");\n      });\n    });\n  }\n\n  checkInput(type, index = \"\") {\n    if (type == \"setlAmount\") {\n      let settlementAmount = this.settlements[index][\"pendingPayment\"];\n      let enteredAmount = this.settlements[index][\"paidAmount\"];\n\n      if (enteredAmount > settlementAmount) {\n        this.settlements[index][\"errText\"] = \"Please enter valid amount\";\n        this.submitDisabled = true;\n      } else {\n        this.settlements[index][\"errText\"] = \"\";\n        this.submitDisabled = false;\n      }\n    } else if (type == \"tax\") {\n      if (this.paymentData.taxes > this.paymentData.totalAmount) {\n        this.taxErr = \"Tax amount should be less than settlement amount\";\n        this.submitDisabled = true;\n      } else {\n        this.taxErr = \"\";\n        this.submitDisabled = false;\n      }\n    } else if (type == \"advance\") {\n      if (this.paymentData.advance > this.paymentData.totalAmount) {\n        this.advErr = \"Advance amount should be less than settlement amount\";\n        this.submitDisabled = true;\n      } else {\n        this.advErr = \"\";\n        this.submitDisabled = false;\n      }\n    }\n\n    if (this.isVendor && this.paymentData.gstHstPer === 0) {\n      this.gstError = \"GST/HST should be non-zero.\";\n    } else {\n      this.gstError = \"\";\n    }\n  }\n\n  fetchAdvancePayments() {\n    this.dataMessageAdv = Constants.FETCHING_DATA;\n    this.accountService.getData(`advance/entity/${this.paymentData.entityId}?from=${this.paymentData.fromDate}&to=${this.paymentData.toDate}&curr=${this.paymentData.currency}&type=driver&fetch=other&entityType=${this.paymentData.paymentTo}`).subscribe(result => {\n      if (result.length === 0) {\n        this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.advancePayments = result;\n      this.advancePayments.map(v => {\n        v.selected = false;\n\n        if (v.payMode) {\n          v.payMode = v.payMode.replace(\"_\", \" \");\n        }\n\n        v.fullPayment = false;\n        v.paidAmount = 0;\n        v.paidStatus = false;\n        v.status = v.status.replace(\"_\", \" \");\n        v.errText = \"\";\n        v.prevPaidAmount = Number(v.amount) - Number(v.pendingPayment);\n        v.prevPaidAmount = v.prevPaidAmount.toFixed(2);\n      });\n    });\n  }\n\n  selectedAdvancepayments() {\n    this.paymentData.advancePayIds = [];\n    this.paymentData.advData = [];\n\n    for (const element of this.advancePayments) {\n      if (element.selected) {\n        if (!this.paymentData.advancePayIds.includes(element.paymentID)) {\n          let obj = {\n            paymentID: element.paymentID,\n            status: element.status,\n            paidAmount: element.status === \"not_deducted\" ? element.paidAmount : Number(element.amount) - Number(element.pendingPayment),\n            totalAmount: element.status === \"not_deducted\" ? element.amount : element.pendingPayment,\n            pendingAmount: element.pendingPayment\n          };\n          this.paymentData.advancePayIds.push(element.paymentID);\n          this.paymentData.advData.push(obj);\n        }\n      }\n    }\n\n    this.paymentCalculation();\n  }\n\n  showCheque() {\n    this.showModal = true;\n    let obj = {\n      entityId: this.paymentData.entityId,\n      chequeDate: this.paymentData.payModeDate,\n      chequeAmount: this.paymentData.finalAmount,\n      type: this.paymentData.paymentTo,\n      chequeNo: this.paymentData.payModeNo,\n      currency: this.paymentData.currency,\n      formType: this.paymentID ? \"edit\" : \"add\",\n      showModal: this.showModal,\n      fromDate: this.paymentData.fromDate,\n      toDate: this.paymentData.toDate,\n      vacPayPer: this.paymentData.vacPayPer,\n      vacPayAmount: this.paymentData.vacPayAmount,\n      totalAmount: this.paymentData.totalAmount,\n      settledAmount: this.paymentData.settledAmount,\n      taxdata: this.paymentData.taxdata,\n      finalAmount: this.paymentData.finalAmount,\n      advance: this.paymentData.advance,\n      txnDate: this.paymentData.txnDate,\n      page: \"addForm\",\n      isVendorPayment: this.isVendor,\n      vendorId: this.paymentData.vendorId,\n      gstHstPer: this.paymentData.gstHstPer\n    };\n    this.listService.openPaymentChequeModal(obj);\n  }\n\n  openPayrollModel() {\n    $(\"#payrollModal\").modal(\"show\");\n  }\n\n  calculatePayroll() {\n    if (!this.paymentID) {\n      if (this.paymentData.taxdata.payPeriod && this.paymentData.taxdata.stateCode) {\n        if (this.paymentData.totalAmount > 0) {\n          this.accountService.getData(`employee-payments/payroll/calculate?amount=${this.paymentData.totalAmount}&pay-period=${this.paymentData.taxdata.payPeriod}&state=${this.paymentData.taxdata.stateCode}`).subscribe(result => {\n            this.paymentData.taxdata.cpp = result.cpp;\n            this.paymentData.taxdata.ei = result.insurance;\n            this.paymentData.taxdata.federalTax = result.federalTax;\n            this.paymentData.taxdata.provincialTax = result.provncTax;\n            this.paymentData.taxdata.emplCPP = result.employerCpp;\n            this.paymentData.taxdata.emplEI = result.employerEI;\n            this.paymentData.taxes = this.paymentData.taxdata.federalTax + this.paymentData.taxdata.provincialTax;\n            this.paymentData.taxes = Number(this.paymentData.taxes.toFixed(2));\n            this.calculateFinalTotal();\n          });\n        }\n      } else {\n        this.resetPayrollCalculations();\n      }\n    }\n  }\n\n  fetchPayPeriods() {\n    this.httpClient.get(\"assets/jsonFiles/payroll/payPeriods.json\").subscribe(data => {\n      this.payPeriods = data;\n    });\n  }\n\n  fetchClaimCodes() {\n    this.httpClient.get(\"assets/jsonFiles/payroll/claimCodes.json\").subscribe(data => {\n      this.claimCodes = data;\n    });\n  }\n\n  getStates() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.states = yield _this3.countryStateCity.GetStatesByCountryCode([\"CA\"]);\n    })();\n  }\n\n  assignProvincalCode() {\n    if (this.paymentData.taxdata.stateCode == null || this.paymentData.taxdata.stateCode == undefined) {\n      this.resetPayrollCalculations();\n    }\n\n    this.provincalClaimCodes = [];\n    this.claimCodes[1].map(v => {\n      if (this.paymentData.taxdata.stateCode === v.stateCode) {\n        this.provincalClaimCodes = v.codes;\n      }\n    });\n    this.paymentData.taxdata.provincialCode = \"claim_code_1\";\n    this.calculatePayroll();\n  }\n\n  resetPayrollCalculations() {\n    this.paymentData.taxdata.cpp = 0;\n    this.paymentData.taxdata.ei = 0;\n    this.paymentData.taxdata.federalTax = 0;\n    this.paymentData.taxdata.provincialTax = 0;\n    this.paymentData.taxdata.emplCPP = 0;\n    this.paymentData.taxdata.emplEI = 0;\n    this.paymentData.taxes = this.paymentData.taxdata.federalTax + this.paymentData.taxdata.provincialTax;\n    this.calculateFinalTotal();\n  }\n\n  checkSearchDisable() {\n    if (this.paymentData.paymentTo !== null && this.paymentData.entityId !== null && this.paymentData.fromDate !== null && this.paymentData.toDate !== null) {\n      this.searchDisabled = false;\n    } else {\n      this.searchDisabled = true;\n    }\n  }\n\n  calculateVacationPay() {\n    this.paymentData.vacPayAmount = this.paymentData.vacPayPer / 100 * this.paymentData.settledAmount;\n\n    if (this.paymentData.taxdata.payPeriod && this.paymentData.taxdata.stateCode) {\n      this.resetPayrollCalculations();\n      this.calculatePayroll();\n    } else {\n      this.calculateFinalTotal();\n    }\n  }\n\n  changeIssueToVendor(event) {\n    if (event.target.checked) {\n      this.isVendor = true;\n      this.calculateFinalTotal();\n    } else {\n      this.isVendor = false;\n      this.paymentData.gstHstAmt = 0;\n      this.paymentData.gstHstPer = 0;\n      this.calculateFinalTotal();\n    }\n  }\n\n  calculateGstHst() {\n    // Calculate GST\n    const gstHstAmt = this.paymentData.gstHstPer / 100 * this.paymentData.settledAmount;\n    this.paymentData.gstHstAmt = gstHstAmt || 0;\n    this.calculateFinalTotal();\n  }\n\n};\n\nAddDriverPaymentComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}, {\n  type: ApiService\n}, {\n  type: HttpClient\n}, {\n  type: NgbModal\n}, {\n  type: Location\n}, {\n  type: CountryStateCityService\n}];\n\nAddDriverPaymentComponent = __decorate([Component({\n  selector: \"app-add-driver-payment\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddDriverPaymentComponent);\nexport { AddDriverPaymentComponent };","map":null,"metadata":{},"sourceType":"module"}