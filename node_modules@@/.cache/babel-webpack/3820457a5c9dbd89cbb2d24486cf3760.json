{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-purchase-order.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-purchase-order.component.css\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Component } from \"@angular/core\";\nimport { ListService, AccountService, ApiService } from \"src/app/services\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { v4 as uuidv4 } from \"uuid\";\nlet AddPurchaseOrderComponent = class AddPurchaseOrderComponent {\n  constructor(httpClient, listService, accountService, toaster, location, route, apiService) {\n    this.httpClient = httpClient;\n    this.listService = listService;\n    this.accountService = accountService;\n    this.toaster = toaster;\n    this.location = location;\n    this.route = route;\n    this.apiService = apiService;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.pageTitle = \"Add\";\n    this.orderData = {\n      txnDate: null,\n      refNo: \"\",\n      currency: \"CAD\",\n      poType: \"product\",\n      vendorID: null,\n      detail: [{\n        comm: \"\",\n        qty: 0,\n        qtyTyp: null,\n        rate: 0,\n        rateTyp: null,\n        amount: 0,\n        rowID: uuidv4(),\n        status: \"pending\"\n      }],\n      total: {\n        finalTotal: 0\n      },\n      remarks: \"\",\n      status: \"draft\",\n      billStatus: \"\"\n    };\n    this.quantityTypes = [];\n    this.vendors = [];\n    this.submitDisabled = false;\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.docs = [];\n    this.oldDocs = [];\n    this.removedDocs = [];\n    this.filesError = '';\n  }\n\n  ngOnInit() {\n    this.purchaseID = this.route.snapshot.params[\"purchaseID\"];\n\n    if (this.purchaseID) {\n      this.pageTitle = \"Edit\";\n      this.fetchDetails();\n    }\n\n    this.route.queryParams.subscribe(params => {\n      this.cloneID = params.cloneID;\n\n      if (this.cloneID != undefined && this.cloneID != \"\") {\n        this.pageTitle = \"Clone\";\n        this.purchaseID = this.cloneID;\n        this.fetchDetails();\n      }\n    });\n    this.listService.fetchVendors();\n    this.fetchQuantityTypes();\n    let vendorList = new Array();\n    this.getValidVendors(vendorList);\n    this.vendors = vendorList;\n    $(\".modal\").on(\"hidden.bs.modal\", e => {\n      localStorage.setItem(\"isOpen\", \"false\");\n    });\n  }\n\n  getValidVendors(vendorList) {\n    let ids = [];\n    this.listService.vendorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          vendorList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  fetchQuantityTypes() {\n    this.httpClient.get(\"assets/jsonFiles/quantityTypes.json\").subscribe(data => {\n      this.quantityTypes = data;\n    });\n  }\n\n  addDetail() {\n    let obj = {\n      comm: \"\",\n      qty: 0,\n      qtyTyp: null,\n      rate: 0,\n      rateTyp: null,\n      amount: 0,\n      rowID: uuidv4(),\n      status: \"pending\"\n    };\n    const lastAdded = this.orderData.detail[this.orderData.detail.length - 1];\n\n    if (lastAdded.comm !== \"\" && lastAdded.qty !== \"\" && lastAdded.qtyTyp !== \"\" && lastAdded.rate !== \"\" && lastAdded.rateTyp !== \"\" && lastAdded.amount !== 0) {\n      this.orderData.detail.push(obj);\n    }\n  }\n\n  delDetail(index) {\n    if (this.orderData.detail.length > 1) {\n      this.orderData.detail.splice(index, 1);\n    }\n  }\n\n  checkEmailStat(type) {\n    if (this.cloneID) {\n      delete this.orderData['orderNo'];\n      delete this.orderData['purchaseID'];\n      delete this.orderData['paymentLinked'];\n    }\n\n    if (type === \"yes\") {\n      this.orderData[\"sendEmail\"] = true;\n    } else {\n      this.orderData[\"sendEmail\"] = false;\n    }\n\n    this.addRecord();\n  }\n\n  addRecord() {\n    for (let i = 0; i < this.orderData.detail.length; i++) {\n      const element = this.orderData.detail[i];\n\n      if (element.comm === \"\" || element.qty === 0 || element.qtyTyp === null || element.rate === 0 || element.rateTyp === null || element.amount <= 0) {\n        this.toaster.error(\"Please enter valid bill details\");\n        return false;\n      }\n    }\n\n    if (this.orderData.total.finalTotal <= 0) {\n      this.toaster.error(\"Amount should be greater than 0\");\n      return false;\n    }\n\n    this.submitDisabled = true; // create form data instance\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.orderData));\n    this.accountService.postData(\"purchase-orders\", formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Purchase order added successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n  calcDetailAmount(i) {\n    let total = 0;\n    let amount = (this.orderData.detail[i].qty ? this.orderData.detail[i].qty : 0) * (this.orderData.detail[i].rate ? this.orderData.detail[i].rate : 0);\n    this.orderData.detail[i].amount = parseFloat(amount.toFixed(2));\n    this.orderData.detail.forEach(element => {\n      total += element.amount;\n    });\n    this.orderData.total.finalTotal = parseFloat(total);\n  }\n\n  setQuanType(event, index) {\n    this.orderData.detail[index].qtyTyp = event.target.value;\n    this.orderData.detail[index].rateTyp = event.target.value;\n  }\n\n  deleteDocument(name, index) {\n    this.oldDocs.filter(elem => {\n      if (elem.displayName === name) {\n        let obj = {\n          storedName: elem.name,\n          displayName: elem.displayName\n        };\n        this.removedDocs.push(obj);\n        ;\n      }\n    });\n    this.oldDocs.splice(index, 1);\n  }\n\n  fetchDetails() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let res = yield _this.accountService.getData(`purchase-orders/details/${_this.purchaseID}`).toPromise();\n      _this.orderData = res[0];\n\n      if (res[0].docs.length > 0) {\n        res[0].docs.forEach(x => {\n          let obj = {};\n\n          if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n            obj = {\n              imgPath: `${x.urlPath}`,\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          } else {\n            obj = {\n              imgPath: \"assets/img/icon-pdf.png\",\n              docPath: `${x.urlPath}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          }\n\n          _this.oldDocs.push(obj);\n        });\n      }\n    })();\n  }\n\n  updateRecord() {\n    for (let i = 0; i < this.orderData.detail.length; i++) {\n      const element = this.orderData.detail[i];\n\n      if (element.comm === \"\" || element.qty === 0 || element.qtyTyp === null || element.rate === 0 || element.rateTyp === null || element.amount <= 0) {\n        this.toaster.error(\"Please enter valid bill details\");\n        return false;\n      }\n    }\n\n    if (this.orderData.total.finalTotal <= 0) {\n      this.toaster.error(\"Amount should be greater than 0\");\n      return false;\n    }\n\n    this.orderData[\"sendEmail\"] = false;\n    this.orderData['removedDocs'] = this.removedDocs;\n    this.submitDisabled = true; // create form data instance\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.orderData));\n    this.accountService.putData(`purchase-orders/update/${this.purchaseID}`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Purchase order updated successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  cloneOrder(type) {\n    if (type === \"yes\") {\n      this.orderData[\"sendEmail\"] = true;\n    } else {\n      this.orderData[\"sendEmail\"] = false;\n    }\n\n    delete this.orderData['orderNo'];\n    delete this.orderData['purchaseID'];\n    delete this.orderData['paymentLinked'];\n    this.addRecord();\n  }\n\n  uploadDocs(documents) {\n    let files = [...documents];\n    let filesSize = 0;\n\n    if (files.length > 5) {\n      this.toaster.error(\"Files count limit exceeded\");\n      this.filesError = \"Files should not be more than 5\";\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      this.filesError = '';\n      filesSize += files[i].size / 1024 / 1024;\n\n      if (filesSize > 10) {\n        this.toaster.error(\"Files size limit exceeded\");\n        this.filesError = 'Files size limit exceeded. Files size should be less than 10mb';\n        return;\n      } else {\n        let name = files[i].name.split(\".\");\n        let ext = name[name.length - 1].toLowerCase();\n\n        if (ext == \"doc\" || ext == \"docx\" || ext == \"pdf\" || ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\") {\n          this.docs.push(files[i]);\n        } else {\n          this.filesError = \"Only .doc, .docx, .pdf, .jpg, .jpeg and png files allowed.\";\n        }\n      }\n    }\n  }\n\n};\n\nAddPurchaseOrderComponent.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: ListService\n}, {\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: Location\n}, {\n  type: ActivatedRoute\n}, {\n  type: ApiService\n}];\n\nAddPurchaseOrderComponent = __decorate([Component({\n  selector: \"app-add-purchase-order\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddPurchaseOrderComponent);\nexport { AddPurchaseOrderComponent };","map":null,"metadata":{},"sourceType":"module"}