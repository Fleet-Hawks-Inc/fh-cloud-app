{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-invoice.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-invoice.component.css\";\nimport { ApiService, AccountService, ListService } from '../../../../services';\nimport { Component } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\nimport * as moment from 'moment';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Auth } from 'aws-amplify';\nimport { Location } from '@angular/common';\nlet AddInvoiceComponent = class AddInvoiceComponent {\n  constructor(accountService, listService, apiService, toaster, route, location, router) {\n    var _this = this;\n\n    this.accountService = accountService;\n    this.listService = listService;\n    this.apiService = apiService;\n    this.toaster = toaster;\n    this.route = route;\n    this.location = location;\n    this.router = router;\n    this.pageTitle = 'Add Invoice';\n    this.dateMinLimit = {\n      year: 2021,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.users = [];\n    this.invoiceData = {\n      invNo: '',\n      txnDate: moment().format('YYYY-MM-DD'),\n      invRef: '',\n      invCur: null,\n      invDueDate: null,\n      invPayTerms: '',\n      customerID: null,\n      cusAddressID: null,\n      invSalesman: null,\n      invSubject: '',\n      amountReceived: 0,\n      amountPaid: 0,\n      fullPayment: false,\n      balance: 0,\n      details: [{\n        commodityService: '',\n        qtyHours: 0,\n        priceRate: 0,\n        amount: 0,\n        accountID: null\n      }],\n      remarks: '',\n      discount: 0,\n      discountUnit: '%',\n      invStateProvince: null,\n      invStatus: 'open',\n      invType: 'manual',\n      subTotal: 0,\n      taxesInfo: [],\n      finalAmount: 0,\n      taxAmount: 0,\n      transactionLog: [],\n      discountAmount: 0\n    };\n    this.midAmt = 0; // midAmt is sum of all the amount values in details table\n\n    this.finalAmount = 0;\n    this.customersObjects = {};\n    /**\r\n     * Customer related properties\r\n     */\n\n    this.customers = [];\n    this.customerSelected = [{\n      additionalContact: [],\n      adrs: [],\n      officeAddr: false,\n      email: '',\n      phone: ''\n    }];\n    this.notOfficeAddress = false;\n    /**\r\n     * Accounts\r\n     *\r\n     */\n\n    this.accounts = [];\n    /**\r\n     * Taxes part\r\n     */\n\n    this.tax = 0;\n    this.stateTaxes = [];\n    this.stateTaxID = '';\n    this.newTaxes = [{\n      type: '',\n      amount: 0,\n      taxAmount: 0\n    }];\n    this.errors = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.submitDisabled = false;\n    this.currentUser = '';\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.currentUser = `${_this.currentUser.firstName} ${_this.currentUser.lastName}`;\n      _this.invoiceData.invSalesman = _this.currentUser;\n    });\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.getCurrentuser(); // this.customers = this.listService.customersList;\n\n\n      _this2.fetchStateTaxes(); // this.fetchUsers();\n\n\n      _this2.fetchAccounts();\n\n      _this2.invID = _this2.route.snapshot.params[`invID`];\n\n      if (_this2.invID) {\n        _this2.pageTitle = 'Edit Invoice';\n        yield _this2.fetchInvoice();\n      } else {\n        _this2.pageTitle = 'Add Invoice';\n      }\n\n      _this2.listService.fetchCustomers();\n\n      _this2.fetchCustomersByIDs();\n\n      let customerList = new Array();\n\n      _this2.getValidcustomers(customerList);\n\n      _this2.customers = customerList;\n    })();\n  }\n\n  getValidcustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 1 && element2.contactID === this.invoiceData.customerID) {\n          this.invoiceData.customerID = null;\n        }\n\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  fetchUsers() {\n    this.apiService.getData('contacts/get/type/employee').subscribe(result => {\n      this.users = result;\n    });\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/fetch/list`).subscribe(res => {\n      this.accounts = res;\n    });\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  selectedCustomer(customerID) {\n    this.apiService.getData(`contacts/detail/${customerID}`).subscribe(result => {\n      if (result.Items.length > 0) {\n        this.customerSelected = result.Items;\n\n        for (let i = 0; i < this.customerSelected[0].adrs.length; i++) {\n          const element = this.customerSelected[0].adrs[i];\n          element[`isChecked`] = false;\n        }\n\n        if (this.invID) {\n          this.customerSelected[0].adrs.filter(elem => {\n            if (elem.addressID === this.invoiceData.cusAddressID) {\n              elem.isChecked = true;\n            }\n          });\n        } else {\n          this.customerSelected[0].adrs[0].isChecked = true;\n\n          if (this.customerSelected[0].adrs.length > 0) {\n            this.invoiceData.cusAddressID = this.customerSelected[0].adrs[0].addressID;\n          }\n\n          const addressLength = this.customerSelected[0].adrs.length;\n          const getType = this.customerSelected[0].adrs[0].aType;\n\n          if (addressLength === 1 && (getType === '' || getType === null)) {\n            this.notOfficeAddress = true;\n          } else {\n            this.notOfficeAddress = false;\n          }\n        }\n      }\n    });\n  }\n\n  getAddressID(value, i, id) {\n    if (value === true) {\n      this.invoiceData.cusAddressID = id;\n\n      for (let index = 0; index < this.customerSelected[0].adrs.length; index++) {\n        const element = this.customerSelected[0].adrs[index];\n        element.isChecked = false;\n      }\n\n      this.customerSelected[0].adrs[i].isChecked = true;\n    }\n  }\n\n  getInvDueDate(e) {\n    if (e === '15') {\n      const test = moment().add(15, 'd');\n      const test1 = moment(test).format('YYYY-MM-DD');\n      this.invoiceData.invDueDate = test1;\n    } else if (e === '30') {\n      const test = moment().add(30, 'd');\n      const test1 = moment(test).format('YYYY-MM-DD');\n      this.invoiceData.invDueDate = test1;\n    } else if (e === '45') {\n      const test = moment().add(45, 'd');\n      const test1 = moment(test).format('YYYY-MM-DD');\n      this.invoiceData.invDueDate = test1;\n    } else if (e === 'dueReceipt') {\n      this.invoiceData.invDueDate = moment().format('YYYY-MM-DD');\n    } else if (e === 'dueEnd') {\n      this.invoiceData.invDueDate = moment().endOf('month').format('YYYY-MM-DD');\n    } else {\n      this.invoiceData.invDueDate = null;\n    }\n  }\n\n  calculateDetailAmt(e, d, type) {\n    if (type === 'price') {\n      this.invoiceData.details[d].amount = this.invoiceData.details[d].qtyHours * e;\n      this.calculateAmount();\n    } else {\n      this.invoiceData.details[d].amount = this.invoiceData.details[d].priceRate * e;\n      this.calculateAmount();\n    }\n  }\n\n  stateSelectChange() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const selected = _this3.stateTaxes.find(o => o.stateTaxID === _this3.invoiceData.invStateProvince);\n\n      _this3.invoiceData.taxesInfo = [];\n      _this3.invoiceData.taxesInfo = [{\n        name: 'GST',\n        amount: selected.GST\n      }, {\n        name: 'HST',\n        amount: selected.HST\n      }, {\n        name: 'PST',\n        amount: selected.PST\n      }];\n      _this3.tax = (Number(selected.GST) ? selected.GST : 0) + (Number(selected.HST) ? selected.HST : 0) + (Number(selected.PST) ? selected.PST : 0);\n      yield _this3.calculateAmount();\n    })();\n  }\n\n  fetchStateTaxes() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this4.apiService.getData(`stateTaxes`).toPromise();\n      _this4.stateTaxes = result.Items;\n\n      if (!_this4.invID) {\n        _this4.invoiceData.invStateProvince = _this4.stateTaxes[0].stateTaxID;\n        _this4.invoiceData.taxesInfo = [{\n          name: 'GST',\n          amount: result.Items[0].GST\n        }, {\n          name: 'HST',\n          amount: result.Items[0].HST\n        }, {\n          name: 'PST',\n          amount: result.Items[0].PST\n        }];\n      } else {\n        _this4.stateTaxes.map(v => {\n          if (_this4.invoiceData.invStateProvince === v.stateTaxID) {\n            _this4.invoiceData.taxesInfo = [{\n              name: 'GST',\n              amount: v.GST\n            }, {\n              name: 'HST',\n              amount: v.HST\n            }, {\n              name: 'PST',\n              amount: v.PST\n            }];\n          }\n        });\n      }\n\n      _this4.newTaxes = _this4.invoiceData.taxesInfo;\n\n      if (_this4.invoiceData.subTotal > 0) {\n        for (const element of _this4.newTaxes) {\n          element.taxAmount = +(_this4.invoiceData.subTotal * element.amount / 100).toFixed(2);\n        }\n      }\n    })();\n  }\n\n  addDetails() {\n    this.invoiceData.details.push({\n      commodityService: '',\n      qtyHours: 0,\n      priceRate: 0,\n      amount: 0,\n      accountID: null\n    });\n  }\n\n  deleteDetail(amount, d) {\n    this.invoiceData.details.splice(d, 1);\n    this.calculateAmount();\n  }\n\n  addInvoice() {\n    this.invoiceData.balance = this.invoiceData.finalAmount;\n    this.submitDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.accountService.postData(`invoices`, this.invoiceData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Invoice Added Successfully.');\n        this.cancel();\n      }\n    });\n  }\n\n  calculateAmount() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.midAmt = 0;\n\n      for (const element of _this5.invoiceData.details) {\n        _this5.midAmt += Number(element.amount);\n      }\n\n      _this5.invoiceData.subTotal = _this5.midAmt;\n\n      if (_this5.invoiceData.discountUnit === '%') {\n        _this5.invoiceData.subTotal = _this5.midAmt - _this5.invoiceData.discount * _this5.midAmt / 100;\n        _this5.invoiceData.discountAmount = _this5.invoiceData.discount * _this5.midAmt / 100;\n      } else if (_this5.invoiceData.discountUnit === 'CAD') {\n        _this5.invoiceData.subTotal = _this5.midAmt - _this5.invoiceData.discount;\n        _this5.invoiceData.discountAmount = _this5.invoiceData.discount;\n      } else {\n        _this5.invoiceData.subTotal = _this5.midAmt - _this5.invoiceData.discount;\n        _this5.invoiceData.discountAmount = _this5.invoiceData.discount;\n      }\n\n      _this5.finalAmount = _this5.invoiceData.subTotal.toFixed(2);\n      const gst = _this5.invoiceData.taxesInfo[0].amount ? _this5.invoiceData.taxesInfo[0].amount : 0;\n      const pst = _this5.invoiceData.taxesInfo[1].amount ? _this5.invoiceData.taxesInfo[1].amount : 0;\n      const hst = _this5.invoiceData.taxesInfo[2].amount ? _this5.invoiceData.taxesInfo[2].amount : 0;\n      const totalTax = parseInt(gst, 10) + parseInt(pst, 10) + parseInt(hst, 10);\n      const taxAmount = parseInt(_this5.finalAmount, 10) * totalTax / 100;\n      _this5.invoiceData.taxAmount = +taxAmount.toFixed(2);\n      const final = parseInt(_this5.finalAmount, 10) + taxAmount;\n      _this5.invoiceData.finalAmount = final;\n      _this5.newTaxes = _this5.invoiceData.taxesInfo;\n\n      if (_this5.invoiceData.subTotal > 0) {\n        for (const element of _this5.newTaxes) {\n          element.taxAmount = +(_this5.invoiceData.subTotal * element.amount / 100).toFixed(2);\n        }\n      }\n    })();\n  }\n\n  fetchInvoice() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let res = yield _this6.accountService.getData(`invoices/detail/${_this6.invID}`).toPromise();\n      _this6.invoiceData = res[0];\n\n      _this6.selectedCustomer(_this6.invoiceData.customerID);\n\n      _this6.invoiceData.invStateProvince = _this6.invoiceData.invStateProvince;\n\n      _this6.fetchStateTaxes();\n\n      _this6.invoiceData.details = res[0].details;\n      _this6.invoiceData.transactionLog = res[0].transactionLog;\n\n      _this6.calculateAmount();\n\n      const state = _this6.stateTaxes.find(o => o.stateTaxID === res[0].invStateProvince);\n\n      _this6.invoiceData.taxesInfo = [{\n        name: 'GST',\n        amount: state ? state.GST : ''\n      }, {\n        name: 'HST',\n        amount: state ? state.HST : ''\n      }, {\n        name: 'PST',\n        amount: state ? state.PST : ''\n      }];\n    })();\n  }\n\n  updateInvoice() {\n    this.submitDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.invoiceData.balance = this.invoiceData.finalAmount;\n    this.accountService.putData(`invoices/update/${this.invID}`, this.invoiceData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Invoice Updated Successfully.');\n        this.cancel();\n      }\n    });\n  }\n  /*\r\n  * Get all customers's IDs of names from api\r\n  */\n\n\n  fetchCustomersByIDs() {\n    this.apiService.getData('contacts/get/list').subscribe(result => {\n      this.customersObjects = result;\n    });\n  }\n\n  refreshCustomerData() {\n    this.listService.fetchCustomers();\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem('isOpen', 'true');\n    this.listService.changeButton(false);\n  }\n\n};\n\nAddInvoiceComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: ListService\n}, {\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Location\n}, {\n  type: Router\n}];\n\nAddInvoiceComponent = __decorate([Component({\n  selector: 'app-add-invoice',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddInvoiceComponent);\nexport { AddInvoiceComponent };","map":null,"metadata":{},"sourceType":"module"}