{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./payment-pdfs.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./payment-pdfs.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport * as html2pdf from \"html2pdf.js\";\nimport { ApiService } from \"src/app/services/api.service\";\nimport { ListService } from \"src/app/services/list.service\";\nimport { formatDate } from \"@angular/common\";\nimport { AccountService } from \"src/app/services/account.service\";\nimport { Auth } from \"aws-amplify\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nlet PaymentPdfsComponent = class PaymentPdfsComponent {\n  constructor(listService, apiService, accountService, modalService) {\n    var _this = this;\n\n    this.listService = listService;\n    this.apiService = apiService;\n    this.accountService = accountService;\n    this.modalService = modalService;\n    this.pdfDetails = {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      userID: \"\",\n      address: \"\",\n      payPeriod: \"\",\n      payYear: \"\",\n      paymentNo: \"\"\n    };\n    this.settlements = [];\n    this.paymentData = {\n      paymentEnity: \"\",\n      paymentTo: null,\n      entityId: null,\n      paymentNo: \"\",\n      txnDate: \"\",\n      fromDate: null,\n      toDate: null,\n      settlementIds: [],\n      advancePayIds: [],\n      payMode: null,\n      payModeNo: \"\",\n      payModeDate: null,\n      settledAmount: 0,\n      vacPayPer: 0,\n      vacPayAmount: 0,\n      totalAmount: 0,\n      taxdata: {\n        payPeriod: null,\n        stateCode: null,\n        federalCode: \"claim_code_1\",\n        provincialCode: null,\n        cpp: 0,\n        ei: 0,\n        federalTax: 0,\n        provincialTax: 0,\n        emplCPP: 0,\n        emplEI: 0\n      },\n      taxes: 0,\n      advance: 0,\n      finalAmount: 0,\n      accountID: null,\n      settlData: [],\n      advData: [],\n      transactionLog: [],\n      workerBenefit: 0,\n      incomeTax: 0,\n      eiInsurable: 0\n    };\n    this.locale = \"en-US\";\n    this.annualResult = {\n      cpp: 0,\n      ei: 0,\n      emplCPP: 0,\n      emplEI: 0,\n      federalTax: 0,\n      provincialTax: 0,\n      regEarning: 0,\n      vacationPay: 0,\n      workerBenefit: 0,\n      incomeTax: 0,\n      eiInsurable: 0,\n      netPay: 0\n    };\n    this.setlTripIds = [];\n    this.trips = [];\n    this.paymentTrips = [];\n    this.payStatus = \"paid\";\n    this.addCharges = [];\n    this.dedCharges = [];\n    this.advancePayments = [];\n    this.fuelIds = [];\n    this.fueldata = [];\n    this.fuelAddTotal = 0;\n    this.fuelDedTotal = 0;\n    this.pdfTitle = \"\";\n    this.currentUser = \"\";\n    this.companyName = \"\";\n    this.companyLogo = \"\";\n    this.tagLine = \"\";\n    this.grandTotal = 0;\n    this.subTotal = 0;\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      const carrierID = _this.currentUser.carrierID;\n      let result = yield _this.apiService.getData(`carriers/detail/${carrierID}`).toPromise();\n      _this.companyName = result.companyName;\n      _this.companyLogo = result.logo;\n      _this.tagLine = result.tagLine;\n    });\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    this.subscription = this.listService.paymentPdfList.subscribe( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (res) {\n        console.log('res', res);\n\n        if (res.showModal && res.length != 0) {\n          res.showModal = false;\n          _this2.paymentData = res.data;\n          _this2.paymentData.workerBenefit = 0;\n          _this2.paymentData.incomeTax = Number(_this2.paymentData.taxdata.federalTax) + Number(_this2.paymentData.taxdata.provincialTax);\n          _this2.paymentData.payMode = _this2.paymentData.payMode.replace(\"_\", \" \");\n          _this2.paymentData.eiInsurable = _this2.paymentData.totalAmount;\n\n          if (_this2.paymentData.paymentTo === \"driver\") {\n            _this2.pdfTitle = \"Driver Payment\";\n          } else if (_this2.paymentData.paymentTo === \"employee\") {\n            _this2.pdfTitle = \"Employee Payment\";\n          }\n\n          yield _this2.getCurrentuser();\n          _this2.pdfDetails.paymentNo = _this2.paymentData.paymentNo;\n\n          if (_this2.paymentData.paymentTo === \"driver\") {\n            _this2.fetchDriverDetails();\n          } else if (_this2.paymentData.paymentTo === \"owner_operator\" || _this2.paymentData.paymentTo === \"carrier\" || _this2.paymentData.paymentTo === \"employee\") {\n            _this2.fetchCarrierDetails();\n          } // open payment pdf for preview\n\n\n          let ngbModalOptions = {\n            backdrop: \"static\",\n            keyboard: false,\n            windowClass: \"paymentPdfSection-prog__main\"\n          };\n          res.showModal = false;\n          _this2.modelRef = _this2.modalService.open(_this2.modalContent, ngbModalOptions).result.then(result => {}, reason => {});\n\n          if (_this2.paymentData.fromDate && _this2.paymentData.toDate) {\n            _this2.pdfDetails.payYear = formatDate(_this2.paymentData.toDate, \"yyyy\", _this2.locale);\n            let startDate = formatDate(_this2.paymentData.fromDate, \"dd-MM-yyyy\", _this2.locale);\n            let endDate = formatDate(_this2.paymentData.toDate, \"dd-MM-yyyy\", _this2.locale);\n            _this2.pdfDetails.payPeriod = `${startDate} To ${endDate}`;\n\n            if (_this2.paymentData.paymentTo === \"driver\" || _this2.paymentData.paymentTo === \"employee\") {\n              yield _this2.getUserAnnualTax();\n            }\n          }\n\n          if (_this2.paymentData.paymentTo === \"driver\" || _this2.paymentData.paymentTo === \"owner_operator\" || _this2.paymentData.paymentTo === \"carrier\") {\n            _this2.paymentData.settlData.map(p => {\n              if (p.status === \"partially_paid\") {\n                _this2.payStatus = \"Partially paid\";\n              }\n            });\n\n            yield _this2.getSettlementData();\n\n            if (_this2.paymentData.paymentTo === \"driver\" || _this2.paymentData.paymentTo === \"owner_operator\") {\n              yield _this2.fetchSelectedFuelExpenses();\n            }\n          }\n\n          yield _this2.fetchAdvancePayments(); // await this.generatePaymentPDF();\n        }\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n\n  generatePaymentPDF() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let data;\n      let pdfId = \"\";\n\n      if (_this3.paymentData.paymentTo === \"driver\" || _this3.paymentData.paymentTo === \"employee\") {\n        pdfId = \"driver_pay_pdf\";\n        data = document.getElementById(\"driver_pay_pdf\");\n      } else if (_this3.paymentData.paymentTo === \"owner_operator\" || _this3.paymentData.paymentTo === \"carrier\") {\n        pdfId = \"ownerOperator_pay_pdf\";\n        data = document.getElementById(\"ownerOperator_pay_pdf\");\n      }\n\n      html2pdf(data, {\n        margin: [0.5, 0, 0.5, 0],\n        pagebreak: {\n          mode: \"avoid-all\",\n          before: pdfId\n        },\n        filename: `${_this3.paymentData.paymentTo}-payment-${_this3.paymentData.paymentNo}.pdf`,\n        image: {\n          type: \"jpeg\",\n          quality: 0.98\n        },\n        html2canvas: {\n          scale: 2,\n          logging: true,\n          allowTaint: true,\n          useCORS: true,\n          dpi: 192,\n          letterRendering: true\n        },\n        jsPDF: {\n          unit: \"in\",\n          format: \"a4\",\n          orientation: \"portrait\"\n        }\n      });\n      localStorage.setItem(\"downloadDisabled\", \"false\");\n\n      _this3.modelRef.close();\n    })();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  getSettlementData() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let ids = encodeURIComponent(JSON.stringify(_this4.paymentData.settlementIds));\n      let result = yield _this4.accountService.getData(`settlement/get/selected?entities=${ids}`).toPromise();\n      _this4.settlements = result;\n      _this4.paymentInfo = result[0].paymentInfo;\n      _this4.currency = result[0].currency;\n      let newDates = [];\n      let totalAddDed = 0;\n\n      for (let index = 0; index < _this4.settlements.length; index++) {\n        const element = _this4.settlements[index]; // addCharges\n\n        element.addition.map(add => {\n          _this4.addCharges.push(add);\n        });\n        element.deduction.map(ded => {\n          _this4.dedCharges.push(ded);\n        });\n        element.tripIds.map(k => {\n          if (!_this4.setlTripIds.includes(k)) {\n            _this4.setlTripIds.push(k);\n          }\n        });\n        element.fuelIds.map(k => {\n          if (!_this4.fuelIds.includes(k)) {\n            _this4.fuelIds.push(k);\n\n            element.fuelData.map(f => {\n              if (k === f.fuelID) {\n                _this4.fueldata.push(f);\n              }\n            });\n          }\n        });\n\n        if (element.prStart != undefined && element.prEnd != undefined) {\n          let startDate = formatDate(element.prStart, \"dd-MM-yyyy\", _this4.locale);\n          let endDate = formatDate(element.prEnd, \"dd-MM-yyyy\", _this4.locale);\n          newDates.push(`${startDate} To ${endDate}`);\n        } else {\n          let startDate = formatDate(element.fromDate, \"dd-MM-yyyy\", _this4.locale);\n          let endDate = formatDate(element.toDate, \"dd-MM-yyyy\", _this4.locale);\n          newDates.push(`${startDate} To ${endDate}`);\n        }\n\n        totalAddDed += element.additionTotal - element.deductionTotal;\n      }\n\n      _this4.payPeriod = newDates.join(\", \");\n      yield _this4.fetchTrips();\n      _this4.subTotal += totalAddDed;\n    })();\n  }\n\n  getUserAnnualTax() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this5.accountService.getData(`driver-payments/annual/payment/${_this5.paymentData.entityId}/${_this5.pdfDetails.payYear}`).toPromise();\n      _this5.annualResult = result[0];\n\n      if (_this5.annualResult.regEarning === undefined) {\n        _this5.annualResult.regEarning = 0;\n      }\n\n      if (_this5.annualResult.vacationPay === undefined) {\n        _this5.annualResult.vacationPay = 0;\n      }\n\n      if (_this5.annualResult.workerBenefit === undefined) {\n        _this5.annualResult.workerBenefit = 0;\n      }\n\n      _this5.annualResult.eiInsurable = Number(_this5.annualResult.regEarning) + Number(_this5.annualResult.vacationPay); // eiInsurable\n\n      _this5.annualResult.incomeTax = Number(_this5.annualResult.federalTax) + Number(_this5.annualResult.provincialTax);\n    })();\n  }\n\n  fetchTrips() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let tripIDs = encodeURIComponent(JSON.stringify(_this6.setlTripIds));\n      _this6.paymentTrips = [];\n      let result = yield _this6.apiService.getData(`trips/driver/settled?entities=${tripIDs}`).toPromise();\n      _this6.trips = result;\n\n      _this6.settlements.forEach(element => {\n        element.trpData.map(v => {\n          _this6.trips.map(trip => {\n            if (v.id === trip.tripID) {\n              let obj = {\n                tripNo: trip.tripNo,\n                date: trip.dateCreated,\n                plans: []\n              };\n\n              if (v.plan.length > 0) {\n                // if sub trip is settled\n                v.plan.map(planId => {\n                  trip.tripPlanning.map(plan => {\n                    if (planId === plan.planID) {\n                      let planObj = {\n                        type: plan.type,\n                        location: plan.location,\n                        miles: plan.miles\n                      };\n                      obj.plans.push(planObj);\n                    }\n                  });\n                });\n\n                _this6.paymentTrips.push(obj);\n              } else {\n                // if whole trip is selected\n                trip.tripPlanning.map(plan => {\n                  let planObj = {\n                    type: plan.type,\n                    location: plan.location,\n                    miles: plan.miles\n                  };\n                  obj.plans.push(planObj);\n                });\n\n                _this6.paymentTrips.push(obj);\n              }\n            }\n          });\n        });\n      });\n\n      _this6.grandTotal = 0;\n\n      for (const item of _this6.paymentTrips) {\n        item.totalMiles = 0;\n\n        for (const plan of item.plans) {\n          item.totalMiles += parseFloat(plan.miles);\n        }\n\n        _this6.grandTotal += item.totalMiles;\n      }\n    })();\n  }\n\n  fetchDriverDetails() {\n    this.apiService.getData(`drivers/get/details/${this.paymentData.entityId}`).subscribe(result => {\n      result = result.Items[0];\n      this.pdfDetails.name = `${result.firstName} ${result.lastName}`;\n      this.pdfDetails.email = result.email;\n      this.pdfDetails.phone = result.phone;\n      this.pdfDetails.userID = result.employeeContractorId;\n\n      if (result.address[0].manual) {\n        if (result.address[0].address1 !== \"\") {\n          this.pdfDetails.address = `${result.address[0].address1} ${result.address[0].address2} ${result.address[0].cityName}, ${result.address[0].stateName}, ${result.address[0].countryName}`;\n        }\n      } else {\n        this.pdfDetails.address = result.address[0].userLocation;\n      }\n    });\n  }\n\n  fetchCarrierDetails() {\n    this.apiService.getData(`contacts/detail/${this.paymentData.entityId}`).subscribe(result => {\n      result = result.Items[0];\n      this.pdfDetails.name = result.cName;\n      this.pdfDetails.email = result.workEmail;\n\n      if (result.adrs[0].manual) {\n        if (result.adrs[0].add1 !== \"\") {\n          this.pdfDetails.address = `${result.adrs[0].add1} ${result.adrs[0].add2} ${result.adrs[0].ctyName}, ${result.adrs[0].sName}, ${result.adrs[0].cName}`;\n        }\n      } else {\n        this.pdfDetails.address = result.adrs[0].userLoc;\n      }\n    });\n  }\n\n  fetchAdvancePayments() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let totalAdv = 0;\n\n      if (_this7.paymentData.advancePayIds.length > 0) {\n        let ids = encodeURIComponent(JSON.stringify(_this7.paymentData.advancePayIds));\n        let result = yield _this7.accountService.getData(`advance/get/selected?entities=${ids}`).toPromise();\n        _this7.advancePayments = result;\n\n        _this7.paymentData.advData.forEach(elem => {\n          _this7.advancePayments.map(v => {\n            if (v.paymentID === elem.paymentID) {\n              elem.paymentNo = v.paymentNo;\n              elem.paidAmount = Number(elem.paidAmount);\n              elem.txnDate = v.txnDate;\n              elem.ref = v.payModeNo;\n              totalAdv += Number(elem.paidAmount);\n            }\n          });\n        });\n      }\n\n      _this7.subTotal = _this7.paymentData.totalAmount - totalAdv;\n    })();\n  }\n\n  fetchSelectedFuelExpenses() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this8.fuelIds.length > 0) {\n        _this8.fuelAddTotal = 0;\n        _this8.fuelDedTotal = 0;\n        let fuelIDs = encodeURIComponent(JSON.stringify(_this8.fuelIds));\n        let result = yield _this8.apiService.getData(`fuelEntries/get/selected/ids?fuel=${fuelIDs}`).toPromise();\n\n        _this8.fueldata.map(k => {\n          result.map(fuel => {\n            k.city = fuel.data.city;\n            k.country = fuel.data.country;\n            k.vehicle = fuel.data.unitNo;\n            k.card = fuel.data.cardNo;\n            k.quantity = `${fuel.data.qty} ${fuel.data.uom}`;\n            k.fuelDate = fuel.data.date;\n          });\n\n          if (k.action === \"add\") {\n            _this8.fuelAddTotal += Number(k.amount);\n          }\n\n          if (k.action === \"sub\") {\n            _this8.fuelDedTotal += Number(k.amount);\n          }\n        });\n      }\n    })();\n  }\n\n};\n\nPaymentPdfsComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ApiService\n}, {\n  type: AccountService\n}, {\n  type: NgbModal\n}];\n\nPaymentPdfsComponent.propDecorators = {\n  modalContent: [{\n    type: ViewChild,\n    args: [\"driverPaymentDetail\", {\n      static: true\n    }]\n  }]\n};\nPaymentPdfsComponent = __decorate([Component({\n  selector: \"app-payment-pdfs\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], PaymentPdfsComponent);\nexport { PaymentPdfsComponent };","map":null,"metadata":{},"sourceType":"module"}