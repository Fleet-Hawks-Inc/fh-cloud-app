{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-expense.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-expense.component.css\";\nimport { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AccountService } from 'src/app/services/account.service';\nimport { ApiService } from 'src/app/services/api.service';\nimport { ListService } from 'src/app/services/list.service';\nimport * as moment from 'moment';\nimport { Location } from '@angular/common';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet AddExpenseComponent = class AddExpenseComponent {\n  constructor(listService, location, apiService, accountService, router, toaster, domSanitizer, route, countryStateCity) {\n    this.listService = listService;\n    this.location = location;\n    this.apiService = apiService;\n    this.accountService = accountService;\n    this.router = router;\n    this.toaster = toaster;\n    this.domSanitizer = domSanitizer;\n    this.route = route;\n    this.countryStateCity = countryStateCity;\n    this.pageTitle = 'Add Other Expense';\n    this.expenseData = {\n      categoryID: null,\n      expAccountID: null,\n      paidAccountID: null,\n      amount: null,\n      finalTotal: null,\n      currency: null,\n      recurring: {\n        status: false,\n        endDate: null,\n        interval: null\n      },\n      txnDate: moment().format('YYYY-MM-DD'),\n      unitType: null,\n      unitID: null,\n      tripID: null,\n      stlStatus: null,\n      settlmnt: false,\n      vendorID: null,\n      countryCode: null,\n      countryName: '',\n      stateCode: null,\n      stateName: '',\n      cityName: null,\n      taxes: {\n        includeGST: true,\n        gstPercent: null,\n        gstAmount: null,\n        includePST: true,\n        pstPercent: null,\n        pstAmount: null,\n        includeHST: true,\n        hstpercent: null,\n        hstAmount: null\n      },\n      taxAmount: 0,\n      customerID: null,\n      invoiceID: null,\n      documents: [],\n      notes: '',\n      transactionLog: []\n    };\n    this.expenseCategories = [];\n    this.recInterval = [{\n      value: 'weekly',\n      name: 'Weekly'\n    }, {\n      value: 'biWeekly',\n      name: 'Biweekly'\n    }, {\n      value: 'monthly',\n      name: 'Monthly'\n    }, {\n      value: 'yearly',\n      name: 'Yearly'\n    }];\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.stateTaxes = [];\n    this.invoices = [];\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.submitDisabled = false;\n    this.errors = {};\n    this.response = '';\n    this.uploadedDocs = [];\n    this.existingDocs = [];\n    this.documentSlides = [];\n    this.Asseturl = this.apiService.AssetUrl;\n    this.carrierID = '';\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('');\n    this.categoryData = {\n      catName: '',\n      catDesc: ''\n    };\n    this.catDisabled = false;\n    this.trips = [];\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.expenseID = _this.route.snapshot.params[`expenseID`];\n\n      if (_this.expenseID != undefined) {\n        yield _this.fetchExpenseByID();\n        _this.pageTitle = 'Edit Other Expense';\n      }\n\n      _this.fetchTrips();\n\n      yield _this.fetchCountries();\n\n      _this.fetchExpenseCategories();\n\n      _this.fetchStateTaxes(); //  this.fetchInvoices();\n\n\n      _this.listService.fetchChartAccounts();\n\n      _this.listService.fetchAssets();\n\n      _this.listService.fetchVehicles();\n\n      _this.listService.fetchVendors();\n\n      _this.expenseAccounts = _this.listService.accountsList;\n      _this.paidThroughAccounts = _this.listService.accountsList;\n      let vehicleList = new Array();\n\n      _this.getValidVehicles(vehicleList);\n\n      _this.vehicles = vehicleList;\n      let assetList = new Array();\n\n      _this.getValidAssets(assetList);\n\n      _this.assets = assetList;\n      let vendorList = new Array();\n\n      _this.getValidvendors(vendorList);\n\n      _this.vendors = vendorList;\n    })();\n  }\n\n  getValidVehicles(vehicleList) {\n    let ids = [];\n    this.listService.vehicleList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.vehicleIdentification && element2.isDeleted === 1 && element2.vehicleID === this.expenseData.unitID) {\n          this.expenseData.unitID = null;\n        }\n\n        if (element2.vehicleIdentification && element2.isDeleted === 0 && !ids.includes(element2.vehicleID)) {\n          vehicleList.push(element2);\n          ids.push(element2.vehicleID);\n        }\n      });\n    });\n  }\n\n  getValidAssets(assetList) {\n    let ids = [];\n    this.listService.assetsList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 1 && element2.assetID === this.expenseData.unitID) {\n          this.expenseData.unitID = null;\n        }\n\n        if (element2.isDeleted === 0 && !ids.includes(element2.assetID)) {\n          assetList.push(element2);\n          ids.push(element2.assetID);\n        }\n      });\n    });\n  }\n\n  getValidvendors(vendorList) {\n    let ids = [];\n    this.listService.vendorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 1 && element2.contactID === this.expenseData.vendorID) {\n          this.expenseData.vendorID = null;\n        }\n\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          vendorList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  resetUnitVal() {\n    this.expenseData.unitID = null;\n  }\n\n  refreshExpenseAccount() {\n    this.listService.fetchChartAccounts();\n  }\n\n  refreshPaidAccount() {\n    this.listService.fetchChartAccounts();\n  }\n\n  fetchCountries() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.countries = yield _this2.countryStateCity.GetAllCountries();\n    })();\n  }\n\n  getStates(countryCode) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.states = yield _this3.countryStateCity.GetStatesByCountryCode([countryCode]);\n      _this3.expenseData.countryName = yield _this3.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n    })();\n  }\n\n  getCities(countryCode = '', stateCode) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.cities = yield _this4.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n      _this4.expenseData.stateName = yield _this4.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n\n      if (stateCode !== undefined && stateCode != null) {\n        let selected = _this4.stateTaxes.filter(o => o.stateCode === stateCode);\n\n        _this4.expenseData.taxes.gstPercent = selected[0].GST;\n        _this4.expenseData.taxes.pstPercent = selected[0].PST;\n        _this4.expenseData.taxes.hstpercent = selected[0].HST;\n\n        _this4.calculateFinalTotal();\n      }\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchTrips() {\n    this.apiService.getData('common/trips').subscribe(result => {\n      // this.trips = result.Items;\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.trips.push(element);\n        }\n\n        if (element.isDeleted === 1 && element.tripID === this.expenseData.tripID) {\n          this.expenseData.tripID = null;\n        }\n      });\n    });\n  }\n\n  fetchStateTaxes() {\n    this.apiService.getData('stateTaxes').subscribe(res => {\n      this.stateTaxes = res.Items;\n    });\n  }\n\n  fetchInvoices() {\n    this.accountService.getData('invoices').subscribe(res => {\n      this.invoices = res;\n    });\n  }\n  /*\r\n    * Selecting files before uploading\r\n    */\n\n\n  selectDocuments(event) {\n    let files = [...event.target.files];\n\n    for (let i = 0; i < files.length; i++) {\n      this.uploadedDocs.push(files[i]);\n    }\n  }\n\n  addRecord() {\n    this.submitDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.expenseData.amount = parseFloat(this.expenseData.amount); // create form data instance\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadedDocs.length; i++) {\n      formData.append('uploadedDocs', this.uploadedDocs[i]);\n    } //append other fields\n\n\n    formData.append('data', JSON.stringify(this.expenseData));\n    this.accountService.postData('expense', formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Expense transaction added successfully.');\n        this.cancel();\n      }\n    });\n  }\n\n  fetchExpenseByID() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this5.accountService.getData(`expense/detail/${_this5.expenseID}`).toPromise();\n\n      if (result[0] != undefined) {\n        _this5.expenseData = result[0];\n        _this5.expenseData.transactionLog = result[0].transactionLog;\n        _this5.expenseData.taxAmount = result[0].taxAmount;\n        _this5.existingDocs = result[0].documents;\n        _this5.carrierID = result[0].carrierID;\n        _this5.states = yield _this5.countryStateCity.GetStatesByCountryCode([result[0].countryCode]);\n        _this5.cities = yield _this5.countryStateCity.GetCitiesByStateCodes(result[0].countryCode, result[0].stateCode);\n\n        if (result[0].documents != undefined && result[0].documents.length > 0) {\n          result[0].documents.map(x => {\n            let obj = {\n              name: x,\n              path: `${_this5.Asseturl}/${_this5.carrierID}/${x}`\n            };\n\n            _this5.documentSlides.push(obj);\n          });\n        }\n      }\n    })();\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = '';\n\n    if (ext == 'doc' || ext == 'docx' || ext == 'xlsx') {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('https://docs.google.com/viewer?url=' + val + '&embedded=true');\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  }\n\n  updateRecord() {\n    this.submitDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.expenseData.amount = parseFloat(this.expenseData.amount); // this.expenseData.stlStatus = this.expenseData.tripID;\n    // create form data instance\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadedDocs.length; i++) {\n      formData.append('uploadedDocs', this.uploadedDocs[i]);\n    } //append other fields\n\n\n    formData.append('data', JSON.stringify(this.expenseData));\n    this.accountService.putData(`expense/${this.expenseID}`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Expense transaction updated successfully.');\n        this.cancel();\n      }\n    });\n  }\n\n  addCategory() {\n    this.catDisabled = true;\n    this.errors = {};\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.accountService.postData('expense/category/add', this.categoryData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.catDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.catDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.fetchExpenseCategories();\n        this.catDisabled = false;\n        this.response = res;\n        $('#addExpenseTypeModal').modal('hide');\n        this.categoryData = {\n          catName: '',\n          catDesc: ''\n        };\n        this.toaster.success('Expense type added successfully.');\n      }\n    });\n  }\n\n  fetchExpenseCategories() {\n    this.accountService.getData(`expense/categories`).subscribe(result => {\n      if (result[0] !== undefined) {\n        this.expenseCategories = result;\n      }\n    });\n  }\n\n  refreshCategory() {\n    this.fetchExpenseCategories();\n  }\n\n  deleteDocument(name, index) {\n    this.accountService.deleteData(`expense/uploadDelete/${this.expenseID}/${name}`).subscribe(result => {\n      this.existingDocs.splice(index, 1);\n      this.documentSlides.splice(index, 1);\n      this.toaster.success('Attachment deleted successfully.');\n    });\n  }\n\n  calculateFinalTotal() {\n    this.expenseData.taxAmount = 0;\n    this.expenseData.finalTotal = +this.expenseData.amount;\n\n    if (this.expenseData.taxes.gstPercent != null && this.expenseData.taxes.includeGST) {\n      this.expenseData.taxes.gstAmount = this.expenseData.amount * this.expenseData.taxes.gstPercent / 100;\n      this.expenseData.taxAmount += this.expenseData.taxes.gstAmount;\n      this.expenseData.finalTotal += +this.expenseData.taxes.gstAmount;\n    }\n\n    if (this.expenseData.taxes.hstpercent != null && this.expenseData.taxes.includeHST) {\n      this.expenseData.taxes.hstAmount = this.expenseData.amount * this.expenseData.taxes.hstpercent / 100;\n      this.expenseData.finalTotal += +this.expenseData.taxes.hstAmount;\n      this.expenseData.taxAmount += this.expenseData.taxes.hstAmount;\n    }\n\n    if (this.expenseData.taxes.pstPercent != null && this.expenseData.taxes.includePST) {\n      this.expenseData.taxes.pstAmount = this.expenseData.amount * this.expenseData.taxes.pstPercent / 100;\n      this.expenseData.finalTotal += +this.expenseData.taxes.pstAmount;\n      this.expenseData.taxAmount += this.expenseData.taxes.pstAmount;\n    }\n\n    this.expenseData.taxAmount = +this.expenseData.taxAmount.toFixed(2);\n    this.expenseData.finalTotal = this.expenseData.finalTotal.toFixed(2);\n  }\n\n  changeDepAcc(val) {\n    if (val === this.expenseData.paidAccountID) {\n      this.expenseData.paidAccountID = null;\n    }\n  }\n\n  refreshVendorData() {\n    this.listService.fetchVendors();\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem('isOpen', 'true');\n    this.listService.changeButton(false);\n  }\n\n};\n\nAddExpenseComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: Location\n}, {\n  type: ApiService\n}, {\n  type: AccountService\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: DomSanitizer\n}, {\n  type: ActivatedRoute\n}, {\n  type: CountryStateCityService\n}];\n\nAddExpenseComponent = __decorate([Component({\n  selector: 'app-add-expense',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddExpenseComponent);\nexport { AddExpenseComponent };","map":null,"metadata":{},"sourceType":"module"}