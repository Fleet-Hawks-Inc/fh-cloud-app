{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./dispatch-overview.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./dispatch-overview.component.css\";\nimport { Component } from \"@angular/core\";\nimport { ApiService } from \"../../../../services\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport Constants from \"../../../fleet/constants\";\nimport * as moment from \"moment\";\nimport { Router } from \"@angular/router\";\nimport { RouteManagementServiceService } from \"src/app/services/route-management-service.service\";\nlet DispatchOverviewComponent = class DispatchOverviewComponent {\n  constructor(apiService, router, spinner, routeManagement) {\n    this.apiService = apiService;\n    this.router = router;\n    this.spinner = spinner;\n    this.routeManagement = routeManagement;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.activeTripsCount = 0;\n    this.totalTripsCount = 0;\n    this.permanentRoutesCount = 0;\n    this.customerCount = 0;\n    this.todaysPickCount = 0;\n    this.tomorrowsPickCount = 0;\n    this.availableDriversCount = 0;\n    this.availableVehiclesCount = 0;\n    this.aceManifestCount = 0;\n    this.aciManifestCount = 0;\n    this.activities = [];\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.activityData = {\n      action: \"\",\n      userID: \"\",\n      tableName: \"\",\n      eventID: \"\",\n      message: \"\"\n    }; // graph\n\n    this.chartOptions = {};\n    this.chartLabels = [];\n    this.chartType = \"\";\n    this.chartData = [];\n    this.tripChartOptions = {};\n    this.tripChartLabels = [];\n    this.tripChartType = \"\";\n    this.tripChartData = [];\n    this.tripsMonths = {\n      jan: 0,\n      feb: 0,\n      march: 0,\n      april: 0,\n      may: 0,\n      june: 0,\n      july: 0,\n      aug: 0,\n      sept: 0,\n      oct: 0,\n      nov: 0,\n      dec: 0\n    };\n    this.aceMonths = {\n      jan: 0,\n      feb: 0,\n      march: 0,\n      april: 0,\n      may: 0,\n      june: 0,\n      july: 0,\n      aug: 0,\n      sept: 0,\n      oct: 0,\n      nov: 0,\n      dec: 0\n    };\n    this.aciMonths = {\n      jan: 0,\n      feb: 0,\n      march: 0,\n      april: 0,\n      may: 0,\n      june: 0,\n      july: 0,\n      aug: 0,\n      sept: 0,\n      oct: 0,\n      nov: 0,\n      dec: 0\n    };\n    this.tripGraphData = [];\n    this.aceGraphData = [];\n    this.aciGraphData = [];\n    this.allActivities = [];\n    this.totalRecords = 0;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = \"\";\n    this.dispatchLength = 0;\n    this.dispatchNext = false;\n    this.dispatchPrev = true;\n    this.dispatchDraw = 0;\n    this.dispatchPrevEvauatedKeys = [\"\"];\n    this.dispatchStartPoint = 1;\n    this.dispatchEndPoint = this.pageLength;\n    this.pageload = true;\n    this.activitiesCount = 0;\n    this.prevKeyExist = true;\n    this.tommDeliverCount = 0;\n    this.todayDeliverCount = 0;\n  }\n\n  ngOnInit() {\n    this.fetchActivitiesCount();\n    this.initDataTable(); // this.initManifestGraph();\n\n    this.initTripsGraph();\n    this.fetchAllTrips();\n    this.fetchAllRoutes();\n    this.fetchTripsCount(); // this.fetchAllCustomers();\n    // this.fetchAlldrivers();\n    // this.fetchAllVehicles();\n    // this.fetchAceManifest();\n    // this.fetchAciManifest();\n  }\n\n  initDataTable() {\n    this.spinner.show(); // if(this.lastEvaluatedKey != '') {\n    //   this.lastEvaluatedKey = JSON.stringify(this.lastEvaluatedKey);\n    // }\n\n    this.apiService.getData(\"auditLogs/fetch?lastEvaluatedKey=\" + this.lastEvaluatedKey).subscribe(result => {\n      if (result.Items.length == 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.getStartandEndVal();\n      result.Items.map(k => {\n        k.eventParams.message = k.eventParams.message.replace(\"consignor\", \"shipper\");\n        k.eventParams.message = k.eventParams.message.replace(\"consignee\", \"receiver\");\n\n        if (k.eventParams.userName !== undefined) {\n          const newString = k.eventParams.userName.split(\"_\");\n          k.userFirstName = newString[0];\n          k.userLastName = newString[1];\n        }\n\n        if (k.eventParams.number !== undefined) {\n          k.entityNumber = k.eventParams.number;\n        }\n\n        if (k.eventParams.name !== undefined) {\n          if (k.eventParams.name.includes(\"_\")) {\n            const newString = k.eventParams.name.split(\"_\");\n            k.eventParams.firstName = newString[0];\n            k.eventParams.lastName = newString[1];\n          }\n        }\n      });\n\n      if (this.pageload) {\n        this.activities = result[`Items`];\n        this.pageload = false;\n      }\n\n      this.allActivities = result[\"Items\"];\n\n      if (result[\"LastEvaluatedKey\"] !== undefined) {\n        const lastEvalKey = result[`LastEvaluatedKey`].logSK.replace(/#/g, \"--\");\n        this.dispatchNext = false;\n        this.checkPrevEvaluatedKey(lastEvalKey); // for prev button\n\n        if (this.prevKeyExist) {\n          this.dispatchPrevEvauatedKeys.push(lastEvalKey);\n        }\n\n        this.lastEvaluatedKey = lastEvalKey;\n      } else {\n        this.dispatchNext = true;\n        this.lastEvaluatedKey = \"\";\n        this.dispatchEndPoint = this.totalRecords;\n      } // disable prev btn\n\n\n      if (this.dispatchDraw > 0) {\n        this.dispatchPrev = false;\n      } else {\n        this.dispatchPrev = true;\n      }\n\n      this.spinner.hide();\n    }, err => {\n      this.spinner.hide();\n    });\n  }\n\n  fetchActivitiesCount() {\n    this.apiService.getData(\"auditLogs/get/count\").subscribe(result => {\n      this.totalRecords = result.Count;\n    });\n  }\n\n  goToDetails(eventID, type) {\n    if (type === \"driver\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/drivers/detail/${eventID}`);\n    } else if (type === \"vehicle\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/vehicles/detail/${eventID}`);\n    } else if (type === \"asset\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/assets/detail/${eventID}`);\n    } else if (type === \"route\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/dispatch/routes/detail/${eventID}`);\n    } else if (type === \"trip\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/dispatch/trips/trip-details/${eventID}`);\n    } else if (type === \"issue\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/maintenance/issues/detail/${eventID}`);\n    } else if (type === \"serviceProgram\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/maintenance/service-program/detail/${eventID}`);\n    } else if (type === \"order\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/dispatch/orders/detail/${eventID}`);\n    } else if (type === \"fuelEntry\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/fuel/detail/${eventID}`);\n    } else if (type === \"serviceLog\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/maintenance/service-log/detail/${eventID}`);\n    } else if (type === \"inventory\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/fleet/inventory/detail/${eventID}`);\n    } else if (type === \"employee\") {\n      $(\"#acttimelinemodal\").modal(\"hide\");\n      this.router.navigateByUrl(`/manage/users/detail/${eventID}`);\n    }\n  }\n\n  fetchAllTrips() {\n    this.spinner.show();\n    this.apiService.getData(\"trips\").subscribe(result => {\n      for (let i = 0; i < result.Items.length; i++) {\n        const element = result.Items[i];\n\n        if (element.dateCreated !== \"\" && element.dateCreated !== undefined && element.isDeleted === 0) {\n          let tripDate = element.dateCreated.split(\"-\");\n          let tripMonth = tripDate[1];\n\n          if (tripMonth == \"1\" || tripMonth == \"01\") {\n            this.tripsMonths.jan += 1;\n          } else if (tripMonth == \"2\" || tripMonth == \"02\") {\n            this.tripsMonths.feb += 1;\n          } else if (tripMonth == \"3\" || tripMonth == \"03\") {\n            this.tripsMonths.march += 1;\n          } else if (tripMonth == \"4\" || tripMonth == \"04\") {\n            this.tripsMonths.april += 1;\n          } else if (tripMonth == \"5\" || tripMonth == \"05\") {\n            this.tripsMonths.may += 1;\n          } else if (tripMonth == \"6\" || tripMonth == \"06\") {\n            this.tripsMonths.june += 1;\n          } else if (tripMonth == \"7\" || tripMonth == \"07\") {\n            this.tripsMonths.july += 1;\n          } else if (tripMonth == \"8\" || tripMonth == \"08\") {\n            this.tripsMonths.aug += 1;\n          } else if (tripMonth == \"9\" || tripMonth == \"09\") {\n            this.tripsMonths.sept += 1;\n          } else if (tripMonth == \"10\") {\n            this.tripsMonths.oct += 1;\n          } else if (tripMonth == \"11\") {\n            this.tripsMonths.nov += 1;\n          } else if (tripMonth == \"12\") {\n            if (element.tripStatus === \"confirmed\") {\n              this.tripsMonths.dec += 1; // var todayDate = new Date();\n              // var tomorrowDate = new Date(\n              //   new Date().getTime() + 24 * 60 * 60 * 1000\n              // );\n              // let pickDate = element.dateCreated.split(\"-\");\n              // var dateOne = new Date(pickDate[0], pickDate[1] - 1, pickDate[2]);\n              // if (\n              //   todayDate.setHours(0, 0, 0, 0) === dateOne.setHours(0, 0, 0, 0)\n              // ) {\n              //   this.todaysPickCount = this.todaysPickCount + 1;\n              // } else if (\n              //   tomorrowDate.setHours(0, 0, 0, 0) ===\n              //   dateOne.setHours(0, 0, 0, 0)\n              // ) {\n              //   this.tomorrowsPickCount = this.tomorrowsPickCount + 1;\n              // }\n            } // if (element.tripStatus === \"enroute\") {\n            //   this.activeTripsCount += 1;\n            // }\n\n          }\n        }\n\n        this.tripGraphData = Object.keys(this.tripsMonths).map(key => this.tripsMonths[key]);\n        this.initTripsGraph();\n        this.totalTripsCount = result.Count;\n        this.spinner.hide();\n      }\n    });\n  }\n\n  fetchAllRoutes() {\n    this.spinner.show();\n    this.apiService.getData(\"routes\").subscribe(result => {\n      // result = result.Items[0];\n      this.permanentRoutesCount = result.Count;\n      this.spinner.hide();\n    });\n  } // fetchAllCustomers() {\n  //   this.apiService\n  //     .getData(\"contacts/get/active/customers\")\n  //     .subscribe((result: any) => {});\n  // }\n\n\n  fetchEventActivities() {\n    var _this = this;\n\n    this.spinner.show();\n    this.apiService.getData(\"activities\").subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        for (let i = 0; i < result.Items.length; i++) {\n          const element = result.Items[i];\n\n          if (element.tableName === \"serviceroutes\") {\n            element.type = \"Route No.\";\n\n            _this.fetchRouteDetail(element.eventID, i, function (data) {\n              element.typeValue = data;\n              this.activities.push(element);\n            }.bind(_this));\n          }\n        }\n\n        _this.spinner.hide();\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  } // fetchAlldrivers() {\n  //   this.spinner.show();\n  //   this.apiService.getData(\"drivers\").subscribe((result: any) => {\n  //     // result = result.Items[0];\n  //     this.availableDriversCount = result.Count;\n  //     this.spinner.hide();\n  //   });\n  // }\n  // fetchAllVehicles() {\n  //   this.spinner.show();\n  //   this.apiService.getData(\"vehicles\").subscribe((result: any) => {\n  //     // result = result.Items[0];\n  //     this.availableVehiclesCount = result.Count;\n  //     this.spinner.hide();\n  //   });\n  // }\n\n\n  fetchRouteDetail(routeID, index, callback) {\n    this.apiService.getData(\"routes/\" + routeID).subscribe(result => {\n      result = result.Items[0]; // this.activities[index].typeValue   = result.routeNo;\n\n      callback(result.routeNo);\n    });\n  }\n\n  fetchAceManifest() {\n    this.spinner.show();\n    this.apiService.getData(\"eManifests/get/ACErecords\").subscribe(result => {\n      let data = result.Items;\n      this.aceManifestCount = result.Count;\n\n      if (result.Count > 0) {\n        for (let i = 0; i < data.length; i++) {\n          const element = data[i];\n\n          if (element.timeCreated != undefined && element.timeCreated != \"\") {\n            let check = moment(element.timeCreated);\n            let eventMonth = check.format(\"M\");\n\n            if (eventMonth == \"1\" || eventMonth == \"01\") {\n              this.aceMonths.jan += 1;\n            } else if (eventMonth == \"2\" || eventMonth == \"02\") {\n              this.aceMonths.feb += 1;\n            } else if (eventMonth == \"3\" || eventMonth == \"03\") {\n              this.aceMonths.march += 1;\n            } else if (eventMonth == \"4\" || eventMonth == \"04\") {\n              this.aceMonths.april += 1;\n            } else if (eventMonth == \"5\" || eventMonth == \"05\") {\n              this.aceMonths.may += 1;\n            } else if (eventMonth == \"6\" || eventMonth == \"06\") {\n              this.aceMonths.june += 1;\n            } else if (eventMonth == \"7\" || eventMonth == \"07\") {\n              this.aceMonths.july += 1;\n            } else if (eventMonth == \"8\" || eventMonth == \"08\") {\n              this.aceMonths.aug += 1;\n            } else if (eventMonth == \"9\" || eventMonth == \"09\") {\n              this.aceMonths.sept += 1;\n            } else if (eventMonth == \"10\") {\n              this.aceMonths.oct += 1;\n            } else if (eventMonth == \"11\") {\n              this.aceMonths.nov += 1;\n            } else if (eventMonth == \"12\") {\n              this.aceMonths.dec += 1;\n            }\n          }\n        }\n\n        this.aceGraphData = Object.keys(this.aceMonths).map(key => this.aceMonths[key]);\n        this.initManifestGraph();\n      }\n\n      this.spinner.hide();\n    });\n  }\n\n  fetchAciManifest() {\n    this.spinner.show();\n    this.apiService.getData(\"eManifests/get/ACIrecords\").subscribe(result => {\n      let data = result.Items;\n      this.aciManifestCount = result.Count;\n\n      if (result.Count > 0) {\n        for (let i = 0; i < data.length; i++) {\n          const element = data[i];\n\n          if (element.timeCreated != undefined && element.timeCreated != \"\") {\n            let check = moment(element.timeCreated);\n            let eventMonth = check.format(\"M\");\n\n            if (eventMonth == \"1\" || eventMonth == \"01\") {\n              this.aciMonths.jan += 1;\n            } else if (eventMonth == \"2\" || eventMonth == \"02\") {\n              this.aciMonths.feb += 1;\n            } else if (eventMonth == \"3\" || eventMonth == \"03\") {\n              this.aciMonths.march += 1;\n            } else if (eventMonth == \"4\" || eventMonth == \"04\") {\n              this.aciMonths.april += 1;\n            } else if (eventMonth == \"5\" || eventMonth == \"05\") {\n              this.aciMonths.may += 1;\n            } else if (eventMonth == \"6\" || eventMonth == \"06\") {\n              this.aciMonths.june += 1;\n            } else if (eventMonth == \"7\" || eventMonth == \"07\") {\n              this.aciMonths.july += 1;\n            } else if (eventMonth == \"8\" || eventMonth == \"08\") {\n              this.aciMonths.aug += 1;\n            } else if (eventMonth == \"9\" || eventMonth == \"09\") {\n              this.aciMonths.sept += 1;\n            } else if (eventMonth == \"10\") {\n              this.aciMonths.oct += 1;\n            } else if (eventMonth == \"11\") {\n              this.aciMonths.nov += 1;\n            } else if (eventMonth == \"12\") {\n              this.aciMonths.dec += 1;\n            }\n          }\n        }\n\n        this.aciGraphData = Object.keys(this.aciMonths).map(key => this.aciMonths[key]);\n        this.initManifestGraph();\n      }\n\n      this.spinner.hide();\n    });\n  }\n\n  initManifestGraph() {\n    this.chartOptions = {\n      scaleShowVerticalLines: false,\n      responsive: true,\n      // maintainAspectRatio: false,\n      tooltips: {\n        mode: \"index\",\n        intersect: false\n      },\n      hover: {\n        mode: \"nearest\",\n        intersect: true\n      },\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 10\n        }\n      },\n      scales: {\n        yAxes: [{\n          display: true,\n          scaleLabel: {\n            display: true\n          },\n          ticks: {\n            min: 0,\n            stepSize: 10,\n            suggestedMin: 0,\n            callback: (value, index, values) => {\n              return value;\n            }\n          }\n        }]\n      }\n    };\n    this.chartLabels = [\"January\", \"February\", \"March\", \" April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    this.chartType = \"line\";\n    this.chartLegend = true;\n    this.chartData = [{\n      label: \"ACE\",\n      fill: false,\n      backgroundColor: \"#9c9ea1\",\n      borderColor: \"#9c9ea1\",\n      borderWidth: 1,\n      data: this.aceGraphData\n    }, {\n      label: \"ACI\",\n      fill: false,\n      backgroundColor: \"#000\",\n      borderColor: \"#000\",\n      borderWidth: 1,\n      data: this.aciGraphData\n    }];\n  }\n\n  initTripsGraph() {\n    this.tripChartOptions = {\n      scaleShowVerticalLines: false,\n      responsive: true,\n      // maintainAspectRatio: false,\n      tooltips: {\n        mode: \"index\",\n        intersect: false\n      },\n      hover: {\n        mode: \"nearest\",\n        intersect: true\n      },\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 10\n        }\n      },\n      scales: {\n        xAxes: [{\n          barPercentage: 0.4\n        }]\n      }\n    };\n    this.tripChartLabels = [\"January\", \"February\", \"March\", \" April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    this.tripChartType = \"bar\";\n    this.tripChartLegend = true;\n    this.tripChartData = [{\n      label: \"Trips\",\n      fill: false,\n      backgroundColor: \"#9c9ea1\",\n      borderColor: \"#9c9ea1\",\n      borderWidth: 1,\n      data: this.tripGraphData\n    }];\n  }\n\n  getStartandEndVal() {\n    this.dispatchStartPoint = this.dispatchDraw * this.pageLength + 1;\n    this.dispatchEndPoint = this.dispatchStartPoint + this.pageLength - 1;\n  } // next button func\n\n\n  nextResults() {\n    this.dispatchNext = true;\n    this.dispatchPrev = true;\n    this.dispatchDraw += 1;\n    this.initDataTable();\n  } // prev button func\n\n\n  prevResults() {\n    this.dispatchNext = true;\n    this.dispatchPrev = true;\n    this.dispatchDraw -= 1;\n    this.lastEvaluatedKey = this.dispatchPrevEvauatedKeys[this.dispatchDraw];\n    this.initDataTable();\n  }\n\n  checkPrevEvaluatedKey(newKeys = {}) {\n    //if primary key matches then it will not added into the prev keys array\n    for (let v = 0; v < this.dispatchPrevEvauatedKeys.length; v++) {\n      const element = this.dispatchPrevEvauatedKeys[v];\n\n      if (element === newKeys) {\n        this.prevKeyExist = false;\n        break;\n      } else {\n        this.prevKeyExist = true;\n      }\n    }\n  }\n\n  fetchTripsCount() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this2.apiService.getData(\"trips/get/today/count\").toPromise();\n      _this2.activeTripsCount = result.todayActive;\n      _this2.todaysPickCount = result.todayPick;\n      _this2.tomorrowsPickCount = result.tommPick;\n      _this2.tommDeliverCount = result.tommDeliver;\n      _this2.todayDeliverCount = result.todayDeliver;\n    })();\n  } // Managing Route sessions for performance\n\n\n  generateTripSessionID() {\n    return this.routeManagement.tripUpdateSessionID;\n  }\n\n};\n\nDispatchOverviewComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: NgxSpinnerService\n}, {\n  type: RouteManagementServiceService\n}];\n\nDispatchOverviewComponent = __decorate([Component({\n  selector: \"app-dispatch-overview\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DispatchOverviewComponent);\nexport { DispatchOverviewComponent };","map":null,"metadata":{},"sourceType":"module"}