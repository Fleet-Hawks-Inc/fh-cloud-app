{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./payment-cheque.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./payment-cheque.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { AccountService, ApiService, ListService } from \"src/app/services\";\nimport * as html2pdf from \"html2pdf.js\";\nimport { formatDate } from \"@angular/common\";\n\nvar converter = require(\"number-to-words\");\n\nlet PaymentChequeComponent = class PaymentChequeComponent {\n  constructor(listService, apiService, modalService, accountService) {\n    var _this = this;\n\n    this.listService = listService;\n    this.apiService = apiService;\n    this.modalService = modalService;\n    this.accountService = accountService;\n    this.carriers = [];\n    this.addresses = [];\n    this.currCarrId = \"\";\n    this.carrierID = null;\n    this.paydata = {\n      entityName: \"\",\n      entityId: \"\",\n      chequeDate: \"\",\n      chequeAmount: 0,\n      type: \"\",\n      txnDate: \"\",\n      chequeNo: \"\",\n      currency: \"\",\n      formType: \"\",\n      payYear: \"\",\n      fromDate: \"\",\n      toDate: \"\",\n      vacPayPer: 0,\n      vacPayAmount: 0,\n      totalAmount: 0,\n      settledAmount: 0,\n      taxdata: {\n        payPeriod: null,\n        stateCode: null,\n        federalCode: \"claim_code_1\",\n        provincialCode: null,\n        cpp: 0,\n        ei: 0,\n        federalTax: 0,\n        provincialTax: 0,\n        emplCPP: 0,\n        emplEI: 0\n      },\n      finalAmount: 0,\n      advance: 0,\n      page: \"\",\n      invoices: [],\n      paymentTo: \"\",\n      advType: \"\",\n      gstHstAmt: 0,\n      isVendorPayment: false,\n      vendorId: \"\",\n      gstHstPer: 0\n    };\n    this.cheqdata = {\n      companyName: \"\",\n      companyAddress: null,\n      chqNo: \"\",\n      date: \"\",\n      payDate: \"\",\n      amount: 0,\n      payPeriod: \"\",\n      entityName: \"\",\n      entityAddress: \"\",\n      vacationPay: 0,\n      regularPay: 0,\n      cpp: 0,\n      ei: 0,\n      tax: 0,\n      grossPay: 0,\n      withHeld: 0,\n      netPay: 0,\n      vacationPayYTD: 0,\n      regularPayYTD: 0,\n      cppYTD: 0,\n      eiYTD: 0,\n      taxYTD: 0,\n      grossPayYTD: 0,\n      withHeldYTD: 0,\n      netPayYTD: 0,\n      amountWords: \"\",\n      decimals: \"\",\n      invoices: [],\n      currency: \"\",\n      currencyText: \"\",\n      gstHst: 0,\n      gstHstYTD: 0\n    };\n    this.corporateDrver = false;\n    this.vendorAddress = [];\n    this.dummyAddress = \"\";\n    this.vendorCompanyName = \"\";\n    this.dummyEntity = \"\";\n    this.downloadTitle = \"Download & Save\";\n    this.showIssue = false;\n    this.locale = \"en-US\";\n    this.isDownload = false;\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      const carrID = localStorage.getItem('xfhCarrierId');\n\n      _this.getCurrentCarrDetail(carrID);\n    });\n  }\n\n  ngOnInit() {\n    this.subscription = this.listService.paymentModelList.subscribe(res => {\n      if (res.showModal && res.length != 0) {\n        // empty fields\n        if (res.page && res.page == 'detail') {\n          this.downloadTitle = 'Download';\n          this.openFrom = res.page;\n        } else {\n          this.downloadTitle = 'Download & Save';\n          this.openFrom = 'addForm';\n        }\n\n        this.showIssue = false;\n        this.corporateDrver = false;\n        this.cheqdata.entityName = \"\";\n        this.carrierID = null;\n        this.cheqdata.companyAddress = null;\n        this.getCarriers();\n        this.getCurrentuser();\n        this.paydata = res;\n        this.paydata.gstHstAmt = this.paydata.gstHstAmt === undefined ? 0 : this.paydata.gstHstAmt;\n        this.paydata.gstHstPer = this.paydata.gstHstAmt === undefined ? 0 : this.paydata.gstHstPer;\n        this.paydata.isVendorPayment = this.paydata.isVendorPayment === undefined ? false : this.paydata.isVendorPayment;\n        this.cheqdata.payDate = formatDate(this.paydata.txnDate, \"dd-MM-yyyy\", this.locale);\n        this.cheqdata.currency = this.paydata.currency;\n\n        if (this.cheqdata.currency === \"CAD\") {\n          this.cheqdata.currencyText = \"Amount in Canadian Dollars\";\n        } else if (this.cheqdata.currency === \"USD\") {\n          this.cheqdata.currencyText = \"Amount in US Dollars\";\n        }\n\n        if (this.paydata.type === \"driver\" || this.paydata.type === \"employee\" || this.paydata.type === \"owner_operator\" || this.paydata.type === \"carrier\" || this.paydata.type === \"expensePayment\") {\n          this.paydata.payYear = formatDate(this.paydata.toDate, \"yyyy\", this.locale);\n          let startDate = formatDate(this.paydata.fromDate, \"dd-MM-yyyy\", this.locale);\n          let endDate = formatDate(this.paydata.toDate, \"dd-MM-yyyy\", this.locale);\n          this.cheqdata.payPeriod = `${startDate} To ${endDate}`;\n        }\n\n        if (this.paydata.type === \"advancePayment\") {\n          this.paydata.payYear = formatDate(this.paydata.fromDate, \"yyyy\", this.locale);\n          let startDate = formatDate(this.paydata.fromDate, \"dd-MM-yyyy\", this.locale);\n          this.cheqdata.payPeriod = `${startDate}`;\n        }\n\n        this.cheqdata.chqNo = this.paydata.chequeNo;\n\n        if (this.paydata.type === \"driver\" || this.paydata.type === \"employee\") {\n          this.cheqdata.regularPay = this.paydata.settledAmount + this.paydata.gstHstAmt;\n          this.cheqdata.vacationPay = this.paydata.vacPayAmount;\n          this.cheqdata.grossPay = Number(this.cheqdata.regularPay) + Number(this.cheqdata.vacationPay);\n          this.cheqdata.cpp = this.paydata.taxdata.cpp;\n          this.cheqdata.ei = this.paydata.taxdata.ei;\n          this.cheqdata.tax = Number(this.paydata.taxdata.federalTax) + Number(this.paydata.taxdata.provincialTax);\n          this.cheqdata.withHeld = Number(this.cheqdata.cpp) + Number(this.cheqdata.ei) + Number(this.cheqdata.tax);\n          this.cheqdata.netPay = Number(this.cheqdata.grossPay) - Number(this.cheqdata.withHeld); // minus advance\n\n          if (this.paydata.advance > 0) {\n            this.cheqdata.netPay -= this.paydata.advance;\n          }\n        } else if (this.paydata.type === \"owner_operator\" || this.paydata.type === \"carrier\" || this.paydata.type === \"vendor\") {\n          this.cheqdata.regularPay = this.paydata.finalAmount + this.paydata.gstHstAmt;\n          this.cheqdata.grossPay = this.paydata.finalAmount;\n\n          if (this.paydata.type === \"vendor\") {\n            this.cheqdata.invoices = this.paydata.invoices;\n          }\n        }\n\n        if (this.paydata.isVendorPayment) {\n          this.cheqdata.regularPay = this.paydata.totalAmount;\n          this.cheqdata.grossPay = this.paydata.totalAmount;\n        } // this if cond. only in the case of expense payment\n\n\n        if (this.paydata.type === \"expensePayment\" || this.paydata.type === \"advancePayment\") {\n          this.cheqdata.regularPay = this.paydata.finalAmount;\n\n          if (this.paydata.paymentTo == \"driver\") {\n            this.fetchDriver();\n          } else {\n            this.fetchContact();\n          }\n        }\n\n        if (this.paydata.type == \"driver\") {\n          this.fetchDriver();\n        } else if (this.paydata.type === \"employee\" || this.paydata.type === \"owner_operator\" || this.paydata.type === \"carrier\" || this.paydata.type === \"vendor\") {\n          this.fetchContact();\n        }\n\n        if (this.paydata.type === \"driver\" || this.paydata.type === \"employee\" || this.paydata.type === \"owner_operator\" || this.paydata.type === \"carrier\") {\n          this.getUserAnnualTax();\n        }\n\n        let ngbModalOptions = {\n          backdrop: \"static\",\n          keyboard: false,\n          windowClass: \"chekOptions-prog__main\"\n        };\n        res.showModal = false;\n        this.modalService.open(this.modalContent, ngbModalOptions).result.then(result => {}, reason => {});\n      }\n    });\n  }\n\n  prevCheck() {\n    this.cheqdata.date = formatDate(this.paydata.chequeDate, \"ddMMyyyy\", this.locale);\n    this.cheqdata.amount = this.paydata.finalAmount;\n    this.cheqdata.amountWords = converter.toWords(this.cheqdata.amount);\n    let amountSplit = this.paydata.finalAmount.toString().split(\".\");\n    let decimals = 0.0;\n\n    if (amountSplit.length > 0) {\n      let decc = Number(amountSplit[1]);\n      decimals = decc > 0 ? decc : 0.0;\n    }\n\n    if (decimals > 0) {\n      this.cheqdata.decimals = ` and ${decimals}/100`;\n    }\n\n    this.modalService.dismissAll();\n    let ngbModalOptions = {\n      backdrop: \"static\",\n      keyboard: false,\n      windowClass: \"peviewCheque-prog__main\"\n    };\n    this.modalService.open(this.previewCheque, ngbModalOptions).result.then(result => {}, reason => {});\n  }\n\n  getCarriers() {\n    this.carriers = [];\n    this.apiService.getData(`contacts/get/records/carrier`).subscribe(result => {\n      for (let i = 0; i < result.Items.length; i++) {\n        const element = result.Items[i];\n        element.type = \"sub\";\n        this.carriers = [...this.carriers, element];\n      }\n    });\n  }\n\n  getCurrentCarrDetail(carrierID) {\n    this.apiService.getData(`carriers/detail/${carrierID}`).subscribe(result => {\n      result.type = \"main\";\n      result.contactID = result.carrierID;\n      result.cName = result.companyName;\n      this.carriers.unshift(result);\n    });\n  }\n\n  selectedCarrier(val) {\n    this.cheqdata.companyName = val.companyName;\n    this.addresses = [];\n\n    if (val.type === \"main\") {\n      val.address.map(v => {\n        if (v.manual) {\n          v.fullAddr = `${v.address}, ${v.stateName}, ${v.cityName}, ${v.countryName}, ${v.zipCode}`;\n        } else {\n          v.fullAddr = v.userLocation;\n        }\n      });\n      this.addresses = val.address;\n    } else if (val.type === \"sub\") {\n      val.adrs.map(v => {\n        if (v.manual) {\n          v.fullAddr = `${v.add1}, ${v.add2} ${v.sName}, ${v.ctyName}, ${v.cName}, ${v.zip}`;\n        } else {\n          v.fullAddr = v.userLoc;\n        }\n      });\n      this.addresses = val.adrs;\n    }\n  }\n\n  generatePDF() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var data = document.getElementById(\"print_wrap\");\n      html2pdf(data, {\n        margin: 0,\n        filename: `cheque-${_this2.paydata.chequeNo}.pdf`,\n        image: {\n          type: \"jpeg\",\n          quality: 0.98\n        },\n        html2canvas: {\n          scale: 2,\n          logging: true,\n          dpi: 192,\n          letterRendering: true\n        },\n        jsPDF: {\n          unit: \"mm\",\n          format: \"a4\",\n          orientation: \"portrait\"\n        }\n      });\n    })();\n  }\n\n  updateVendorDetails() {\n    const showData = this.paydata.isVendorPayment;\n\n    if (showData) {\n      this.cheqdata.entityName = this.vendorCompanyName;\n      this.cheqdata.entityAddress = this.vendorAddress.length > 0 ? this.vendorAddress[0] : \"\";\n    } else {\n      this.cheqdata.entityName = this.dummyEntity;\n      this.cheqdata.entityAddress = this.dummyAddress;\n    }\n  }\n\n  fetchDriver() {\n    this.apiService.getData(`drivers/cheque/data/${this.paydata.entityId}`).subscribe(result => {\n      this.driverData = result.Items[0];\n      this.dummyEntity = this.driverData.firstName + \" \" + this.driverData.lastName;\n      this.cheqdata.entityName = this.driverData.firstName + \" \" + this.driverData.lastName;\n      let addr = result.Items[0].address[0];\n\n      if (addr.manual) {\n        this.cheqdata.entityAddress = `${addr.address}, ${addr.stateName}, ${addr.cityName}, ${addr.countryName}, ${addr.zipCode}`;\n        this.dummyAddress = `${addr.address}, ${addr.stateName}, ${addr.cityName}, ${addr.countryName}, ${addr.zipCode}`;\n      } else {\n        this.cheqdata.entityAddress = addr.userLocation;\n        this.dummyAddress = addr.userLocation;\n      }\n\n      if (result.Items[0].vendorName && result.Items[0].vendorName != \"\" && result.Items[0].venAddress && result.Items[0].venAddress.length > 0) {\n        this.vendorCompanyName = result.Items[0].vendorName;\n        this.updateVendorDetails();\n\n        for (const iterator of result.Items[0].venAddress) {\n          this.vendorAddress = [...this.vendorAddress, iterator];\n        }\n      }\n    });\n  }\n\n  fetchContact() {\n    if (this.paydata.entityId != null) {\n      this.apiService.getData(`contacts/detail/${this.paydata.entityId}`).subscribe(result => {\n        this.cheqdata.entityName = result.Items[0].cName;\n        this.dummyEntity = result.Items[0].cName;\n        let addr = result.Items[0].adrs[0];\n\n        if (addr.manual) {\n          this.cheqdata.entityAddress = `${addr.add1} ${addr.add2}, ${addr.sName}, ${addr.ctyName}, ${addr.cName}, ${addr.zip}`;\n        } else {\n          this.cheqdata.entityAddress = addr.userLoc;\n        }\n      });\n    }\n  }\n\n  saveDownload() {\n    this.isDownload = true;\n    let obj = {\n      type: this.paydata.type,\n      openFrom: this.openFrom\n    };\n    this.listService.triggerPaymentSave(obj);\n    setTimeout(() => {\n      this.isDownload = false;\n      this.modalService.dismissAll();\n      this.generatePDF();\n    }, 1500);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  getUserAnnualTax() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let entityID = _this3.paydata.entityId;\n\n      if (_this3.paydata.isVendorPayment) {\n        entityID = _this3.paydata.vendorId;\n      }\n\n      let result = yield _this3.accountService.getData(`driver-payments/annual/payment/${entityID}/${_this3.paydata.payYear}`).toPromise();\n      _this3.cheqdata.vacationPayYTD = result[0].vacationPay ? result[0].vacationPay : 0;\n      _this3.cheqdata.regularPayYTD = result[0].regEarning ? result[0].regEarning : 0;\n      _this3.cheqdata.cppYTD = result[0].cpp ? result[0].cpp : 0;\n      _this3.cheqdata.eiYTD = result[0].ei ? result[0].ei : 0;\n      _this3.cheqdata.taxYTD = Number(result[0].federalTax) + Number(result[0].provincialTax);\n\n      if (_this3.paydata.page === \"addForm\") {\n        _this3.cheqdata.vacationPayYTD = Number(_this3.cheqdata.vacationPayYTD) + Number(_this3.cheqdata.vacationPay);\n        _this3.cheqdata.regularPayYTD = Number(_this3.cheqdata.regularPayYTD) + Number(_this3.cheqdata.regularPay);\n        _this3.cheqdata.cppYTD = Number(_this3.cheqdata.cppYTD) + Number(_this3.cheqdata.cpp);\n        _this3.cheqdata.eiYTD = Number(_this3.cheqdata.eiYTD) + Number(_this3.cheqdata.ei);\n        _this3.cheqdata.taxYTD = Number(_this3.cheqdata.taxYTD) + Number(_this3.cheqdata.tax);\n      }\n\n      _this3.cheqdata.gstHstYTD = Number(result[0].gstHst);\n      _this3.cheqdata.grossPayYTD = Number(_this3.cheqdata.vacationPayYTD) + Number(_this3.cheqdata.regularPayYTD);\n      _this3.cheqdata.withHeldYTD = Number(_this3.cheqdata.cppYTD) + Number(_this3.cheqdata.eiYTD);\n      _this3.cheqdata.netPayYTD = Number(_this3.cheqdata.grossPayYTD) - Number(_this3.cheqdata.withHeldYTD) + Number(_this3.cheqdata.gstHstYTD);\n      _this3.cheqdata.gstHst = _this3.paydata.gstHstAmt;\n    })();\n  }\n\n};\n\nPaymentChequeComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ApiService\n}, {\n  type: NgbModal\n}, {\n  type: AccountService\n}];\n\nPaymentChequeComponent.propDecorators = {\n  modalContent: [{\n    type: ViewChild,\n    args: [\"chekOptions\", {\n      static: true\n    }]\n  }],\n  previewCheque: [{\n    type: ViewChild,\n    args: [\"previewCheque\", {\n      static: true\n    }]\n  }]\n};\nPaymentChequeComponent = __decorate([Component({\n  selector: \"app-payment-cheque\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], PaymentChequeComponent);\nexport { PaymentChequeComponent };","map":null,"metadata":{},"sourceType":"module"}