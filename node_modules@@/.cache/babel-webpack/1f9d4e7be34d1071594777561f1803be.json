{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./mileage.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./mileage.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../services/api.service';\nimport { ListService } from '../../../../services/list.service';\nimport { ActivatedRoute } from '@angular/router';\nimport Constants from '../../../fleet/constants';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { HttpClient } from '@angular/common/http';\nimport { jsPDF } from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as moment from 'moment';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet MileageComponent = class MileageComponent {\n  constructor(apiService, spinner, route, listService, httpClient, countryStateCity) {\n    this.apiService = apiService;\n    this.spinner = spinner;\n    this.route = route;\n    this.listService = listService;\n    this.httpClient = httpClient;\n    this.countryStateCity = countryStateCity;\n    this.activeTab = 'vehicle';\n    this.vehicleList = [];\n    this.recordCount = 10;\n    this.pageLength = 10;\n    this.isRecords = false;\n    this.recordStartPoint = 1;\n    this.recordEndPoint = this.pageLength;\n    this.recordDraw = 0;\n    this.records = [];\n    this.recordNext = false;\n    this.recordPrevEvauatedKeys = [''];\n    this.lastEvaluatedKey = '';\n    this.recordPrev = true;\n    this.quarterReport = {};\n    this.recs = false;\n    this.canadianStates = {};\n    this.usStates = {};\n    this.fuelList = [];\n    this.filterFuel = \"\";\n    this.filterVehicle = \"\";\n    this.quarters = {\n      '1': \"JAN - MAR\",\n      '2': \"APR - JUN\",\n      '3': \"JUL - SEP\",\n      '4': \"OCT - DEC\"\n    };\n    this.carrierName = \"\";\n    this.username = \"\";\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.quarter = _this.route.snapshot.params['quarter'];\n      _this.quarter;\n\n      _this.fetchJurisdiction();\n\n      yield _this.fetchCountries();\n\n      _this.fetchCount();\n\n      _this.fetchVehicles();\n\n      _this.fetchWexFuelCode();\n\n      _this.fetchQuarterRreport();\n\n      yield _this.getCanadaStates();\n      yield _this.getUSStates();\n\n      _this.groupByFuelType();\n\n      _this.fetchCarrierData();\n    })();\n  }\n\n  fetchCarrierData() {\n    this.apiService.getData(`carriers/getCarrier`).subscribe(result => {\n      this.carrierName = result.Items[0].carrierName;\n      this.username = result.Items[0].userName;\n    });\n  }\n\n  groupByFuelType() {\n    this.apiService.getData(`ifta/groupFuelType/${this.quarter}`).subscribe(result => {\n      this.fuelGroup = result;\n    });\n  }\n\n  fetchWexFuelCode() {\n    let fuelList = [];\n    this.httpClient.get('assets/jsonFiles/fuel/wexFuelType.json').subscribe(result => {\n      result.forEach(element => {\n        fuelList.push(element.type);\n      });\n    });\n    this.fuelList = [\"Diesel\", \"Gasoline\", \"Propane\"];\n  }\n\n  fetchVehicleSumary() {\n    this.activeTab = 'vehicle';\n    this.fetchCount();\n  }\n\n  fetchJurisdictionSumary() {\n    this.activeTab = 'jurisdiction';\n    this.fetchJurisdiction();\n  }\n\n  fetchVehicles() {\n    this.apiService.getData(`vehicles`).subscribe(result => {\n      this.vehicleList = result.Items;\n    });\n  }\n\n  fetchJurisdiction() {\n    this.apiService.getData('ifta/jurisdiction/' + this.quarter).subscribe(result => {\n      this.jurisdictionReport = result;\n    });\n  }\n\n  filterRecords() {\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.lastEvaluatedKey = '';\n    this.isRecords = false;\n    this.records = [];\n    if (this.filterFuel == null) this.filterFuel = '';\n    if (this.filterVehicle == null) this.filterVehicle = '';\n\n    if (this.filterFuel != null || this.filterVehicle != null) {\n      this.fetchCount();\n    }\n  }\n\n  resetFilter() {\n    this.filterFuel = '';\n    this.filterVehicle = '';\n    this.fetchCount();\n  }\n\n  fetchQuarterRreport() {\n    this.apiService.getData('ifta/quarter/' + this.quarter).subscribe(result => {\n      this.quarterReport.totalMiles = result[0].totalMiles;\n      this.quarterReport.iftaDistance = result[0].iftaDistance;\n      this.quarterReport.nonIftaDistance = result[0].nonIftaDistance;\n      this.quarterReport.quantityUnit = result[0].quantityUnit;\n      this.quarterReport.distanceUnit = result[0].distanceUnit;\n      this.quarterReport.quarter = result[0].quarter;\n      this.quarterReport.totalQuantity = result[0].totalQuantity;\n      this.quarterReport.totalYear = result[0].totalYear;\n      this.average = (this.quarterReport.totalMiles / this.quarterReport.totalQuantity).toFixed(2);\n    });\n  }\n\n  getPDF(element) {\n    let quart = this.quarter.split(\"-\");\n    let today = moment().format(\"MMMM Do YYYY\");\n\n    if (this.jurisdictionReport) {\n      const doc = new jsPDF({\n        orientation: \"p\",\n        unit: 'mm',\n        format: 'a4'\n      });\n      let data = this.jurisdictionReport.filter(el => el.fuelType == element.fuelType);\n      let filteredData = [];\n      data.forEach(e => {\n        let d = {\n          jurisdiction: e.jurisdiction,\n          quantity: e.quantity,\n          totalMiles: e.totalMiles\n        };\n        filteredData.push(d);\n      });\n      let dataArray = [];\n      filteredData.forEach(ele => {\n        dataArray.push(Object.values(ele));\n      });\n      autoTable(doc, {\n        styles: {},\n        columnStyles: {},\n        margin: {\n          top: 100\n        },\n        theme: 'striped',\n        headStyles: {\n          fillColor: [0, 0, 0]\n        },\n        head: [{\n          jurisdiction: 'Jurisdiction',\n          quantity: `Quantity(${this.quarterReport.quantityUnit})`,\n          distance: `Distance(${this.quarterReport.distanceUnit})`\n        }],\n        body: dataArray,\n        didDrawPage: data => {\n          doc.setFontSize(20);\n          doc.text('IFTA Report', 15, 15);\n          doc.setFontSize(10);\n          doc.text('Internation Fuel Tax Agreement Report', 15, 20);\n          doc.line(15, 25, 200, 25);\n          doc.addImage('assets/img/fhLogo.png', 160, 5, 40, 14);\n          doc.setFontSize(10);\n          doc.text(\"Carrier Name\", 15, 35);\n          doc.setFontSize(11);\n          doc.text(this.carrierName, 15, 40);\n          doc.setFontSize(10);\n          doc.text(\"Quarter/ Year\", 160, 35);\n          doc.setFontSize(11);\n          doc.text(`${this.quarters[quart[0]]}`, 160, 40);\n          doc.setFontSize(10);\n          doc.text(\"Created Date\", 15, 50);\n          doc.setFontSize(11);\n          doc.text(`${today}`, 15, 55);\n          doc.setFontSize(10);\n          doc.text(\"Created By\", 160, 50);\n          doc.setFontSize(11);\n          doc.text(this.username, 160, 55);\n          doc.setFontSize(10); // doc.text(\"IFTA Report #\",160,50)\n          // doc.setFontSize(11)\n          // doc.text(\"123456\",160,55)\n\n          autoTable(doc, {\n            styles: {},\n            columnStyles: {},\n            margin: {\n              top: 60\n            },\n            theme: 'grid',\n            body: [[`Total Distance: ${element.totalDistance} ${this.quarterReport.distanceUnit}`, `Total Fuel Quantity: ${element.totalQuantity} ${this.quarterReport.distanceUnit}`], [`Total IFTA Distance: ${element.totalIftaDistance} ${this.quarterReport.distanceUnit}`, `Total Non IFTA Distance: ${element.nonIftaDistance} ${this.quarterReport.distanceUnit}`], [`Fuel Type: ${element.fuelType}`, `Average ${this.quarterReport.distanceUnit}/${element.quantityUnit}:${(element.totalDistance / element.totalQuantity).toFixed(2)} ${this.quarterReport.distanceUnit}/${element.quantityUnit}`]]\n          });\n        }\n      });\n      doc.save(`ifta ${this.quarter}-${element.fuelType}.pdf`);\n    }\n  }\n\n  generatePDF() {\n    this.groupByFuelType();\n    this.fuelGroup.forEach(element => {\n      this.getPDF(element);\n    });\n  }\n\n  nextResults() {\n    this.recordNext = true;\n    this.recordDraw += 1;\n    this.recordPrev = true;\n    this.initDataTable();\n  } // prev button func\n\n\n  prevResults() {\n    this.recordNext = true;\n    this.recordPrev = true;\n    this.recordDraw -= 1;\n    this.lastEvaluatedKey = this.recordPrevEvauatedKeys[this.recordDraw];\n    this.initDataTable();\n  }\n\n  fetchCount() {\n    this.apiService.getData('ifta/get/count?quarter=' + this.quarter + '&vehicle=' + this.filterVehicle + '&fuelType=' + this.filterFuel).subscribe({\n      complete: () => {},\n      error: () => {},\n      next: result => {\n        this.recordCount = result.Count;\n        this.initDataTable();\n      }\n    });\n  }\n\n  fetchCountries() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.countries = yield _this2.countryStateCity.GetAllCountries();\n    })();\n  }\n\n  getCanadaStates() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let states = yield _this3.countryStateCity.GetStatesByCountryCode([\"CA\"]);\n      states.forEach(element => {\n        _this3.canadianStates[element.stateCode] = element.stateName;\n      });\n    })();\n  }\n\n  getUSStates() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let states = yield _this4.countryStateCity.GetStatesByCountryCode(['US']);\n      states.forEach(element => {\n        _this4.usStates[element.stateCode] = element.stateName;\n      });\n    })();\n  }\n\n  getStartandEndVal() {\n    this.recordStartPoint = this.recordDraw * this.pageLength + 1;\n    this.recordEndPoint = this.recordStartPoint + this.pageLength - 1;\n  }\n\n  initDataTable() {\n    this.spinner.show();\n    this.apiService.getData('ifta/fetch/records?quarter=' + this.quarter + '&vehicle=' + this.filterVehicle + '&fuelType=' + this.filterFuel + '&lastKey=' + this.lastEvaluatedKey).subscribe(result => {\n      if (result.Items.length == 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n        this.isRecords = false;\n      } else {\n        this.isRecords = true;\n      }\n\n      this.getStartandEndVal();\n      this.fetchRecords(result);\n\n      if (result['LastEvaluatedKey'] !== undefined) {\n        let lastEvalKey = result[`LastEvaluatedKey`].iftaSK.replace(/#/g, '--');\n        this.recordNext = false; // for prev button\n\n        if (!this.recordPrevEvauatedKeys.includes(lastEvalKey)) {\n          this.recordPrevEvauatedKeys.push(lastEvalKey);\n        }\n\n        this.lastEvaluatedKey = lastEvalKey;\n      } else {\n        this.recordNext = true;\n        this.lastEvaluatedKey = '';\n        this.recordEndPoint = this.recordCount;\n      }\n\n      if (this.recordCount < this.recordEndPoint) {\n        this.recordEndPoint = this.recordCount;\n      }\n\n      if (this.recordDraw > 0) {\n        this.recordPrev = false;\n      } else {\n        this.recordPrev = true;\n      }\n\n      this.spinner.hide();\n    }, err => {\n      this.spinner.hide();\n    });\n  }\n\n  fetchRecords(result) {\n    this.records = result.Items;\n  }\n\n};\n\nMileageComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ListService\n}, {\n  type: HttpClient\n}, {\n  type: CountryStateCityService\n}];\n\nMileageComponent = __decorate([Component({\n  selector: 'app-mileage',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], MileageComponent);\nexport { MileageComponent };","map":null,"metadata":{},"sourceType":"module"}