{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./driver-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./driver-detail.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { HereMapService } from '../../../../services';\nimport { ApiService } from '../../../../services';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../../environments/environment';\nimport Constants from '../../constants';\nimport { ToastrService } from 'ngx-toastr';\nimport { map } from 'rxjs/operators';\nimport { from } from 'rxjs';\nimport { passwordStrength } from 'check-password-strength';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nimport { RouteManagementServiceService } from 'src/app/services/route-management-service.service';\nlet DriverDetailComponent = class DriverDetailComponent {\n  constructor(hereMap, apiService, route, spinner, domSanitizer, httpClient, toastr, countryStateCity, routerMgmtService) {\n    this.hereMap = hereMap;\n    this.apiService = apiService;\n    this.route = route;\n    this.spinner = spinner;\n    this.domSanitizer = domSanitizer;\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.countryStateCity = countryStateCity;\n    this.routerMgmtService = routerMgmtService;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.environment = environment.isFeatureEnabled;\n    this.currency = '';\n    this.trips = [];\n    this.csa = false;\n    this.licNotification = false;\n    this.nullVar = null;\n    this.hosPcAllowed = false;\n    this.hosYmAllowed = false;\n    this.yardsObjects = {};\n    this.statesObject = {};\n    this.countriesObject = {};\n    this.citiesObject = {};\n    this.groupsObjects = {};\n    this.contactsObject = {};\n    this.vehicleList = {};\n    this.driverList = {};\n    this.assetList = {};\n    this.docs = [];\n    this.assetsDocs = [];\n    this.absDocs = [];\n    this.profile = [];\n    this.documentTypeList = [];\n    this.documentsTypesObects = {};\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('');\n    this.passwordValidation = {\n      upperCase: false,\n      lowerCase: false,\n      number: false,\n      specialCharacters: false,\n      length: false\n    };\n    this.submitDisabled = false;\n    this.driverPwdData = {\n      password: '',\n      confirmPassword: ''\n    };\n    this.errors = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.driverLogs = [];\n    this.groupName = '';\n    this.groupId = '';\n    this.payPerMile = {\n      pType: \"ppm\",\n      loadedMiles: null,\n      currency: null,\n      emptyMiles: null,\n      emptyMilesTeam: null,\n      loadedMilesTeam: null,\n      default: false\n    };\n    this.payPerHour = {\n      pType: \"pph\",\n      rate: null,\n      currency: null,\n      waitingPay: null,\n      waitingHourAfter: null,\n      default: false\n    };\n    this.payPercentage = {\n      pType: \"pp\",\n      loadPayPercentage: null,\n      loadPayPercentageOf: null,\n      default: false\n    };\n    this.payPerDelivery = {\n      pType: \"ppd\",\n      deliveryRate: null,\n      currency: null,\n      default: false\n    };\n    this.paymentOptions = [{\n      name: \"Pay Per Mile\",\n      value: \"ppm\"\n    }, {\n      name: \"Percentage\",\n      value: \"pp\"\n    }, {\n      name: \"Pay Per Hour\",\n      value: \"pph\"\n    }, {\n      name: \"Pay Per Delivery\",\n      value: \"ppd\"\n    }];\n    this.sessionId = this.routerMgmtService.driverUpdateSessionID;\n  }\n\n  ngOnInit() {\n    this.driverID = this.route.snapshot.params[`driverID`]; // get asset Id from URL\n\n    this.fetchDriver(); // this.fetchGroupsbyIDs();\n\n    this.fetchAllContacts();\n    this.fetchDocuments();\n    this.fetchDriverTrips();\n    this.fetchVehicleList();\n    this.fetchDriverList();\n    this.fetchAssetList();\n    this.fetchDriverLogs();\n  }\n\n  fetchVehicleList() {\n    this.apiService.getData('vehicles/get/list').subscribe(result => {\n      this.vehicleList = result;\n    });\n  }\n\n  fetchAssetList() {\n    this.apiService.getData('assets/get/list').subscribe(result => {\n      this.assetList = result;\n    });\n  }\n\n  fetchDriverList() {\n    this.apiService.getData('drivers/get/list').subscribe(result => {\n      this.driverList = result;\n    });\n  }\n\n  onChangeHideErrors(fieldname = '') {\n    $('[name=\"' + fieldname + '\"]').removeClass('error').next().remove('label');\n  } // Show password\n\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  togglecpwdfieldTextType() {\n    this.cpwdfieldTextType = !this.cpwdfieldTextType;\n  }\n\n  validatePassword(password) {\n    let passwordVerify = passwordStrength(password);\n\n    if (passwordVerify.contains.includes('lowercase')) {\n      this.passwordValidation.lowerCase = true;\n    } else {\n      this.passwordValidation.lowerCase = false;\n    }\n\n    if (passwordVerify.contains.includes('uppercase')) {\n      this.passwordValidation.upperCase = true;\n    } else {\n      this.passwordValidation.upperCase = false;\n    }\n\n    if (passwordVerify.contains.includes('symbol')) {\n      this.passwordValidation.specialCharacters = true;\n    } else {\n      this.passwordValidation.specialCharacters = false;\n    }\n\n    if (passwordVerify.contains.includes('number')) {\n      this.passwordValidation.number = true;\n    } else {\n      this.passwordValidation.number = false;\n    }\n\n    if (passwordVerify.length >= 8) {\n      this.passwordValidation.length = true;\n    } else {\n      this.passwordValidation.length = false;\n    }\n\n    if (password.includes('.') || password.includes('-')) {\n      this.passwordValidation.specialCharacters = true;\n    }\n  }\n\n  onChangePassword() {\n    this.submitDisabled = true;\n    this.hideErrors();\n    const data = {\n      userName: this.userName,\n      password: this.driverPwdData.password\n    };\n    this.apiService.postData('drivers/password', data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.submitDisabled = false;\n        this.toastr.success('Password updated successfully');\n        $('#driverPasswordModal').modal('hide');\n        this.driverPwdData = {\n          password: '',\n          confirmPassword: ''\n        };\n      }\n    });\n  }\n\n  pwdModalClose() {\n    $('#driverPasswordModal').modal('hide');\n    this.driverPwdData = {\n      password: '',\n      confirmPassword: ''\n    };\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  fetchHomeTerminal(homeTerminal) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (homeTerminal !== undefined) {\n        if (homeTerminal.manual) {\n          let combineAddress;\n\n          if (homeTerminal.address !== '') {\n            combineAddress = `${homeTerminal.address}`;\n          }\n\n          if (homeTerminal.cityName !== '') {\n            combineAddress += `,` + `${homeTerminal.cityName}`;\n          }\n\n          if (homeTerminal.stateCode !== '') {\n            combineAddress += `,` + (yield _this.countryStateCity.GetStateNameFromCode(homeTerminal.stateCode, homeTerminal.countryCode));\n          }\n\n          if (homeTerminal.countryCode !== '') {\n            combineAddress += `,` + (yield _this.countryStateCity.GetSpecificCountryNameByCode(homeTerminal.countryCode));\n          }\n\n          if (homeTerminal.zipCode !== '') {\n            combineAddress += ` - ${homeTerminal.zipCode}`;\n          }\n\n          _this.homeTerminal = combineAddress;\n        } else {\n          _this.homeTerminal = homeTerminal.userLocation;\n        }\n      }\n    })();\n  }\n\n  fetchDriver() {\n    var _this2 = this;\n\n    this.spinner.show(); // loader init\n\n    this.apiService.getData(`drivers/${this.driverID}`).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        if (result) {\n          _this2.driverData = yield result[`Items`][0];\n          _this2.userName = _this2.driverData.userName;\n          _this2.driverDataUpdate = yield result[`Items`][0];\n\n          if (_this2.driverData.hosDetails.homeTerminal != '') {\n            yield _this2.fetchHomeTerminal(_this2.driverData.hosDetails.homeTerminal);\n          }\n\n          if (_this2.driverData.address !== undefined && _this2.driverData.address !== '') {\n            _this2.fetchCompleteAdd(_this2.driverData.address);\n          }\n\n          _this2.cycle = _this2.driverData.hosDetails.hosCycleName;\n          _this2.email = _this2.driverData.email;\n          _this2.phone = _this2.driverData.phone;\n          _this2.DOB = _this2.driverData.DOB;\n          _this2.CDL = _this2.driverData.CDL_Number;\n          _this2.payPeriod = _this2.driverData.payPeriod;\n\n          _this2.driverData.paymentOption.forEach(element => {\n            if (element.default) {\n              const type = _this2.paymentOptions.find(el => el.value == element.pType);\n\n              _this2.paymentType = type.name;\n            }\n\n            if (element.pType == \"pph\") {\n              _this2.payPerHour.currency = element.currency;\n              _this2.payPerHour.rate = element.rate;\n              _this2.payPerHour.waitingHourAfter = element.waitingHourAfter;\n              _this2.payPerHour.waitingPay = element.waitingPay;\n            }\n\n            if (element.pType == \"ppm\") {\n              _this2.payPerMile.loadedMiles = element.loadedMiles;\n              _this2.payPerMile.currency = element.currency;\n              _this2.payPerMile.emptyMiles = element.emptyMiles;\n              _this2.payPerMile.emptyMilesTeam = element.emptyMilesTeam;\n              _this2.payPerMile.loadedMilesTeam = element.loadedMilesTeam;\n            }\n\n            if (element.pType == \"pp\") {\n              _this2.payPercentage.loadPayPercentage = element.loadPayPercentage;\n              _this2.payPercentage.loadPayPercentageOf = element.loadPayPercentageOf;\n            }\n\n            if (element.pType == \"ppd\") {\n              _this2.payPerDelivery.currency = element.currency;\n              _this2.payPerDelivery.deliveryRate = element.deliveryRate;\n            }\n          });\n\n          if (_this2.driverData.middleName !== undefined && _this2.driverData.middleName !== null && _this2.driverData.middleName !== '') {\n            _this2.driverName = `${_this2.driverData.firstName} ${_this2.driverData.middleName} ${_this2.driverData.lastName}`;\n          } else {\n            _this2.driverName = `${_this2.driverData.firstName} ${_this2.driverData.lastName}`;\n          }\n\n          _this2.startDate = _this2.driverData.startDate;\n          _this2.terminationDate = _this2.driverData.terminationDate;\n          _this2.contractStart = _this2.driverData.contractStart;\n          _this2.contractEnd = _this2.driverData.contractEnd;\n\n          if (_this2.driverData.driverImage !== '' && _this2.driverData.driverImage !== undefined) {\n            _this2.profile = _this2.driverData.uploadImage;\n          } else {\n            _this2.profile = 'assets/img/driver/driver.png';\n          }\n\n          if (_this2.driverData.abstractDocs !== undefined && _this2.driverData.abstractDocs.length > 0) {\n            _this2.absDocs = _this2.driverData.docsAbs;\n          }\n\n          _this2.driverType = _this2.driverData.driverType;\n          _this2.employeeId = _this2.driverData.employeeContractorId;\n          _this2.corporationType = _this2.driverData.corporationType ? _this2.driverData.corporationType.replace('_', ' ') : '';\n          _this2.vendor = _this2.driverData.vendor;\n          _this2.corporation = _this2.driverData.corporation;\n          _this2.ownerOperator = _this2.driverData.ownerOperator;\n          _this2.companyId = _this2.driverData.companyId;\n          _this2.companyName = _this2.driverData.companyName;\n          _this2.driverStatus = _this2.driverData.driverStatus;\n          _this2.gender = _this2.driverData.gender;\n          _this2.aceID = _this2.driverData.crossBorderDetails.ACE_ID;\n          _this2.aciID = _this2.driverData.crossBorderDetails.ACI_ID;\n          _this2.fastID = _this2.driverData.crossBorderDetails.fast_ID;\n          _this2.fastExpiry = _this2.driverData.crossBorderDetails.fastExpiry;\n          _this2.citizenship = yield _this2.countryStateCity.GetSpecificCountryNameByCode(_this2.driverData.citizenship);\n          _this2.csa = _this2.driverData.crossBorderDetails.csa;\n          _this2.groupId = _this2.driverData.groupID;\n\n          if (_this2.groupId != null) {\n            _this2.groupName = _this2.fetchGroups(_this2.groupId)[0].groupName;\n          }\n\n          _this2.assignedVehicle = _this2.driverData.assignedVehicle;\n          _this2.address = _this2.driverData.address;\n          let newDocuments = [];\n\n          if (_this2.driverData.documentDetails.length > 0) {\n            for (let i = 0; i < _this2.driverData.documentDetails.length; i++) {\n              let docmnt = [];\n\n              if (_this2.driverData.documentDetails[i].uploadedDocs != undefined && _this2.driverData.documentDetails[i].uploadedDocs.length > 0) {\n                docmnt = _this2.driverData.documentDetails[i].uploadedDocs;\n              }\n\n              newDocuments.push({\n                documentType: _this2.driverData.documentDetails[i].documentType ? _this2.driverData.documentDetails[i].documentType : '',\n                document: _this2.driverData.documentDetails[i].document ? _this2.driverData.documentDetails[i].document : '',\n                issuingAuthority: _this2.driverData.documentDetails[i].issuingAuthority ? _this2.driverData.documentDetails[i].issuingAuthority : '',\n                issuingCountry: _this2.driverData.documentDetails[i].issuingCountry ? yield _this2.countryStateCity.GetSpecificCountryNameByCode(_this2.driverData.documentDetails[i].issuingCountry) : '',\n                issuingState: _this2.driverData.documentDetails[i].issuingCountry ? yield _this2.countryStateCity.GetStateNameFromCode(_this2.driverData.documentDetails[i].issuingState, _this2.driverData.documentDetails[i].issuingCountry) : '',\n                issueDate: _this2.driverData.documentDetails[i].issueDate ? _this2.driverData.documentDetails[i].issueDate : '',\n                expiryDate: _this2.driverData.documentDetails[i].expiryDate ? _this2.driverData.documentDetails[i].expiryDate : '',\n                uploadedDocs: docmnt\n              }); //Presigned URL Using AWS S3\n\n              _this2.assetsDocs[i] = _this2.driverData.docuementUpload;\n            }\n          }\n\n          _this2.documents = newDocuments;\n          _this2.liceIssueSate = yield _this2.countryStateCity.GetStateNameFromCode(_this2.driverData.licenceDetails.issuedState, _this2.driverData.licenceDetails.issuedCountry), _this2.liceIssueCountry = yield _this2.countryStateCity.GetSpecificCountryNameByCode(_this2.driverData.licenceDetails.issuedCountry);\n          _this2.licenceExpiry = _this2.driverData.licenceDetails.licenceExpiry;\n          _this2.liceMedicalCardRenewal = _this2.driverData.licenceDetails.medicalCardRenewal;\n          _this2.licNotification = _this2.driverData.licenceDetails.licenceNotification;\n          _this2.liceWCB = _this2.driverData.licenceDetails.WCB;\n          _this2.liceHealthCare = _this2.driverData.licenceDetails.healthCare;\n          _this2.liceVehicleType = _this2.driverData.licenceDetails.vehicleType;\n          _this2.liceContractStart = _this2.driverData.licenceDetails.contractStart;\n          _this2.liceContractEnd = _this2.driverData.licenceDetails.contractEnd;\n          _this2.SIN = _this2.driverData.SIN;\n          _this2.loadPayPercentage = _this2.driverData.paymentDetails.loadPayPercentage;\n          _this2.loadPayPercentageOf = _this2.driverData.paymentDetails.loadPayPercentageOf;\n          _this2.payPeriod = _this2.driverData.paymentDetails.payPeriod.replace('_', ' ');\n          _this2.hosStatus = _this2.driverData.hosDetails.hosStatus;\n          _this2.hosRemarks = _this2.driverData.hosDetails.hosRemarks;\n          _this2.hosPcAllowed = _this2.driverData.hosDetails.pcAllowed;\n          _this2.hosYmAllowed = _this2.driverData.hosDetails.ymAllowed;\n          _this2.hosType = _this2.driverData.hosDetails.type;\n          _this2.hosCycle = _this2.driverData.hosDetails.hosCycleName;\n          _this2.timezone = _this2.driverData.hosDetails.timezone;\n          _this2.optzone = _this2.driverData.hosDetails.optZone;\n          _this2.emerName = _this2.driverData.emergencyDetails.name;\n          _this2.emergencyAddress = _this2.driverData.emergencyDetails.emergencyAddress;\n          _this2.emerPhone = _this2.driverData.emergencyDetails.phone;\n          _this2.emerEmail = _this2.driverData.emergencyDetails.email;\n          _this2.emerRelationship = _this2.driverData.emergencyDetails.relationship;\n\n          _this2.spinner.hide();\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), err => {});\n  }\n\n  fetchCompleteAdd(address) {\n    var _this3 = this;\n\n    if (address != '') {\n      for (let a = 0; a < address.length; a++) {\n        address.map( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (e) {\n            if (e.manual) {\n              e.countryName = yield _this3.countryStateCity.GetSpecificCountryNameByCode(e.countryCode);\n              e.stateName = yield _this3.countryStateCity.GetStateNameFromCode(e.stateCode, e.countryCode);\n            }\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      }\n    }\n  }\n\n  fetchDocuments() {\n    this.httpClient.get('assets/travelDocumentType.json').subscribe(data => {\n      this.documentTypeList = data;\n      this.documentsTypesObects = this.documentTypeList.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  } // fetchGroupsbyIDs() {\n  //     this.apiService.getData('groups/get/list')\n  //         .subscribe((result: any) => {\n  //             this.groupsObjects = result;\n  //         });\n  // }\n\n\n  fetchGroups(groupId) {\n    this.apiService.getData(`groups/get/list?type=drivers&groupId=${groupId}`).subscribe(result => {\n      this.groupsObjects = result;\n    });\n  }\n\n  fetchAllContacts() {\n    this.apiService.getData('contacts/get/list').subscribe(result => {\n      this.contactsObject = result;\n    });\n  }\n\n  getCarrierID() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.carrierID = yield _this4.apiService.getCarrierID();\n    })();\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = '';\n\n    if (ext === 'doc' || ext === 'docx' || ext === 'xlsx') {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('https://docs.google.com/viewer?url=' + val + '&embedded=true');\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  } // delete uploaded images and documents\n\n\n  delete(type, name, index, docIndex) {\n    this.driverDataUpdate.hosDetails.homeTerminal = this.driverDataUpdate.hosDetails.homeTerminal.addressID;\n    delete this.driverDataUpdate.isDelActiveSK;\n    delete this.driverDataUpdate.driverSK;\n    delete this.driverDataUpdate.hosDetails.cycleInfo;\n    delete this.driverDataUpdate.carrierID;\n    delete this.driverDataUpdate.timeModified;\n\n    if (type === 'doc') {\n      this.assetsDocs[index].splice(docIndex, 1);\n      this.driverDataUpdate.documentDetails[index].uploadedDocs.splice(docIndex, 1);\n      this.deleteUploadedFile(name);\n\n      try {\n        const formData = new FormData();\n        formData.append('data', JSON.stringify(this.driverDataUpdate));\n        this.apiService.putData('drivers', formData, true).subscribe({\n          complete: () => {\n            this.fetchDriver();\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      this.absDocs.splice(index, 1);\n      this.driverDataUpdate.abstractDocs.splice(index, 1);\n      this.deleteUploadedFile(name);\n\n      try {\n        const formData = new FormData();\n        formData.append('data', JSON.stringify(this.driverDataUpdate));\n        this.apiService.putData('drivers', formData, true).subscribe({\n          complete: () => {\n            this.fetchDriver();\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n\n  deleteUploadedFile(name) {\n    this.apiService.deleteData(`drivers/uploadDelete/${name}`).subscribe(result => {});\n  }\n\n  fetchDriverTrips() {\n    this.apiService.getData(`drivers/get/driver/active/${this.driverID}`).subscribe(result => {\n      this.trips = result.Items;\n    });\n  }\n\n  fetchDriverLogs() {\n    this.apiService.getData(`auditLogs/details/${this.driverID}`).subscribe(res => {\n      this.driverLogs = res.Items;\n\n      if (this.driverLogs.length > 0) {\n        this.driverLogs.map(k => {\n          k.dateAndTime = `${k.createdDate} ${k.createTime}`;\n\n          if (k.eventParams.userName !== undefined) {\n            const newString = k.eventParams.userName.split(\"_\");\n            k.userFirstName = newString[0];\n            k.userLastName = newString[1];\n          }\n\n          if (k.eventParams.name !== undefined) {\n            k.entityNumber = k.eventParams.name;\n          }\n\n          if (k.eventParams.name !== undefined) {\n            if (k.eventParams.name.includes(\"_\")) {\n              const newString = k.eventParams.name.split(\"_\");\n              k.firstName = newString[0];\n              k.lastName = newString[1];\n            }\n          }\n        });\n        this.driverLogs.sort((a, b) => {\n          return new Date(b.dateAndTime).valueOf() - new Date(a.dateAndTime).valueOf();\n        });\n      }\n    });\n  }\n\n};\n\nDriverDetailComponent.ctorParameters = () => [{\n  type: HereMapService\n}, {\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: DomSanitizer\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: CountryStateCityService\n}, {\n  type: RouteManagementServiceService\n}];\n\nDriverDetailComponent.propDecorators = {\n  driverF: [{\n    type: ViewChild,\n    args: ['driverF']\n  }]\n};\nDriverDetailComponent = __decorate([Component({\n  selector: 'app-driver-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DriverDetailComponent);\nexport { DriverDetailComponent };","map":null,"metadata":{},"sourceType":"module"}