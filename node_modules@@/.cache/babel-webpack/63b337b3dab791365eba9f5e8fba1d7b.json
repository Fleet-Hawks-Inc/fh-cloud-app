{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./users-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./users-list.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from 'src/app/services';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Constants from 'src/app/pages/fleet/constants';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { from } from 'rxjs';\nlet UsersListComponent = class UsersListComponent {\n  constructor(apiService, toastr, spinner, httpClient) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.httpClient = httpClient;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.contactID = '';\n    this.setUsrName = '';\n    this.setRoles = [];\n    this.suggestedUsers = [];\n    this.searchUserName = '';\n    this.users = [];\n    this.filterUsers = [];\n    this.totalRecords = 20;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = '';\n    this.userName = '';\n    this.currentStatus = '';\n    this.departmentName = '';\n    this.companyName = '';\n    this.userNext = false;\n    this.userPrev = true;\n    this.userDraw = 0;\n    this.userPrevEvauatedKeys = [''];\n    this.userStartPoint = 1;\n    this.userEndPoint = this.pageLength;\n    this.userRoles = {};\n    this.selectedUserData = '';\n    this.selectedUser = {\n      userID: '',\n      userRoles: {}\n    };\n    this.newRoles = [];\n    this.searchValue = '';\n    this.lastItemSK = \"\";\n    this.loaded = false;\n    this.roles = [];\n    this.response = '';\n    this.allSubRoles = [];\n    this.subRole = [];\n    this.getSuggestions = _.debounce(function (value) {\n      this.contactID = '';\n      value = value.toLowerCase();\n\n      if (value !== '') {\n        this.apiService.getData(`contacts/getEmployee/suggestions/${value}`).subscribe(result => {\n          result.map(v => {\n            if (v.lastName === undefined) {\n              v.lastName = '';\n            }\n\n            return v;\n          });\n          this.suggestedUsers = result;\n        });\n      } else {\n        this.suggestedUsers = [];\n      }\n    }, 800);\n  }\n\n  ngOnInit() {\n    this.fetchUserRoles();\n    this.fetchRoles();\n    this.initDataTable();\n    this.fetchSubRoles();\n  }\n\n  setUser(data) {\n    this.searchValue = `${data.firstName} ${data.lastName}`;\n    this.searchValue = this.searchValue.toLowerCase().trim();\n    this.contactID = data.contactID;\n    this.suggestedUsers = [];\n  }\n\n  fetchUserRoles() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this.httpClient.get('assets/jsonFiles/user/userRoles.json').toPromise();\n      data.forEach(element => {\n        _this.userRoles[element.role] = element.name;\n      });\n    })();\n  }\n\n  fetchSubRoles() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this2.httpClient.get('assets/jsonFiles/user/subRoles.json').toPromise();\n      data.forEach(element => {\n        _this2.userRoles[element.role] = element.name;\n      });\n      _this2.allSubRoles = data;\n    })();\n  }\n\n  fetchRoles() {\n    this.httpClient.get('assets/jsonFiles/user/userRoles.json').subscribe(data => {\n      this.roles = data;\n    });\n  }\n\n  fetchRole(user) {\n    this.selectedUserData = user;\n    this.setUsrName = user.userLoginData.userName;\n\n    if (this.setUsrName == '') {\n      this.setUsrName = user.workEmail;\n    }\n\n    this.selectedUser.userID = user.contactID;\n    const checkArray = user.userLoginData.userRoles;\n    let roles = [];\n    let subRoles = [];\n\n    for (const element of checkArray) {\n      for (const el of this.roles) {\n        if (element == el.role && !roles.includes(element)) {\n          roles.push(element);\n        }\n      }\n\n      for (const e of this.allSubRoles) {\n        if (element == e.role && !subRoles.includes(element)) {\n          subRoles.push(element);\n        }\n      }\n    }\n\n    this.subRole = subRoles;\n    this.setRoles = roles;\n  }\n\n  cancel() {\n    $('#assignrole').modal('hide');\n  }\n\n  assignRole() {\n    this.selectedUser.userRoles = this.setRoles.concat(this.subRole);\n    this.apiService.putData('contacts/assignRole', this.selectedUser).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n        })).subscribe({\n          complete: () => {},\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.toastr.success('Role is assigned successfully');\n        $('#assignrole').modal('hide');\n        this.users.filter(elem => {\n          if (elem.contactID === this.selectedUser.userID) {\n            elem.userLoginData.userRoles = this.selectedUser.userRoles;\n          }\n        });\n      }\n    });\n  }\n\n  initDataTable() {\n    if (this.lastItemSK !== 'end') {\n      this.apiService.getData(`contacts/fetch/employee/records?searchValue=${this.searchValue}&lastKey=${this.lastItemSK}`).subscribe(result => {\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            this.lastItemSK = encodeURIComponent(result.LastEvaluatedKey.contactSK);\n          } else {\n            this.lastItemSK = 'end';\n          }\n\n          this.users = this.users.concat(result.Items);\n          this.filterUsers = this.users;\n          this.loaded = true;\n        }\n      });\n    }\n  }\n\n  searchFilter() {\n    this.lastItemSK = '';\n    this.users = [];\n    this.suggestedUsers = [];\n    this.initDataTable();\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.initDataTable();\n    }\n\n    this.loaded = false;\n  }\n\n  resetFilter() {\n    if (this.searchValue !== '') {\n      this.searchValue = null;\n      this.contactID = '';\n      this.users = [];\n      this.lastItemSK = '';\n      this.suggestedUsers = [];\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  deleteUser(contactID) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (confirm('Are you sure you want to delete?') === true) {\n        yield _this3.apiService.deleteData(`contacts/delete/user/${contactID}`).subscribe( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (result) {\n            _this3.userDraw = 0;\n            _this3.lastEvaluatedKey = '';\n            _this3.dataMessage = Constants.FETCHING_DATA;\n            _this3.users = [];\n            _this3.lastItemSK = '';\n\n            _this3.initDataTable();\n\n            _this3.toastr.success('User deleted successfully');\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  getStartandEndVal() {\n    this.userStartPoint = this.userDraw * this.pageLength + 1;\n    this.userEndPoint = this.userStartPoint + this.pageLength - 1;\n  }\n\n  resetCountResult() {\n    this.userStartPoint = 1;\n    this.userEndPoint = this.pageLength;\n    this.userDraw = 0;\n  }\n\n};\n\nUsersListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HttpClient\n}];\n\nUsersListComponent = __decorate([Component({\n  selector: 'app-users-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], UsersListComponent);\nexport { UsersListComponent };","map":null,"metadata":{},"sourceType":"module"}