{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./detail-pdf.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./detail-pdf.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { AccountService } from \"src/app/services/account.service\";\nimport { ApiService } from \"src/app/services/api.service\";\nimport { ListService } from \"src/app/services/list.service\";\nimport * as html2pdf from \"html2pdf.js\";\nimport * as moment from \"moment\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { Auth } from \"aws-amplify\";\nlet DetailPdfComponent = class DetailPdfComponent {\n  constructor(listService, apiService, modalService, accountService) {\n    var _this = this;\n\n    this.listService = listService;\n    this.apiService = apiService;\n    this.modalService = modalService;\n    this.accountService = accountService;\n    this.fetchingdata = Constants.FETCHING_DATA;\n    this.settlementData = {\n      type: null,\n      entityId: null,\n      setNo: \"\",\n      txnDate: \"\",\n      fromDate: null,\n      toDate: null,\n      prStart: null,\n      prEnd: null,\n      tripIds: [],\n      trpData: [],\n      miles: {\n        tripsTotal: 0,\n        driverTotal: 0,\n        tripsLoaded: 0,\n        driverLoaded: 0,\n        tripsEmpty: 0,\n        driverEmpty: 0,\n        tripsTeam: 0,\n        driverHours: 0,\n        teamHours: 0,\n        totalHours: 0,\n        drivers: [],\n        driverLoadedTeam: 0,\n        driverEmptyTeam: 0\n      },\n      addition: [],\n      deduction: [],\n      additionTotal: 0,\n      deductionTotal: 0,\n      taxObj: {\n        gstPrcnt: 0,\n        pstPrcnt: 0,\n        hstPrcnt: 0,\n        gstAmount: 0,\n        pstAmount: 0,\n        hstAmount: 0,\n        carrLocalTax: 0,\n        carrLocalAmount: 0,\n        carrFedTax: 0,\n        carrFedAmount: 0\n      },\n      paymentTotal: 0,\n      taxes: 0,\n      subTotal: 0,\n      finalTotal: 0,\n      fuelAdd: 0,\n      fuelDed: 0,\n      status: \"unpaid\",\n      paymentLinked: false,\n      pendingPayment: 0,\n      currency: \"CAD\",\n      paymentInfo: {\n        lMiles: 0,\n        lMileTeam: 0,\n        eMileTeam: 0,\n        rate: 0,\n        eMiles: 0,\n        pRate: 0,\n        dRate: 0,\n        pType: \"\"\n      },\n      fuelIds: [],\n      fuelData: []\n    };\n    this.logoSrc = \"assets/img/logo.png\";\n    this.otherLogoSrc = \"assets/img/stl-top-logo.png\";\n    this.entityName = \"\";\n    this.operatorDriversList = [];\n    this.settledTrips = [];\n    this.selectedTrips = [];\n    this.fuelEnteries = [];\n    this.currentUser = \"\";\n    this.companyName = \"\";\n    this.companyLogo = \"\";\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      const carrierID = _this.currentUser.carrierID;\n      let result = yield _this.apiService.getData(`carriers/detail/${carrierID}`).toPromise();\n      _this.companyName = result.companyName;\n      _this.companyLogo = result.logo;\n    });\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    // settlmentDetailSection\n    this.subscription = this.listService.settlementDetails.subscribe( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (res) {\n        if (res.showModal && res.length != 0) {\n          yield _this2.getCurrentuser();\n          _this2.settlementData = res.settlementData;\n          _this2.entityName = res.entityName;\n          _this2.fuelEnteries = res.fuelEnteries;\n\n          for (let i = 0; i < _this2.settlementData.miles.drivers.length; i++) {\n            const element = _this2.settlementData.miles.drivers[i];\n\n            _this2.operatorDriversList.push(element.driverID);\n          }\n\n          if (_this2.settlementData.tripIds.length > 0) {\n            let stldTrips = encodeURIComponent(JSON.stringify(_this2.settlementData.tripIds));\n\n            _this2.fetchSettledTrips(stldTrips);\n          }\n\n          let ngbModalOptions = {\n            backdrop: \"static\",\n            keyboard: false,\n            windowClass: \"settlmentDetailSection-prog__main\"\n          };\n          res.showModal = false;\n\n          _this2.modalService.open(_this2.modalContent, ngbModalOptions).result.then(result => {}, reason => {});\n        }\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n\n  generatePDF() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var data = document.getElementById(\"settlmentDetailSection\");\n      html2pdf(data, {\n        margin: [0.5, 0, 0.5, 0],\n        pagebreak: {\n          mode: \"avoid-all\",\n          before: \"settlmentDetailSection\"\n        },\n        filename: `STL-${_this3.settlementData.setNo}.pdf`,\n        image: {\n          type: \"jpeg\",\n          quality: 0.98\n        },\n        html2canvas: {\n          scale: 2,\n          logging: true,\n          dpi: 192,\n          letterRendering: true,\n          allowTaint: true,\n          useCORS: true\n        },\n        jsPDF: {\n          unit: \"in\",\n          format: \"a4\",\n          orientation: \"landscape\"\n        }\n      });\n    })();\n  }\n\n  fetchSettledTrips(tripIds) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this4.apiService.getData(`trips/entity/settled/data/${tripIds}`).toPromise();\n      _this4.settledTrips = result;\n      let miles = 0;\n\n      for (let i = 0; i < _this4.settledTrips.length; i++) {\n        const element = _this4.settledTrips[i];\n\n        if (_this4.settlementData.deduction.length > 0) {\n          _this4.settlementData.deduction.map(dedStl => {\n            if (dedStl.tripID === element.tripID) {\n              dedStl.tripName = element.tripNo;\n            }\n          });\n        }\n\n        if (_this4.settlementData.addition.length > 0) {\n          _this4.settlementData.addition.map(dedStl => {\n            if (dedStl.tripID === element.tripID) {\n              dedStl.tripName = element.tripNo;\n            }\n          });\n        }\n\n        element.pickupLocation = \"\";\n        element.dropLocation = \"\";\n        element.carrID = [];\n        let pickCount = 1;\n        let dropCount = 1;\n        element.selected = false;\n        element.subSelected = false;\n        element.splitArr = [];\n        element.indeterminate = false;\n        element.entityMiles = 0;\n        element.entityDriver = [];\n        element.entityVehicle = [];\n        element.entityAsset = [];\n        element.entityCarrier = [];\n\n        for (let j = 0; j < element.tripPlanning.length; j++) {\n          const plan = element.tripPlanning[j];\n\n          if (_this4.settlementData.type === \"driver\" || _this4.settlementData.type === \"carrier\") {\n            if (_this4.settlementData.entityId === plan.driverID || _this4.settlementData.entityId === plan.coDriverID || _this4.settlementData.entityId === plan.carrierID) {\n              element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n            <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n              pickCount++;\n              element.entityMiles += Number(plan.miles);\n\n              if (_this4.settlementData.entityId === plan.driverID || _this4.settlementData.entityId === plan.coDriverID) {\n                if (!element.entityDriver.includes(plan.driverID)) {\n                  element.entityDriver.push(plan.driverID);\n                }\n\n                if (!element.entityDriver.includes(plan.coDriverID)) {\n                  element.entityDriver.push(plan.coDriverID);\n                }\n              }\n\n              if (!element.entityVehicle.includes(plan.vehicleID)) {\n                element.entityVehicle.push(plan.vehicleID);\n              }\n\n              if (!element.entityCarrier.includes(plan.carrierID)) {\n                element.entityCarrier.push(plan.carrierID);\n              }\n\n              for (let f = 0; f < plan.assetID.length; f++) {\n                const elemAsset = plan.assetID[f];\n\n                if (!element.entityAsset.includes(elemAsset)) {\n                  element.entityAsset.push(elemAsset);\n                }\n              }\n            }\n          } else if (_this4.settlementData.type === \"owner_operator\") {\n            if (_this4.operatorDriversList.includes(plan.driverID) || _this4.operatorDriversList.includes(plan.coDriverID)) {\n              element.pickupLocation += `${pickCount}) <strong>${plan.type}</strong>: ${plan.location} <br>\n              <u>Date</u>: ${moment(plan.date).format(\"YYYY/MM/DD\")}, <u>${plan.type === \"Pickup\" ? \"Pickup\" : \"Drop\"} Time</u>: ${plan.type === \"Pickup\" ? plan.pickupTime : plan.dropTime} <br>`;\n              pickCount++;\n              element.entityMiles += Number(plan.miles);\n\n              if (!element.entityDriver.includes(plan.driverID)) {\n                element.entityDriver.push(plan.driverID);\n              }\n\n              if (!element.entityDriver.includes(plan.coDriverID)) {\n                element.entityDriver.push(plan.coDriverID);\n              }\n\n              if (!element.entityVehicle.includes(plan.vehicleID)) {\n                element.entityVehicle.push(plan.vehicleID);\n              }\n\n              if (!element.entityCarrier.includes(plan.carrierID)) {\n                element.entityCarrier.push(plan.carrierID);\n              }\n\n              for (let f = 0; f < plan.assetID.length; f++) {\n                const elemAsset = plan.assetID[f];\n\n                if (!element.entityAsset.includes(elemAsset)) {\n                  element.entityAsset.push(elemAsset);\n                }\n              }\n            }\n          }\n\n          if (plan.carrierID !== \"\") {\n            if (!element.carrID.includes(plan.carrierID)) {\n              element.carrID.push(plan.carrierID);\n            }\n          }\n        }\n\n        if (element.split && element.split.length > 0) {\n          element.split.map(main => {\n            let arrr = {\n              selected: false,\n              splitID: main.splitID,\n              splitName: main.splitName,\n              trips: []\n            };\n\n            if (main.plan) {\n              main.plan.map(c => {\n                if (_this4.settlementData.type === \"driver\" || _this4.settlementData.type === \"carrier\") {\n                  // if (main.stlStatus.includes(entStat)) {\n                  if (_this4.settlementData.type === \"driver\") {\n                    element.tripPlanning.map(trp => {\n                      if (c === trp.planID) {\n                        if (_this4.settlementData.entityId === trp.driverID || _this4.settlementData.entityId === trp.coDriverID) {\n                          trp.planLoc = _this4.setTripLoc(trp);\n                          arrr.trips.push(trp);\n                        }\n                      }\n                    });\n                  } else if (_this4.settlementData.type === \"carrier\") {\n                    element.tripPlanning.map(trp => {\n                      if (c === trp.planID) {\n                        if (_this4.settlementData.entityId === trp.carrierID) {\n                          trp.planLoc = _this4.setTripLoc(trp);\n                          arrr.trips.push(trp);\n                        }\n                      }\n                    });\n                  } // }\n\n                } else if (_this4.settlementData.type === \"owner_operator\") {\n                  let exstPlanIDs = [];\n\n                  for (let index = 0; index < _this4.operatorDriversList.length; index++) {\n                    const drvr = _this4.operatorDriversList[index]; // entStat = `${drvr}:false`;\n                    // if (main.stlStatus.includes(entStat)) {\n\n                    element.tripPlanning.map(trp => {\n                      if (c === trp.planID) {\n                        if (!exstPlanIDs.includes(trp.planID)) {\n                          exstPlanIDs.push(trp.planID);\n\n                          if (_this4.operatorDriversList.includes(trp.driverID) || _this4.operatorDriversList.includes(trp.coDriverID)) {\n                            trp.planLoc = _this4.setTripLoc(trp);\n                            arrr.trips.push(trp);\n                          }\n                        }\n                      }\n                    }); // }\n                  }\n                }\n              });\n            }\n\n            if (arrr.trips.length > 0) {\n              element.splitArr.push(arrr);\n            }\n          });\n        }\n\n        miles += element.entityMiles;\n      }\n\n      _this4.totalMiles = miles;\n    })();\n  }\n\n  setTripLoc(trp) {\n    let planLoc = \"\";\n\n    if (trp.locMan) {\n      planLoc = `${trp.locData.addr}, ${trp.locData.ctName}, ${trp.locData.sName}, ${trp.locData.cName} ${trp.locData.zip}`;\n    } else {\n      planLoc = trp.location;\n    }\n\n    return planLoc;\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n};\n\nDetailPdfComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ApiService\n}, {\n  type: NgbModal\n}, {\n  type: AccountService\n}];\n\nDetailPdfComponent.propDecorators = {\n  modalContent: [{\n    type: ViewChild,\n    args: [\"settlmentDetail\", {\n      static: true\n    }]\n  }]\n};\nDetailPdfComponent = __decorate([Component({\n  selector: \"app-detail-pdf\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DetailPdfComponent);\nexport { DetailPdfComponent };","map":null,"metadata":{},"sourceType":"module"}