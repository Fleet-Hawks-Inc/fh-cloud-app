{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-employee-payment.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-employee-payment.component.css\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Component } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport * as moment from \"moment\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { AccountService } from \"src/app/services/account.service\";\nimport { ApiService } from \"src/app/services/api.service\";\nimport { ListService } from \"src/app/services/list.service\";\nimport { Location } from \"@angular/common\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nlet AddEmployeePaymentComponent = class AddEmployeePaymentComponent {\n  constructor(listService, route, location, router, toaster, accountService, apiService, httpClient, countryStateCity) {\n    this.listService = listService;\n    this.route = route;\n    this.location = location;\n    this.router = router;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.countryStateCity = countryStateCity;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.paymentData = {\n      currency: \"\",\n      entityId: null,\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      paymentNo: \"\",\n      payroll: {\n        type: null,\n        amount: 0,\n        hours: 0,\n        perHour: 0\n      },\n      fromDate: \"\",\n      toDate: \"\",\n      accountID: null,\n      payMode: null,\n      payModeNo: \"\",\n      payModeDate: null,\n      settledAmount: 0,\n      vacPayPer: 0,\n      vacPayAmount: 0,\n      addition: [],\n      deduction: [],\n      paymentTotal: 0,\n      additionTotal: 0,\n      deductionTotal: 0,\n      subTotal: 0,\n      taxdata: {\n        payPeriod: null,\n        stateCode: null,\n        federalCode: \"claim_code_1\",\n        provincialCode: null,\n        cpp: 0,\n        ei: 0,\n        federalTax: 0,\n        provincialTax: 0,\n        emplCPP: 0,\n        emplEI: 0\n      },\n      taxes: 0,\n      advance: 0,\n      finalTotal: 0,\n      advancePayIds: [],\n      advData: [],\n      transactionLog: []\n    };\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.employees = [];\n    this.empDetails = {\n      paymentDetails: {\n        payrollType: \"\",\n        payrollRateUnit: \"\",\n        payrollRate: \"\"\n      }\n    };\n    this.additionRowData = {\n      eventDate: null,\n      chargeName: \"\",\n      desc: \"\",\n      amount: \"\",\n      currency: \"\"\n    };\n    this.deductionRowData = {\n      eventDate: null,\n      chargeName: \"\",\n      desc: \"\",\n      amount: \"\",\n      currency: \"\"\n    };\n    this.payModeLabel = \"\";\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.submitDisabled = false;\n    this.taxErr = \"\";\n    this.advErr = \"\";\n    this.lastAdded = {\n      paymentNo: \"\",\n      additionTotal: \"\",\n      advance: \"\",\n      deductionTotal: \"\",\n      entityId: \"\",\n      finalTotal: \"\",\n      payMode: \"\",\n      payModeDate: \"\",\n      payModeNo: \"\",\n      taxes: \"\",\n      txnDate: \"\"\n    };\n    this.lastExist = false;\n    this.empdetail = {\n      companyName: \"\",\n      contactID: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      userAccount: {\n        department: \"\",\n        designation: \"\"\n      }\n    };\n    this.advancePayments = [];\n    this.accList = [];\n    this.payPeriods = [];\n    this.states = [];\n    this.claimCodes = [];\n    this.provincalClaimCodes = [];\n    this.showModal = false;\n    this.employeesObj = {};\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.subscription = _this.listService.paymentSaveList.subscribe(res => {\n        if (res.openFrom === \"addForm\") {\n          _this.addRecord();\n        }\n      });\n      _this.paymentID = _this.route.snapshot.params[\"paymentID\"];\n\n      if (_this.paymentID) {\n        _this.fetchPaymentDetail();\n      }\n\n      _this.fetchEmployees();\n\n      _this.listService.fetchChartAccounts();\n\n      _this.accounts = _this.listService.accountsList;\n\n      _this.fetchPayPeriods();\n\n      yield _this.getStates();\n\n      _this.fetchClaimCodes();\n    })();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchEmployees() {\n    this.apiService.getData(`contacts/get/all/employees`).subscribe(result => {\n      this.employees = result;\n      this.employeesObj = result.reduce((a, b) => {\n        return a[b[\"contactID\"]] = b[\"isDeleted\"] == 1 ? b[\"firstName\"] + \" \" + b[\"lastName\"] + \"  - Deleted\" : b[\"firstName\"] + \" \" + b[\"lastName\"], a;\n      }, {});\n    });\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/fetch/list`).subscribe(res => {\n      this.accounts = res;\n    });\n  }\n\n  refreshAccount() {\n    this.listService.fetchChartAccounts();\n  }\n\n  fetchEmployeDetail() {\n    this.paymentData.payroll.type = null;\n    this.paymentData.payroll.amount = 0;\n    this.paymentData.payroll.perHour = 0;\n    this.paymentData.paymentTotal = 0;\n    this.paymentData.settledAmount = 0;\n    this.paymentData.finalTotal = 0;\n    this.paymentData.subTotal = 0;\n    this.paymentData.advance = 0;\n\n    if (this.paymentData.entityId) {\n      this.apiService.getData(`contacts/detail/${this.paymentData.entityId}`).subscribe(result => {\n        this.empDetails = result.Items[0];\n        let paymentInfo = this.empDetails.paymentDetails;\n        this.paymentData.currency = paymentInfo.payrollRateUnit ? paymentInfo.payrollRateUnit : \"CAD\";\n\n        if (paymentInfo.payrollType === \"Hours\") {\n          this.paymentData.payroll.type = \"hourly\";\n          this.paymentData.payroll.amount = Number(paymentInfo.payrollRate) * Number(this.paymentData.payroll.hours);\n          this.paymentData.payroll.perHour = Number(paymentInfo.payrollRate);\n        } else if (paymentInfo.payrollType === \"Flat\") {\n          this.paymentData.payroll.type = \"flat\";\n          this.paymentData.payroll.amount = Number(paymentInfo.payrollRate); // this.paymentData.paymentTotal = this.paymentData.payroll.amount;\n\n          this.paymentData.settledAmount = this.paymentData.payroll.amount;\n          this.paymentData.paymentTotal = Number(this.paymentData.settledAmount) + Number(this.paymentData.vacPayAmount);\n          this.paymentData.finalTotal = this.paymentData.payroll.amount;\n          this.paymentData.subTotal = this.paymentData.payroll.amount;\n        }\n      });\n      this.fetchLastAdded();\n      this.fetchAdvancePayments();\n      this.calculatePayroll();\n    }\n  }\n\n  EmpRateCalc() {\n    this.paymentData.payroll.amount = Number(this.paymentData.payroll.perHour) * Number(this.paymentData.payroll.hours); // this.paymentData.paymentTotal = this.paymentData.payroll.amount;\n\n    this.paymentData.settledAmount = this.paymentData.payroll.amount;\n    this.paymentData.paymentTotal = Number(this.paymentData.settledAmount) + Number(this.paymentData.vacPayAmount);\n    this.calculateFinalTotal();\n  }\n\n  empFlatRate() {\n    this.paymentData.payroll.amount = Number(this.paymentData.payroll.amount); // this.paymentData.paymentTotal = this.paymentData.payroll.amount;\n\n    this.paymentData.settledAmount = this.paymentData.payroll.amount;\n    this.paymentData.paymentTotal = Number(this.paymentData.settledAmount) + Number(this.paymentData.vacPayAmount);\n    this.calculateFinalTotal();\n    this.calculatePayroll();\n  }\n\n  addAdditionalExp() {\n    if (this.additionRowData.eventDate !== null && this.additionRowData.chargeName !== \"\" && this.additionRowData.amount !== \"\" && this.paymentData.currency !== \"\") {\n      this.additionRowData.currency = this.paymentData.currency;\n      this.additionRowData.amount = Number(this.additionRowData.amount);\n      this.paymentData.addition.push(this.additionRowData);\n      this.additionRowData = {\n        eventDate: null,\n        chargeName: \"\",\n        desc: \"\",\n        amount: \"\",\n        currency: this.paymentData.currency\n      };\n      this.calculateAddTotal();\n    }\n  }\n\n  adddeductionExp() {\n    if (this.deductionRowData.eventDate != null && this.deductionRowData.chargeName != \"\" && this.deductionRowData.amount != \"\" && this.paymentData.currency !== \"\") {\n      this.deductionRowData.currency = this.paymentData.currency;\n      this.deductionRowData.amount = Number(this.deductionRowData.amount);\n      this.paymentData.deduction.push(this.deductionRowData);\n      this.deductionRowData = {\n        eventDate: null,\n        chargeName: \"\",\n        desc: \"\",\n        amount: \"\",\n        currency: this.paymentData.currency\n      };\n      this.calculateDedTotal();\n    }\n  }\n\n  calculateAddTotal() {\n    this.paymentData.additionTotal = 0;\n\n    for (let i = 0; i < this.paymentData.addition.length; i++) {\n      const element = this.paymentData.addition[i];\n      this.paymentData.additionTotal += parseFloat(element.amount);\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  calculateDedTotal() {\n    this.paymentData.deductionTotal = 0;\n\n    for (let i = 0; i < this.paymentData.deduction.length; i++) {\n      const element = this.paymentData.deduction[i];\n      this.paymentData.deductionTotal += parseFloat(element.amount);\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  delRow(index, type) {\n    if (type === \"additional\") {\n      this.paymentData.addition.splice(index, 1);\n      this.calculateAddTotal();\n    } else {\n      this.paymentData.deduction.splice(index, 1);\n      this.calculateDedTotal();\n    }\n  }\n\n  changePaymentMode(type) {\n    let label = \"\";\n\n    if (type == \"cash\") {\n      label = \"Cash\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"cheque\") {\n      label = \"Cheque\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"eft\") {\n      label = \"EFT\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"credit_card\") {\n      label = \"Credit Card\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"debit_card\") {\n      label = \"Debit Card\";\n      this.paymentData.payModeNo = \"\";\n    } else if (type == \"demand_draft\") {\n      label = \"Demand Draft\";\n      this.paymentData.payModeNo = \"\";\n    }\n\n    this.payModeLabel = label;\n    this.paymentData.payModeDate = null;\n  }\n\n  showAcModal() {\n    $(\"#addAccountModal\").modal(\"show\");\n  }\n\n  addRecord() {\n    if (this.paymentData.settledAmount <= 0) {\n      this.toaster.error(\"Please enter valid amount\");\n      return false;\n    }\n\n    this.submitDisabled = true;\n    this.accountService.postData(\"employee-payments\", this.paymentData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Employee payment added successfully.\");\n        let obj = {\n          type: '',\n          openFrom: ''\n        };\n        this.listService.triggerPaymentSave(obj);\n        let payObj = {\n          showModal: false,\n          page: \"\"\n        };\n        this.listService.openPaymentChequeModal(payObj);\n        this.cancel();\n      }\n    });\n  }\n\n  calculateFinalTotal() {\n    this.paymentData.subTotal = Number(this.paymentData.subTotal);\n    this.paymentData.taxes = Number(this.paymentData.taxes);\n    this.paymentData.advance = Number(this.paymentData.advance);\n    this.paymentData.settledAmount = Number(this.paymentData.settledAmount);\n    this.paymentData.additionTotal = Number(this.paymentData.additionTotal);\n    this.paymentData.deductionTotal = Number(this.paymentData.deductionTotal);\n    this.paymentData.paymentTotal = Number(this.paymentData.vacPayAmount) + Number(this.paymentData.settledAmount);\n    this.paymentData.paymentTotal = Number(this.paymentData.paymentTotal);\n    this.paymentData.subTotal = this.paymentData.paymentTotal + this.paymentData.additionTotal - this.paymentData.deductionTotal;\n    this.paymentData.finalTotal = this.paymentData.subTotal - this.paymentData.taxes - this.paymentData.taxdata.cpp - this.paymentData.taxdata.ei - this.paymentData.advance;\n    this.paymentData.subTotal = Number(this.paymentData.subTotal.toFixed(2));\n    this.paymentData.finalTotal = Number(this.paymentData.finalTotal.toFixed(2));\n  }\n\n  fetchPaymentDetail() {\n    this.accountService.getData(`employee-payments/detail/${this.paymentID}`).subscribe(result => {\n      this.paymentData = result[0];\n      this.submitDisabled = true;\n      this.assignProvincalCode();\n    });\n  }\n\n  checkInput(type) {\n    if (type == \"tax\") {\n      if (Number(this.paymentData.taxes) > Number(this.paymentData.subTotal)) {\n        this.taxErr = \"Tax amount should be less than sub total\";\n        this.submitDisabled = true;\n      } else {\n        this.taxErr = \"\";\n        this.submitDisabled = false;\n      }\n    } else if (type == \"advance\") {\n      if (Number(this.paymentData.advance) > Number(this.paymentData.subTotal)) {\n        this.advErr = \"Advance amount should be less than sub total\";\n        this.submitDisabled = true;\n      } else {\n        this.advErr = \"\";\n        this.submitDisabled = false;\n      }\n    }\n  }\n\n  fetchLastAdded() {\n    this.lastExist = false;\n    this.accountService.getData(`employee-payments/last/added/${this.paymentData.entityId}`).subscribe(result => {\n      if (result.length > 0) {\n        this.lastExist = true;\n        this.fetchEmpDetail(result[0].entityId);\n      }\n\n      this.lastAdded = result[0];\n    });\n  }\n\n  fetchEmpDetail(empID) {\n    this.apiService.getData(`contacts/minor/detail/${empID}`).subscribe(result => {\n      this.empdetail = result.Items[0];\n    });\n  }\n\n  fetchAdvancePayments() {\n    this.advancePayments = [];\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.accountService.getData(`advance/entity/${this.paymentData.entityId}?from=null&to=null`).subscribe(result => {\n      if (result.length === 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.advancePayments = result;\n      this.advancePayments.map(v => {\n        v.selected = false;\n\n        if (v.payMode) {\n          v.payMode = v.payMode.replace(\"_\", \" \");\n        }\n\n        v.fullPayment = false;\n        v.paidAmount = 0;\n        v.paidStatus = false;\n        v.status = v.status.replace(\"_\", \" \");\n        v.errText = \"\";\n        v.prevPaidAmount = Number(v.amount) - Number(v.pendingPayment);\n        v.prevPaidAmount = v.prevPaidAmount.toFixed(2);\n      });\n    });\n  }\n\n  selectedAdvancepayments() {\n    this.paymentData.advancePayIds = [];\n    this.paymentData.advData = [];\n\n    for (const element of this.advancePayments) {\n      if (element.selected) {\n        if (!this.paymentData.advancePayIds.includes(element.paymentID)) {\n          let obj = {\n            paymentID: element.paymentID,\n            status: element.status,\n            paidAmount: element.status === \"not_deducted\" ? element.paidAmount : Number(element.amount) - Number(element.pendingPayment),\n            totalAmount: element.status === \"not_deducted\" ? element.amount : element.pendingPayment,\n            pendingAmount: element.pendingPayment\n          };\n          this.paymentData.advancePayIds.push(element.paymentID);\n          this.paymentData.advData.push(obj);\n        }\n      }\n    }\n\n    this.paymentCalculation();\n  }\n\n  assignFullPayment(index, data) {\n    if (data.fullPayment) {\n      this.advancePayments[index].paidAmount = data.pendingPayment;\n      this.advancePayments[index].paidStatus = true;\n    } else {\n      this.advancePayments[index].paidAmount = 0;\n      this.advancePayments[index].paidStatus = false;\n    }\n\n    this.selectedAdvancepayments();\n    this.paymentCalculation();\n  }\n\n  paymentCalculation() {\n    this.paymentData.subTotal = 0;\n    this.paymentData.finalTotal = 0;\n    this.paymentData.advance = 0;\n    let selectCount = 0;\n\n    for (const element of this.advancePayments) {\n      if (element.selected) {\n        if (Number(element.paidAmount > 0)) {\n          selectCount += 1;\n        }\n\n        this.paymentData.advance += Number(element.paidAmount);\n        this.paymentData.advData.map(v => {\n          if (element.paymentID === v.paymentID) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.pendingPayment) - Number(element.paidAmount);\n\n            if (Number(element.paidAmount) === Number(element.pendingPayment)) {\n              v.status = \"deducted\";\n            } else if (Number(element.paidAmount) < Number(element.pendingPayment)) {\n              v.status = \"partially_deducted\";\n            } else {\n              v.status = \"not_deducted\";\n            }\n\n            v.paidAmount = v.paidAmount.toFixed(2);\n          }\n        });\n      }\n    }\n\n    if (selectCount > 0) {\n      this.submitDisabled = false;\n    } else {\n      this.submitDisabled = true;\n    }\n\n    this.paymentData.advance = this.paymentData.advance ? Number(this.paymentData.advance) : 0;\n    this.paymentData.taxes = this.paymentData.taxes ? Number(this.paymentData.taxes) : 0;\n    this.paymentData.paymentTotal = this.paymentData.paymentTotal ? Number(this.paymentData.paymentTotal) : 0;\n    this.paymentData.subTotal = this.paymentData.paymentTotal + this.paymentData.additionTotal - this.paymentData.deductionTotal;\n    this.paymentData.finalTotal = this.paymentData.subTotal - this.paymentData.taxes - this.paymentData.advance;\n  }\n\n  openPayrollModel() {\n    $(\"#payrollModal\").modal(\"show\");\n  }\n\n  calculatePayroll() {\n    this.paymentData.taxdata.cpp = 0;\n    this.paymentData.taxdata.ei = 0;\n    this.paymentData.taxdata.federalTax = 0;\n    this.paymentData.taxdata.provincialTax = 0;\n    this.paymentData.taxdata.emplCPP = 0;\n    this.paymentData.taxdata.emplEI = 0;\n    this.paymentData.taxes = 0;\n\n    if (!this.paymentID) {\n      if (this.paymentData.taxdata.payPeriod && this.paymentData.taxdata.stateCode) {\n        if (this.paymentData.subTotal > 0) {\n          this.accountService.getData(`employee-payments/payroll/calculate?amount=${this.paymentData.subTotal}&pay-period=${this.paymentData.taxdata.payPeriod}&state=${this.paymentData.taxdata.stateCode}`).subscribe(result => {\n            this.paymentData.taxdata.cpp = result.cpp;\n            this.paymentData.taxdata.ei = result.insurance;\n            this.paymentData.taxdata.federalTax = result.federalTax;\n            this.paymentData.taxdata.provincialTax = result.provncTax;\n            this.paymentData.taxdata.emplCPP = result.employerCpp;\n            this.paymentData.taxdata.emplEI = result.employerEI;\n            this.paymentData.taxes = this.paymentData.taxdata.federalTax + this.paymentData.taxdata.provincialTax;\n            this.paymentData.taxes = Number(this.paymentData.taxes.toFixed(2));\n            this.calculateFinalTotal();\n          });\n        }\n      } else {\n        this.resetPayrollCalculations();\n        this.calculateFinalTotal();\n      }\n    }\n  }\n\n  fetchPayPeriods() {\n    this.httpClient.get(\"assets/jsonFiles/payroll/payPeriods.json\").subscribe(data => {\n      this.payPeriods = data;\n    });\n  }\n\n  fetchClaimCodes() {\n    this.httpClient.get(\"assets/jsonFiles/payroll/claimCodes.json\").subscribe(data => {\n      this.claimCodes = data;\n    });\n  }\n\n  getStates() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.states = yield _this2.countryStateCity.GetStatesByCountryCode([\"CA\"]);\n    })();\n  }\n\n  assignProvincalCode() {\n    if (this.paymentData.taxdata.stateCode == null || this.paymentData.taxdata.stateCode == undefined) {\n      this.resetPayrollCalculations();\n    }\n\n    this.provincalClaimCodes = [];\n    this.claimCodes[1].map(v => {\n      if (this.paymentData.taxdata.stateCode === v.stateCode) {\n        this.provincalClaimCodes = v.codes;\n      }\n    });\n    this.paymentData.taxdata.provincialCode = \"claim_code_1\";\n    this.calculatePayroll();\n    this.calculateFinalTotal();\n  }\n\n  resetPayrollCalculations() {\n    this.paymentData.taxdata.cpp = 0;\n    this.paymentData.taxdata.ei = 0;\n    this.paymentData.taxdata.federalTax = 0;\n    this.paymentData.taxdata.provincialTax = 0;\n    this.paymentData.taxdata.emplCPP = 0;\n    this.paymentData.taxdata.emplEI = 0;\n    this.paymentData.taxes = this.paymentData.taxdata.federalTax + this.paymentData.taxdata.provincialTax;\n    this.calculateFinalTotal();\n  }\n\n  showCheque() {\n    this.showModal = true;\n    let obj = {\n      entityId: this.paymentData.entityId,\n      chequeDate: this.paymentData.payModeDate,\n      chequeAmount: this.paymentData.finalTotal,\n      type: \"employee\",\n      chequeNo: this.paymentData.payModeNo,\n      currency: this.paymentData.currency,\n      formType: this.paymentID ? \"edit\" : \"add\",\n      showModal: this.showModal,\n      fromDate: this.paymentData.fromDate,\n      toDate: this.paymentData.toDate,\n      vacPayPer: this.paymentData.vacPayPer,\n      vacPayAmount: this.paymentData.vacPayAmount,\n      totalAmount: this.paymentData.subTotal,\n      settledAmount: this.paymentData.settledAmount,\n      taxdata: this.paymentData.taxdata,\n      finalAmount: this.paymentData.finalTotal,\n      advance: this.paymentData.advance,\n      txnDate: this.paymentData.txnDate,\n      page: \"addForm\"\n    };\n    this.listService.openPaymentChequeModal(obj);\n  }\n\n  calculateVacationPay() {\n    this.paymentData.vacPayAmount = this.paymentData.vacPayPer / 100 * this.paymentData.settledAmount;\n\n    if (this.paymentData.taxdata.payPeriod && this.paymentData.taxdata.stateCode) {\n      this.resetPayrollCalculations();\n      this.calculatePayroll();\n    } else {\n      this.calculateFinalTotal();\n    }\n  }\n\n};\n\nAddEmployeePaymentComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Location\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}, {\n  type: ApiService\n}, {\n  type: HttpClient\n}, {\n  type: CountryStateCityService\n}];\n\nAddEmployeePaymentComponent = __decorate([Component({\n  selector: \"app-add-employee-payment\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddEmployeePaymentComponent);\nexport { AddEmployeePaymentComponent };","map":null,"metadata":{},"sourceType":"module"}