{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./sales-order-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./sales-order-detail.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService, ApiService } from 'src/app/services';\nimport * as html2pdf from \"html2pdf.js\";\nlet SalesOrderDetailComponent = class SalesOrderDetailComponent {\n  constructor(accountService, modalService, apiService, toaster, route) {\n    this.accountService = accountService;\n    this.modalService = modalService;\n    this.apiService = apiService;\n    this.toaster = toaster;\n    this.route = route;\n    this.assetUrl = this.apiService.AssetUrl;\n    this.carrierID = '';\n    this.docs = [];\n    this.customersObjects = {};\n    this.emailDisabled = false;\n    this.isPDF = false;\n  }\n\n  ngOnInit() {\n    this.saleID = this.route.snapshot.params[`saleID`];\n\n    if (this.saleID) {\n      this.fetchSaleOrder();\n    }\n  }\n\n  fetchSaleOrder() {\n    this.accountService.getData(`sales-orders/detail/${this.saleID}`).subscribe(res => {\n      let result = res[0];\n      this.carrierID = result.pk;\n      this.txnDate = result.txnDate;\n      this.customerName = result.cusInfo.cName;\n      this.workEmail = result.cusInfo.workEmail;\n      this.workPhone = result.cusInfo.workPhone;\n      this.address = result.cusInfo.address;\n      this.finalTotal = result.total.finalTotal;\n      this.currency = result.currency;\n      this.shipDate = result.shipDate;\n      this.sRef = result.sRef;\n      this.salePerson = result.salePerson;\n      this.remarks = result.remarks;\n      this.sOrderDetails = result.sOrderDetails;\n      this.status = result.status;\n      this.sOrNo = result.sOrNo;\n      this.isPDF = true;\n\n      if (result.docs.length > 0) {\n        result.docs.forEach(x => {\n          let obj = {};\n\n          if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n            obj = {\n              imgPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              docPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          } else {\n            obj = {\n              imgPath: \"assets/img/icon-pdf.png\",\n              docPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          }\n\n          this.docs.push(obj);\n        });\n      }\n    });\n  }\n\n  sendConfirmationEmail() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.emailDisabled = true;\n      let result = yield _this.accountService.getData(`sales-orders/send/confirmation-email/${_this.saleID}`).toPromise();\n      _this.emailDisabled = false;\n\n      if (result) {\n        _this.status = 'sent';\n\n        _this.toaster.success(\"Email sent successfully\");\n      } else {\n        _this.toaster.error(\"Something went wrong.\");\n      }\n    })();\n  }\n\n  generatePDF() {\n    var data = document.getElementById(\"print_sale\");\n    html2pdf(data, {\n      margin: 0.15,\n      filename: \"sale-order.pdf\",\n      image: {\n        type: \"jpeg\",\n        quality: 0.98\n      },\n      html2canvas: {\n        dpi: 300,\n        letterRendering: true,\n        allowTaint: true,\n        useCORS: true\n      },\n      jsPDF: {\n        unit: \"in\",\n        format: \"a4\",\n        orientation: \"portrait\"\n      }\n    });\n    this.salePrev.close();\n  }\n\n  openModal() {\n    let ngbModalOptions = {\n      keyboard: false,\n      backdrop: \"static\",\n      windowClass: \"preview-sale-order\"\n    };\n    this.salePrev = this.modalService.open(this.previewSaleOrder, ngbModalOptions);\n  }\n\n  deleteDocument(name, index) {\n    this.accountService.deleteData(`sales-orders/uploadDelete/${this.saleID}/${name}`).subscribe(result => {\n      this.docs.splice(index, 1);\n      this.toaster.success(\"Attachment deleted successfully.\");\n    });\n  }\n\n};\n\nSalesOrderDetailComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: NgbModal\n}, {\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}];\n\nSalesOrderDetailComponent.propDecorators = {\n  previewSaleOrder: [{\n    type: ViewChild,\n    args: [\"previewSaleOrder\", {\n      static: true\n    }]\n  }]\n};\nSalesOrderDetailComponent = __decorate([Component({\n  selector: 'app-sales-order-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SalesOrderDetailComponent);\nexport { SalesOrderDetailComponent };","map":null,"metadata":{},"sourceType":"module"}