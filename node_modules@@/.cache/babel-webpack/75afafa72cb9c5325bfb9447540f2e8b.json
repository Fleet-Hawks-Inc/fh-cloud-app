{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./vehicle-dash-cam-tracker.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./vehicle-dash-cam-tracker.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MapInfoWindow } from '@angular/google-maps';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute } from '@angular/router';\nimport { ReactiveFormConfig, RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\nimport { MessageService } from 'primeng/api';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ApiService } from 'src/app/services';\nimport { DashCamLocationStreamService } from 'src/app/services/dash-cam-location-stream.service';\nlet VehicleDashCamTrackerComponent = class VehicleDashCamTrackerComponent {\n  constructor(route, webSocket, apiService, messageService, formBuilder, _sanitizer) {\n    this.route = route;\n    this.webSocket = webSocket;\n    this.apiService = apiService;\n    this.messageService = messageService;\n    this.formBuilder = formBuilder;\n    this._sanitizer = _sanitizer;\n    this.messages = [];\n    this.destroyed$ = new Subject();\n    this.vehicleDetails = undefined;\n    this.vehicleId = undefined;\n    this.width = \"100%\";\n    this.height = \"100%\";\n    this.isOnline = false;\n    this.center = {\n      lat: 48.48248695279594,\n      lng: -99.0688673798094\n    };\n    this.token = undefined;\n    this.loaded = false;\n    this.showLiveFeed = false;\n    this.deviceSerial = undefined;\n    this.deviceDetails = undefined;\n    this.deviceInfo = {\n      deviceType: '',\n      deviceId: '',\n      deviceSrNo: '',\n      email: ''\n    };\n    this.infoDetail = 'Vehicle is Offline!!';\n    this.vehicleMarkerOptions = {\n      draggable: false,\n      icon: 'assets/live-location-icon.png'\n    };\n    this.mapOptions = {\n      zoomControl: true,\n      mapTypeControl: true,\n      streetViewControl: false,\n      fullscreenControl: true,\n      zoom: 15,\n      mapId: '620eb1a41a9e36d4',\n      zoomControlOptions: {\n        position: google.maps.ControlPosition.RIGHT_TOP\n      },\n      center: this.center\n    };\n    this.durations = [{\n      duration: '1d',\n      name: '1 day'\n    }, {\n      duration: '3d',\n      name: '3 days'\n    }, {\n      duration: '7d',\n      name: '1 week'\n    }, {\n      duration: '15d',\n      name: '15 days'\n    }, {\n      duration: '30d',\n      name: '1 month'\n    }, {\n      duration: '3m',\n      name: '3 months'\n    }, {\n      duration: '6m',\n      name: '6 months'\n    }];\n    this.display = false;\n    this.locationLink = undefined;\n    this.deviceSerial = this.route.snapshot.params.deviceSerial;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      ReactiveFormConfig.set({\n        'validationMessage': {\n          \"required\": \"This field is required\",\n          \"email\": \"Email is invalid.\"\n        }\n      });\n      _this.userFormGroup = _this.formBuilder.group({\n        duration: ['', RxwebValidators.required()],\n        email: ['', [RxwebValidators.email(), RxwebValidators.required()]]\n      }); // Extract query parameters\n\n      _this.extractQueryParams();\n\n      yield _this.getVehicleDetails(); // get last location\n\n      yield _this.getLastLocation();\n      yield _this.checkDeviceStatus();\n    })();\n  }\n\n  checkDeviceStatus() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.apiResponse && _this2.apiResponse.errorCode) {\n        _this2.messageService.add({\n          severity: 'error',\n          summary: 'Unable to connect to Vehicle. ',\n          detail: 'Please try after some time.'\n        });\n\n        _this2.loaded = false;\n        _this2.isOnline = false;\n      }\n\n      if (_this2.apiResponse) {\n        _this2.loaded = true;\n        _this2.mapOptions.center = {\n          lat: _this2.apiResponse.lng,\n          lng: _this2.apiResponse.lat\n        };\n\n        _this2.connectToWSServer(); // this.updateLastLocation();\n\n      }\n    })();\n  }\n\n  extractQueryParams() {\n    this.route.queryParams.subscribe(params => {\n      this.vehicleId = params.vehicleId;\n    });\n  }\n\n  getVehicleDetails() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.apiService.getData(\"vehicles/\" + _this3.vehicleId).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (vehicleResult) {\n          _this3.vehicleDetails = vehicleResult;\n          vehicleResult = vehicleResult.Items[0]; // Check if DashCam is added to enable Share Live location button\n\n          if (vehicleResult.deviceInfo && vehicleResult.deviceInfo.length > 0) {\n            for (const device of vehicleResult.deviceInfo) {\n              if (device.deviceType === \"DashCam\") {\n                _this3.deviceInfo.deviceId = device.deviceId;\n                _this3.deviceInfo.deviceSrNo = device.deviceSrNo;\n                _this3.deviceInfo.deviceType = device.deviceType;\n              }\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  connectToWSServer() {\n    this.webSocket.connect(this.apiResponse.usage, this.apiResponse.salt, this.apiResponse.token).pipe(takeUntil(this.destroyed$)).subscribe(message => {\n      this.deviceDetails = message;\n\n      if (message.action === '80000') {\n        this.messageService.add({\n          severity: 'info',\n          summary: 'Connected to server.'\n        });\n      }\n\n      if (message.action === \"80003\" && message.payload.deviceID === this.deviceSerial) {\n        this.isOnline = true;\n        this.deviceDetails = message.payload;\n        this.messages.push(message);\n\n        if (this.messages.length === 1) {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Vehicle is online.'\n          });\n        }\n\n        this.center = {\n          lat: parseFloat(message.payload.location.latitude),\n          lng: parseFloat(message.payload.location.longitude)\n        };\n        this.mapOptions.zoom = 17;\n        this.apiResponse.speed = parseFloat(message.payload.location.speed).toFixed(2) || 0.0;\n        this.apiResponse.networkType = this.getNetwork(message.payload.mobile.type);\n      }\n    });\n  }\n\n  getLastLocation() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.apiResponse = yield _this4.apiService.getData(`location/dashcam/get/${_this4.deviceSerial}`).toPromise();\n    })();\n  }\n\n  refresh() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.getLastLocation();\n      yield _this5.checkDeviceStatus();\n    })();\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n  }\n\n  openInfoWindow(marker) {\n    if (this.loaded && this.isOnline) {\n      this.infoDetail = `<b>Vehicle Name : ${this.vehicleDetails.Items[0].plateNumber}</b><br><br>`;\n      this.infoDetail += `Device Serial/ID: ${this.deviceSerial}<br><br>`;\n      this.infoDetail += `Device Time: ${this.deviceDetails.dtu || 'NA'}<br><br>`;\n\n      if (this.apiResponse.speed) {\n        this.infoDetail += `Speed : ${this.deviceDetails.location.speed || 'NA'} km/h<br><br>`;\n      }\n\n      if (this.apiResponse.networkType) {\n        this.infoDetail += `Network : ${this.apiResponse.networkType}`;\n      }\n    } else {\n      this.infoDetail = \"Device is offline.\";\n    }\n\n    this.infoWindow.open(marker);\n  }\n\n  getNetwork(networkType) {\n    switch (networkType) {\n      case '-1':\n        return 'Offline';\n\n      case '0':\n        return 'Unknown';\n\n      case '3':\n        return '2G';\n\n      case '4':\n        return '3G';\n\n      case '5':\n        return '4G';\n\n      default:\n        return undefined;\n    }\n  }\n\n  shareLocation() {\n    this.display = true;\n  }\n\n  shareLocationLink() {\n    const data = {\n      \"deviceSerialNo\": this.deviceInfo.deviceSrNo.split('#')[1],\n      \"vehicleID\": this.vehicleId,\n      \"vehicleName\": this.vehicleDetails.Items[0].plateNumber,\n      \"duration\": this.selectedDuration,\n      \"email\": this.deviceInfo.email\n    };\n    this.apiService.postData('location/share/vehicle', data, false).subscribe(resultData => {\n      if (resultData) {\n        this.locationLink = resultData.locationPageURL;\n      }\n    });\n  }\n\n  onCopyFailure() {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Unable to copy link.',\n      detail: 'Please copy it manually.'\n    });\n  }\n\n  copied(event) {\n    this.messageService.add({\n      severity: 'info',\n      summary: 'Link copied to clipboard.',\n      detail: 'This link will be valid for selected duration.'\n    });\n  }\n  /**\r\n   * Open Live View popup.\r\n   * @param content\r\n   */\n\n\n  openLiveView() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const deviceId = _this6.deviceInfo.deviceSrNo.split('#')[1];\n\n      const response = yield _this6.apiService.getData(`vehicles/dashCam/liveFeed/${deviceId}`).toPromise();\n      _this6.liveFeedUrl = _this6._sanitizer.bypassSecurityTrustResourceUrl(response.feedUrl);\n      _this6.liveStreamVehicle = `(${_this6.deviceInfo.deviceId})`;\n      _this6.showLiveFeed = true;\n      setTimeout(() => {\n        _this6.showLiveFeed = false;\n      }, 60000);\n    })();\n  }\n\n};\n\nVehicleDashCamTrackerComponent.ctorParameters = () => [{\n  type: ActivatedRoute\n}, {\n  type: DashCamLocationStreamService\n}, {\n  type: ApiService\n}, {\n  type: MessageService\n}, {\n  type: RxFormBuilder\n}, {\n  type: DomSanitizer\n}];\n\nVehicleDashCamTrackerComponent.propDecorators = {\n  infoWindow: [{\n    type: ViewChild,\n    args: [MapInfoWindow]\n  }]\n};\nVehicleDashCamTrackerComponent = __decorate([Component({\n  selector: 'app-vehicle-dash-cam-tracker',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [MessageService],\n  styles: [__NG_CLI_RESOURCE__1]\n})], VehicleDashCamTrackerComponent);\nexport { VehicleDashCamTrackerComponent };","map":null,"metadata":{},"sourceType":"module"}