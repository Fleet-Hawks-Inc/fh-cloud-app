{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-service.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-service.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ApiService } from \"../../../../../services\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { from, Subject } from \"rxjs\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { NgbCalendar, NgbDateAdapter } from \"@ng-bootstrap/ng-bootstrap\";\nimport { HereMapService } from \"../../../../../services\";\nimport { ListService } from \"../../../../../services/list.service\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ModalService } from \"../../../../../services/modal.service\";\nimport { map } from \"rxjs/operators\";\nlet AddServiceComponent = class AddServiceComponent {\n  constructor(apiService, route, router, toastr, spinner, ngbCalendar, dateAdapter, hereMap, domSanitizer, listService, modalService, modalServiceOwn) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.ngbCalendar = ngbCalendar;\n    this.dateAdapter = dateAdapter;\n    this.hereMap = hereMap;\n    this.domSanitizer = domSanitizer;\n    this.listService = listService;\n    this.modalService = modalService;\n    this.modalServiceOwn = modalServiceOwn;\n    this.takeUntil$ = new Subject();\n    this.logurl = this.apiService.AssetUrl;\n    this.isSubmitted = false;\n    this.vehicles = [];\n    this.assets = [];\n    this.tasks = [];\n    this.taskData = [];\n    this.reminders = [];\n    this.inventory = [];\n    this.selectedTasks = [];\n    this.selectedParts = [];\n    this.selectedIssues = [];\n    this.subTotal = 0; // private allServiceTasks = [];\n\n    this.removeTask = false;\n    this.imageError = \"\";\n    this.fileName = \"\";\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.submitDisabled = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.serviceData = {\n      unitType: \"vehicle\",\n      reference: `Ref-${new Date().getTime()}`,\n      unitID: \"\",\n      odometer: \"\",\n      completionDate: \"\",\n      vendorID: \"\",\n      description: \"\",\n      taskIds: [],\n      allServiceTasks: {\n        serviceTaskList: [],\n        subTotal: 0,\n        discountPercent: 0,\n        discountAmount: 0,\n        taxPercent: 0,\n        taxAmount: 0,\n        total: 0,\n        currency: \"CAD\"\n      },\n      allServiceParts: {\n        servicePartsList: [],\n        totalQuantity: 0,\n        subTotal: 0,\n        discountPercent: 0,\n        discountAmount: 0,\n        taxPercent: 0,\n        taxAmount: 0,\n        total: 0,\n        currency: \"CAD\"\n      },\n      charges: {\n        discountUnit: '%',\n        discount: 0,\n        taxes: [{\n          name: \"GST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }, {\n          name: \"PST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }, {\n          name: \"HST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }]\n      },\n      total: {\n        subTotal: 0,\n        taxes: 0,\n        finalTotal: 0\n      },\n      selectedIssues: [],\n      location: \"\",\n      geoCords: {\n        lat: \"\",\n        lng: \"\"\n      },\n      uploadedPhotos: [],\n      uploadedDocs: [],\n      stateID: null,\n      exempt: true\n    };\n    this.uploadedPhotos = [];\n    this.uploadedDocs = [];\n    this.totalLabors = 0;\n    this.totalQuantity = 0;\n    this.totalPartsPrice = 0;\n    this.totalTasksAmount = \"\";\n    this.totalPartsAmount = \"\";\n    this.tasksObject = {};\n    this.searchTerm = new Subject();\n    this.newCoords = [];\n    this.partType = \"existing\";\n    this.inventoryItems = [];\n    this.partData = {\n      partNumber: undefined,\n      preferredVendorID: undefined,\n      quantity: null,\n      itemID: \"\",\n      itemName: \"\"\n    };\n    this.itemData = {\n      category: undefined,\n      itemName: \"\",\n      cost: \"\",\n      costUnit: undefined,\n      warehouseID: undefined\n    };\n    this.itemGroups = [];\n    this.categoryData = {\n      name: \"\",\n      description: \"\"\n    };\n    this.warehouses = [];\n    this.existingItemQuantity = null;\n    this.inventoryQuantity = {};\n    this.savedIssues = [];\n    this.logImages = [];\n    this.logDocs = [];\n    this.existingPhotos = [];\n    this.existingDocs = [];\n    this.vehicleDisabled = false;\n    this.usersList = {};\n    this.resolvedIssues = [];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"\");\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.stateTaxes = [];\n    this.newTaxes = [];\n    this.selectedFileNames = new Map(); // localStorage.setItem('serviceLogs', JSON.stringify(this.serviceData));\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.logID = _this.route.snapshot.params[\"logID\"];\n\n      if (_this.logID) {\n        _this.pageTitle = \"Edit Service Log\";\n        _this.vehicleDisabled = true;\n        yield _this.fetchServiceByID();\n      } else {\n        _this.pageTitle = \"New Service Log\";\n      }\n\n      _this.fetchGroups();\n\n      _this.fetchVehicles();\n\n      _this.fetchUsersList();\n\n      _this.fetchInventory();\n\n      _this.fetchAssets();\n\n      _this.listService.fetchVendors();\n\n      _this.listService.fetchTasks();\n\n      _this.fetchAllTasksIDs();\n\n      _this.fetchInventoryItems();\n\n      _this.fetchInventoryQuanitity();\n\n      _this.fetchStateTaxes();\n\n      _this.fetchedLocalData = JSON.parse(window.localStorage.getItem(\"unit\"));\n\n      if (_this.fetchedLocalData) {\n        if (_this.fetchedLocalData.unitType === \"vehicle\") {\n          _this.serviceData.unitID = _this.fetchedLocalData.unitID;\n\n          _this.getVehicleIssues(_this.fetchedLocalData.unitID);\n\n          _this.serviceData.unitType = \"vehicle\";\n          window.localStorage.removeItem(\"unit\");\n        } else {\n          _this.serviceData.unitType = \"asset\";\n          _this.serviceData.unitID = _this.fetchedLocalData.unitID;\n\n          _this.getAssetIssues(_this.fetchedLocalData.unitID);\n\n          window.localStorage.removeItem(\"unit\");\n        }\n      }\n\n      _this.localReminderUnitID = JSON.parse(window.localStorage.getItem(\"reminderUnitID\"));\n\n      if (_this.localReminderUnitID) {\n        _this.serviceData.unitID = _this.localReminderUnitID.unitID;\n\n        _this.getVehicleIssues(_this.localReminderUnitID.unitID);\n\n        _this.serviceData.unitType = \"vehicle\";\n        window.localStorage.removeItem(\"reminderUnitID\");\n      }\n\n      _this.taskData = _this.listService.tasksList; // this.vendors = this.listService.vendorList;\n\n      let vendorList = new Array();\n\n      _this.getValidVendors(vendorList);\n\n      _this.vendors = vendorList;\n    })();\n  }\n\n  getValidVendors(vendorList) {\n    let ids = [];\n    this.listService.vendorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          vendorList.push(element2);\n          ids.push(element2.contactID);\n        }\n\n        if (element2.isDeleted === 1 && this.serviceData.vendorID === element2.contactID) {\n          this.serviceData.vendorID = null;\n        }\n      });\n    });\n  }\n  /*\r\n   * Add new asset\r\n   */\n\n\n  addService() {\n    this.submitDisabled = true;\n    this.hideErrors();\n    this.spinner.show(); // this.serviceData.allServiceParts.servicePartsList.forEach(elem => {\n    //   delete elem.existQuantity;\n    // });\n\n    let taskIds = [];\n    this.serviceData.allServiceTasks.serviceTaskList.forEach(elem => {\n      taskIds.push(elem.taskID);\n    });\n    this.serviceData.taskIds = taskIds; // create form data instance\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadedPhotos.length; i++) {\n      formData.append(\"uploadedPhotos\", this.uploadedPhotos[i]);\n    } //append docs if any\n\n\n    for (let j = 0; j < this.uploadedDocs.length; j++) {\n      formData.append(\"uploadedDocs\", this.uploadedDocs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.serviceData));\n    this.apiService.postData(\"serviceLogs\", formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n          this.spinner.hide();\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.spinner.hide();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.submitDisabled = false;\n        this.modalServiceOwn.triggerRedirect.next(true);\n        this.takeUntil$.next();\n        this.takeUntil$.complete();\n        this.isSubmitted = true;\n        this.toastr.success(\"Service log added successfully\");\n        this.router.navigateByUrl(\"/fleet/maintenance/service-log/list\");\n        this.spinner.hide();\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n\n  selectIssues(event, ids) {\n    if (event.target.checked) {\n      if (!this.selectedIssues.includes(ids)) {\n        this.selectedIssues.push(ids);\n      }\n    } else {\n      let index = this.selectedIssues.indexOf(ids);\n      this.selectedIssues.splice(index, 1);\n    }\n\n    this.serviceData.selectedIssues = this.selectedIssues;\n  }\n\n  fetchGroups() {\n    this.apiService.getData(\"groups\").subscribe(result => {\n      if (result != null) {\n        this.groups = result.Items;\n      } else {\n        this.groups = [];\n      }\n    });\n  }\n\n  fetchAllTasksIDs() {\n    this.apiService.getData(\"tasks/get/list\").subscribe(result => {\n      this.tasksObject = result;\n    });\n  }\n  /*\r\n   * Get all vendors from api\r\n   */\n\n\n  fetchVendors() {\n    this.apiService.getData(\"vendors\").subscribe(result => {\n      this.vendors = result.Items;\n    });\n  }\n  /*\r\n   * Get all vehicles from api\r\n   */\n\n\n  fetchVehicles() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this2.apiService.getData(\"vehicles\").toPromise();\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          _this2.vehicles.push(element);\n        }\n\n        if (element.isDeleted === 1 && _this2.serviceData.unitID === element.vehicleID) {\n          _this2.serviceData.unitID = null;\n        }\n      });\n    })();\n  }\n  /*\r\n   * Get a vehicle by ID\r\n   */\n\n\n  fetchVehicleByID(id) {\n    this.apiService.getData(`vehicles/${id}`).subscribe(result => {// this.serviceData['unitStatus'] = result.Items[0].currentStatus;\n    });\n  }\n  /*\r\n   * Get a assets by ID\r\n   */\n\n\n  fetchAssetByID(id) {\n    this.apiService.getData(`assets/${id}`).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {// this.serviceData['unitStatus'] = await result.Items[0].assetDetails.currentStatus;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /*\r\n   * Get all assets from api\r\n   */\n\n\n  fetchAssets() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this3.apiService.getData(\"assets\").toPromise();\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          _this3.assets.push(element);\n        }\n\n        if (element.isDeleted === 1 && _this3.serviceData.unitID === element.assetID) {\n          _this3.serviceData.unitID = null;\n        }\n      });\n    })();\n  }\n  /*\r\n   * Get a task by id\r\n   */\n\n\n  fetchTaskbyID(taskID) {\n    let result = this.apiService.getData(\"tasks/\" + taskID).toPromise();\n    return result;\n  }\n  /*\r\n   * Get all stocks from api\r\n   */\n\n\n  fetchInventory() {\n    this.apiService.getData(\"items/serviceLog/list\").subscribe(result => {\n      this.inventory = result;\n    });\n  }\n\n  fetchUsersList() {\n    this.apiService.getData(\"common/users/get/list\").subscribe(result => {\n      this.usersList = result;\n    });\n  }\n\n  getResolvedIssues(id) {\n    id = JSON.stringify(id);\n    this.apiService.getData(\"issues/fetch/resolvedIssues?issueIds=\" + id).subscribe(result => {\n      this.resolvedIssues = result;\n\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        element.selected = true;\n        this.issues.push(element);\n      }\n    });\n  }\n\n  getIssuesByVehicle(vehicleID) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this4.listService.fetchVehicleIssues(vehicleID);\n\n      _this4.listService.issuesList.subscribe(res => {\n        _this4.issues = [..._this4.resolvedIssues, ...res];\n      });\n    })();\n  }\n\n  getIssuesByAsset(assetID) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const newdata = yield _this5.listService.fetchAssetsIssues(assetID);\n\n      _this5.listService.issuesList.subscribe(res => {\n        _this5.issues = [..._this5.resolvedIssues, ...res];\n      });\n    })();\n  }\n\n  getVehicleIssues(id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.spinner.show();\n\n      localStorage.setItem(\"issueVehicleID\", JSON.stringify(id));\n\n      _this6.spinner.show();\n\n      const vehicleID = id;\n      yield _this6.getReminders(vehicleID);\n      yield _this6.getIssuesByVehicle(vehicleID);\n\n      _this6.spinner.hide();\n    })();\n  }\n\n  getAssetIssues(id) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.spinner.show();\n\n      localStorage.setItem(\"issueVehicleID\", JSON.stringify(id));\n      const assetID = id;\n      yield _this7.getReminders(assetID);\n      yield _this7.getIssuesByAsset(assetID);\n\n      _this7.spinner.hide();\n    })();\n  }\n\n  getReminders(id) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const vehicleID = id;\n      _this8.reminders = [];\n\n      _this8.apiService.getData(`reminders/vehicle/${vehicleID}`).subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (result) {\n          let response = yield result.Items;\n          response.forEach(element => {\n            if (element.reminderType === \"service\") {\n              _this8.reminders.push(element);\n\n              element.buttonShow = false;\n            }\n          });\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event, obj) {\n    let files = [...event.target.files];\n\n    if (obj === \"uploadedDocs\") {\n      this.uploadedDocs = [];\n\n      for (let i = 0; i < files.length; i++) {\n        this.uploadedDocs.push(files[i]);\n      }\n    } else {\n      this.uploadedPhotos = [];\n\n      for (let i = 0; i < files.length; i++) {\n        this.uploadedPhotos.push(files[i]);\n      }\n    }\n  }\n\n  addParts() {\n    this.inventory.forEach(element => {\n      if (element.itemID === this.selectedParts[this.selectedParts.length - 1].itemID) {\n        this.serviceData.allServiceParts.servicePartsList.push({\n          partName: element.itemName,\n          partID: element.itemID,\n          existQuantity: this.inventoryQuantity[element.partNumber],\n          partNumber: element.partNumber,\n          description: element.description\n        });\n      }\n    });\n  }\n\n  checkQuantity(index) {\n    let reqQuantity = this.serviceData.allServiceParts.servicePartsList[index].quantity;\n    let totalStocks = this.serviceData.allServiceParts.servicePartsList[index].existQuantity;\n\n    if (reqQuantity > totalStocks) {\n      this.toastr.error(\"The requested quantity is not available\");\n      this.serviceData.allServiceParts.servicePartsList[index].quantity = totalStocks;\n    }\n  }\n\n  addTasks() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let remindID;\n      let newSchedule;\n\n      for (let remind of _this9.reminders) {\n        if (remind.reminderTasks.task === _this9.selectedTasks[_this9.selectedTasks.length - 1].taskID) {\n          remindID = remind.reminderID;\n          newSchedule = `Every ${remind.reminderTasks.remindByDays} days or ${remind.reminderTasks.odometer} Miles`;\n        } else {\n          remindID = \"\";\n          newSchedule = \"\";\n        }\n      }\n\n      _this9.serviceData.allServiceTasks.serviceTaskList.push({\n        taskName: _this9.selectedTasks[_this9.selectedTasks.length - 1].taskName,\n        taskID: _this9.selectedTasks[_this9.selectedTasks.length - 1].taskID,\n        reminderID: remindID,\n        schedule: newSchedule\n      });\n    })();\n  }\n\n  addListedTasks(data) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      data.buttonShow = !data.buttonShow;\n      let result = yield _this10.fetchTaskbyID(data.reminderTasks.task);\n      let task = result.Items[0].taskName;\n      let ID = result.Items[0].taskID;\n\n      _this10.selectedTasks.push(result.Items[0]);\n\n      _this10.serviceData.allServiceTasks.serviceTaskList.push({\n        taskName: task,\n        taskID: ID,\n        reminderID: data.reminderID,\n        schedule: `Every ${data.reminderTasks.odometer} Miles`\n      });\n    })();\n  }\n\n  removeListedTasks(data) {\n    data.buttonShow = !data.buttonShow;\n    let taskList = this.serviceData.allServiceTasks.serviceTaskList;\n    let index = taskList.findIndex(item => item.taskID === data.reminderTasks.task);\n    taskList.splice(index, 1);\n  }\n\n  remove(arr, data, i) {\n    if (arr === \"tasks\") {\n      let remindersList = this.reminders;\n      remindersList.findIndex(item => {\n        if (item.reminderTasks.task === data.taskID) {\n          item.buttonShow = !item.buttonShow;\n        }\n      });\n      this.serviceData.allServiceTasks.serviceTaskList.splice(i, 1); // this.totalLabors -= data.laborCost;\n\n      this.selectedTasks = this.selectedTasks.filter(elem => elem.taskName != data.taskName);\n      this.calculateTasks();\n    } else {\n      this.serviceData.allServiceParts.servicePartsList.splice(i, 1);\n      this.selectedParts = this.selectedParts.filter(elem => elem.itemID != data.partID);\n      this.calculateParts();\n    }\n  }\n\n  clearTaks(arr) {\n    if (arr === \"tasks\") {\n      this.serviceData.allServiceTasks.serviceTaskList = [];\n    } else {\n      this.serviceData.allServiceParts.servicePartsList = [];\n    }\n  }\n\n  removeTasks(item) {\n    this.serviceData.allServiceTasks.serviceTaskList.filter(s => {\n      if (s.taskName === item.label) {\n        let index = this.serviceData.allServiceTasks.serviceTaskList.indexOf(s);\n        this.serviceData.allServiceTasks.serviceTaskList.splice(index, 1);\n        this.totalLabors -= s.laborCost;\n        this.calculateTasks();\n      }\n\n      if (this.totalLabors === 0) {\n        this.serviceData.allServiceTasks.discountPercent = 0;\n        this.serviceData.allServiceTasks.taxPercent = 0;\n        this.serviceData.allServiceTasks.total = 0;\n      }\n    });\n  }\n\n  removeParts(item) {\n    this.serviceData.allServiceParts.servicePartsList.filter(s => {\n      if (s.partNumber === item.value.partNumber) {\n        let index = this.serviceData.allServiceParts.servicePartsList.indexOf(s);\n        this.serviceData.allServiceParts.servicePartsList.splice(index, 1); // this.totalLabors -= s.laborCost;\n\n        this.calculateParts();\n      }\n\n      if (this.totalLabors === 0) {\n        this.serviceData.allServiceParts.discountPercent = 0;\n        this.serviceData.allServiceParts.taxPercent = 0;\n        this.serviceData.allServiceParts.total = 0;\n      }\n    });\n  }\n\n  calculateTasks() {\n    let discountPercent = Number(this.serviceData.allServiceTasks.discountPercent);\n    let taxPercent = Number(this.serviceData.allServiceTasks.taxPercent); // let total = Number(this.serviceData.allServiceTasks.total);\n\n    let subTotal = Number(this.serviceData.allServiceTasks.subTotal);\n    let sum = 0;\n    let tasksArr = this.serviceData.allServiceTasks.serviceTaskList;\n    tasksArr.forEach(element => {\n      if (element.laborCost !== undefined) {\n        sum = sum + (parseFloat(element.laborCost) || 0);\n      }\n    });\n    this.totalLabors = sum;\n    this.serviceData.allServiceTasks.subTotal = sum;\n\n    if (discountPercent > 0) {\n      this.serviceData.allServiceTasks.total = this.serviceData.allServiceTasks.subTotal - this.serviceData.allServiceTasks.subTotal * discountPercent / 100;\n    } else {\n      this.serviceData.allServiceTasks.total = sum;\n    }\n\n    if (taxPercent > 0) {\n      let taxAble = this.serviceData.allServiceTasks.total * taxPercent / 100;\n      this.serviceData.allServiceTasks.total = this.serviceData.allServiceTasks.total + this.serviceData.allServiceTasks.total * taxPercent / 100;\n      this.serviceData.allServiceTasks.taxAmount = taxAble;\n    }\n\n    let discountAmount = subTotal * discountPercent / 100;\n    this.serviceData.allServiceTasks.discountAmount = discountAmount; // this.subTotal = this.totalLabors + this.totalPartsPrice;\n    // this.serviceData.total.taxes = 0;\n    // this.serviceData.total.finalTotal = (subTotal + amount).toFixed(2);\n    // console.log('subtot==', this.subTotal)\n    // this.newTaxes = this.serviceData.charges.taxes;\n    // this.serviceData.total.taxes = 0;\n    // if (this.subTotal > 0) {\n\n    this.allTax();\n    this.taxTotal(); // this.calculateFinalTotal();\n    // }\n  }\n\n  calculateParts() {\n    let discountPercent = Number(this.serviceData.allServiceParts.discountPercent);\n    let taxPercent = Number(this.serviceData.allServiceParts.taxPercent); // let total = Number(this.serviceData.allServiceParts.total);\n\n    let subTotal = Number(this.serviceData.allServiceParts.subTotal); // if (isNaN(discountPercent)) {\n    //   discountPercent = 0;\n    // }\n    // if (isNaN(total)) {\n    //   total = 0;\n    // }\n    // if (isNaN(taxPercent)) {\n    //   taxPercent = 0;\n    // }\n    // if (isNaN(subTotal)) {\n    //   subTotal = 0;\n    // }\n\n    let countQuantity = 0;\n    let countAmount = 0;\n    let quantity = this.serviceData.allServiceParts.servicePartsList;\n    quantity.forEach(element => {\n      if (element.quantity !== \"\" && element.rate !== \"\") {\n        countQuantity += parseFloat(element.quantity) || 0;\n        element.partCost = (parseFloat(element.quantity) || 0) * (parseFloat(element.rate) || 0);\n        countAmount += parseFloat(element.partCost) || 0;\n      }\n\n      this.totalQuantity = countQuantity;\n      this.totalPartsPrice = countAmount;\n      subTotal = countAmount;\n      this.serviceData.allServiceParts.total = countAmount;\n      this.serviceData.allServiceParts.totalQuantity = countQuantity;\n      this.serviceData.allServiceParts.subTotal = countAmount;\n    });\n    let discountAmount = subTotal * discountPercent / 100;\n    this.serviceData.allServiceParts.discountAmount = discountAmount;\n    let taxAble = this.serviceData.allServiceParts.total - discountAmount;\n    let taxAmount = taxAble * taxPercent / 100;\n    this.serviceData.allServiceParts.taxAmount = taxAmount;\n    this.serviceData.allServiceParts.total -= discountAmount;\n    this.serviceData.allServiceParts.total += taxAmount; // this.subTotal = this.totalLabors + this.totalPartsPrice;\n    // console.log('subtot==', this.subTotal)\n    // this.newTaxes = this.serviceData.charges.taxes;\n    // if (this.subTotal > 0) {\n\n    this.allTax();\n    this.taxTotal();\n    this.calculateFinalTotal(); // }\n  }\n\n  fetchServiceByID() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      // this.spinner.show(); // loader init\n      let result = yield _this11.apiService.getData(\"serviceLogs/\" + _this11.logID).toPromise(); // \n      // .subscribe(async (result: any) => {\n\n      result = result.Items[0];\n      console.log('result--', result);\n      _this11.serviceData[\"logID\"] = _this11.logID;\n      _this11.serviceData.unitType = result.unitType;\n\n      if (result.unitType == \"vehicle\") {\n        yield _this11.getVehicleIssues(result.unitID);\n        _this11.serviceData.unitID = result.unitID;\n      } else {\n        yield _this11.getAssetIssues(result.unitID);\n        _this11.serviceData.unitID = result.unitID;\n      }\n\n      _this11.serviceData.odometer = result.odometer;\n      _this11.serviceData.completionDate = result.completionDate;\n      _this11.serviceData.vendorID = result.vendorID;\n      _this11.serviceData.reference = result.reference; // this.serviceData.location = result.location;\n\n      _this11.serviceData.geoCords.lat = result.geoCords.lat;\n      _this11.serviceData.geoCords.lng = result.geoCords.lng;\n      _this11.serviceData.odometer = result.odometer;\n      _this11.serviceData.description = result.description;\n      _this11.savedIssues = result.selectedIssues;\n      _this11.serviceData.selectedIssues = result.selectedIssues;\n      _this11.serviceData.exempt = result.exempt;\n      _this11.serviceData.total.subTotal = result.total.subTotal, // console.log('')\n      _this11.serviceData.total.taxes = result.total.taxes, _this11.serviceData.total.finalTotal = result.total.finalTotal, _this11.serviceData.charges.taxes.forEach(elem => {\n        elem.tax = result.charges.taxes.tax;\n        elem.amount = result.charges.taxes.amount;\n      });\n      _this11.serviceData.stateID = result.stateID;\n      let newTasks = [];\n\n      for (var i = 0; i < result.allServiceTasks.serviceTaskList.length; i++) {\n        newTasks.push({\n          taskName: result.allServiceTasks.serviceTaskList[i].taskName,\n          taskID: result.allServiceTasks.serviceTaskList[i].taskID,\n          schedule: result.allServiceTasks.serviceTaskList[i].schedule,\n          reminderID: result.allServiceTasks.serviceTaskList[i].reminderID,\n          laborCost: result.allServiceTasks.serviceTaskList[i].laborCost\n        });\n\n        _this11.selectedTasks.push(result.allServiceTasks.serviceTaskList[i].taskName);\n      }\n\n      _this11.serviceData.allServiceTasks[\"discountAmount\"] = result.allServiceTasks[\"discountAmount\"];\n      _this11.serviceData.allServiceTasks[\"discountPercent\"] = result.allServiceTasks[\"discountPercent\"];\n      _this11.serviceData.allServiceTasks[\"taxPercent\"] = result.allServiceTasks[\"taxPercent\"];\n      _this11.serviceData.allServiceTasks[\"taxAmount\"] = result.allServiceTasks[\"taxAmount\"];\n      _this11.serviceData.allServiceTasks[\"total\"] = result.allServiceTasks[\"total\"];\n      _this11.serviceData.allServiceTasks[\"subTotal\"] = result.allServiceTasks[\"subTotal\"];\n      _this11.totalLabors = result.allServiceTasks[\"subTotal\"];\n      _this11.serviceData.allServiceTasks.serviceTaskList = newTasks;\n      let newParts = [];\n\n      for (var j = 0; j < result.allServiceParts.servicePartsList.length; j++) {\n        newParts.push({\n          description: result.allServiceParts.servicePartsList[j].description,\n          partCost: result.allServiceParts.servicePartsList[j].partCost,\n          partNumber: result.allServiceParts.servicePartsList[j].partNumber,\n          quantity: result.allServiceParts.servicePartsList[j].quantity,\n          rate: result.allServiceParts.servicePartsList[j].rate,\n          partName: result.allServiceParts.servicePartsList[j].partName\n        });\n\n        _this11.selectedParts.push(result.allServiceParts.servicePartsList[j].partName);\n      }\n\n      _this11.serviceData.allServiceParts.servicePartsList = newParts;\n      _this11.serviceData.allServiceParts[\"discountAmount\"] = result.allServiceParts[\"discountAmount\"];\n      _this11.serviceData.allServiceParts[\"discountPercent\"] = result.allServiceParts[\"discountPercent\"];\n      _this11.serviceData.allServiceParts[\"taxPercent\"] = result.allServiceParts[\"taxPercent\"];\n      _this11.serviceData.allServiceParts[\"taxAmount\"] = result.allServiceParts[\"taxAmount\"];\n      _this11.serviceData.allServiceParts[\"total\"] = result.allServiceParts[\"total\"];\n      _this11.serviceData.allServiceParts[\"subTotal\"] = result.allServiceParts[\"subTotal\"];\n      _this11.serviceData.allServiceParts[\"totalQuantity\"] = result.allServiceParts[\"totalQuantity\"];\n      _this11.totalPartsPrice = result.allServiceParts[\"subTotal\"];\n      _this11.totalQuantity = result.allServiceParts[\"totalQuantity\"];\n      _this11.existingPhotos = result.uploadedPhotos;\n      _this11.existingDocs = result.uploadedDocs;\n\n      if (result.selectedIssues.length > 0) {\n        const data = _this11.getResolvedIssues(result.selectedIssues);\n      }\n\n      if (result.uploadedPhotos !== undefined && result.uploadedPhotos.length > 0) {\n        // this.logImages = result.uploadedPhotos.map((x) => ({\n        //    path: `${this.logurl}/${result.carrierID}/${x}`,\n        //    name: x,\n        //  }));\n        _this11.logImages = result.uploadedPics;\n      }\n\n      if (result.uploadedDocs !== undefined && result.uploadedDocs.length > 0) {\n        // this.logDocs = result.uploadedDocs.map((x) => ({\n        //    path: `${this.logurl}/${result.carrierID}/${x}`,\n        //    name: x,\n        //  }));\n        _this11.logDocs = result.uploadDocument;\n      }\n\n      _this11.selectedIssues = result.selectedIssues;\n      _this11.serviceData[\"timeCreated\"] = result.timeCreated; // });\n    })();\n  }\n\n  onChangeUnitType(value) {\n    this.serviceData[\"unitType\"] = value;\n    this.issues = [];\n\n    if (value === \"asset\") {\n      delete this.serviceData.odometer;\n    }\n  }\n  /*\r\n   * Update Service Log\r\n   */\n\n\n  updateService() {\n    this.hideErrors();\n    this.submitDisabled = true;\n    let taskIds = [];\n    this.serviceData.allServiceTasks.serviceTaskList.forEach(elem => {\n      taskIds.push(elem.taskID);\n    });\n    this.serviceData.taskIds = taskIds; // if(this.serviceData.vehicleID == '' || this.serviceData.vehicleID == null) {\n    //   delete this.serviceData.vehicleID;\n    // }\n\n    const data = {\n      logID: this.logID,\n      unitType: this.serviceData.unitType,\n      reference: this.serviceData.reference,\n      unitID: this.serviceData.unitID,\n      odometer: this.serviceData.odometer,\n      completionDate: this.serviceData.completionDate,\n      vendorID: this.serviceData.vendorID,\n      description: this.serviceData.description,\n      taskIds: this.serviceData.taskIds,\n      allServiceTasks: this.serviceData.allServiceTasks,\n      allServiceParts: this.serviceData.allServiceParts,\n      selectedIssues: this.serviceData.selectedIssues,\n      location: this.serviceData.location,\n      geoCords: this.serviceData.geoCords,\n      uploadedPhotos: this.existingPhotos\n    }; // create form data instance\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadedPhotos.length; i++) {\n      formData.append(\"uploadedPhotos\", this.uploadedPhotos[i]);\n    } //append docs if any\n\n\n    for (let j = 0; j < this.uploadedDocs.length; j++) {\n      formData.append(\"uploadedDocs\", this.uploadedDocs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(data));\n    this.apiService.putData(\"serviceLogs/\", formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/'.*'/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.spinner.hide(); // loader hide\n            // this.throwErrors();\n\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.submitDisabled = false;\n        this.hasSuccess = true;\n        this.modalServiceOwn.triggerRedirect.next(true);\n        this.takeUntil$.next();\n        this.takeUntil$.complete();\n        this.isSubmitted = true;\n        this.toastr.success(\"Service log Updated Successfully\");\n        this.router.navigateByUrl(\"/fleet/maintenance/service-log/list\");\n      }\n    });\n  }\n\n  openReminders() {\n    $(\"#serviceReminderModal\").modal(\"show\");\n    let tasksList = this.serviceData.allServiceTasks.serviceTaskList;\n    let reminders = this.reminders;\n    tasksList.forEach(task => {\n      reminders.forEach(remind => {\n        if (task.taskID === remind.reminderTasks.task) {\n          remind.buttonShow = true;\n        }\n      });\n    });\n  }\n\n  assignLocation(label) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this12.hereMap.geoCode(label);\n      const labelResult = result.items[0];\n      _this12.serviceData.location = label;\n\n      if (labelResult.position != undefined) {\n        _this12.serviceData.geoCords = {\n          lat: labelResult.position.lat,\n          lng: labelResult.position.lat\n        };\n      }\n\n      _this12.searchResults = false;\n      $(\"div\").removeClass(\"show-search__result\");\n    })();\n  }\n\n  gotoIssuePage() {\n    // this.router.navigateByUrl('/fleet/maintenance/issues/add')\n    this.listService.separateModals(\"logIssue\");\n    let selectedUnit = {\n      type: this.serviceData.unitType,\n      name: this.serviceData.unitID\n    };\n\n    if (this.serviceData.unitType === \"vehicle\") {\n      selectedUnit.odometer = this.serviceData.odometer;\n    } else {\n      delete selectedUnit.odometer;\n    }\n\n    localStorage.setItem(\"logUnit\", JSON.stringify(selectedUnit));\n    this.listService.appendIssues(selectedUnit);\n  }\n\n  currencyChange(value) {\n    this.serviceData.allServiceParts.currency = value;\n    this.serviceData.allServiceTasks.currency = value;\n  }\n\n  changePartTab(type) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      if (type === \"new\") {\n        _this13.partType = \"new\";\n      } else {\n        _this13.partType = \"existing\";\n      }\n    })();\n  }\n\n  fetchInventoryItems() {\n    this.apiService.getData(\"items\").subscribe(result => {\n      this.inventoryItems = result.Items;\n    });\n  }\n\n  fetchInventoryQuanitity() {\n    this.apiService.getData(\"items/get/quantity\").subscribe(result => {\n      this.inventoryQuantity = result;\n    });\n  }\n\n  fetchPartNumber() {\n    if (this.partData.partNumber !== undefined && this.partData.partNumber !== \"\") {\n      this.apiService.getData(\"requiredItems/check/requestedItem/\" + this.partData.partNumber).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/'.*'/, \"This Field\");\n            this.errors[val.context.label] = val.message;\n          })).subscribe({\n            complete: () => {\n              this.spinner.hide(); // loader hide\n              // this.throwErrors();\n            },\n            error: () => {},\n            next: () => {}\n          });\n        },\n        next: res => {\n          this.response = res;\n          this.hasSuccess = true;\n\n          if (res.Count > 0) {\n            this.existingItemQuantity = parseInt(res.Items[0].quantity);\n            this.partData.itemID = res.Items[0].itemID; // show modal\n\n            $(\"#existingInvModal\").modal(\"show\");\n          } else {\n            this.addExistingPartNumber();\n          }\n        }\n      });\n    } else {\n      return false;\n    }\n  }\n\n  updateExistingPartNumber() {\n    // let currQuan:any = parseInt(this.partData.quantity);\n    this.partData.quantity = parseInt(this.partData.quantity) + parseInt(this.existingItemQuantity);\n    this.apiService.putData(\"requiredItems\", this.partData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/'.*'/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.spinner.hide(); // loader hide\n            // this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        $(\"#partModal\").modal(\"hide\");\n        $(\"#existingInvModal\").modal(\"hide\");\n        this.existingItemQuantity = null;\n        this.partData = {\n          partNumber: undefined,\n          preferredVendorID: undefined,\n          quantity: null,\n          itemID: \"\",\n          itemName: \"\"\n        };\n        this.itemData = {\n          category: undefined,\n          itemName: \"\",\n          cost: \"\",\n          costUnit: undefined,\n          warehouseID: undefined\n        };\n        this.toastr.success(\"Part Updated Successfully\");\n      }\n    });\n  }\n\n  addExistingPartNumber() {\n    delete this.partData.itemID;\n    this.apiService.postData(\"items/requireditems/addExistingItem\", this.partData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/'.*'/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.spinner.hide(); // loader hide\n            // this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        $(\"#partModal\").modal(\"hide\");\n        $(\"#existingInvModal\").modal(\"hide\");\n        this.existingItemQuantity = null;\n        this.partData = {\n          partNumber: \"\",\n          preferredVendorID: \"\",\n          quantity: \"\",\n          itemID: \"\",\n          itemName: \"\"\n        };\n        this.itemData = {\n          category: \"\",\n          itemName: \"\",\n          cost: \"\",\n          costUnit: \"\",\n          warehouseID: \"\"\n        };\n        this.toastr.success(\"Requested Item Added Successfully.\");\n      }\n    });\n  }\n\n  getPartDetail(event) {\n    let curr = this;\n    this.inventoryItems.map(function (v) {\n      if (v.partNumber == event) {\n        curr.partData.quantity = v.quantity;\n        curr.partData.preferredVendorID = v.preferredVendorID;\n        curr.partData.itemName = v.itemName;\n      }\n    });\n  }\n\n  showCategoryModal() {\n    this.categoryData.name = \"\";\n    this.categoryData.description = \"\";\n    $(\"#categoryModal\").modal(\"show\");\n  }\n\n  addInventory() {\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.hideErrors();\n    const data = {\n      partNumber: this.partData.partNumber,\n      quantity: this.partData.quantity,\n      itemName: this.itemData.itemName,\n      category: this.itemData.category,\n      preferredVendorID: this.partData.preferredVendorID,\n      cost: this.itemData.cost,\n      costUnit: this.itemData.costUnit,\n      warehouseID: this.itemData.warehouseID,\n      warehouseVendorID: this.partData.preferredVendorID\n    };\n    this.apiService.postData(\"items/requireditems/addExistingItem\", data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.hasError = true;\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        $(\"#partModal\").modal(\"hide\");\n        this.toastr.success(\"Requested Item Added Successfully.\");\n        this.partData = {\n          partNumber: \"\",\n          preferredVendorID: \"\",\n          quantity: \"\",\n          itemID: \"\",\n          itemName: \"\"\n        };\n        this.itemData = {\n          category: \"\",\n          itemName: \"\",\n          cost: \"\",\n          costUnit: \"\",\n          warehouseID: \"\"\n        };\n      }\n    });\n  }\n\n  closeExistingModel() {\n    $(\"#existingInvModal\").modal(\"hide\");\n    this.updateExistingPartNumber();\n  }\n\n  showPartModal() {\n    this.existingItemQuantity = null;\n    this.partData = {\n      partNumber: undefined,\n      preferredVendorID: undefined,\n      quantity: null,\n      itemID: \"\",\n      itemName: \"\"\n    };\n    this.itemData = {\n      category: undefined,\n      itemName: \"\",\n      cost: \"\",\n      costUnit: undefined,\n      warehouseID: undefined\n    };\n    $(\"#partModal\").modal(\"show\");\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = \"\";\n\n    if (ext == \"doc\" || ext == \"docx\" || ext == \"xlsx\") {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"https://docs.google.com/viewer?url=\" + val + \"&embedded=true\");\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  } // delete uploaded images and documents\n\n\n  delete(type, name, index) {\n    this.apiService.deleteData(`serviceLogs/uploadDelete/${this.logID}/${type}/${name}`).subscribe(result => {\n      if (type === \"image\") {\n        this.logImages.splice(index, 1);\n      } else {\n        this.logDocs.splice(index, 1);\n      }\n    });\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  refreshVendorData() {\n    this.listService.fetchVendors();\n  }\n\n  getTasks() {\n    this.listService.fetchTasks();\n  }\n\n  selectProvince(stateID = undefined) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      if (stateID != undefined) {\n        let taxObj = {\n          GST: \"\",\n          HST: \"\",\n          PST: \"\",\n          stateCode: \"\",\n          stateName: \"\",\n          stateTaxID: \"\"\n        };\n\n        _this14.stateTaxes.map(v => {\n          if (v.stateTaxID === stateID) {\n            taxObj = v;\n          }\n        });\n\n        _this14.serviceData.charges.taxes.map(v => {\n          if (v.name === \"GST\") {\n            v.tax = Number(taxObj.GST);\n          } else if (v.name === \"HST\") {\n            v.tax = Number(taxObj.HST);\n          } else if (v.name === \"PST\") {\n            v.tax = Number(taxObj.PST);\n          }\n        });\n\n        _this14.allTax();\n\n        _this14.taxTotal();\n      }\n    })();\n  }\n\n  calculateFinalTotal() {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      _this15.serviceData.total.subTotal = _this15.totalLabors + _this15.totalPartsPrice;\n\n      _this15.allTax();\n\n      console.log('subtotal', _this15.serviceData.total.subTotal);\n      console.log('tax', _this15.serviceData.total.taxes);\n      _this15.serviceData.total.finalTotal = Number(_this15.totalLabors + _this15.totalPartsPrice) + Number(_this15.serviceData.total.taxes);\n      console.log('this.serviceData.total.finalTotal', _this15.serviceData.total.finalTotal);\n    })();\n  }\n\n  fetchStateTaxes() {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this16.apiService.getData(\"stateTaxes\").toPromise();\n      _this16.stateTaxes = result.Items;\n    })();\n  }\n\n  taxcalculation(index) {\n    this.serviceData.charges.taxes[index].amount = this.serviceData.charges.taxes[index].tax * (this.totalLabors + this.totalPartsPrice) / 100;\n    this.taxTotal();\n  }\n\n  allTax() {\n    this.serviceData.charges.taxes.forEach(element => {\n      element.amount = element.tax * (this.totalLabors + this.totalPartsPrice) / 100;\n      console.log('amount -', element.amount);\n    });\n  }\n\n  taxTotal() {\n    // this.serviceData.total.taxes = 0;\n    this.serviceData.charges.taxes.forEach(element => {\n      this.serviceData.total.taxes = Number(element.amount);\n      console.log('this.serviceData.total.taxes-', this.serviceData.total.taxes);\n    });\n    this.calculateFinalTotal();\n  }\n\n  taxExempt() {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      _this17.serviceData.charges.taxes.map(v => {\n        v.tax = 0;\n      });\n\n      _this17.serviceData.stateID = null;\n\n      _this17.allTax();\n\n      _this17.taxTotal();\n\n      _this17.calculateFinalTotal();\n    })();\n  }\n\n};\n\nAddServiceComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: NgbCalendar\n}, {\n  type: NgbDateAdapter\n}, {\n  type: HereMapService\n}, {\n  type: DomSanitizer\n}, {\n  type: ListService\n}, {\n  type: NgbModal\n}, {\n  type: ModalService\n}];\n\nAddServiceComponent.propDecorators = {\n  serviceaddF: [{\n    type: ViewChild,\n    args: ['serviceaddF']\n  }]\n};\nAddServiceComponent = __decorate([Component({\n  selector: \"app-add-service\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddServiceComponent);\nexport { AddServiceComponent };","map":null,"metadata":{},"sourceType":"module"}