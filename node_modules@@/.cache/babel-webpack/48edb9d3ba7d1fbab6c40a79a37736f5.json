{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-fuel-entry.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-fuel-entry.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ApiService } from \"../../../../services/api.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { map } from \"rxjs/operators\";\nimport { from, Subject } from 'rxjs';\nimport { NgbCalendar, NgbDateAdapter } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { Location } from \"@angular/common\";\nimport { ModalService } from \"../../../../services/modal.service\";\nimport { ListService } from \"../../../../services\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { RouteManagementServiceService } from 'src/app/services/route-management-service.service';\nlet AddFuelEntryComponent = class AddFuelEntryComponent {\n  constructor(apiService, route, location, toaster, router, ngbCalendar, dateAdapter, listService, modalService, modalServiceOwn, httpClient, countryStateCity, routeManagementService) {\n    this.apiService = apiService;\n    this.route = route;\n    this.location = location;\n    this.toaster = toaster;\n    this.router = router;\n    this.ngbCalendar = ngbCalendar;\n    this.dateAdapter = dateAdapter;\n    this.listService = listService;\n    this.modalService = modalService;\n    this.modalServiceOwn = modalServiceOwn;\n    this.httpClient = httpClient;\n    this.countryStateCity = countryStateCity;\n    this.routeManagementService = routeManagementService;\n    this.takeUntil$ = new Subject();\n    this.title = \"Add Fuel Entry\";\n    this.Asseturl = this.apiService.AssetUrl;\n    /********** Form Fields ***********/\n\n    this.fuelData = {\n      timeCreated: 0,\n      unitID: \"\",\n      driverID: \"\",\n      fuelProvider: \"Manual\",\n      data: {\n        useType: \"vehicle\",\n        currency: \"CAD\",\n        uom: \"L\",\n        amt: \"0\",\n        qty: \"0\",\n        discAmt: \"0\",\n        ppu: \"0\",\n        rPpu: \"0\",\n        rAmt: \"0\",\n        rBeforeTax: \"0\",\n        date: \"\",\n        time: \"\",\n        type: \"\",\n        country: \"\",\n        state: \"\",\n        city: \"\",\n        site: \"\",\n        tax: [{\n          taxCode: \"\",\n          amount: 0\n        }],\n        discRate: \"0\",\n        cardNo: \"\",\n        transID: \"\",\n        odometer: \"\",\n        excRate: \"0\"\n      }\n    };\n    this.isSubmitted = false;\n    this.uploadedFiles = [];\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.vendors = [];\n    this.vehicles = [];\n    this.assets = [];\n    this.drivers = [];\n    this.reeferArray = [];\n    this.trips = [];\n    this.fuelEntryImages = [];\n    this.fuelDiscounts = [];\n    this.fuelTypes = [\"Diesel\", \"Gasoline\", \"Propane\"];\n    this.fuelTaxes = [];\n    this.uploadedPhotos = [];\n    this.existingPhotos = [];\n    /******************/\n\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.submitDisabled = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.selectedFileNames = new Map();\n    const date = new Date();\n    this.getcurrentDate = {\n      year: date.getFullYear(),\n      month: 12,\n      day: date.getDate()\n    };\n    this.sessionID = this.routeManagementService.fuelUpdateSessionID;\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.listService.fetchVehicles(); //this.fetchTrips();\n\n\n      _this.fetchAssets();\n\n      _this.fetchDrivers(); //this.fetchFuelTypes();\n\n\n      _this.fetchFuelTaxes();\n\n      _this.fetchFuelDiscounts();\n\n      _this.listService.fetchVendors();\n\n      _this.fuelID = _this.route.snapshot.params[`fuelID`];\n\n      if (_this.fuelID) {\n        _this.title = \"Edit Fuel Entry\";\n        yield _this.fetchFuelEntry();\n      } else {\n        _this.title = \"Add Fuel Entry\";\n      }\n\n      $(document).ready(() => {// this.fuelForm = $('#fuelForm').validate();\n      });\n      let vendorList = new Array(); //this.getValidVendors(vendorList);\n\n      _this.vendors = vendorList;\n      let vehicleList = new Array();\n\n      _this.getValidVehicles(vehicleList);\n\n      _this.vehicles = vehicleList; // trips\n      // assets\n      // drivers\n    })();\n  }\n\n  getValidVehicles(vehicleList) {\n    let ids = [];\n    this.listService.vehicleList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.vehicleIdentification && element2.isDeleted === 1 && element2.vehicleID === this.fuelData.unitID) {\n          this.fuelData.unitID = null;\n          this.fetchedUnitID = null;\n        }\n\n        if (element2.vehicleIdentification && element2.isDeleted === 0 && !ids.includes(element2.vehicleID)) {\n          vehicleList.push(element2);\n          ids.push(element2.vehicleID);\n        }\n      });\n    });\n  } // private getValidVendors(vendorList: any[]) {\n  //   let ids = [];\n  //   this.listService.vendorList.forEach((element) => {\n  //     element.forEach((element2) => {\n  //       if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n  //         vendorList.push(element2);\n  //         ids.push(element2.contactID);\n  //       }\n  //       if (element2.isDeleted === 1 && this.fuelData.vendorID === element2.contactID) {\n  //         this.fuelData.vendorID = null;\n  //       }\n  //     })\n  //   })\n  // }\n\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  } // fetchVehicles() {\n  //   this.apiService.getData('vehicles').subscribe((result: any) => {\n  //     this.vehicles = result.Items;\n  //   });\n  // }\n\n\n  addFuelTaxRow() {\n    this.fuelData.data.tax.push({\n      taxCode: null,\n      amount: 0\n    });\n  }\n\n  deleteTaxRow(t) {\n    this.fuelData.data.tax.splice(t, 1);\n  } // fetchFuelTypes() {\n  //   this.apiService.getData('fuelTypes').subscribe((result: any) => {\n  //     this.fuelTypes = result.Items;\n  //   });\n  // }\n\n\n  fetchFuelTaxes() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.httpClient.get(\"assets/jsonFiles/fuel/fuelTaxes.json\").subscribe(result => {\n        _this2.fuelTaxes = result.Items;\n      });\n    })();\n  }\n\n  fetchFuelDiscounts() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.httpClient.get(\"assets/jsonFiles/fuel/fuelDiscounts.json\").subscribe(result => {\n        _this3.fuelDiscounts = result.Items;\n      });\n    })();\n  }\n\n  fetchDrivers() {\n    this.apiService.getData(\"drivers\").subscribe(result => {\n      // this.drivers = result.Items;\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.drivers.push(element);\n        }\n      });\n    });\n  }\n\n  fetchAssets() {\n    this.apiService.getData(\"assets\").subscribe(result => {\n      result.Items.forEach(e => {\n        if (e.assetType == \"reefer\" && e.isDeleted === 0) {\n          let obj = {\n            assetID: e.assetID,\n            assetIdentification: e.assetIdentification\n          };\n          this.reeferArray.push(obj);\n        }\n      });\n    });\n  }\n\n  getStates(cntryCode) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.fuelData.data.state = \"\";\n      _this4.fuelData.data.city = \"\";\n      _this4.states = yield _this4.countryStateCity.GetStatesByCountryCode([cntryCode]);\n    })();\n  }\n\n  getCities(state, countryCode) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.fuelData.data.city = \"\";\n      _this5.cities = yield _this5.countryStateCity.GetCitiesByStateCodes(countryCode, state);\n    })();\n  }\n\n  fetchVendors() {\n    this.apiService.getData(\"vendors\").subscribe(result => {\n      this.vendors = result.Items;\n    });\n  }\n\n  onChangeHideErrors(fieldname = \"\") {\n    $('[name=\"' + fieldname + '\"]').removeClass(\"error\").next().remove(\"label\");\n  }\n\n  fillCountry(countryCode, state) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.states = yield _this6.countryStateCity.GetStatesByCountryCode([countryCode]);\n      _this6.cities = yield _this6.countryStateCity.GetCitiesByStateCodes(countryCode, state);\n    })();\n  }\n\n  onChangeuseType(value) {\n    if (this.fuelID) {\n      if (value !== this.fetcheduseType) {\n        this.fuelData.unitID = null;\n        this.fuelData.data.useType = value;\n      } else {\n        this.fuelData.unitID = this.fetchedUnitID;\n        this.fuelData.data.useType = this.fetcheduseType;\n      }\n    } else {\n      this.fuelData.data.useType = value;\n      this.fuelData.unitID = null;\n    }\n  } // changeuom() {\n  //   if (this.qtyUnit === 'gallon') {\n  //     this.DEFqtyUnit = 'gallon';\n  //   } else {\n  //     this.DEFqtyUnit = 'litre';\n  //   }\n  // }\n\n\n  changeCurrency(val) {\n    this.fuelData.data.currency = val;\n  }\n\n  addFuelEntry() {\n    this.hideErrors();\n    this.submitDisabled = true;\n\n    if (Number(this.fuelData.data.ppu) && Number(this.fuelData.data.ppu) > 0) {\n      if (this.fuelData.data.useType == \"def\") {\n        this.fuelData.data.type = \"DEF\";\n      }\n\n      this.fuelData.timeCreated = new Date(`${this.fuelData.data.date}T${this.fuelData.data.time}`).getTime(); // append other fields\n\n      this.apiService.postData(\"fuelEntries\", this.fuelData).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n            this.errors[val.context.key] = val.message;\n          })).subscribe({\n            complete: () => {\n              this.submitDisabled = false; // this.throwErrors();\n            },\n            error: () => {\n              this.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          this.submitDisabled = false;\n          this.response = res;\n          this.modalServiceOwn.triggerRedirect.next(true);\n          this.takeUntil$.next();\n          this.takeUntil$.complete();\n          this.isSubmitted = true;\n          this.toaster.success(\"Fuel Entry Added Successfully.\");\n          this.location.back();\n        }\n      });\n    } else {\n      this.toaster.error(`Price Per ${this.fuelData.data.uom} must be greater than 0`);\n      this.submitDisabled = false;\n    }\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n  // selectDocuments(event, obj) {\n  //   let files = [...event.target.files];\n  //   if (obj === 'uploadedPhotos') {\n  //     this.uploadedPhotos = [];\n  //     for (let i = 0; i < files.length; i++) {\n  //       this.uploadedPhotos.push(files[i])\n  //     }\n  //   }\n  // }\n\n  /*\r\n   * Fetch Fuel Entry details before updating\r\n   */\n\n\n  fetchFuelEntry() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this7.apiService.getData(\"fuelEntries/\" + _this7.fuelID).toPromise(); // .subscribe((result: any) => {\n\n      result = result.Items[0];\n      yield _this7.fillCountry(result.data.country, result.data.state);\n      _this7.fuelData[\"data\"][`fuelID`] = _this7.fuelID;\n      _this7.fuelData.data.currency = result.data.currency, _this7.fuelData.data.useType = result.data.useType;\n      _this7.fuelData.unitID = result.unitID;\n      _this7.fuelData.data.uom = result.data.uom;\n      _this7.fuelData.data.qty = result.data.qty;\n      _this7.fuelData.data.amt = result.data.amt;\n      _this7.fuelData.data.discAmt = result.data.discAmt;\n      _this7.fuelData.data.ppu = result.data.ppu;\n      _this7.fuelData.data.tax = result.data.tax;\n      _this7.fuelData.data.date = result.data.date;\n      _this7.fuelData.data.time = result.data.time;\n      _this7.fuelData.data.type = result.data.type;\n      _this7.fuelData.data.rPpu = result.data.rPpu;\n      _this7.fuelData.data.rAmt = result.data.rAmt;\n      _this7.fuelData.data.rBeforeTax = result.data.rBeforeTax;\n      _this7.fuelData.driverID = result.driverID;\n      _this7.fuelData.data.cardNo = result.data.cardNo;\n      _this7.fuelData.data.transID = result.data.transID;\n      _this7.fuelData.data.country = result.data.country;\n      _this7.fuelData.data.state = result.data.state;\n      _this7.fuelData.data.site = result.data.site;\n      _this7.fuelData.data.city = result.data.city;\n      _this7.fuelData.data.odometer = result.data.odometer;\n      _this7.existingPhotos = result.data.uploadedPhotos;\n      _this7.fetchedUnitID = result.unitID;\n      _this7.fetcheduseType = result.data.useType;\n    })();\n  } // deleteImage(i: number) {\n  //   this.fuelData.uploadedPhotos.splice(i, 1);\n  //   this.fuelEntryImages.splice(i, 1);\n  // }\n\n\n  updateFuelEntry() {\n    this.submitDisabled = true;\n    this.hideErrors();\n    this.fuelData.timeCreated = new Date(`${this.fuelData.data.date}T${this.fuelData.data.time}`).getTime();\n    this.apiService.putData(\"fuelEntries\", this.fuelData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.modalServiceOwn.triggerRedirect.next(true);\n        this.takeUntil$.next();\n        this.takeUntil$.complete();\n        this.isSubmitted = true;\n        this.toaster.success(\"Fuel Entry Updated successfully\");\n        this.cancel();\n      }\n    });\n  } // delete uploaded images and documents\n\n\n  delete(name) {\n    this.apiService.deleteData(`fuelEntries/uploadDelete/${this.fuelID}/${name}`).subscribe(result => {\n      this.toaster.success(\"Successfully deleted\");\n    });\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  refreshVendorData() {\n    this.listService.fetchVendors();\n  }\n\n};\n\nAddFuelEntryComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Location\n}, {\n  type: ToastrService\n}, {\n  type: Router\n}, {\n  type: NgbCalendar\n}, {\n  type: NgbDateAdapter\n}, {\n  type: ListService\n}, {\n  type: NgbModal\n}, {\n  type: ModalService\n}, {\n  type: HttpClient\n}, {\n  type: CountryStateCityService\n}, {\n  type: RouteManagementServiceService\n}];\n\nAddFuelEntryComponent.propDecorators = {\n  fuelF: [{\n    type: ViewChild,\n    args: ['fuelF']\n  }]\n};\nAddFuelEntryComponent = __decorate([Component({\n  selector: \"app-add-fuel-entry\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddFuelEntryComponent);\nexport { AddFuelEntryComponent };","map":null,"metadata":{},"sourceType":"module"}