{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./device-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./device-list.component.css\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { ApiService } from '../../../../services/api.service';\nimport { ToastrService } from 'ngx-toastr';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\nimport { NgSelectComponent } from '@ng-select/ng-select';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { environment } from 'src/environments/environment';\nimport { HereMapService } from 'src/app/services';\nlet DeviceListComponent = class DeviceListComponent {\n  constructor(apiService, toastr, httpClient, spinner, hereMap, _sanitizer, modalService, router) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.httpClient = httpClient;\n    this.spinner = spinner;\n    this.hereMap = hereMap;\n    this._sanitizer = _sanitizer;\n    this.modalService = modalService;\n    this.router = router;\n    this.next = '';\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.devices = [];\n    this.listView = true;\n    this.visible = true;\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.isSearch = false;\n    this.get = _.get;\n    this.loaded = false;\n    this.dataColumns = [{\n      width: '8%',\n      field: 'type',\n      header: 'Type',\n      type: \"text\"\n    }, {\n      field: 'deviceSerialNo',\n      header: 'Serial/IMEI',\n      type: \"text\"\n    }, {\n      field: 'devicesName',\n      header: 'Device Name',\n      type: \"text\"\n    }, {\n      field: 'vehicleasset',\n      header: '\tVehicle/Asset',\n      type: \"text\"\n    }, {\n      field: 'deviceStatus',\n      header: 'Status',\n      type: \"text\"\n    }];\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.fetchDevices();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.next = 'null';\n      _this2.devices = [];\n      yield _this2.fetchDevices();\n\n      _this2.setToggleOptions();\n    })();\n  }\n\n  refreshData() {\n    this.next = 'null';\n    this.devices = [];\n    this.fetchDevices();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  fetchDevices() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this3.next === 'end') {\n          return;\n        }\n\n        _this3.dataMessage = Constants.FETCHING_DATA;\n        const result = yield _this3.apiService.getData(`devices/getDevices/${_this3.next}`).toPromise();\n\n        if (result && result.data.length > 0) {\n          result.data.forEach(device => {\n            let deviceItem = {\n              deviceName: device.deviceName,\n              deviceStatus: device.deviceStatus,\n              deviceSerialNo: device.deviceSerialNo,\n              description: device.description,\n              deviceType: device.deviceType,\n              deviceID: device.deviceID,\n              vehicle: {\n                vehicleID: '',\n                vehicleIdentification: ''\n              },\n              asset: {\n                assetID: '',\n                assetIdentification: ''\n              }\n            };\n\n            if (device.vehicleIdentification) {\n              deviceItem.vehicle.vehicleID = device.vehicleID;\n              deviceItem.vehicle.vehicleIdentification = device.vehicleIdentification;\n            }\n\n            if (device.assetIdentification) {\n              deviceItem.asset.assetID = device.assetID;\n              deviceItem.asset.assetIdentification = device.assetIdentification;\n            }\n\n            _this3.devices.push(deviceItem);\n          });\n          _this3.next = result.nextPage || 'end';\n        } else {\n          _this3.next = 'end';\n          _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        _this3.loaded = true;\n        _this3.isSearch = false;\n      } catch (error) {\n        _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n        console.error(error);\n        throw new Error(error);\n      }\n    })();\n  }\n\n  deactivateDevice(devicesType, deviceID, activate) {\n    const confirmationText = activate == true ? 'activate' : 'deactivate';\n    const status = activate == true ? 'activated' : 'deactivated';\n\n    if (confirm(`Are you sure you want to ${confirmationText}?`) === true) {\n      try {\n        let body = {\n          deviceType: devicesType,\n          deviceID: deviceID,\n          activate: activate\n        };\n        this.apiService.putData(`devices/deactivate`, body).subscribe(result => {\n          if (result) {\n            this.devices = [];\n            this.next = 'null';\n            this.fetchDevices();\n            this.toastr.success(`Device ${status} Successfully`);\n          }\n        });\n      } catch (error) {\n        console.error(error);\n        throw new Error(error);\n      }\n    }\n  }\n\n  clear(table) {\n    table.clear();\n  }\n\n  gotoAssetTracker(device) {\n    this.router.navigate([`/fleet/tracking/asset-tracker/${device.asset.assetIdentification}`], {\n      queryParams: {\n        assetId: device.asset.assetID\n      }\n    });\n  }\n\n};\n\nDeviceListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: HttpClient\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}, {\n  type: DomSanitizer\n}, {\n  type: NgbModal\n}, {\n  type: Router\n}];\n\nDeviceListComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nDeviceListComponent = __decorate([Component({\n  selector: 'app-device-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DeviceListComponent);\nexport { DeviceListComponent };","map":null,"metadata":{},"sourceType":"module"}