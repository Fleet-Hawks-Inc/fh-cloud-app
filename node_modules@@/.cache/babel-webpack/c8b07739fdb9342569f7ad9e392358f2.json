{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./imported-assets.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./imported-assets.component.css\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { ApiService } from '../../../../../services/api.service';\nimport { ToastrService } from 'ngx-toastr';\nimport CSVFileValidator from 'csv-file-validator';\nimport Constants from '../../../constants';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Location } from \"@angular/common\";\nlet ImportedAssetsComponent = class ImportedAssetsComponent {\n  constructor(apiService, location, toastr, modalService) {\n    this.apiService = apiService;\n    this.location = location;\n    this.toastr = toastr;\n    this.modalService = modalService;\n    this.display = false;\n    this.loaded = false;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.uploadedDocs = [];\n    this.error = {\n      hasError: false,\n      message: '',\n      attributes: []\n    };\n    this.csvHeader = [];\n    this.array = [];\n    this.validData = {};\n    this.isFileValid = false;\n    this.inValidMessages = [];\n    this.check = false;\n    this.submitDisabled = true;\n    this.importAssets = [];\n    this.importData = {\n      module: 'asset'\n    }; // columns of data table\n\n    this.dataColumns = [{\n      field: 'displayName',\n      header: 'File Name',\n      type: \"text\"\n    }, {\n      field: 'timeCreated',\n      header: 'Uploaded',\n      type: \"text\"\n    }, {\n      field: \"module\",\n      header: 'Module',\n      type: 'text'\n    }, {\n      field: 'fileStatus',\n      header: 'Status',\n      type: \"text\"\n    }];\n\n    this.isStatusValid = status => {\n      return status == 'active' || status == 'inActive';\n    };\n  }\n\n  ngOnInit() {\n    this.setToggleOptions();\n    this.fetchAssetImport();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  selectDoc(event) {\n    this.error.hasError = false;\n    this.error.message = '';\n    this.error.attributes = [];\n    let files = event.target.files;\n    let condition = true;\n\n    if (condition) {\n      this.uploadedDocs = [];\n      this.uploadedDocs = files;\n      const reader = new FileReader();\n      reader.addEventListener('load', event => {\n        let csvdata = event.target.result;\n      });\n      reader.readAsBinaryString(event.target.files[0]);\n    }\n  }\n\n  fetchAssetImport() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this.apiService.getData('importer/get?type=asset').toPromise();\n\n      if (result.length === 0) {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        _this.loaded = true;\n      }\n\n      if (result && result.length > 0) {\n        _this.importAssets = result;\n      }\n\n      _this.loaded = true;\n    })();\n  }\n\n  validateCSV($event) {\n    const data = {\n      headers: [{\n        name: 'asset_name',\n        inputName: 'assetname/number',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'vin',\n        inputName: 'vin',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (name) {\n          const vinformat = /^[a-zA-Z0-9]{17,18}$/;\n          return vinformat.test(name);\n        }\n      }, {\n        name: 'start_date',\n        inputName: 'startdate',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (date) {\n          const dateformat = /^(\\d{4})(\\/|-)(\\d{1,2})(\\/|-)(\\d{1,2})$/;\n          return dateformat.test(date);\n        }\n      }, {\n        name: 'status',\n        inputName: 'status',\n        required: true,\n        validate: this.isStatusValid,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        }\n      }, {\n        name: 'year',\n        inputName: 'year',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (date) {\n          const dateformat = /^\\d{4}$/;\n          return dateformat.test(date);\n        }\n      }, {\n        name: 'licence_plate_number',\n        inputName: 'licenceplatenumber',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (vin) {\n          const vinformat = /^[A-Z0-9\\s]/;\n          return vinformat.test(vin);\n        }\n      }]\n    };\n    CSVFileValidator($event.srcElement.files[0], data).then(csvData => {\n      if (csvData.data.length !== 0 && csvData.data.length < 201) {\n        if (csvData.inValidMessages.length === 0) {\n          this.validData = csvData.data;\n          this.check = true;\n          this.submitDisabled = false;\n          this.inValidMessages = [];\n        } else {\n          this.isFileValid = false;\n          this.check = false;\n          this.submitDisabled = true;\n\n          for (let item of csvData.inValidMessages) {\n            let joinStr = '';\n\n            if (item.includes('start_date')) {\n              joinStr = item + '. Please enter the date in the format: YYYY-MM-DD';\n              this.inValidMessages.push(joinStr);\n            } else if (item.includes('year')) {\n              joinStr = item + '.  Please enter the year in the format: YYYY';\n              this.inValidMessages.push(joinStr);\n            } else if (item.includes('vin')) {\n              joinStr = item + '. VIN must be between 17-18 alphanumeric characters eg.2G1WH55K5Y9322458.';\n              this.inValidMessages.push(joinStr);\n            } else if (item.includes('licence_plate_number')) {\n              joinStr = item + '. Licence must be between 6-8 alphanumeric characters eg.K5Y932.';\n              this.inValidMessages.push(joinStr);\n            } else if (item.includes('status')) {\n              joinStr = item + '.  Status should be active or inActive';\n              this.inValidMessages.push(joinStr);\n            } else {\n              this.inValidMessages.push(item);\n            }\n          }\n        }\n\n        csvData.data;\n      } else if (csvData.data.length == 0) {\n        this.submitDisabled = true;\n        this.toastr.error(\"There are no records in the file uploaded.\");\n      } else {\n        this.submitDisabled = true;\n        this.toastr.error(\"The file should contain a maximum of 200 records.\");\n      }\n    }).catch(err => {});\n  }\n\n  openModal() {\n    this.display = true;\n  }\n\n  refreshData() {\n    this.importAssets = [];\n    this.fetchAssetImport();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  modalClose() {\n    $('#uploadedDocs').val('');\n    this.inValidMessages = [];\n  }\n  /**\r\n    * Clears the table filters\r\n    * @param table Table\r\n    */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n  uploadImport() {\n    if (this.check == true) {\n      if (this.uploadedDocs.length > 0) {\n        const formData = new FormData();\n\n        for (let i = 0; i < this.uploadedDocs.length; i++) {\n          formData.append(\"uploadedDocs\", this.uploadedDocs[i]);\n        }\n\n        this.submitDisabled = true; //append other fields\n\n        formData.append(\"data\", JSON.stringify(this.importData));\n        this.apiService.postData('importer', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            this.submitDisabled = true;\n            $('#uploadedDocs').val('');\n          },\n          next: res => {\n            this.submitDisabled = false;\n            this.toastr.success(\"The file has been scheduled for processing and you will be notified via email once it is completed.\");\n            $('#uploadedDocs').val('');\n            this.display = false;\n            this.fetchAssetImport();\n          }\n        });\n      }\n    }\n  }\n\n  cancel() {\n    this.inValidMessages = [];\n    this.myInputVariable.nativeElement.value = \"\";\n  }\n\n};\n\nImportedAssetsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Location\n}, {\n  type: ToastrService\n}, {\n  type: NgbModal\n}];\n\nImportedAssetsComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  asstImporter: [{\n    type: ViewChild,\n    args: ['asstImporter']\n  }],\n  myInputVariable: [{\n    type: ViewChild,\n    args: ['myInput']\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nImportedAssetsComponent = __decorate([Component({\n  selector: 'app-imported-assets',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ImportedAssetsComponent);\nexport { ImportedAssetsComponent };","map":null,"metadata":{},"sourceType":"module"}