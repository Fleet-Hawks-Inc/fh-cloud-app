{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./trip-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./trip-detail.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { AccountService, ApiService, ListService } from \"../../../../services\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { HereMapService } from \"../../../../services/here-map.service\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as html2pdf from \"html2pdf.js\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { environment } from \"src/environments/environment\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { Location } from \"@angular/common\";\nlet TripDetailComponent = class TripDetailComponent {\n  constructor(apiService, modalService, route, accountService, toastr, spinner, hereMap, location, listService) {\n    this.apiService = apiService;\n    this.modalService = modalService;\n    this.route = route;\n    this.accountService = accountService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.hereMap = hereMap;\n    this.location = location;\n    this.listService = listService;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.environment = environment.isFeatureEnabled;\n    this.noOrdersMsg = Constants.NO_RECORDS_FOUND;\n    this.tripData = {\n      tripNo: \"\",\n      tripStatus: \"\",\n      documents: [],\n      carrierID: \"\",\n      reeferTemperature: \"\",\n      reeferTemperatureUnit: \"\",\n      notifications: {\n        changeRoute: false,\n        pickUp: false,\n        dropOff: false,\n        tripToDriver: false,\n        tripToDispatcher: false\n      },\n      bol: \"\",\n      dateCreated: \"\"\n    };\n    this.driverTerms = '';\n    this.dispatchTerms = '';\n    this.tagLine = '';\n    this.tripID = \"\";\n    this.allAssetName = \"\";\n    this.trips = [];\n    this.newCoords = [];\n    this.speedChartType = \"\";\n    this.speedChartData = [];\n    this.speedChartLabels = [];\n    this.temperatureChartType = \"\";\n    this.temperatureChartData = [];\n    this.temperatureChartLabels = [];\n    this.carrierID = \"\";\n    this.documentID = [];\n    this.allFetchedOrders = [];\n    this.customersObjects = [];\n    this.orderNumbers = \"\";\n    this.allDels = [];\n    this.allPOs = [];\n    this.allPUs = [];\n    this.routeName = \"-\";\n    this.plannedMiles = 0;\n    this.uploadedDocs = [];\n    this.uploadedDocSrc = [];\n    this.vehiclesObject = {};\n    this.assetsObject = {};\n    this.carriersObject = {};\n    this.driversObject = {};\n    this.lastDelivery = \"\";\n    this.stops = 0;\n    this.totalExp = 0;\n    this.tripLog = [];\n    this.expenses = [];\n    this.categories = [];\n    this.splitArr = [];\n    this.showEdit = false;\n    this.showTripInfo = false;\n    this.tripStatus = \"\";\n    this.recallStatus = false;\n    this.ordersData = [];\n    this.customerData = [];\n    this.isEmail = false;\n    this.selectedFileNames = new Map();\n  }\n\n  ngOnInit() {\n    this.listService.getDocsModalList.subscribe(res => {\n      if (res && res.docType != null && res.docType != '') {\n        if (res.module === 'trip') {\n          this.docType = res.docType;\n          this.uploadBolPods(res);\n        }\n      }\n    });\n    this.tripID = this.route.snapshot.params[\"tripID\"];\n    this.fetchTripDetail();\n    this.mapShow();\n    this.fetchTripLog();\n    this.fetchExpenses(); // this.fetchExpenseCategories();\n    // this.initSpeedChart();\n    // this.initTemperatureChart();\n  }\n\n  fetchTripLog() {\n    this.apiService.getData(`auditLogs/details/${this.tripID}`).subscribe(res => {\n      this.tripLog = res.Items;\n\n      if (this.tripLog.length > 0) {\n        this.tripLog.map(k => {\n          k.dateAndTime = `${k.createdDate} ${k.createdTime}`;\n\n          if (k.eventParams.userName !== undefined) {\n            const newString = k.eventParams.userName.split(\"_\");\n            k.userFirstName = newString[0];\n            k.userLastName = newString[1];\n          }\n\n          if (k.eventParams.number !== undefined) {\n            k.entityNumber = k.eventParams.number;\n          }\n\n          if (k.eventParams.name !== undefined) {\n            if (k.eventParams.name.includes(\"_\")) {\n              const newString = k.eventParams.name.split(\"_\");\n              k.firstName = newString[0];\n              k.lastName = newString[1];\n            }\n          }\n        });\n        this.tripLog.sort((a, b) => {\n          return new Date(b.dateAndTime).valueOf() - new Date(a.dateAndTime).valueOf();\n        });\n      }\n    });\n  }\n\n  mapShow() {\n    this.hereMap.mapSetAPI();\n    this.hereMap.mapInit();\n  }\n\n  fetchExpenses() {\n    this.accountService.getData(`expense/fetch/${this.tripID}`).subscribe(result => {\n      this.expenses = result;\n\n      for (const element of this.expenses) {\n        this.totalExp = this.totalExp + element.finalTotal;\n      }\n    });\n  }\n\n  fetchTripDetail() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.tripID = _this.route.snapshot.params[\"tripID\"];\n      let locations = [];\n      _this.uploadedDocSrc = [];\n\n      _this.apiService.getData(\"trips/\" + _this.tripID).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          result = result.Items[0];\n\n          if (result.orderId.length > 0) {\n            _this.customerData = result.customerData;\n            _this.orderNumbers = result.orderNumbers;\n            _this.allDels = result.allDels;\n            _this.allPOs = result.allPOs;\n            _this.allPUs = result.allPUs;\n          }\n\n          if (result.settlmnt) {\n            _this.tripStatus = \"Settled\";\n            _this.recallStatus = false;\n          } else {\n            if (result.tripStatus === \"delivered\") {\n              _this.tripStatus = `${result.tripStatus} (R)`;\n              _this.recallStatus = true;\n            } else {\n              _this.tripStatus = result.tripStatus;\n              _this.recallStatus = false;\n            }\n          }\n\n          if (result.tripStatus === \"delivered\" || result.tripStatus === \"cancelled\" || result.tripStatus === \"tonu\") {\n            _this.showEdit = false;\n          } else {\n            _this.showEdit = true;\n          }\n\n          _this.showTripInfo = true;\n\n          if (result.documents == undefined) {\n            result.documents = [];\n          }\n\n          _this.tripData = result;\n          _this.orderType = result.orderType;\n          let tripPlanning = result.tripPlanning;\n\n          if (result.routeID != \"\" && result.routeID != undefined) {\n            _this.apiService.getData(\"routes/\" + result.routeID).subscribe(result => {\n              _this.routeName = result.Items[0].routeName;\n            });\n          } //Presigned URL using AWS s3\n\n\n          if (result.documents !== undefined && result.documents.length > 0) {\n            result.documents.forEach(x => {\n              if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n                const obj = {\n                  imgPath: `${x.urlPath}`,\n                  docPath: `${x.urlPath}`,\n                  displayName: x.displayName,\n                  name: x.storedName,\n                  ext: x.storedName.split(\".\")[1],\n                  type: x.type ? x.type : 'other'\n                };\n\n                _this.uploadedDocSrc.push(obj);\n              } else {\n                const obj = {\n                  imgPath: 'assets/img/icon-pdf.png',\n                  docPath: `${x.urlPath}`,\n                  displayName: x.displayName,\n                  name: x.storedName,\n                  ext: x.storedName.split(\".\")[1],\n                  type: x.type ? x.type : 'other'\n                };\n\n                _this.uploadedDocSrc.push(obj);\n              }\n            });\n          }\n\n          for (let i = 0; i < tripPlanning.length; i++) {\n            const element = tripPlanning[i];\n            let obj = {\n              planID: element.planID,\n              assetID: element.assetID,\n              assetNames: element.assetNames,\n              carrierID: element.carrierID,\n              carrierName: element.carrierName,\n              coDriverName: element.coDriverName,\n              coDriverUsername: element.codriverUsername,\n              date: element.date,\n              driverName: element.driverName,\n              driverID: element.driverID,\n              driverStatus: element.driverStatus ? element.driverStatus.toUpperCase() : \"\",\n              coDriverID: element.coDriverID,\n              coDriverStatus: element.coDriverStatus ? element.coDriverStatus.toUpperCase() : \"\",\n              driverUsername: element.driverUsername,\n              locationName: element.location,\n              mileType: element.mileType,\n              miles: element.miles,\n              name: element.name,\n              trailer: \"\",\n              trailerName: \"\",\n              type: element.type,\n              vehicleID: element.vehicleID,\n              vehicleName: element.vehicleName,\n              // actualDropTime: element.actualDropTime,\n              // actualPickupTime: element.actualPickupTime,\n              dropTime: element.dropTime,\n              time: element.time,\n              pickupTime: element.pickupTime,\n              commodity: element.commodity ? element.commodity : \"\",\n              orderID: element.orderID ? element.orderID : \"\",\n              orderNumber: element.orderNumber\n            };\n\n            if (element.type == \"Delivery\") {\n              _this.lastDelivery = element.dropTime;\n            }\n\n            if (element.type == \"Stop\") {\n              _this.stops += 1;\n            }\n\n            _this.plannedMiles += parseFloat(element.miles);\n\n            _this.newCoords.push(`${element.lat},${element.lng}`);\n\n            _this.trips.push(obj);\n          }\n\n          let documents = result.tripDocs;\n\n          if (documents.length > 0) {\n            documents.forEach(el => {\n              if (el.uploadedDocs.length > 0) {\n                el.uploadedDocs.forEach(element => {\n                  let name = element.storedName;\n                  let ext = element.storedName.split(\".\")[1];\n                  let obj = {};\n\n                  if (ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\") {\n                    obj = {\n                      imgPath: `${element.urlPath}`,\n                      docPath: `${element.urlPath}`,\n                      displayName: el.docType,\n                      name: name,\n                      ext: ext,\n                      type: element.type ? element.type : 'other'\n                    };\n                  } else {\n                    obj = {\n                      imgPath: \"assets/img/icon-pdf.png\",\n                      docPath: `${element.urlPath}`,\n                      displayName: element.displayName,\n                      name: name,\n                      ext: ext,\n                      type: element.type ? element.type : 'other'\n                    };\n                  }\n\n                  _this.uploadedDocSrc.push(obj);\n                });\n              }\n            });\n          }\n\n          if (result.split) {\n            result.split.map((x, cind) => {\n              _this.splitArr[cind] = [];\n              x.plan.map(c => {\n                _this.trips.map(t => {\n                  if (t.planID === c) {\n                    _this.splitArr[cind].push(t);\n                  }\n                });\n              });\n            });\n          }\n\n          if (_this.newCoords.length > 0) {\n            _this.getCoords();\n          }\n\n          if (result.termsInfo.logo && result.termsInfo.logo != \"\") {\n            _this.companyLogoSrc = `${result.termsInfo.logo}`;\n          }\n\n          if (result.termsInfo) {\n            _this.driverTerms = result.termsInfo.driverTerms ? result.termsInfo.driverTerms : '';\n            _this.dispatchTerms = result.termsInfo.dispatchTerms ? result.termsInfo.dispatchTerms : '';\n            _this.tagLine = result.termsInfo.tagLine ? result.termsInfo.tagLine : '';\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\r\n   * pass trips coords to show on the map\r\n   * @param data\r\n   */\n\n\n  getCoords() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.hereMap.calculateRoute(_this2.newCoords);\n    })();\n  }\n\n  initSpeedChart() {\n    this.speedChartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        mode: \"index\",\n        intersect: false\n      },\n      hover: {\n        mode: \"nearest\",\n        intersect: true\n      },\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 10\n        }\n      },\n      scales: {\n        yAxes: [{\n          display: true,\n          ticks: {\n            stepSize: 2\n          }\n        }]\n      }\n    };\n    this.speedChartLabels = [\"12:00 AM\", \"12:30 AM\", \"1:00 AM\", \"1:30 AM\", \"2:00 AM\", \"2:30 AM\", \"3:00 AM\", \"3:30 AM\", \"4:00 AM\", \"4:30 AM\", \"5:00 AM\", \"5:30 AM\", \"6:00 AM\", \"6:30 AM\", \"7:00 AM\", \"7:30 AM\", \"8:00 AM\", \"8:30 AM\", \"9:00 AM\", \"9:30 AM\", \"10:00 AM\", \"10:30 AM\", \"11:00 AM\", \"11:30 AM\", \"12:00 PM\", \"12:30 PM\", \"1:00 PM\", \"1:30 PM\", \"2:00 PM\", \"2:30 PM\", \"3:00 PM\", \"3:30 PM\", \"4:00 PM\", \"4:30 PM\", \"5:00 PM\", \"5:30 PM\", \"6:00 PM\", \"6:30 PM\", \"7:00 PM\", \"7:30 PM\", \"8:00 PM\", \"8:30 PM\", \"9:00 PM\", \"9:30 PM\", \"10:00 PM\", \"10:30 PM\", \"11:00 PM\", \"11:30 PM\"], this.speedChartType = \"line\";\n    this.speedChartLegend = true;\n    this.speedChartData = [{\n      label: \"Speed Chart\",\n      hidden: false,\n      fill: false,\n      backgroundColor: \"#9c9ea1\",\n      borderColor: \"#9c9ea1\",\n      borderWidth: 1,\n      data: [22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22, 22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22, 22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22, 22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22, 22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22, 22, 35, 47, 50, 60, 76, 80, 12, 43, 32, 54, 44, 22]\n    }];\n  }\n\n  initTemperatureChart() {\n    this.temperatureChartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        mode: \"index\",\n        intersect: false\n      },\n      hover: {\n        mode: \"nearest\",\n        intersect: true\n      },\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 10\n        }\n      },\n      scales: {\n        yAxes: [{\n          // ticks: {beginAtZero:true},\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Temperature (F)\"\n          },\n          ticks: {\n            min: 0,\n            max: 80,\n            stepSize: 5,\n            suggestedMin: 0,\n            suggestedMax: 80,\n            // Include a degree sign in the ticks\n            callback: function (value, index, values) {\n              return value + \"°F\";\n            }\n          }\n        }]\n      }\n    };\n    this.temperatureChartLabels = [\"31 July 12:00\", \"31 July 18:00\", \"1 Aug 00:00\", \"1 Aug 06:00\", \"1 Aug 12:00\", \"1 Aug 18:00\", \"2 Aug 00:00\", \"2 Aug 06:00\", \"2 Aug 12:00\", \"2 Aug 18:00\"], this.temperatureChartType = \"line\";\n    this.temperatureChartLegend = true;\n    this.temperatureChartData = [{\n      label: \"Set Temperature\",\n      fill: false,\n      backgroundColor: \"#9c9ea1\",\n      borderColor: \"#9c9ea1\",\n      borderWidth: 1,\n      data: [12, 15, 17, 13, 15, 12, 18, 12, 18, 13, 10, 14, 12]\n    }, {\n      label: \"Actual Temperature\",\n      fill: false,\n      backgroundColor: \"#000\",\n      borderColor: \"#000\",\n      borderWidth: 1,\n      data: [10, 14, 12, 11, 14, 11, 15, 12, 16, 14, 11, 13, 14]\n    }];\n  }\n\n  uploadBolPods(res) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let i = 0; i < res.documents.length; i++) {\n        const element = res.documents[i];\n        let name = element.name.split(\".\");\n        let ext = name[name.length - 1];\n\n        if (ext != \"jpg\" && ext != \"jpeg\" && ext != \"png\" && ext != \"pdf\") {\n          $(\"#bolUpload\").val(\"\");\n\n          _this3.toastr.error(\"Only image and pdf files are allowed\");\n\n          return false;\n        }\n      }\n\n      for (let i = 0; i < res.documents.length; i++) {\n        _this3.uploadedDocs.push(res.documents[i]);\n      } // create form data instance\n\n\n      const formData = new FormData(); // append photos if any\n\n      for (let i = 0; i < _this3.uploadedDocs.length; i++) {\n        formData.append(\"uploadedDocs\", _this3.uploadedDocs[i]);\n      }\n\n      let result = yield _this3.apiService.postData(`trips/update/bol/${_this3.tripID}/${_this3.docType}`, formData, true).toPromise();\n\n      if (result && result.length > 0) {\n        _this3.tripData.documents = res;\n        _this3.uploadedDocSrc = [];\n        _this3.uploadedDocs = [];\n\n        if (res.length > 0) {\n          for (let k = 0; k < res.length; k++) {\n            const element = res[k]; // this.uploadedDocSrc.push(`${this.Asseturl}/${this.tripData.carrierID}/${element}`);\n\n            let name = element.storedName;\n            let ext = element.storedName.split('.')[1];\n            let obj = {\n              imgPath: '',\n              docPath: '',\n              displayName: '',\n              name: '',\n              ext: '',\n              type: ''\n            };\n\n            if (ext == 'jpg' || ext == 'jpeg' || ext == 'png') {\n              obj = {\n                imgPath: `${ext.urlPath}`,\n                docPath: `${ext.urlPath}`,\n                displayName: element.displayName,\n                name: name,\n                ext: ext,\n                type: ext.type ? ext.type : 'other'\n              };\n            } else {\n              obj = {\n                imgPath: 'assets/img/icon-pdf.png',\n                docPath: `${ext.urlPath}`,\n                displayName: element.displayName,\n                name: name,\n                ext: ext,\n                type: ext.type ? ext.type : 'other'\n              };\n            }\n\n            _this3.uploadedDocSrc.push(obj);\n          }\n        }\n\n        _this3.toastr.success('BOL/POD uploaded successfully');\n\n        _this3.fetchTripDetail();\n      }\n    })();\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let files = [];\n      _this4.uploadedDocs = [];\n      files = [...event.target.files];\n      let totalCount = _this4.tripData.documents.length + files.length;\n\n      if (totalCount > 4) {\n        _this4.uploadedDocs = [];\n        $(\"#bolUpload\").val(\"\");\n\n        _this4.toastr.error(\"Only 4 documents can be uploaded\");\n\n        return false;\n      } else {\n        for (let i = 0; i < files.length; i++) {\n          const element = files[i];\n          let name = element.name.split(\".\");\n          let ext = name[name.length - 1];\n\n          if (ext != \"jpg\" && ext != \"jpeg\" && ext != \"png\" && ext != \"pdf\") {\n            $(\"#bolUpload\").val(\"\");\n\n            _this4.toastr.error(\"Only image and pdf files are allowed\");\n\n            return false;\n          }\n        }\n\n        for (let i = 0; i < files.length; i++) {\n          _this4.uploadedDocs.push(files[i]);\n        } // create form data instance\n\n\n        const formData = new FormData(); //   for (let i = 0; i < files.length; i++) {\n        //   const element = files[i];\n        //   this.uploadedDocs.push(element);\n        // }\n        //append docs if any\n\n        for (let j = 0; j < _this4.uploadedDocs.length; j++) {\n          // let file = this.uploadedDocs[j];\n          //  formData.append(`uploadedDocs-${j}`, file);\n          formData.append(\"uploadedDocs\", _this4.uploadedDocs[j]);\n        }\n\n        formData.append(\"data\", JSON.stringify(_this4.tripData.documents));\n\n        _this4.apiService.postData('trips/update/bol/' + _this4.tripID, formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            from(err.error).pipe(map(val => {\n              val.message = val.message.replace(/\".*\"/, \"This Field\");\n              _this4.errors[val.context.label] = val.message;\n\n              _this4.spinner.hide();\n            })).subscribe({\n              complete: () => {\n                _this4.spinner.hide();\n              },\n              error: () => {},\n              next: () => {}\n            });\n          },\n          next: res => {\n            _this4.tripData.documents = res;\n            _this4.uploadedDocSrc = [];\n            _this4.uploadedDocs = [];\n\n            if (res.length > 0) {\n              for (let k = 0; k < res.length; k++) {\n                const element = res[k]; // this.uploadedDocSrc.push(`${this.Asseturl}/${this.tripData.carrierID}/${element}`);\n\n                let name = element.storedName;\n                let ext = element.storedName.split('.')[1];\n                let obj = {\n                  imgPath: '',\n                  docPath: '',\n                  displayName: '',\n                  name: '',\n                  ext: ''\n                };\n\n                if (ext == 'jpg' || ext == 'jpeg' || ext == 'png') {\n                  obj = {\n                    imgPath: `${ext.urlPath}`,\n                    docPath: `${ext.urlPath}`,\n                    displayName: element.displayName,\n                    name: name,\n                    ext: ext\n                  };\n                } else {\n                  obj = {\n                    imgPath: 'assets/img/icon-pdf.png',\n                    docPath: `${ext.urlPath}`,\n                    displayName: element.displayName,\n                    name: name,\n                    ext: ext\n                  };\n                }\n\n                _this4.uploadedDocSrc.push(obj);\n              }\n            }\n\n            _this4.toastr.success('BOL/POD uploaded successfully');\n\n            _this4.fetchTripDetail();\n          }\n        });\n      }\n    })();\n  }\n\n  openTripInfo() {\n    let ngbModalOptions = {\n      backdrop: \"static\",\n      keyboard: false,\n      windowClass: \"trip--info__main\"\n    };\n    this.tripInfoRef = this.modalService.open(this.tripInfoModal, ngbModalOptions);\n  }\n\n  generate() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var data = document.getElementById(\"print_wrap\");\n      html2pdf(data, {\n        margin: 0.3,\n        pagebreak: {\n          mode: 'avoid-all',\n          before: \"print_wrap\"\n        },\n        filename: \"trip-information.pdf\",\n        image: {\n          type: \"jpeg\",\n          quality: 1\n        },\n        html2canvas: {\n          dpi: 300,\n          letterRendering: true,\n          allowTaint: true,\n          useCORS: true\n        },\n        jsPDF: {\n          unit: \"in\",\n          format: \"a4\",\n          orientation: \"landscape\"\n        }\n      });\n\n      _this5.tripInfoRef.close();\n    })();\n  }\n\n  driverEmail() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.isEmail = true;\n      let result = yield _this6.apiService.getData(`trips/send/emailDriver/${_this6.tripID}`).toPromise();\n\n      if (result === null) {\n        _this6.tripInfoRef.close();\n\n        _this6.toastr.success(\"Email send successfully\");\n\n        _this6.isEmail = false;\n      } else {\n        _this6.isEmail = false;\n      }\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  openDocModal() {\n    let obj = {\n      type: 'trip',\n      docLength: this.uploadedDocSrc.length\n    };\n    this.listService.openDocTypeMOdal(obj);\n  }\n\n};\n\nTripDetailComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: NgbModal\n}, {\n  type: ActivatedRoute\n}, {\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}, {\n  type: Location\n}, {\n  type: ListService\n}];\n\nTripDetailComponent.propDecorators = {\n  tripInfoModal: [{\n    type: ViewChild,\n    args: [\"tripInfoModal\", {\n      static: true\n    }]\n  }]\n};\nTripDetailComponent = __decorate([Component({\n  selector: \"app-trip-detail\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], TripDetailComponent);\nexport { TripDetailComponent };","map":null,"metadata":{},"sourceType":"module"}