{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-driver.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-driver.component.css\";\n\nconst ct = require(\"countries-and-timezones\");\n\nimport { Location } from \"@angular/common\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { NgbCalendar, NgbDateAdapter, NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { Auth } from \"aws-amplify\";\nimport { passwordStrength } from \"check-password-strength\";\nimport * as _ from \"lodash\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from, Subject, throwError } from \"rxjs\";\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap, takeUntil } from \"rxjs/operators\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { ApiService, DashboardUtilityService, HereMapService, ListService } from \"../../../../services\";\nimport { ModalService } from \"../../../../services/modal.service\";\nimport Constants from \"../../constants\";\nlet AddDriverComponent = class AddDriverComponent {\n  constructor(apiService, httpClient, toastr, route, spinner, HereMap, ngbCalendar, domSanitizer, location, modalService, modalServiceOwn, dateAdapter, router, listService, countryStateCity, dashboardUtilityService) {\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.route = route;\n    this.spinner = spinner;\n    this.HereMap = HereMap;\n    this.ngbCalendar = ngbCalendar;\n    this.domSanitizer = domSanitizer;\n    this.location = location;\n    this.modalService = modalService;\n    this.modalServiceOwn = modalServiceOwn;\n    this.dateAdapter = dateAdapter;\n    this.router = router;\n    this.listService = listService;\n    this.countryStateCity = countryStateCity;\n    this.dashboardUtilityService = dashboardUtilityService;\n    this.takeUntil$ = new Subject();\n    this.Asseturl = this.apiService.AssetUrl;\n    this.hideNextBtn = true;\n    this.hasBasic = false;\n    this.hasDocs = false;\n    this.hasLic = false;\n    this.hasPay = false;\n    this.hasHos = false;\n    this.hasCrossBrdr = false;\n    this.deletedUploads = [];\n    this.addressField = -1;\n    this.driverProfileSrc = \"assets/img/driver/driver.png\";\n    this.errors = {}; // form;\n\n    this.concatArrayKeys = \"\";\n    this.manualAddress = false;\n    this.allDrivers = [];\n    this.groupData = {\n      groupType: \"drivers\",\n      groupName: \"\",\n      groupMembers: \"\",\n      description: \"\"\n    };\n    this.driverAddress = {\n      address: []\n    };\n    this.isEdit = false;\n    this.driverData = {\n      employeeContractorId: \"\",\n      createdDate: \"\",\n      createdTime: \"\",\n      driverType: \"employee\",\n      entityType: Constants.DRIVER,\n      gender: \"M\",\n      DOB: null,\n      abstractDocs: [],\n      corporationType: null,\n      vendor: null,\n      corporation: \"\",\n      ownerOperator: null,\n      driverStatus: null,\n      userName: \"\",\n      firstName: null,\n      middleName: \"\",\n      lastName: null,\n      startDate: null,\n      terminationDate: null,\n      contractStart: null,\n      contractEnd: null,\n      password: null,\n      confirmPassword: null,\n      citizenship: null,\n      assignedVehicle: null,\n      groupID: null,\n      driverImage: \"\",\n      phone: \"\",\n      email: \"\",\n      address: [{\n        addressID: \"\",\n        addressType: null,\n        countryName: \"\",\n        countryCode: \"\",\n        stateCode: \"\",\n        stateName: \"\",\n        cityName: \"\",\n        zipCode: \"\",\n        address1: \"\",\n        address2: \"\",\n        geoCords: {\n          lat: \"\",\n          lng: \"\"\n        },\n        manual: false,\n        userLocation: \"\",\n        states: [],\n        cities: [],\n        isSuggest: false\n      }],\n      documentDetails: [{\n        documentType: null,\n        document: \"\",\n        issuingAuthority: \"\",\n        issuingCountry: null,\n        issuingState: null,\n        issueDate: \"\",\n        expiryDate: \"\",\n        uploadedDocs: [],\n        docStates: []\n      }],\n      crossBorderDetails: {\n        ACI_ID: \"\",\n        ACE_ID: \"\",\n        fast_ID: \"\",\n        fastExpiry: null,\n        csa: false\n      },\n      paymentDetails: {\n        paymentType: null,\n        loadedMiles: \"\",\n        loadedMilesTeam: \"\",\n        loadedMilesUnit: \"\",\n        loadedMilesTeamUnit: \"\",\n        emptyMiles: \"\",\n        emptyMilesTeam: \"\",\n        emptyMilesUnit: \"\",\n        emptyMilesTeamUnit: \"\",\n        loadPayPercentage: \"\",\n        loadPayPercentageOf: \"\",\n        rate: \"\",\n        rateUnit: null,\n        waitingPay: \"\",\n        waitingPayUnit: null,\n        waitingHourAfter: \"\",\n        deliveryRate: \"\",\n        deliveryRateUnit: null,\n        payPeriod: null\n      },\n      SIN: \"\",\n      CDL_Number: \"\",\n      licenceDetails: {\n        issuedCountry: null,\n        issuedState: null,\n        licenceExpiry: null,\n        licenceNotification: true,\n        WCB: \"\",\n        medicalCardRenewal: null,\n        healthCare: \"\",\n        vehicleType: \"\",\n        licCntryName: \"\",\n        licStateName: \"\"\n      },\n      hosDetails: {\n        hosStatus: null,\n        timezone: null,\n        type: null,\n        hosRemarks: \"\",\n        homeTerminal: null,\n        pcAllowed: false,\n        ymAllowed: false,\n        hosCycleName: null,\n        optZone: \"South (Canada)\"\n      },\n      emergencyDetails: {\n        name: \"\",\n        relationship: \"\",\n        phone: \"\"\n      }\n    };\n    this.searchTerm = new Subject();\n    this.localAbsDocs = [];\n    this.newDocuments = [];\n    this.newAddress = [];\n    /**\r\n     * Form Props\r\n     */\n\n    this.userType = \"driver\"; // default\n\n    this.userName = null;\n    this.password = \"\";\n    this.firstName = null;\n    this.lastName = null;\n    this.address = \"\";\n    this.phone = \"\";\n    this.email = \"\";\n    this.groupID = \"\";\n    this.loginEnabled = true;\n    this.driverNumber = \"\";\n    this.driverLicenseNumber = \"\";\n    this.driverLicenseType = \"\";\n    this.driverLicenseExpiry = \"\";\n    this.driverLicenseStateID = \"\";\n    this.HOSCompliance = {\n      status: \"\",\n      type: \"\",\n      cycleID: \"\"\n    };\n    this.defaultContract = {\n      perMile: \"\",\n      team: \"\",\n      hourly: \"\",\n      pickOrDrop: \"\"\n    };\n    this.fixed = {\n      amount: \"\",\n      type: \"\"\n    };\n    this.yardID = \"\";\n    this.documentTypeList = [];\n    this.driverLicenseCountry = \"\";\n    this.groups = [];\n    this.docCountries = [];\n    this.docStates = [];\n    this.states = [];\n    this.errorAbstract = false;\n    this.cities = [];\n    this.yards = [];\n    this.cycles = [];\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.imageTitle = \"Add\";\n    this.Error = \"\";\n    this.Success = \"\";\n    this.visibleIndex = 0;\n    this.uploadedPhotos = [];\n    this.licStates = [];\n    this.uploadedDocs = [];\n    this.abstractDocs = [];\n    this.existingPhotos = [];\n    this.existingDocs = [];\n    this.assetsImages = [];\n    this.assetsDocs = [];\n    this.absDocs = [];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"\");\n    this.isSubmitted = false;\n    this.showIcons = false;\n    this.profileTitle = \"Add\";\n    this.addressCountries = [];\n    this.carrierYards = [];\n    this.deletedAddress = [];\n    this.abstractValid = false;\n    this.finalPrefix = \"\";\n    this.modelID = \"\";\n    this.submitDisabled = false;\n    this.groupSubmitDisabled = false;\n    this.passwordValidation = {\n      upperCase: false,\n      lowerCase: false,\n      number: false,\n      specialCharacters: false,\n      length: false\n    };\n    this.finaltimezones = [];\n    this.nullVar = null;\n    this.uploadedPic = \"\";\n    this.showUploadedPicModal = false;\n    this.pageType = \"add\";\n\n    this.getCurrentuser = () => __awaiter(this, void 0, void 0, function* () {\n      this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      this.currentUserCarrier = this.currentUser.carrierID;\n      this.carrierID = this.currentUser.carrierID;\n\n      if (this.currentUser.userType === \"Cloud Admin\") {\n        let isCarrierID = localStorage.getItem(\"carrierID\");\n\n        if (isCarrierID !== undefined) {\n          this.currentUserCarrier = isCarrierID;\n        }\n      }\n\n      this.apiService.getData(`carriers/${this.currentUserCarrier}`).subscribe(result => {\n        if (result.Items[0].addressDetails !== undefined) {\n          result.Items[0].addressDetails.map(e => {\n            if (e.addressType === \"yard\") {\n              this.carrierYards.push(e);\n            }\n          });\n        }\n\n        for (let a = 0; a < this.carrierYards.length; a++) {\n          this.carrierYards.map(e => __awaiter(this, void 0, void 0, function* () {\n            if (e.manual) {\n              e.countryName = yield this.countryStateCity.GetSpecificCountryNameByCode(e.countryCode);\n              e.stateName = yield this.countryStateCity.GetStateNameFromCode(e.stateCode, e.countryCode);\n            }\n          }));\n        }\n      });\n    });\n\n    this.modalServiceOwn.triggerRedirect.next(false);\n    this.router.events.pipe(takeUntil(this.takeUntil$)).subscribe(v => {\n      if (v.url !== \"undefined\" || v.url !== \"\") {\n        this.modalServiceOwn.setUrlToNavigate(v.url);\n      }\n    });\n    this.modalServiceOwn.triggerRedirect$.pipe(takeUntil(this.takeUntil$)).subscribe(v => {\n      if (v) {\n        this.router.navigateByUrl(this.modalServiceOwn.urlToRedirect.getValue());\n      }\n    });\n    this.selectedFileNames = new Map();\n    const date = new Date();\n    this.getcurrentDate = {\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate()\n    };\n    this.birthDateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.birthDateMaxLimit = {\n      year: date.getFullYear() - 18,\n      month: 12,\n      day: 31\n    };\n    this.futureDatesLimit = {\n      year: date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n  }\n\n  scrollError() {\n    let errorList;\n    setTimeout(() => {\n      errorList = document.getElementsByClassName(\"error\").length;\n\n      if (errorList > 0) {\n        let topPosition = $(\".error\").parent(\"div\").offset().top;\n        window.scrollTo({\n          top: topPosition - 150,\n          left: 0,\n          behavior: \"smooth\"\n        });\n      }\n    }, 1500);\n  }\n  /**\r\n   * Unsaved Changes\r\n  //  */\n  // Disable it temporary.\n  // canLeave(): boolean {\n  //   if (this.driverF.dirty && !this.isSubmitted) {\n  //     if (!this.modalService.hasOpenModals()) {\n  //       let ngbModalOptions: NgbModalOptions = {\n  //         backdrop: \"static\",\n  //         keyboard: false,\n  //         size: \"sm\",\n  //       };\n  //       this.modalService.open(UnsavedChangesComponent, ngbModalOptions);\n  //     }\n  //     return false;\n  //   }\n  //   this.modalServiceOwn.triggerRedirect.next(true);\n  //   this.takeUntil$.next();\n  //   this.takeUntil$.complete();\n  //   return true;\n  // }\n\n\n  onChangeHideErrors(fieldname) {\n    $('[name=\"' + fieldname + '\"]').removeClass(\"error\").next().remove(\"label\");\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.listService.fetchVehicles();\n      this.driverID = this.route.snapshot.params[`driverID`];\n\n      if (this.driverID) {\n        this.pageTitle = \"Edit Driver\";\n        this.pageType = \"edit\";\n        yield this.fetchDriverByID();\n      } else {\n        this.pageTitle = \"Add Driver\";\n      }\n\n      this.fetchGroups(); // fetch groups\n\n      this.docCountries = yield this.dashboardUtilityService.fetchCountries(); // fetch countries\n\n      this.getToday(); // get today date on calender\n\n      this.searchLocation(); // search location on keyup\n\n      this.fetchDocuments();\n      this.fetchTimezones(); // to fetch timezone\n\n      this.fetchDrivers();\n      yield this.getCurrentuser();\n      let vehicleList = new Array();\n      this.getValidVehicles(vehicleList);\n      this.vehicles = vehicleList;\n    });\n  }\n\n  getValidVehicles(vehicleList) {\n    let ids = [];\n    this.listService.vehicleList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.vehicleIdentification && element2.isDeleted === 1 && element2.vehicleID === this.driverData.assignedVehicle) {\n          this.driverData.assignedVehicle = null;\n        }\n\n        if (element2.vehicleIdentification && element2.isDeleted === 0 && !ids.includes(element2.vehicleID)) {\n          vehicleList.push(element2);\n          ids.push(element2.vehicleID);\n        }\n      });\n    });\n  }\n\n  getCarrierDetails(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.spinner.show();\n      this.apiService.getData(\"carriers/\" + id).subscribe(res => {\n        if (res.Items.length > 0) {\n          let carrierPrefix = res.Items[0].businessName;\n          let toArray = carrierPrefix.match(/\\b(\\w)/g);\n          this.prefixOutput = toArray.join(\"\") + \"-\";\n        }\n\n        this.spinner.hide();\n      });\n    });\n  }\n\n  fetchDrivers() {\n    this.apiService.getData(\"drivers\").subscribe(res => {\n      // this.allDrivers = res.Items;\n      res.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.allDrivers.push(element);\n        }\n      });\n    });\n  }\n\n  fetchTimezones() {\n    const UStimezones = ct.getTimezonesForCountry(`US`);\n    UStimezones.forEach(element => {\n      const obj = {\n        name: element.name,\n        country: element.countries[0]\n      };\n      this.finaltimezones.push(obj);\n    });\n    const CAtimezones = ct.getTimezonesForCountry(`CA`);\n    CAtimezones.forEach(e => {\n      const obj = {\n        name: e.name,\n        country: e.countries[0]\n      };\n      this.finaltimezones.push(obj);\n    });\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  refreshVehicleData() {\n    this.listService.fetchVehicles();\n  }\n\n  clearUserLocation(i) {\n    this.driverData.address[i][`userLocation`] = \"\";\n    $(\"div\").removeClass(\"show-search__result\");\n  }\n\n  manAddress(event, i) {\n    if (event.target.checked) {\n      $(event.target).closest(\".address-item\").addClass(\"open\");\n      this.driverData.address[i][`userLocation`] = \"\";\n      this.driverData.address[i].zipCode = \"\";\n      this.driverData.address[i].countryCode = \"\";\n      this.driverData.address[i].stateCode = \"\";\n      this.driverData.address[i].cityName = \"\";\n      this.driverData.address[i].zipCode = \"\";\n      this.driverData.address[i].address1 = \"\";\n      this.driverData.address[i].address2 = \"\";\n    } else {\n      $(event.target).closest(\".address-item\").removeClass(\"open\");\n      this.driverData.address[i].countryCode = \"\";\n      this.driverData.address[i].countryName = \"\";\n      this.driverData.address[i].stateCode = \"\";\n      this.driverData.address[i].stateName = \"\";\n      this.driverData.address[i].cityName = \"\";\n      this.driverData.address[i].zipCode = \"\";\n      this.driverData.address[i].address1 = \"\";\n      this.driverData.address[i].address2 = \"\";\n      this.driverData.address[i].geoCords.lat = \"\";\n      this.driverData.address[i].geoCords.lng = \"\";\n      $(\"#addErr\" + i).css(\"display\", \"none\");\n    }\n  }\n\n  onChangeUnitType(str, value) {\n    if (str === \"driver_type\") {\n      if (value === \"employee\") {\n        delete this.driverData.ownerOperator;\n        delete this.driverData.corporationType;\n        delete this.driverData.vendor;\n        delete this.driverData.corporation;\n        delete this.driverData.contractStart;\n        delete this.driverData.contractEnd;\n      } else {\n        delete this.driverData.startDate;\n        delete this.driverData.terminationDate;\n      }\n\n      this.driverData.driverType = value;\n    } else {\n      this.driverData.gender = value;\n    }\n  }\n\n  addAddress() {\n    this.driverData.address.push({\n      addressID: \"\",\n      addressType: \"\",\n      countryCode: \"\",\n      countryName: \"\",\n      stateCode: \"\",\n      stateName: \"\",\n      cityName: \"\",\n      zipCode: \"\",\n      address1: \"\",\n      address2: \"\",\n      geoCords: {\n        lat: \"\",\n        lng: \"\"\n      },\n      manual: false,\n      userLocation: \"\",\n      states: [],\n      cities: [],\n      isSuggest: false\n    });\n  }\n\n  fetchGroups() {\n    this.apiService.getData(`groups/getGroup/${this.groupData.groupType}`).subscribe(result => {\n      this.groups = result.Items;\n    });\n  }\n\n  refreshGroupsData() {\n    this.fetchGroups();\n  }\n\n  refreshVendorData() {\n    this.listService.fetchVendors();\n  }\n\n  refreshOpData() {\n    this.listService.fetchOwnerOperators();\n  } // async fetchCountries() {\n  //   this.docCountries = await this.countryStateCity.GetAllCountries();\n  // }\n\n\n  getStates(countryCode, index) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.driverData.address[index].stateCode = \"\";\n      this.driverData.address[index].cityName = \"\";\n      this.driverData.address[index].states = yield this.countryStateCity.GetStatesByCountryCode([countryCode]);\n    });\n  }\n\n  getCities(stateCode, index, countryCode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.driverData.address[index].cityName = \"\";\n      this.driverData.address[index].cities = yield this.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n      this.driverData.address[index].countryName = yield this.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      this.driverData.address[index].stateName = yield this.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n    });\n  }\n\n  getDocStates(cntryCode, index) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.driverData.documentDetails[index].issuingState = \"\";\n      this.driverData.documentDetails[index].docStates = yield this.countryStateCity.GetStatesByCountryCode([cntryCode]);\n    });\n  }\n\n  getLicStates(cntryCode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.driverData.licenceDetails.issuedState = null;\n      this.driverData.licenceDetails.licCntryName = yield this.countryStateCity.GetSpecificCountryNameByCode(cntryCode);\n      this.licStates = yield this.countryStateCity.GetStatesByCountryCode([cntryCode]);\n    });\n  }\n\n  getLicenseStateName() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.driverData.licenceDetails.issuedState && this.driverData.licenceDetails.issuedCountry) {\n        this.driverData.licenceDetails.licStateName = yield this.countryStateCity.GetStateNameFromCode(this.driverData.licenceDetails.issuedState, this.driverData.licenceDetails.issuedCountry);\n      }\n    });\n  }\n\n  fetchLicStates(issuedCountry) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.licStates = yield this.countryStateCity.GetStatesByCountryCode([issuedCountry]);\n    });\n  }\n\n  fetchStates(countryCode, index) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let states = yield this.countryStateCity.GetStatesByCountryCode([countryCode]);\n      this.driverData.address[index].states = states;\n    });\n  }\n\n  fetchCities(countryCode, stateCode, index) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.driverData.address[index].cities = yield this.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    });\n  }\n\n  editAddress(address) {\n    for (let a = 0; a < address.length; a++) {\n      const countryCode = address[a].countryCode;\n      const stateCode = address[a].stateCode;\n\n      if (countryCode !== \"\" && countryCode !== null) {\n        this.fetchStates(countryCode, a);\n      }\n\n      if (stateCode !== \"\" && stateCode !== null) {\n        this.fetchCities(countryCode, stateCode, a);\n      }\n    }\n  }\n\n  fetchDocStates(docs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let d = 0; d < docs.length; d++) {\n        let countryCode = this.driverData.documentDetails[d].issuingCountry;\n        this.driverData.documentDetails[d].docStates = yield this.countryStateCity.GetStatesByCountryCode([countryCode]);\n      }\n    });\n  }\n\n  fetchDocuments() {\n    this.httpClient.get(\"assets/travelDocumentType.json\").subscribe(data => {\n      this.documentTypeList = data;\n    });\n  }\n\n  getToday() {\n    return new Date().toISOString().split(\"T\")[0];\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event, i) {\n    let files = [...event.target.files];\n\n    if (i != null) {\n      this.uploadedDocs[i] = [];\n      this.uploadedDocs[i] = files;\n    } else {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        this.localAbsDocs.push(e.target.result);\n      };\n\n      reader.readAsDataURL(files[0]);\n      this.abstractDocs = [];\n      this.abstractDocs = files;\n    }\n  }\n\n  selectPhoto(event, name, type) {\n    if (type === \"Add\") {\n      this.uploadedPhotos = [];\n      const files = [...event.target.files];\n      this.uploadedPhotos.push(files[0]);\n\n      for (let i = 0; i < files.length; i++) {\n        const reader = new FileReader();\n        this.showUploadedPicModal = true;\n\n        reader.onload = e => {\n          this.uploadedPic = e.target.result;\n        };\n\n        reader.readAsDataURL(files[i]);\n        this.imageTitle = \"Change\";\n      }\n    } else {\n      this.uploadedPhotos = [];\n      const files = [...event.target.files];\n      this.uploadedPhotos.push(files[0]);\n\n      for (let i = 0; i < files.length; i++) {\n        const reader = new FileReader();\n        this.showUploadedPicModal = true;\n\n        reader.onload = e => {\n          this.uploadedPic = e.target.result;\n        };\n\n        reader.readAsDataURL(files[i]);\n      }\n\n      this.deletedUploads.push(name);\n    }\n  }\n\n  removeProfile() {\n    this.driverProfileSrc = \"assets/img/driver/driver.png\";\n    this.uploadedPhotos = [];\n    this.profileTitle = \"Add\";\n  }\n\n  searchLocation() {\n    this.searchTerm.pipe(map(e => {\n      $(\".map-search__results\").hide();\n      $(e.target).closest(\"div\").addClass(\"show-search__result\");\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.HereMap.searchEntries(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      this.searchResults = res;\n    });\n  }\n\n  addGroup() {\n    this.groupSubmitDisabled = true;\n    this.hideErrors();\n    this.apiService.postData(\"groups\", this.groupData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n            this.groupSubmitDisabled = false;\n          },\n          error: () => {\n            this.groupSubmitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.groupSubmitDisabled = false;\n        this.fetchGroups();\n        this.toastr.success(\"Group added successfully\");\n        $(\"#addDriverGroupModal\").modal(\"hide\");\n        this.groupData = {\n          groupType: \"drivers\",\n          groupName: \"\",\n          groupMembers: \"\",\n          description: \"\"\n        };\n      }\n    });\n  }\n\n  newGeoCode(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result = yield this.apiService.getData(`pcMiles/geocoding/${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n      if (result.items != undefined && result.items.length > 0) {\n        return result.items[0].position;\n      }\n    });\n  }\n\n  changeCompany(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (value === \"company\") {\n        this.driverData.corporation = null;\n        this.driverData.ownerOperator = null;\n        this.listService.fetchVendors();\n        let vendorList = new Array();\n        this.getValidVendors(vendorList);\n        this.vendors = vendorList;\n      } else if (value === \"corporation\") {\n        this.driverData.vendor = null;\n        this.driverData.ownerOperator = null;\n      } else {\n        this.driverData.vendor = null;\n        this.driverData.corporation = null;\n        this.listService.fetchOwnerOperators();\n        let opList = new Array();\n        this.getValidOperators(opList);\n        this.ownerOperators = opList;\n      }\n    });\n  }\n\n  getValidVendors(vendorList) {\n    let ids = [];\n    this.listService.vendorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          vendorList.push(element2);\n          ids.push(element2.contactID);\n        }\n\n        if (element2.isDeleted === 1 && element2.contactID === this.driverData.vendor) {\n          this.driverData.vendor = null;\n        }\n      });\n    });\n  }\n\n  getValidOperators(operatorList) {\n    let ids = [];\n    this.listService.ownerOperatorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          operatorList.push(element2);\n          ids.push(element2.contactID);\n        }\n\n        if (element2.isDeleted === 1 && element2.contactID === this.driverData.ownerOperator) {\n          this.driverData.ownerOperator = null;\n        }\n      });\n    });\n  }\n\n  onAddDriver() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.abstractDocs.length > 0) {\n        this.hasError = false;\n        this.hasSuccess = false;\n        this.hideErrors();\n        this.driverData.createdDate = this.driverData.createdDate;\n        this.driverData.createdTime = this.driverData.createdTime;\n        this.driverData[`deletedUploads`] = this.deletedUploads;\n\n        for (let d = 0; d < this.driverData.documentDetails.length; d++) {\n          const element = this.driverData.documentDetails[d];\n          delete element.docStates;\n        }\n\n        for (let i = 0; i < this.driverData.address.length; i++) {\n          const element = this.driverData.address[i];\n\n          if (element.manual === true) {\n            let data = {\n              address1: element.address1,\n              address2: element.address2,\n              cityName: element.cityName,\n              stateName: element.stateName,\n              countryName: element.countryName,\n              zipCode: element.zipCode\n            };\n            $(\"#addErr\" + i).css(\"display\", \"none\");\n            let result = yield this.newGeoCode(data);\n\n            if (result == null) {\n              $(\"#addErr\" + i).css(\"display\", \"block\");\n              return false;\n            }\n\n            if (result != undefined || result != null) {\n              element.geoCords = result;\n            }\n          } else {\n            $(\"#addErr\" + i).css(\"display\", \"none\");\n\n            if (element.isSuggest != true && element.userLocation !== \"\") {\n              $(\"#addErr\" + i).css(\"display\", \"block\");\n              return;\n            }\n          }\n\n          delete element.states;\n          delete element.cities;\n        } // create form data instance\n\n\n        const formData = new FormData(); // append photos if any\n\n        for (let i = 0; i < this.uploadedPhotos.length; i++) {\n          formData.append(\"uploadedPhotos\", this.uploadedPhotos[i]);\n        } // append docs if any\n\n\n        for (let j = 0; j < this.uploadedDocs.length; j++) {\n          if (this.uploadedDocs[j] !== undefined) {\n            for (let k = 0; k < this.uploadedDocs[j].length; k++) {\n              let file = this.uploadedDocs[j][k];\n              formData.append(`uploadedDocs-${j}`, file);\n            }\n          }\n        } // append abstact history docs if any\n\n\n        for (let k = 0; k < this.abstractDocs.length; k++) {\n          formData.append(\"abstractDocs\", this.abstractDocs[k]);\n        } // append other fields\n\n\n        formData.append(\"data\", JSON.stringify(this.driverData));\n        this.submitDisabled = true;\n\n        try {\n          this.apiService.postData(\"drivers\", formData, true).subscribe({\n            complete: () => {},\n            error: err => {\n              from(err.error).pipe(map(val => {\n                // val.message = val.message.replace(/\".*\"/, 'This Field');\n                this.errors[val.context.key] = val.message;\n                this.spinner.hide();\n              })).subscribe({\n                complete: () => {\n                  this.throwErrors();\n                  this.hasError = true;\n                  this.submitDisabled = false;\n                },\n                error: () => {\n                  this.submitDisabled = false;\n                },\n                next: () => {}\n              });\n            },\n            next: res => {\n              // this.response = res;\n              // this.hasSuccess = true;\n              this.dashboardUtilityService.refreshDrivers = true;\n              this.submitDisabled = false;\n              this.toastr.success(\"Driver added successfully\");\n              this.isSubmitted = true;\n              this.modalServiceOwn.triggerRedirect.next(true);\n              this.takeUntil$.next();\n              this.takeUntil$.complete();\n              this.spinner.hide();\n              this.router.navigateByUrl(\"/fleet/drivers/list\");\n            }\n          });\n        } catch (error) {\n          this.submitDisabled = false;\n          return \"error found\";\n        }\n      } else {\n        this.errorAbstract = true;\n        this.toastr.error(\"Abstract history document is required.\");\n      }\n    });\n  }\n\n  userAddress(i, item) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.driverData.address[i].userLocation = item.address;\n      let result = yield this.getAddressDetail(item.place_id);\n\n      if (result != undefined) {\n        this.driverData.address[i].zipCode = result.address.Zip;\n        this.driverData.address[i].geoCords.lat = result.position.lat;\n        this.driverData.address[i].geoCords.lng = result.position.lng;\n        this.driverData.address[i].countryName = result.address.CountryFullName;\n        $(\"div\").removeClass(\"show-search__result\");\n        this.driverData.address[i].stateName = result.address.StateName;\n        this.driverData.address[i].cityName = result.address.City;\n        this.driverData.address[i].address1 = result.address.StreetAddress ? result.address.StreetAddress : \"\";\n        this.driverData.address[i].isSuggest = true;\n      }\n    });\n  }\n\n  getAddressDetail(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result = yield this.apiService.getData(`pcMiles/detail/${id}`).toPromise();\n      return result;\n    });\n  }\n\n  remove(obj, i, addressID = null) {\n    if (obj === \"address\") {\n      this.driverData.address.splice(i, 1);\n    } else {\n      this.driverData.documentDetails.splice(i, 1);\n    }\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v === \"userName\" || v === \"email\" || v === \"employeeContractorId\" || v === \"CDL_Number\" || v === \"SIN\") {\n        $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n      }\n\n      if (v === \"abstractDocs\") {\n        $('[name=\"' + v + '\"]').after('<label class=\"text-danger\"> Abstract history document is mandatory.</label>');\n      }\n\n      if (v === \"cognito\") {\n        this.toastr.error(this.errors[v]);\n      }\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n\n  addDocument() {\n    this.driverData.documentDetails.push({\n      documentType: \"\",\n      document: \"\",\n      issuingAuthority: \"\",\n      issuingCountry: \"\",\n      issuingState: \"\",\n      issueDate: \"\",\n      expiryDate: \"\",\n      uploadedDocs: [],\n      docStates: []\n    });\n  }\n\n  deleteInput(i) {\n    this.driverData.documentDetails.splice(i, 1);\n  }\n  /**\r\n   * fetch driver data\r\n   */\n\n\n  fetchDriverByID() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.isEdit = true;\n      let result = yield this.apiService.getData(`drivers/${this.driverID}`).toPromise(); // .subscribe(async (result: any) => {\n\n      result = result.Items[0];\n      this.fetchLicStates(result.licenceDetails.issuedCountry);\n      this.driverData.address = result.address;\n\n      if (result.address !== undefined) {\n        for (let a = 0; a < this.driverData.address.length; a++) {\n          if (this.driverData.address[a].manual) {\n            this.driverData.address[a].isSuggest = false;\n          } else {\n            this.driverData.address[a].isSuggest = true;\n          }\n\n          const countryCode = this.driverData.address[a].countryCode;\n          const stateCode = this.driverData.address[a].stateCode;\n          this.fetchStates(countryCode, a);\n\n          if (countryCode !== \"\" && countryCode !== null && stateCode !== \"\" && stateCode !== null) {\n            this.fetchCities(countryCode, stateCode, a);\n          }\n        }\n      }\n\n      if (result.corporationType === \"owner_operator\") {\n        // this.listService.fetchOwnerOperators();\n        // this.ownerOperators = this.listService.ownerOperatorList;\n        this.listService.fetchOwnerOperators();\n        let opList = new Array();\n        this.getValidOperators(opList);\n        this.ownerOperators = opList;\n      }\n\n      if (result.corporationType === \"company\") {\n        this.listService.fetchVendors(); // this.vendors = this.listService.vendorList;\n\n        let vendorList = new Array();\n        this.getValidVendors(vendorList);\n        this.vendors = vendorList;\n      }\n\n      this.driverData.driverType = result.driverType;\n      this.driverData.employeeContractorId = result.employeeContractorId;\n      this.driverData.corporationType = result.corporationType;\n      this.driverData.vendor = result.vendor;\n      this.driverData.corporation = result.corporation;\n      this.driverData.ownerOperator = result.ownerOperator;\n      this.driverData.driverStatus = result.driverStatus;\n      this.driverData.userName = result.userName;\n      this.driverData.firstName = result.firstName;\n\n      if (result.middleName === undefined) {\n        this.driverData.middleName = \"\";\n      } else {\n        this.driverData.middleName = result.middleName;\n      }\n\n      this.driverData.lastName = result.lastName;\n      this.driverData.DOB = _.isEmpty(result.DOB) ? null : result.DOB;\n      this.driverData.startDate = _.isEmpty(result.startDate) ? null : result.startDate;\n      this.driverData.terminationDate = _.isEmpty(result.terminationDate) ? null : result.terminationDate;\n      this.driverData.contractStart = _.isEmpty(result.contractStart) ? null : result.contractStart;\n      this.driverData.contractEnd = _.isEmpty(result.contractEnd) ? null : result.contractEnd;\n      this.driverData.crossBorderDetails.fastExpiry = _.isEmpty(result.crossBorderDetails.fastExpiry) ? null : result.crossBorderDetails.fastExpiry;\n      this.driverData.licenceDetails.licenceExpiry = _.isEmpty(result.licenceDetails.licenceExpiry) ? null : result.licenceDetails.licenceExpiry;\n      this.driverData.citizenship = result.citizenship;\n      this.driverData.assignedVehicle = result.assignedVehicle;\n      this.driverData.groupID = result.groupID;\n      this.driverData.createdDate = result.createdDate;\n      this.driverData.createdTime = result.createdTime;\n      this.driverData.driverImage = result.driverImage;\n\n      if (result.driverImage !== \"\" && result.driverImage !== undefined) {\n        //this.driverProfileSrc = result.uploadImage;\n        this.driverProfileSrc = `${this.Asseturl}/${result.carrierID}/${result.driverImage}`;\n        this.imageTitle = \"Change\";\n      } else {\n        this.driverProfileSrc = \"\";\n        this.imageTitle = \"Add\";\n      }\n\n      this.driverData[`abstractDocs`] = [];\n\n      if (result.abstractDocs !== undefined && result.abstractDocs.length > 0) {\n        this.driverData[`abstractDocs`] = result.abstractDocs;\n        this.absDocs = result.docsAbs;\n        /*\r\n        this.absDocs = result.abstractDocs.map((x: any) => ({\r\n          path: `${this.Asseturl}/${result.carrierID}/${x}`,\r\n          name: x,\r\n        }));\r\n        */\n      }\n\n      this.driverData.gender = result.gender;\n      this.driverData.DOB = result.DOB;\n      this.driverData.email = result.email;\n      this.driverData.phone = result.phone;\n\n      for (let i = 0; i < result.documentDetails.length; i++) {\n        let docmnt = [];\n\n        if (result.documentDetails[i].uploadedDocs !== undefined && result.documentDetails[i].uploadedDocs.length > 0) {\n          docmnt = result.documentDetails[i].uploadedDocs;\n        }\n\n        this.newDocuments.push({\n          documentType: result.documentDetails[i].documentType,\n          document: result.documentDetails[i].document,\n          issuingAuthority: result.documentDetails[i].issuingAuthority,\n          issuingCountry: result.documentDetails[i].issuingCountry,\n          issuingState: result.documentDetails[i].issuingState,\n          issueDate: result.documentDetails[i].issueDate,\n          expiryDate: result.documentDetails[i].expiryDate,\n          uploadedDocs: docmnt\n        });\n\n        if (result.documentDetails[i].uploadedDocs !== undefined && result.documentDetails[i].uploadedDocs.length > 0) {\n          this.assetsDocs[i] = result.docuementUpload; //  this.assetsDocs[i] = result.documentDetails[i].uploadedDocs.map(\n          //    (x) => ({\n          //      path: `${this.Asseturl}/${result.carrierID}/${x}`,\n          //      name: x,\n          //    })\n          //  );\n        }\n      }\n\n      this.driverData.documentDetails = this.newDocuments;\n      this.fetchDocStates(this.newDocuments);\n      this.driverData.crossBorderDetails.ACI_ID = result.crossBorderDetails.ACI_ID;\n      this.driverData.crossBorderDetails.ACE_ID = result.crossBorderDetails.ACE_ID;\n      this.driverData.crossBorderDetails.fast_ID = result.crossBorderDetails.fast_ID;\n      this.driverData.crossBorderDetails.fastExpiry = result.crossBorderDetails.fastExpiry;\n      this.driverData.crossBorderDetails.csa = result.crossBorderDetails.csa;\n      this.driverData.paymentDetails.paymentType = result.paymentDetails.paymentType;\n      this.driverData.paymentDetails.loadedMiles = result.paymentDetails.loadedMiles;\n      this.driverData.paymentDetails.loadedMilesUnit = result.paymentDetails.loadedMilesUnit;\n      this.driverData.paymentDetails.loadedMilesTeam = result.paymentDetails.loadedMilesTeam;\n      this.driverData.paymentDetails.loadedMilesTeamUnit = result.paymentDetails.loadedMilesTeamUnit;\n      this.driverData.paymentDetails.emptyMiles = result.paymentDetails.emptyMiles;\n      this.driverData.paymentDetails.emptyMilesUnit = result.paymentDetails.emptyMilesUnit;\n      this.driverData.paymentDetails.emptyMilesTeam = result.paymentDetails.emptyMilesTeam;\n      this.driverData.paymentDetails.emptyMilesTeamUnit = result.paymentDetails.emptyMilesTeamUnit;\n      this.driverData.paymentDetails.loadPayPercentage = result.paymentDetails.loadPayPercentage;\n      this.driverData.paymentDetails.loadPayPercentageOf = result.paymentDetails.loadPayPercentageOf;\n      this.driverData.paymentDetails.rate = result.paymentDetails.rate;\n      this.driverData.paymentDetails.rateUnit = result.paymentDetails.rateUnit;\n      this.driverData.paymentDetails.waitingPay = result.paymentDetails.waitingPay;\n      this.driverData.paymentDetails.waitingPayUnit = result.paymentDetails.waitingPayUnit;\n      this.driverData.paymentDetails.waitingHourAfter = result.paymentDetails.waitingHourAfter;\n      this.driverData.paymentDetails.deliveryRate = result.paymentDetails.deliveryRate;\n      this.driverData.paymentDetails.deliveryRateUnit = result.paymentDetails.deliveryRateUnit;\n      this.driverData.SIN = result.SIN;\n      this.driverData.paymentDetails.payPeriod = result.paymentDetails.payPeriod;\n      this.driverData.CDL_Number = result.CDL_Number;\n      this.driverData.licenceDetails.issuedCountry = result.licenceDetails.issuedCountry;\n      this.driverData.licenceDetails.issuedState = result.licenceDetails.issuedState;\n      this.driverData.licenceDetails.licCntryName = result.licenceDetails.licCntryName;\n      this.driverData.licenceDetails.licStateName = result.licenceDetails.licStateName;\n      this.driverData.licenceDetails.licenceExpiry = result.licenceDetails.licenceExpiry;\n      this.driverData.licenceDetails.licenceNotification = result.licenceDetails.licenceNotification;\n      this.driverData.licenceDetails.WCB = result.licenceDetails.WCB;\n      this.driverData.licenceDetails.medicalCardRenewal = result.licenceDetails.medicalCardRenewal;\n      this.driverData.licenceDetails.healthCare = result.licenceDetails.healthCare;\n      this.driverData.licenceDetails.vehicleType = result.licenceDetails.vehicleType;\n      this.driverData.hosDetails.hosStatus = result.hosDetails.hosStatus;\n      this.driverData.hosDetails.type = result.hosDetails.type;\n      this.driverData.hosDetails.hosRemarks = result.hosDetails.hosRemarks;\n      this.driverData.hosDetails.hosCycleName = result.hosDetails.hosCycleName;\n      this.driverData.hosDetails.homeTerminal = result.hosDetails.homeTerminal.addressID;\n      this.driverData.hosDetails.pcAllowed = result.hosDetails.pcAllowed;\n      this.driverData.hosDetails.ymAllowed = result.hosDetails.ymAllowed;\n      this.driverData.hosDetails.timezone = result.hosDetails.timezone;\n      this.driverData.hosDetails.optZone = result.hosDetails.optZone;\n      this.driverData.emergencyDetails.name = result.emergencyDetails.name;\n      this.driverData.emergencyDetails.relationship = result.emergencyDetails.relationship;\n      this.driverData.emergencyDetails.phone = result.emergencyDetails.phone;\n      this.driverData[`timeCreated`] = result.timeCreated; // });\n    });\n  }\n\n  onUpdateDriver() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.abstractDocs.length > 0 || this.absDocs.length > 0) {\n        this.hasError = false;\n        this.hasSuccess = false;\n        this.hideErrors();\n        this.driverData[`driverID`] = this.driverID;\n        this.driverData.createdDate = this.driverData.createdDate;\n        this.driverData.createdTime = this.driverData.createdTime;\n        this.driverData[`deletedUploads`] = this.deletedUploads;\n\n        for (let d = 0; d < this.driverData.documentDetails.length; d++) {\n          const element = this.driverData.documentDetails[d];\n          delete element.docStates;\n        }\n\n        for (let i = 0; i < this.driverData.address.length; i++) {\n          const element = this.driverData.address[i];\n          delete element.states;\n          delete element.cities;\n\n          if (element.manual === true) {\n            let data = {\n              address1: element.address1,\n              address2: element.address2,\n              cityName: element.cityName,\n              stateName: element.stateName,\n              countryName: element.countryName,\n              zipCode: element.zipCode\n            };\n            $(\"#addErr\" + i).css(\"display\", \"none\");\n            let result = yield this.newGeoCode(data);\n\n            if (result == null) {\n              $(\"#addErr\" + i).css(\"display\", \"block\");\n              return false;\n            }\n\n            if (result != undefined || result != null) {\n              element.geoCords = result;\n            }\n          } else {\n            $(\"#addErr\" + i).css(\"display\", \"none\");\n\n            if (element.isSuggest != true && element.userLocation !== \"\") {\n              $(\"#addErr\" + i).css(\"display\", \"block\");\n              return;\n            }\n          }\n        } // create form data instance\n\n\n        const formData = new FormData(); // append photos if any\n\n        for (let i = 0; i < this.uploadedPhotos.length; i++) {\n          formData.append(\"uploadedPhotos\", this.uploadedPhotos[i]);\n        }\n\n        for (let j = 0; j < this.uploadedDocs.length; j++) {\n          if (this.uploadedDocs[j] !== undefined) {\n            for (let k = 0; k < this.uploadedDocs[j].length; k++) {\n              let file = this.uploadedDocs[j][k];\n              formData.append(`uploadedDocs-${j}`, file);\n            }\n          }\n        } // append abstact history docs if any\n\n\n        for (let k = 0; k < this.abstractDocs.length; k++) {\n          formData.append(\"abstractDocs\", this.abstractDocs[k]);\n        } // append other fields\n\n\n        formData.append(\"data\", JSON.stringify(this.driverData));\n        this.submitDisabled = true;\n\n        try {\n          this.apiService.putData(\"drivers\", formData, true).subscribe({\n            complete: () => {},\n            error: err => {\n              from(err.error).pipe(map(val => {\n                // val.message = val.message.replace(/\".*\"/, 'This Field');\n                this.errors[val.context.label] = val.message;\n              })).subscribe({\n                complete: () => {\n                  this.throwErrors();\n                  this.hasError = false;\n                  this.submitDisabled = false; // this.toastr.error('Please see the errors');\n                },\n                error: () => {\n                  this.submitDisabled = false;\n                },\n                next: () => {\n                  this.submitDisabled = false;\n                }\n              });\n            },\n            next: res => {\n              this.response = res;\n              this.hasSuccess = true;\n              this.isSubmitted = true;\n              this.submitDisabled = false;\n              this.dashboardUtilityService.refreshDrivers = true;\n              this.toastr.success(\"Driver updated successfully\");\n              this.cancel();\n            }\n          });\n        } catch (error) {\n          this.submitDisabled = false;\n        }\n      } else {\n        this.errorAbstract = true;\n        this.toastr.error(\"Abstract history document is required.\");\n      }\n    });\n  }\n\n  changePaymentModeForm(value) {\n    if (value === \"Pay Per Mile\") {\n      delete this.driverData.paymentDetails.loadPayPercentage;\n      delete this.driverData.paymentDetails.loadPayPercentageOf;\n      delete this.driverData.paymentDetails.rate;\n      delete this.driverData.paymentDetails.rateUnit;\n      delete this.driverData.paymentDetails.waitingPay;\n      delete this.driverData.paymentDetails.waitingPayUnit;\n      delete this.driverData.paymentDetails.waitingHourAfter;\n      delete this.driverData.paymentDetails.deliveryRate;\n      delete this.driverData.paymentDetails.deliveryRateUnit;\n    } else if (value === \"Percentage\") {\n      delete this.driverData.paymentDetails.loadedMiles;\n      delete this.driverData.paymentDetails.loadedMilesUnit;\n      delete this.driverData.paymentDetails.loadedMilesTeam;\n      delete this.driverData.paymentDetails.loadedMilesTeamUnit;\n      delete this.driverData.paymentDetails.emptyMiles;\n      delete this.driverData.paymentDetails.emptyMilesTeam;\n      delete this.driverData.paymentDetails.emptyMilesUnit;\n      delete this.driverData.paymentDetails.emptyMilesTeamUnit;\n      delete this.driverData.paymentDetails.deliveryRate;\n      delete this.driverData.paymentDetails.deliveryRateUnit;\n      delete this.driverData.paymentDetails.rate;\n      delete this.driverData.paymentDetails.rateUnit;\n      delete this.driverData.paymentDetails.waitingPay;\n      delete this.driverData.paymentDetails.waitingPayUnit;\n      delete this.driverData.paymentDetails.waitingHourAfter;\n    } else if (value === \"Pay Per Hour\") {\n      delete this.driverData.paymentDetails.deliveryRate;\n      delete this.driverData.paymentDetails.deliveryRateUnit;\n      delete this.driverData.paymentDetails.loadPayPercentage;\n      delete this.driverData.paymentDetails.loadPayPercentageOf;\n      delete this.driverData.paymentDetails.loadedMiles;\n      delete this.driverData.paymentDetails.loadedMilesUnit;\n      delete this.driverData.paymentDetails.loadedMilesTeam;\n      delete this.driverData.paymentDetails.loadedMilesTeamUnit;\n      delete this.driverData.paymentDetails.emptyMiles;\n      delete this.driverData.paymentDetails.emptyMilesTeam;\n      delete this.driverData.paymentDetails.emptyMilesUnit;\n      delete this.driverData.paymentDetails.emptyMilesTeamUnit;\n    } else {\n      delete this.driverData.paymentDetails.loadedMiles;\n      delete this.driverData.paymentDetails.loadedMilesUnit;\n      delete this.driverData.paymentDetails.loadedMilesTeam;\n      delete this.driverData.paymentDetails.loadedMilesTeamUnit;\n      delete this.driverData.paymentDetails.emptyMiles;\n      delete this.driverData.paymentDetails.emptyMilesTeam;\n      delete this.driverData.paymentDetails.emptyMilesUnit;\n      delete this.driverData.paymentDetails.emptyMilesTeamUnit;\n      delete this.driverData.paymentDetails.rate;\n      delete this.driverData.paymentDetails.rateUnit;\n      delete this.driverData.paymentDetails.waitingPay;\n      delete this.driverData.paymentDetails.waitingPayUnit;\n      delete this.driverData.paymentDetails.waitingHourAfter;\n    }\n  }\n\n  changeCurrency(currency) {\n    this.driverData.paymentDetails.rateUnit = currency;\n    this.driverData.paymentDetails.deliveryRateUnit = currency;\n    this.driverData.paymentDetails.loadedMilesUnit = currency;\n    this.driverData.paymentDetails.emptyMilesUnit = currency;\n    this.driverData.paymentDetails.loadedMilesTeamUnit = currency;\n    this.driverData.paymentDetails.emptyMilesTeamUnit = currency;\n    this.driverData.paymentDetails.waitingPayUnit = currency;\n  }\n\n  concatArray(path) {\n    this.concatArrayKeys = \"\";\n\n    for (const i in path) {\n      this.concatArrayKeys += path[i] + \".\";\n    }\n\n    this.concatArrayKeys = this.concatArrayKeys.substring(0, this.concatArrayKeys.length - 1);\n    return this.concatArrayKeys;\n  }\n\n  ngOnDestroy() {\n    this.takeUntil$.next();\n    this.takeUntil$.complete();\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = \"\";\n\n    if (ext == \"doc\" || ext == \"docx\" || ext == \"xlsx\") {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"https://docs.google.com/viewer?url=\" + val + \"&embedded=true\");\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  } // Show password\n\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  togglecpwdfieldTextType() {\n    this.cpwdfieldTextType = !this.cpwdfieldTextType;\n  } // delete uploaded images and documents\n\n\n  delete(type, name, index, dIndex) {\n    if (type === \"doc\") {\n      this.driverData.documentDetails[index].uploadedDocs.splice(dIndex, 1);\n      this.assetsDocs[index].splice(dIndex, 1);\n      this.deletedUploads.push(name);\n    } else if (type === \"profile\") {\n      this.driverProfileSrc = \"\";\n      this.uploadedPhotos = [];\n      this.driverData.driverImage = \"\";\n      this.deletedUploads.push(name);\n      this.imageTitle = \"Add\";\n      $(\"#driverProfileModal\").modal(\"hide\");\n    } else if (type === \"uploaded\") {\n      this.uploadedPic = \"\";\n      this.driverProfileSrc = \"\";\n      this.showUploadedPicModal = false;\n      this.uploadedPhotos = []; // this.driverData.driverImage = '';\n\n      this.deletedUploads.push(this.driverData.driverImage);\n      $(\"#driverPicUploadedModal\").modal(\"hide\");\n      this.imageTitle = \"Add\";\n    } else {\n      this.absDocs.splice(index, 1);\n      this.driverData.abstractDocs.splice(index, 1);\n      this.deletedUploads.push(name);\n    } // this.apiService.deleteData(`drivers/uploadDelete/${name}`).subscribe((result: any) => {});\n\n  }\n\n  localDelete(type, name, index, dIndex) {\n    if (type === \"doc\") {\n      this.driverData.documentDetails[index].uploadedDocs.splice(dIndex, 1);\n      this.assetsDocs[index].splice(index, 1);\n    } else {\n      this.localAbsDocs.splice(index, 1);\n      this.abstractDocs.splice(index, 1);\n    }\n  }\n\n  complianceChange(value) {\n    if (value === \"non_Exempted\") {\n      this.driverData.hosDetails.type = \"ELD\";\n    } else {\n      this.driverData.hosDetails.type = \"Log Book\";\n      this.driverData.hosDetails.hosCycleName = \"\";\n    }\n  }\n\n  closeGroupModal() {\n    this.groupData = {\n      groupType: \"drivers\",\n      groupName: \"\",\n      groupMembers: \"\",\n      description: \"\"\n    };\n    $(\"#addDriverGroupModal\").modal(\"hide\");\n  }\n\n  validatePassword(password) {\n    let passwordVerify = passwordStrength(password);\n\n    if (passwordVerify.contains.includes(\"lowercase\")) {\n      this.passwordValidation.lowerCase = true;\n    } else {\n      this.passwordValidation.lowerCase = false;\n    }\n\n    if (passwordVerify.contains.includes(\"uppercase\")) {\n      this.passwordValidation.upperCase = true;\n    } else {\n      this.passwordValidation.upperCase = false;\n    }\n\n    if (passwordVerify.contains.includes(\"symbol\")) {\n      this.passwordValidation.specialCharacters = true;\n    } else {\n      this.passwordValidation.specialCharacters = false;\n    }\n\n    if (passwordVerify.contains.includes(\"number\")) {\n      this.passwordValidation.number = true;\n    } else {\n      this.passwordValidation.number = false;\n    }\n\n    if (passwordVerify.length >= 8) {\n      this.passwordValidation.length = true;\n    } else {\n      this.passwordValidation.length = false;\n    }\n\n    if (password.includes(\".\") || password.includes(\"-\")) {\n      this.passwordValidation.specialCharacters = true;\n    }\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  validateUserName() {\n    this.hideVal();\n\n    if (this.driverData.userName !== \"\") {\n      this.driverData.userName = this.driverData.userName.trim();\n      this.apiService.getData(`drivers/validate/username?value=${this.driverData.userName}&type=${this.pageType}`).subscribe(result => {\n        if (!result) {\n          this.errors[`userName`] = \"Username already exists\";\n          this.submitDisabled = true;\n        } else {\n          this.onChangeHideErrors(\"userName\");\n          delete this.errors[`userName`];\n        }\n\n        this.throwErrors();\n      });\n    }\n  }\n\n  validateEmployeeID() {\n    this.hideVal();\n\n    if (this.driverData.employeeContractorId !== \"\") {\n      this.driverData.employeeContractorId = this.driverData.employeeContractorId.trim();\n      this.apiService.getData(`drivers/validate/employee-id?value=${this.driverData.employeeContractorId}&type=${this.pageType}`).subscribe(result => {\n        if (!result) {\n          this.errors[`employeeContractorId`] = \"Employee ID already exists\";\n          this.submitDisabled = true;\n        } else {\n          this.onChangeHideErrors(\"employeeContractorId\");\n          delete this.errors[`employeeContractorId`];\n        }\n\n        this.throwErrors();\n      });\n    }\n  }\n\n  validateCDL() {\n    this.hideVal();\n\n    if (this.driverData.CDL_Number !== \"\") {\n      this.driverData.CDL_Number = this.driverData.CDL_Number.trim();\n      this.apiService.getData(`drivers/validate/cdl?value=${this.driverData.CDL_Number}&type=${this.pageType}&drv=${this.driverID}`).subscribe(result => {\n        if (!result) {\n          this.errors[`CDL_Number`] = \"CDL already exists\";\n          this.submitDisabled = true;\n        } else {\n          this.onChangeHideErrors(\"CDL_Number\");\n          delete this.errors[`CDL_Number`];\n        }\n\n        this.throwErrors();\n      });\n    }\n  }\n\n  validateEmail() {\n    this.hideVal();\n\n    if (this.driverData.email !== \"\") {\n      this.driverData.email = this.driverData.email.trim();\n      this.apiService.getData(`drivers/validate/email?value=${this.driverData.email}&type=${this.pageType}&drv=${this.driverData.userName}`).subscribe(result => {\n        if (!result) {\n          this.errors[`email`] = \"Email already exists\";\n          this.submitDisabled = true;\n        } else {\n          this.onChangeHideErrors(\"email\");\n          delete this.errors[`email`];\n        }\n\n        this.throwErrors();\n      });\n    }\n  }\n\n  hideVal() {\n    this.onChangeHideErrors(\"employeeContractorId\");\n    this.onChangeHideErrors(\"userName\");\n    this.onChangeHideErrors(\"CDL_Number\");\n    this.onChangeHideErrors(\"email\");\n    this.submitDisabled = false;\n  }\n\n};\n\nAddDriverComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}, {\n  type: NgbCalendar\n}, {\n  type: DomSanitizer\n}, {\n  type: Location\n}, {\n  type: NgbModal\n}, {\n  type: ModalService\n}, {\n  type: NgbDateAdapter\n}, {\n  type: Router\n}, {\n  type: ListService\n}, {\n  type: CountryStateCityService\n}, {\n  type: DashboardUtilityService\n}];\n\nAddDriverComponent.propDecorators = {\n  driverF: [{\n    type: ViewChild,\n    args: [\"driverF\"]\n  }]\n};\nAddDriverComponent = __decorate([Component({\n  selector: \"app-add-driver\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddDriverComponent);\nexport { AddDriverComponent };","map":null,"metadata":{},"sourceType":"module"}