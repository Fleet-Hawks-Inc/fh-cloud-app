{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./new-aci-manifest.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./new-aci-manifest.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { NgbDateAdapter } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClient } from '@angular/common/http';\nimport { NgbTimepickerConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { from, Subject, throwError } from 'rxjs';\nimport { map, debounceTime, distinctUntilChanged, switchMap, catchError } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { ListService } from '../../../../../services';\nimport { HereMapService } from '../../../../../services';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet NewAciManifestComponent = class NewAciManifestComponent {\n  constructor(httpClient, HereMap, route, toastr, listService, apiService, location, config, dateAdapter, countryStateCity) {\n    this.httpClient = httpClient;\n    this.HereMap = HereMap;\n    this.route = route;\n    this.toastr = toastr;\n    this.listService = listService;\n    this.apiService = apiService;\n    this.location = location;\n    this.dateAdapter = dateAdapter;\n    this.countryStateCity = countryStateCity;\n    this.title = 'Add ACI e-Manifest';\n    this.modalTitle = 'Add';\n    this.searchTerm = new Subject();\n    this.errors = {};\n    this.manifestType = 'ACI';\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.carriers = [];\n    this.countries = [];\n    this.cities = [];\n    this.CANPorts = [];\n    this.vehicles = [];\n    this.vehicleData = [];\n    this.loadingStates = [];\n    this.loadingCities = [];\n    this.acceptanceCities = [];\n    this.assets = [];\n    this.drivers = [];\n    this.mainDriver = '';\n    this.coDrivers = [];\n    this.shippers = [];\n    this.consignees = [];\n    this.ACIReleaseOfficeList = [];\n    this.timeList = [];\n    this.cityList = [];\n    this.modalStates = [];\n    this.modalCities = [];\n    this.subLocationsList = [];\n    this.cargoExemptionsList = [];\n    this.documentTypeList = [];\n    this.amendmentReasonsList = [];\n    this.amendTripReason = '';\n    this.countriesList = [];\n    this.addTrailerBtn = true;\n    this.addTruckSealBtn = true;\n    this.fetchedCoDrivers = [];\n    this.modifiedBy = '';\n    this.createdBy = '';\n    this.truck = {\n      truckID: '',\n      sealNumbers: [{\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }],\n      cargoExemptions: []\n    };\n    this.driverArray = [];\n    this.trailers = [{\n      assetID: '',\n      assetTypeCode: '',\n      sealNumbers: [{\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }, {\n        sealNumber: ''\n      }],\n      cargoExemptions: []\n    }];\n    this.passengers = [];\n    this.addedPassengers = [];\n    this.containers = [];\n    this.addedContainers = [];\n    this.passengerDocStates = [];\n    this.shipments = [{\n      shipmentType: '',\n      loadedOn: {\n        type: '',\n        number: ''\n      },\n      CCC: '',\n      cargoControlNumber: '',\n      referenceOnlyShipment: false,\n      portOfEntry: '',\n      releaseOffice: '',\n      subLocation: '',\n      importerCsaBusinessNumber: '',\n      uniqueConsignmentReferenceNumber: '',\n      estimatedArrivalDate: '',\n      estimatedArrivalTime: '',\n      estimatedArrivalTimeZone: null,\n      cityOfLoading: {\n        cityName: null,\n        stateProvince: null,\n        country: null,\n        loadingStates: [],\n        loadingCities: []\n      },\n      cityOfAcceptance: {\n        cityName: null,\n        stateProvince: null,\n        country: null,\n        acceptanceStates: [],\n        acceptanceCities: []\n      },\n      consolidatedFreight: false,\n      specialInstructions: '',\n      shipperID: null,\n      consigneeID: null,\n      deliveryDestinations: [{\n        name: '',\n        contactNumber: '',\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: '',\n          deliveryDestinationStates: [],\n          deliveryDestinationCities: []\n        }\n      }],\n      notifyParties: [{\n        name: '',\n        contactNumber: '',\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: '',\n          notifyPartyStates: [],\n          notifyPartyCities: []\n        }\n      }],\n      commodities: [{\n        description: '',\n        quantity: '',\n        packagingUnit: null,\n        weight: '',\n        weightUnit: null,\n        marksAndNumbers: '',\n        hazmatDetails: {\n          unCode: '',\n          emergencyContactName: '',\n          contactPhone: '',\n          handlingInstructions: ''\n        }\n      }]\n    }];\n    this.borderAssetType = [];\n    this.packagingUnitsList = [];\n    this.loadedType = 'TRAILER';\n    this.containerLoaded = 'TRAILER';\n    this.shipmentTypeList = [];\n    this.borderResponses = [];\n    this.amendManifest = false;\n    this.errorFastCard = false;\n    config.seconds = true;\n    config.spinners = true;\n    const date = new Date();\n    this.getcurrentDate = {\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate()\n    };\n    this.birthDateMinLimit = {\n      year: date.getFullYear() - 60,\n      month: date.getMonth() + 1,\n      day: date.getDate()\n    };\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.manifestID = _this.route.snapshot.params[`manifestID`];\n\n      if (_this.manifestID) {\n        _this.title = 'Edit ACI e-Manifest';\n        _this.modalTitle = 'Edit';\n\n        _this.fetchACIEntry();\n\n        _this.route.queryParams.subscribe(params => {\n          if (params.amendManifest !== undefined) {\n            _this.amendManifest = params.amendManifest; // to get query parameter amend\n          }\n        });\n      } else {\n        _this.title = 'Add ACI e-Manifest';\n        _this.modalTitle = 'Add';\n      }\n\n      _this.searchLocation();\n\n      _this.listService.fetchShippers();\n\n      _this.listService.fetchReceivers();\n\n      _this.shippers = _this.listService.shipperList;\n      _this.consignees = _this.listService.receiverList;\n\n      _this.fetchVehicles();\n\n      _this.fetchAssets();\n\n      _this.fetchDrivers();\n\n      yield _this.fetchCountries();\n\n      _this.fetchCarrier();\n\n      _this.fetchAssetType();\n\n      _this.httpClient.get('assets/canadianPorts.json').subscribe(data => {\n        _this.CANPorts = data;\n      });\n\n      _this.httpClient.get('assets/jsonFiles/ACIpackagingUnit.json').subscribe(data => {\n        _this.packagingUnitsList = data;\n      });\n\n      _this.httpClient.get('assets/travelDocumentType.json').subscribe(data => {\n        _this.documentTypeList = data;\n      });\n\n      _this.httpClient.get('assets/jsonFiles/ACIShipmentType.json').subscribe(data => {\n        _this.shipmentTypeList = data;\n      });\n\n      _this.httpClient.get('assets/jsonFiles/ACI-amendment-reason-codes.json').subscribe(data => {\n        _this.amendmentReasonsList = data;\n      });\n\n      _this.httpClient.get('assets/ACIReleaseOffice.json').subscribe(data => {\n        _this.ACIReleaseOfficeList = data;\n      });\n\n      _this.httpClient.get('assets/manifestETA.json').subscribe(data => {\n        _this.timeList = data;\n      });\n\n      _this.httpClient.get('assets/ACIsubLocations.json').subscribe(data => {\n        _this.subLocationsList = data;\n      });\n\n      _this.httpClient.get('assets/ACIcargoExemption.json').subscribe(data => {\n        _this.cargoExemptionsList = data;\n      });\n\n      _this.httpClient.get('assets/jsonFiles/worldCountries.json').subscribe(data => {\n        _this.countriesList = data;\n      });\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchCountries() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.countries = yield _this2.countryStateCity.GetAllCountries(); //fetch countries from library\n    })();\n  }\n  /**\r\n   * function fetches the US and Mexico states\r\n   */\n\n  /**\r\n   * fetch cities of US and Mexico\r\n   */\n\n\n  getLoadingStates(countryCode, sIndex) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.shipments[sIndex].cityOfLoading.stateProvince = '';\n      _this3.shipments[sIndex].cityOfLoading.cityName = '';\n      _this3.shipments[sIndex].cityOfLoading.loadingStates = yield _this3.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getLoadingCities(stateCode, sIndex) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.shipments[sIndex].cityOfLoading.cityName = '';\n      const countryCode = _this4.shipments[sIndex].cityOfLoading.country;\n      _this4.shipments[sIndex].cityOfLoading.loadingCities = yield _this4.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  getAcceptanceStates(countryCode, sIndex) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.shipments[sIndex].cityOfAcceptance.stateProvince = '';\n      _this5.shipments[sIndex].cityOfAcceptance.cityName = '';\n      _this5.shipments[sIndex].cityOfAcceptance.acceptanceStates = yield _this5.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getAcceptanceCities(stateCode, sIndex) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.shipments[sIndex].cityOfAcceptance.cityName = '';\n      const countryCode = _this6.shipments[sIndex].cityOfAcceptance.country;\n      _this6.shipments[sIndex].cityOfAcceptance.acceptanceCities = yield _this6.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  fetchLoadingStateCities(shipments) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let s = 0; s < shipments.length; s++) {\n        const countryCode = _this7.shipments[s].cityOfLoading.country;\n        const stateCode = _this7.shipments[s].cityOfLoading.stateProvince;\n        _this7.shipments[s].cityOfLoading.loadingStates = yield _this7.countryStateCity.GetStatesByCountryCode([countryCode]);\n        _this7.shipments[s].cityOfLoading.loadingCities = yield _this7.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n      }\n    })();\n  }\n\n  fetchAcceptanceStateCities(shipments) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let s = 0; s < shipments.length; s++) {\n        const countryCode = _this8.shipments[s].cityOfAcceptance.country;\n        const stateCode = _this8.shipments[s].cityOfAcceptance.stateProvince;\n        _this8.shipments[s].cityOfAcceptance.acceptanceStates = yield _this8.countryStateCity.GetStatesByCountryCode([countryCode]);\n        _this8.shipments[s].cityOfAcceptance.acceptanceCities = yield _this8.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n      }\n    })();\n  }\n\n  fetchCarrier() {\n    this.apiService.getData('carriers/getCarrier').subscribe(result => {\n      this.carriers = result.Items;\n    });\n  }\n\n  savePassengers() {\n    this.addedPassengers = this.passengers;\n  }\n\n  saveContainers() {\n    this.addedContainers = this.containers;\n  }\n\n  fetchVehicles() {\n    this.apiService.getData('vehicles').subscribe(result => {\n      this.vehicles = result.Items;\n    });\n  } // TRUCK DATA\n\n\n  addTruckSeal() {\n    this.truck.sealNumbers.push({\n      sealNumber: ''\n    });\n\n    if (this.truck.sealNumbers.length <= 19) {\n      this.addTruckSealBtn = true;\n    } else {\n      this.addTruckSealBtn = false;\n    }\n  }\n\n  fetchAssets() {\n    this.apiService.getData('assets').subscribe(result => {\n      this.assets = result.Items;\n    });\n  }\n\n  shipmentLoadedFn(s) {\n    this.shipments[s].loadedOn.number = '';\n  }\n\n  containerLoadedFn(i) {\n    this.containers[i].loadedOn.number = '';\n  }\n  /***\r\n    * fetch asset types from mapped table\r\n    */\n\n\n  getBorderAssetTypes(e) {// const assetID = e;\n    // let fetchedAsset = await this.apiService.getData('assets/' + assetID).toPromise();\n    // let resultData = await this.apiService.getData('borderAssetTypes/' + fetchedAsset.Items[0].assetDetails.assetType).toPromise(); // border aset types are fetched whose parent is asset type of selected asset\n    // if (resultData.Items.length > 0) {// if parent asset type exists\n    //   this.borderAssetTypes = resultData.Items;\n    // } else {\n    //   let fetchedBorderAssets: any = await this.apiService.getData('borderAssetTypes').toPromise();\n    //   this.borderAssetTypes = fetchedBorderAssets.Items;\n    // }\n\n    return _asyncToGenerator(function* () {})();\n  }\n\n  fetchAssetType() {\n    this.httpClient.get('assets/jsonFiles/trailers.json').subscribe(data => {\n      this.borderAssetType = data;\n    });\n  }\n\n  fetchDrivers() {\n    this.apiService.getData('drivers').subscribe(result => {\n      this.drivers = result.Items;\n    });\n  } // container data\n\n\n  addContainer() {\n    if (this.containers.length <= 4) {\n      this.containers.push({\n        loadedOn: {\n          type: '',\n          number: ''\n        },\n        number: '',\n        cargoExemptions: [],\n        sealNumbers: [{\n          sealNumber: ''\n        }]\n      });\n    } else {\n      this.toastr.warning('Only 5 containers are allowed in ACI manifest!');\n    }\n  }\n\n  deleteContainer(i) {\n    this.containers.splice(i, 1);\n  }\n\n  addContainerSeal(i) {\n    if (this.containers[i].sealNumbers.length <= 19) {\n      this.containers[i].sealNumbers.push({\n        sealNumber: ''\n      });\n    }\n  } // trailer data\n\n\n  addTrailer() {\n    this.trailers.push({\n      assetID: '',\n      assetTypeCode: '',\n      cargoExemptions: [],\n      sealNumbers: [{\n        sealNumber: ''\n      }]\n    });\n    this.addTrailerBtn = true;\n\n    if (this.trailers.length >= 3) {\n      this.addTrailerBtn = false;\n    } else {\n      this.addTrailerBtn = true;\n    }\n  }\n\n  addTrailerSeal(i) {\n    if (this.trailers[i].sealNumbers.length <= 19) {\n      this.trailers[i].sealNumbers.push({\n        sealNumber: ''\n      });\n    }\n  }\n\n  deleteTrailer(i) {\n    this.trailers.splice(i, 1);\n    this.addTrailerBtn = true;\n  }\n\n  addMorePassenger() {\n    this.passengers.push({\n      firstName: '',\n      lastName: '',\n      gender: '',\n      dateOfBirth: '',\n      citizenshipCountry: '',\n      fastCardNumber: '',\n      travelDocuments: [{\n        type: '',\n        number: '',\n        country: '',\n        stateProvince: '',\n        docStates: []\n      }]\n    });\n  }\n\n  deletePassenger(i) {\n    this.passengers.splice(i, 1);\n  }\n\n  addDocument(i) {\n    if (this.passengers[i].travelDocuments.length <= 2) {\n      this.passengers[i].travelDocuments.push({\n        type: '',\n        number: '',\n        country: '',\n        stateProvince: ''\n      });\n    } else {\n      this.toastr.warning('Only 3 travel documents of passenger are allowed in ACI manifest');\n    }\n  }\n\n  deleteDocument(i, p) {\n    this.passengers[p].travelDocuments.splice(i, 1);\n  } // delivery destinations\n\n\n  getDeliveryDestinationState(countryCode, sIndex, pIndex) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      _this9.shipments[sIndex].deliveryDestinations[pIndex].address.stateCode = '';\n      _this9.shipments[sIndex].deliveryDestinations[pIndex].address.deliveryDestinationStates = yield _this9.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getDeliveryDestinationCity(stateCode, sIndex, pIndex) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const countryCode = _this10.shipments[sIndex].deliveryDestinations[pIndex].address.countryCode;\n      _this10.shipments[sIndex].deliveryDestinations[pIndex].address.cityName = '';\n      _this10.shipments[sIndex].deliveryDestinations[pIndex].address.stateName = yield _this10.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this10.shipments[sIndex].deliveryDestinations[pIndex].address.countryName = yield _this10.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this10.shipments[sIndex].deliveryDestinations[pIndex].address.deliveryDestinationCities = yield _this10.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  fetchDeliveryDestinationAddress(shipments) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let s = 0; s < shipments.length; s++) {\n        for (let p = 0; p < shipments[s].deliveryDestinations.length; p++) {\n          const countryCode = _this11.shipments[s].deliveryDestinations[p].address.countryCode;\n          const stateCode = _this11.shipments[s].deliveryDestinations[p].address.stateCode;\n          _this11.shipments[s].deliveryDestinations[p].address.deliveryDestinationStates = yield _this11.countryStateCity.GetStatesByCountryCode([countryCode]);\n          _this11.shipments[s].deliveryDestinations[p].address.deliveryDestinationCities = yield _this11.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n        }\n      }\n    })();\n  }\n\n  addDeliveryDestination(p) {\n    if (this.shipments[p].deliveryDestinations.length <= 96) {\n      this.shipments[p].deliveryDestinations.push({\n        name: '',\n        contactNumber: '',\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: '',\n          deliveryDestinationStates: [],\n          deliveryDestinationCities: []\n        }\n      });\n    }\n  }\n\n  deleteDeliveryDestination(i, s) {\n    this.shipments[s].deliveryDestinations.splice(i, 1);\n  } // address section\n\n\n  clearUserLocation(s, p, callType) {\n    if (callType == 'delivery') {\n      this.shipments[s].deliveryDestinations[p].address[`userLocation`] = '';\n      $('div').removeClass('show-search__result');\n    } else {\n      this.shipments[s].notifyParties[p].address[`userLocation`] = '';\n      $('div').removeClass('show-search__result');\n    }\n  }\n\n  searchLocation() {\n    this.searchTerm.pipe(map(e => {\n      $('.map-search__results').hide();\n      $(e.target).closest('div').addClass('show-search__result');\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.HereMap.searchEntries(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      this.searchResults = res;\n    });\n  }\n\n  manAddress(event, s, p, callType) {\n    if (event.target.checked) {\n      if (callType === 'notify') {\n        $(event.target).closest('.address-item').addClass('open');\n        this.shipments[s].notifyParties[p].address[`userLocation`] = '';\n      } else {\n        $(event.target).closest('.address-item').addClass('open');\n        this.shipments[s].deliveryDestinations[p].address[`userLocation`] = '';\n      }\n    } else {\n      if (callType === 'notify') {\n        $(event.target).closest('.address-item').removeClass('open');\n        this.shipments[s].notifyParties[p].address.countryName = '';\n        this.shipments[s].notifyParties[p].address.stateName = '';\n        this.shipments[s].notifyParties[p].address.cityName = '';\n        this.shipments[s].notifyParties[p].address.postalCode = '';\n        this.shipments[s].notifyParties[p].address.addressLine = '';\n        this.shipments[s].notifyParties[p].address.geoCords.lat = '';\n        this.shipments[s].notifyParties[p].address.geoCords.lng = '';\n      } else {\n        $(event.target).closest('.address-item').removeClass('open');\n        this.shipments[s].deliveryDestinations[p].address.countryName = '';\n        this.shipments[s].deliveryDestinations[p].address.stateName = '';\n        this.shipments[s].deliveryDestinations[p].address.cityName = '';\n        this.shipments[s].deliveryDestinations[p].address.postalCode = '';\n        this.shipments[s].deliveryDestinations[p].address.addressLine = '';\n        this.shipments[s].deliveryDestinations[p].address.geoCords.lat = '';\n        this.shipments[s].deliveryDestinations[p].address.geoCords.lng = '';\n      }\n    }\n  }\n\n  userAddress(s, p, item, callType) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this12.HereMap.geoCode(item.address.label);\n      result = result.items[0];\n\n      if (callType === 'delivery') {\n        _this12.shipments[s].deliveryDestinations[p].address.userLocation = result.address.label;\n        _this12.shipments[s].deliveryDestinations[p].address.geoCords.lat = result.position.lat;\n        _this12.shipments[s].deliveryDestinations[p].address.geoCords.lng = result.position.lng;\n        _this12.shipments[s].deliveryDestinations[p].address.countryName = result.address.countryName;\n        _this12.shipments[s].deliveryDestinations[p].address.countryCode = result.address.countryCode;\n        _this12.shipments[s].deliveryDestinations[p].address.addressLine = result.address.houseNumber + ' ' + result.address.street;\n        $('div').removeClass('show-search__result');\n        _this12.shipments[s].deliveryDestinations[p].address.stateName = result.address.state;\n        _this12.shipments[s].deliveryDestinations[p].address.stateCode = result.address.stateCode;\n        _this12.shipments[s].deliveryDestinations[p].address.cityName = result.address.city;\n        _this12.shipments[s].deliveryDestinations[p].address.postalCode = result.address.postalCode;\n\n        if (result.address.houseNumber === undefined) {\n          result.address.houseNumber = '';\n        }\n\n        if (result.address.street === undefined) {\n          result.address.street = '';\n        }\n      } else {\n        _this12.shipments[s].notifyParties[p].address.userLocation = result.address.label;\n        _this12.shipments[s].notifyParties[p].address.geoCords.lat = result.position.lat;\n        _this12.shipments[s].notifyParties[p].address.geoCords.lng = result.position.lng;\n        _this12.shipments[s].notifyParties[p].address.countryName = result.address.countryName;\n        _this12.shipments[s].notifyParties[p].address.countryCode = result.address.countryCode;\n        _this12.shipments[s].notifyParties[p].address.addressLine = result.address.houseNumber + ' ' + result.address.street;\n        $('div').removeClass('show-search__result');\n        _this12.shipments[s].notifyParties[p].address.stateName = result.address.state;\n        _this12.shipments[s].notifyParties[p].address.stateCode = result.address.stateCode;\n        _this12.shipments[s].notifyParties[p].address.cityName = result.address.city;\n        _this12.shipments[s].notifyParties[p].address.postalCode = result.address.postalCode;\n\n        if (result.address.houseNumber === undefined) {\n          result.address.houseNumber = '';\n        }\n\n        if (result.address.street === undefined) {\n          result.address.street = '';\n        }\n      }\n    })();\n  } // PASSENGER FUNCTIONS\n\n\n  getPassengerDocStates(countryCode, Pindex, Dindex) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      _this13.passengers[Pindex].travelDocuments[Dindex].stateProvince = '';\n      _this13.passengers[Pindex].travelDocuments[Dindex].docStates = yield _this13.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  fetchPassengerDocStates(passengers) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let p = 0; p < passengers.length; p++) {\n        for (let d = 0; d < passengers[p].travelDocuments.length; d++) {\n          const countryCode = _this14.passengers[p].travelDocuments[d].country;\n          _this14.passengers[p].travelDocuments[d].docStates = yield _this14.countryStateCity.GetStatesByCountryCode([countryCode]);\n        }\n      }\n    })();\n  } // notify parties\n\n\n  getNotifyPartyState(countryCode, sIndex, pIndex) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      _this15.shipments[sIndex].notifyParties[pIndex].address.stateCode = '';\n      _this15.shipments[sIndex].notifyParties[pIndex].address.notifyPartyStates = yield _this15.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getNotifyPartyCity(stateCode, sIndex, pIndex) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const countryCode = _this16.shipments[sIndex].notifyParties[pIndex].address.countryCode;\n      _this16.shipments[sIndex].notifyParties[pIndex].address.cityName = '';\n      _this16.shipments[sIndex].notifyParties[pIndex].address.stateName = yield _this16.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this16.shipments[sIndex].notifyParties[pIndex].address.countryName = yield _this16.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this16.shipments[sIndex].notifyParties[pIndex].address.notifyPartyCities = yield _this16.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  fetchNotifyPartyAddress(shipments) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      for (let s = 0; s < shipments.length; s++) {\n        for (let p = 0; p < shipments[s].notifyParties.length; p++) {\n          const countryCode = _this17.shipments[s].notifyParties[p].address.countryCode;\n          const stateCode = _this17.shipments[s].notifyParties[p].address.stateCode;\n          _this17.shipments[s].notifyParties[p].address.notifyPartyStates = yield _this17.countryStateCity.GetStatesByCountryCode([countryCode]);\n          _this17.shipments[s].notifyParties[p].address.notifyPartyCities = yield _this17.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n        }\n      }\n    })();\n  }\n\n  addNotifyParty(p) {\n    if (this.shipments[p].notifyParties.length <= 97) {\n      this.shipments[p].notifyParties.push({\n        name: '',\n        contactNumber: '',\n        address: {\n          countryName: '',\n          countryCode: '',\n          stateName: '',\n          stateCode: '',\n          cityName: '',\n          postalCode: '',\n          addressLine: '',\n          geoCords: {\n            lat: '',\n            lng: ''\n          },\n          manual: false,\n          userLocation: '',\n          notifyPartyStates: [],\n          notifyPartyCities: []\n        }\n      });\n    }\n  }\n\n  deleteNotifyParty(p, s) {\n    this.shipments[s].notifyParties.splice(p, 1);\n  }\n\n  addCommodity(s) {\n    this.shipments[s].commodities.push({\n      description: '',\n      quantity: '',\n      packagingUnit: '',\n      weight: '',\n      weightUnit: '',\n      marksAndNumbers: '',\n      hazmatDetails: {\n        unCode: '',\n        emergencyContactName: '',\n        contactPhone: '',\n        handlingInstructions: ''\n      }\n    });\n  }\n\n  deleteCommodity(i, s) {\n    this.shipments[s].commodities.splice(i, 1);\n  }\n\n  addShipment() {\n    this.shipments.push({\n      shipmentType: '',\n      loadedOn: {\n        type: '',\n        number: ''\n      },\n      CCC: '',\n      cargoControlNumber: '',\n      referenceOnlyShipment: false,\n      portOfEntry: '',\n      releaseOffice: '',\n      subLocation: '',\n      importerCsaBusinessNumber: '',\n      uniqueConsignmentReferenceNumber: '',\n      estimatedArrivalDate: '',\n      estimatedArrivalTime: '',\n      estimatedArrivalTimeZone: '',\n      cityOfLoading: {\n        cityName: '',\n        stateProvince: '',\n        country: null,\n        loadingStates: [],\n        loadingCities: []\n      },\n      cityOfAcceptance: {\n        cityName: '',\n        stateProvince: '',\n        country: null,\n        acceptanceStates: [],\n        acceptanceCities: []\n      },\n      consolidatedFreight: false,\n      specialInstructions: '',\n      shipperID: '',\n      consigneeID: '',\n      notifyParties: [],\n      deliveryDestinations: [],\n      commodities: [{\n        description: '',\n        quantity: '',\n        packagingUnit: '',\n        weight: '',\n        weightUnit: '',\n        marksAndNumbers: '',\n        hazmatDetails: {\n          unCode: '',\n          emergencyContactName: '',\n          contactPhone: '',\n          handlingInstructions: ''\n        }\n      }]\n    });\n  }\n\n  deleteShipment(i) {\n    this.shipments.splice(i, 1);\n  }\n\n  addACIManifest() {\n    const data = {\n      CCC: this.CCC,\n      manifestType: this.manifestType,\n      tripNumber: this.CCC + this.tripNumber,\n      portOfEntry: this.portOfEntry,\n      subLocation: this.subLocation,\n      estimatedArrivalDate: this.estimatedArrivalDate,\n      estimatedArrivalTime: this.estimatedArrivalTime,\n      estimatedArrivalTimeZone: this.estimatedArrivalTimeZone,\n      truck: this.truck,\n      trailers: this.trailers,\n      mainDriver: this.mainDriver,\n      coDrivers: this.coDrivers,\n      passengers: this.passengers,\n      containers: this.containers,\n      shipments: this.shipments,\n      currentStatus: 'Draft'\n    };\n\n    for (let p = 0; p < data.passengers.length; p++) {\n      for (let d = 0; d < data.passengers[p].travelDocuments.length; d++) {\n        const element = data.passengers[p].travelDocuments[d];\n        delete element.docStates;\n      }\n    }\n\n    for (let s = 0; s < data.shipments.length; s++) {\n      for (let p = 0; p < data.shipments[s].notifyParties.length; p++) {\n        const element = data.shipments[s].notifyParties[p].address;\n        delete element.notifyPartyStates;\n        delete element.notifyPartyCities;\n      }\n    }\n\n    for (let s = 0; s < data.shipments.length; s++) {\n      for (let p = 0; p < data.shipments[s].deliveryDestinations.length; p++) {\n        const element = data.shipments[s].deliveryDestinations[p].address;\n        delete element.deliveryDestinationStates;\n        delete element.deliveryDestinationCities;\n      }\n\n      delete data.shipments[s].cityOfLoading.loadingCities;\n      delete data.shipments[s].cityOfLoading.loadingStates;\n      delete data.shipments[s].cityOfAcceptance.acceptanceCities;\n      delete data.shipments[s].cityOfAcceptance.acceptanceStates;\n    }\n\n    this.apiService.postData('eManifests/addACIemanifest', data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {// this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.toastr.success('Manifest added successfully.');\n        this.location.back(); // <-- go back to previous location\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v === 'tripNumber') {\n        $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n      }\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  fetchACIEntry() {\n    var _this18 = this;\n\n    this.apiService.getData('eManifests/ACI/' + this.manifestID).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        result = result.Items[0];\n        _this18.timeCreated = result.timeCreated;\n        _this18.manifestID = _this18.manifestID;\n        _this18.manifestType = result.manifestType, _this18.sendId = result.sendId;\n        _this18.CCC = result.CCC;\n        _this18.tripNumber = result.tripNumber.substring(4, result.tripNumber.length);\n        _this18.portOfEntry = result.portOfEntry;\n        _this18.subLocation = result.subLocation;\n        _this18.estimatedArrivalDate = result.estimatedArrivalDate;\n        _this18.estimatedArrivalTime = result.estimatedArrivalTime;\n        _this18.estimatedArrivalTimeZone = result.estimatedArrivalTimeZone;\n        _this18.truck = result.truck;\n        _this18.mainDriver = result.mainDriver;\n        _this18.coDrivers = result.coDrivers;\n        _this18.trailers = result.trailers;\n        _this18.containers = result.containers;\n        _this18.passengers = result.passengers;\n        _this18.shipments = result.shipments;\n        _this18.currentStatus = result.currentStatus;\n        _this18.createdBy = result.createdBy;\n        _this18.modifiedBy = result.modifiedBy;\n        _this18.borderResponses = result.borderResponses;\n        _this18.createdDate = result.createdDate;\n        _this18.createdTime = result.createdTime;\n        yield _this18.fetchNotifyPartyAddress(_this18.shipments);\n        yield _this18.fetchDeliveryDestinationAddress(_this18.shipments);\n        yield _this18.fetchLoadingStateCities(_this18.shipments);\n        yield _this18.fetchAcceptanceStateCities(_this18.shipments);\n        yield _this18.fetchPassengerDocStates(_this18.passengers);\n\n        _this18.fetchAssetType();\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  updateACIManifest() {\n    const data = {\n      manifestID: this.manifestID,\n      manifestType: this.manifestType,\n      sendId: this.sendId,\n      CCC: this.CCC,\n      tripNumber: this.CCC + this.tripNumber,\n      portOfEntry: this.portOfEntry,\n      subLocation: this.subLocation,\n      estimatedArrivalDate: this.estimatedArrivalDate,\n      estimatedArrivalTime: this.estimatedArrivalTime,\n      estimatedArrivalTimeZone: this.estimatedArrivalTimeZone,\n      truck: this.truck,\n      trailers: this.trailers,\n      mainDriver: this.mainDriver,\n      coDrivers: this.coDrivers,\n      passengers: this.passengers,\n      containers: this.containers,\n      shipments: this.shipments,\n      currentStatus: this.currentStatus,\n      timeCreated: this.timeCreated,\n      createdBy: this.createdBy,\n      modifiedBy: this.modifiedBy,\n      borderResponses: this.borderResponses,\n      createdDate: this.createdDate,\n      createdTime: this.createdTime\n    };\n\n    for (let p = 0; p < data.passengers.length; p++) {\n      for (let d = 0; d < data.passengers[p].travelDocuments.length; d++) {\n        const element = data.passengers[p].travelDocuments[d];\n        delete element.docStates;\n      }\n    }\n\n    for (let s = 0; s < data.shipments.length; s++) {\n      for (let p = 0; p < data.shipments[s].notifyParties.length; p++) {\n        const element = data.shipments[s].notifyParties[p].address;\n        delete element.notifyPartyStates;\n        delete element.notifyPartyCities;\n      }\n    }\n\n    for (let s = 0; s < data.shipments.length; s++) {\n      for (let p = 0; p < data.shipments[s].deliveryDestinations.length; p++) {\n        const element = data.shipments[s].deliveryDestinations[p].address;\n        delete element.deliveryDestinationStates;\n        delete element.deliveryDestinationCities;\n      }\n\n      delete data.shipments[s].cityOfLoading.loadingCities;\n      delete data.shipments[s].cityOfLoading.loadingStates;\n      delete data.shipments[s].cityOfAcceptance.acceptanceCities;\n      delete data.shipments[s].cityOfAcceptance.acceptanceStates;\n    }\n\n    this.apiService.putData(`eManifests/updateACImanifest/${this.amendManifest}?amendTripReason=${this.amendTripReason}`, data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {// this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.toastr.success('Manifest Updated Successfully.');\n        this.location.back(); // <-- go back to previous location\n      }\n    });\n  }\n\n  fastValidation(e) {\n    const fastCard = e.target.value;\n    const newString = fastCard.split('');\n\n    if (newString.length == 0) {\n      this.errorFastCard = false;\n    } else {\n      if (newString.length != 14) {\n        this.errorFastCard = true;\n      } else {\n        const fastStart = newString[0].concat(newString[1], newString[2], newString[3]);\n        const fastEnd = newString[12].concat(newString[13]);\n\n        if (fastStart != '4270') {\n          this.errorFastCard = true;\n        } else if (fastEnd != '00' && fastEnd != '01' && fastEnd != '02') {\n          this.errorFastCard = true;\n        } else {\n          this.errorFastCard = false;\n        }\n      }\n    }\n  }\n\n  onChangeHideErrors(fieldname = '') {\n    $('[name=\"' + fieldname + '\"]').removeClass('error').next().remove('label');\n  }\n\n};\n\nNewAciManifestComponent.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: HereMapService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: ListService\n}, {\n  type: ApiService\n}, {\n  type: Location\n}, {\n  type: NgbTimepickerConfig\n}, {\n  type: NgbDateAdapter\n}, {\n  type: CountryStateCityService\n}];\n\nNewAciManifestComponent = __decorate([Component({\n  selector: 'app-new-aci-manifest',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [],\n  styles: [__NG_CLI_RESOURCE__1]\n})], NewAciManifestComponent);\nexport { NewAciManifestComponent };","map":null,"metadata":{},"sourceType":"module"}