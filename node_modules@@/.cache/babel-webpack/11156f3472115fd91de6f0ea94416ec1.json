{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-bill.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-bill.component.css\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Component } from \"@angular/core\";\nimport { ListService, AccountService, ApiService } from \"src/app/services\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport * as moment from \"moment\";\nlet AddBillComponent = class AddBillComponent {\n  constructor(listService, accountService, httpClient, toaster, location, route, apiService) {\n    this.listService = listService;\n    this.accountService = accountService;\n    this.httpClient = httpClient;\n    this.toaster = toaster;\n    this.location = location;\n    this.route = route;\n    this.apiService = apiService;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.orderData = {\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      refNo: \"\",\n      currency: \"CAD\",\n      vendorID: null,\n      detail: [{\n        comm: \"\",\n        qty: \"\",\n        qtyTyp: null,\n        rate: \"\",\n        rateTyp: null,\n        amount: 0,\n        accountID: null,\n        description: \"\",\n        rowID: \"\"\n      }],\n      charges: {\n        remarks: \"\",\n        cName: \"Adjustments\",\n        cType: \"add\",\n        cAmount: 0,\n        accountID: null,\n        discount: 0,\n        discountUnit: '%',\n        accFee: [{\n          name: \"\",\n          amount: 0\n        }],\n        accDed: [{\n          name: \"\",\n          amount: 0\n        }],\n        taxes: [{\n          name: \"GST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }, {\n          name: \"PST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }, {\n          name: \"HST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }]\n      },\n      total: {\n        detailTotal: 0,\n        feeTotal: 0,\n        subTotal: 0,\n        vendorCredit: 0,\n        taxes: 0,\n        finalTotal: 0,\n        discountAmount: 0\n      },\n      status: \"open\",\n      billType: null,\n      dueDate: null,\n      paymentTerm: null,\n      purchaseID: null,\n      creditIds: [],\n      creditData: [],\n      exempt: true,\n      stateID: null\n    };\n    this.quantityTypes = [];\n    this.vendors = [];\n    this.submitDisabled = false;\n    this.errors = {};\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.purchaseOrders = [];\n    this.paymentTerms = [{\n      value: \"15\",\n      name: \"15 Days\"\n    }, {\n      value: \"30\",\n      name: \"30 Days\"\n    }, {\n      value: \"45\",\n      name: \"45 Days\"\n    }, {\n      value: \"dueReceipt\",\n      name: \"Due on receipt\"\n    }, {\n      value: \"dueEnd\",\n      name: \"Due end of the month\"\n    }, {\n      value: \"custom\",\n      name: \"Custom\"\n    }];\n    this.billID = \"\";\n    this.vendorCredits = [];\n    this.accounts = [];\n    this.editDisabled = false;\n    this.stateTaxes = [];\n    this.productDisabled = false;\n    this.uploadedDocs = [];\n    this.pageTitle = 'Add';\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.billID = _this.route.snapshot.params[\"billID\"];\n      $(\".modal\").on(\"hidden.bs.modal\", e => {\n        localStorage.setItem(\"isOpen\", \"false\");\n      });\n\n      _this.listService.fetchVendors();\n\n      let vendorList = new Array();\n\n      _this.getValidVendors(vendorList);\n\n      _this.vendors = vendorList;\n\n      _this.fetchQuantityTypes();\n\n      _this.fetchAccounts();\n\n      _this.fetchStateTaxes();\n\n      if (_this.billID) {\n        _this.pageTitle = 'Edit';\n        _this.editDisabled = true;\n        yield _this.fetchDetails();\n        yield _this.fetchAllPurchaseOrders();\n      } else {\n        _this.pageTitle = 'Add';\n      }\n    })();\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/fetch/list`).subscribe(res => {\n      this.accounts = res;\n    });\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  getValidVendors(vendorList) {\n    let ids = [];\n    this.listService.vendorList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          vendorList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  fetchPurchaseOrders() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.orderData.vendorID) {\n        const result = yield _this2.accountService.getData(`purchase-orders/vendor/${_this2.orderData.vendorID}?currency=${_this2.orderData.currency}`).toPromise();\n        _this2.purchaseOrders = result;\n      }\n    })();\n  }\n\n  fetchAllPurchaseOrders() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this3.accountService.getData(`purchase-orders/vendor/all/${_this3.orderData.vendorID}`).toPromise();\n      _this3.purchaseOrders = result;\n    })();\n  }\n\n  fetchQuantityTypes() {\n    this.httpClient.get(\"assets/jsonFiles/quantityTypes.json\").subscribe(data => {\n      this.quantityTypes = data;\n    });\n  }\n\n  addDetail() {\n    let obj = {\n      comm: \"\",\n      qty: \"\",\n      qtyTyp: null,\n      rate: \"\",\n      rateTyp: null,\n      amount: 0,\n      accountID: null,\n      description: \"\",\n      rowID: uuidv4()\n    };\n    const lastAdded = this.orderData.detail[this.orderData.detail.length - 1];\n\n    if (lastAdded.comm !== \"\" && lastAdded.qty !== \"\" && lastAdded.qtyTyp !== null && lastAdded.rate !== \"\" && lastAdded.rateTyp !== null && lastAdded.amount !== 0 && lastAdded.accountID !== null) {\n      this.orderData.detail.push(obj);\n    }\n  }\n\n  delDetail(index) {\n    if (this.orderData.detail.length > 1) {\n      this.orderData.detail.splice(index, 1);\n    }\n\n    this.detailsTotal();\n  }\n\n  addAccessorialArr(type) {\n    let obj = {\n      name: \"\",\n      amount: 0\n    };\n\n    if (type === \"fee\") {\n      const lastAdded = this.orderData.charges.accFee[this.orderData.charges.accFee.length - 1];\n\n      if (lastAdded.name !== \"\" && lastAdded.amount !== 0) {\n        this.orderData.charges.accFee.push(obj);\n      }\n    } else if (type === \"ded\") {\n      const lastAdded = this.orderData.charges.accDed[this.orderData.charges.accDed.length - 1];\n\n      if (lastAdded.name !== \"\" && lastAdded.amount !== 0) {\n        this.orderData.charges.accDed.push(obj);\n      }\n    }\n  }\n\n  detailsTotal() {\n    this.orderData.total.detailTotal = 0;\n    this.orderData.detail.forEach(element => {\n      this.orderData.total.detailTotal += Number(element.amount);\n    });\n    this.calculateFinalTotal();\n  }\n\n  calcDetailAmount(index) {\n    if (!this.orderData.detail[index].rate) {\n      this.orderData.detail[index].rate = \"0\";\n    }\n\n    if (!this.orderData.detail[index].qty) {\n      this.orderData.detail[index].qty = \"0\";\n    }\n\n    if (this.orderData.detail[index].qty && this.orderData.detail[index].rate) {\n      this.orderData.detail[index].amount = Number(this.orderData.detail[index].qty) * Number(this.orderData.detail[index].rate);\n    }\n\n    this.detailsTotal();\n    this.allTax();\n  }\n\n  setQuanType(val, index) {\n    this.orderData.detail[index].qtyTyp = val;\n    this.orderData.detail[index].rateTyp = val;\n  }\n\n  calculateFinalTotal() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.orderData.total.subTotal = Number(_this4.orderData.total.detailTotal) + Number(_this4.orderData.total.feeTotal);\n\n      _this4.allTax();\n\n      let discount;\n\n      if (_this4.orderData.charges.discountUnit != '' && _this4.orderData.charges.discountUnit != null) {\n        if (_this4.orderData.charges.discountUnit === '%') {\n          discount = _this4.orderData.total.subTotal * _this4.orderData.charges.discount / 100;\n        } else {\n          discount = _this4.orderData.charges.discount;\n        }\n      }\n\n      _this4.orderData.total.discountAmount = discount;\n      _this4.orderData.total.finalTotal = Number(_this4.orderData.total.subTotal) - Number(_this4.orderData.total.vendorCredit) + Number(_this4.orderData.total.taxes) + Number(_this4.orderData.total.discountAmount);\n    })();\n  }\n\n  accessorialFeeTotal() {\n    if (this.orderData.charges.cType === \"add\") {\n      this.orderData.total.feeTotal = Number(this.orderData.charges.cAmount);\n    } else if (this.orderData.charges.cType === \"ded\") {\n      this.orderData.total.feeTotal = -Number(this.orderData.charges.cAmount);\n    }\n\n    this.calculateFinalTotal();\n    this.allTax();\n    this.taxTotal();\n  }\n\n  taxcalculation(index) {\n    this.orderData.charges.taxes[index].amount = this.orderData.charges.taxes[index].tax * this.orderData.total.subTotal / 100;\n    this.taxTotal();\n  }\n\n  allTax() {\n    this.orderData.charges.taxes.forEach(element => {\n      element.amount = element.tax * this.orderData.total.subTotal / 100;\n    });\n  }\n\n  taxTotal() {\n    this.orderData.total.taxes = 0;\n    this.orderData.charges.taxes.forEach(element => {\n      this.orderData.total.taxes += Number(element.amount);\n    });\n    this.calculateFinalTotal();\n  }\n\n  fetchPurchaseDetails() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.vendorCredits = [];\n      let result = yield _this5.accountService.getData(`purchase-orders/details/${_this5.orderData.purchaseID}`).toPromise();\n      console.log('result--', result.total);\n      _this5.orderData.detail = result[0].detail;\n      _this5.orderData.charges.remarks = result[0].charges.remarks;\n      _this5.orderData.charges.discount = result[0].charges.discount;\n      _this5.orderData.charges.discountUnit = result[0].charges.discountUnit;\n      _this5.orderData.total.detailTotal = result[0].total.detailTotal;\n      _this5.orderData.total.feeTotal = result[0].total.feeTotal;\n      _this5.orderData.total.vendorCredit = result[0].total.vendorCredit;\n      _this5.orderData.total.taxes = result[0].total.taxes;\n      console.log('result--taxes', result.total.taxes);\n      _this5.orderData.total.subTotal = result[0].total.subTotal;\n      _this5.orderData.total.discountAmount = result[0].total.discountAmount;\n      _this5.orderData.total.finalTotal = result[0].total.finalTotal;\n      _this5.orderData.refNo = result[0].refNo;\n      _this5.orderData.currency = result[0].currency;\n      _this5.orderData.vendorID = result[0].vendorID;\n      yield _this5.calculateFinalTotal();\n    })();\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event) {\n    let files = [...event.target.files];\n\n    for (let i = 0; i < files.length; i++) {\n      this.uploadedDocs.push(files[i]);\n    }\n  }\n\n  addRecord() {\n    for (let i = 0; i < this.orderData.detail.length; i++) {\n      const element = this.orderData.detail[i];\n\n      if (element.comm === \"\" || element.qty === \"\" || element.qtyTyp === null || element.rate === \"\" || element.rateTyp === null || element.amount <= 0 || element.accountID === null) {\n        this.toaster.error(\"Please enter valid bill details\");\n        return false;\n      }\n    }\n\n    if (this.orderData.total.subTotal <= 0) {\n      this.toaster.error(\"Amount should be greater than 0\");\n      return false;\n    }\n\n    if (this.orderData.total.finalTotal <= 0) {\n      this.toaster.error(\"Amount should be greater than 0\");\n      return false;\n    } // create form data instance\n\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadedDocs.length; i++) {\n      formData.append(\"uploadedDocs\", this.uploadedDocs[i]);\n    } // append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.orderData));\n    this.submitDisabled = true;\n    this.accountService.postData(\"bills\", formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Bill added successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n  fetchDetails() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this6.accountService.getData(`bills/details/${_this6.billID}`).toPromise();\n      _this6.orderData = result[0];\n    })();\n  }\n\n  updateRecord() {\n    this.submitDisabled = true;\n    this.accountService.putData(`bills/update/${this.billID}`, this.orderData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Bill updated successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  fetchVendorCredits() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this7.orderData.vendorID) {\n        _this7.dataMessage = Constants.FETCHING_DATA;\n        let result = yield _this7.accountService.getData(`vendor-credits/specific/${_this7.orderData.vendorID}?currency=${_this7.orderData.currency}`).toPromise();\n\n        if (result.length === 0) {\n          _this7.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        result.map(v => {\n          v.prevPaidAmount = Number(v.totalAmt) - Number(v.balance);\n          v.paidStatus = false;\n          v.fullPayment = false;\n          v.paidAmount = 0;\n          v.newStatus = v.status.replace(\"_\", \" \");\n        });\n        _this7.vendorCredits = result;\n      }\n    })();\n  }\n\n  changeVendor() {\n    this.orderData.total.vendorCredit = 0;\n    this.orderData.total.subTotal = 0;\n    this.vendorCredits = [];\n    this.purchaseOrders = [];\n    this.fetchPurchaseOrders();\n    this.fetchVendorCredits();\n  }\n\n  assignFullPayment(index, data) {\n    if (data.fullPayment) {\n      this.vendorCredits[index].paidAmount = data.balance;\n      this.vendorCredits[index].paidStatus = true;\n    } else {\n      this.vendorCredits[index].paidAmount = 0;\n      this.vendorCredits[index].paidStatus = false;\n    }\n\n    this.selectedCredits();\n    this.calculateFinalTotal();\n  }\n\n  selectedCredits() {\n    this.orderData.creditIds = [];\n    this.orderData.creditData = [];\n\n    for (const element of this.vendorCredits) {\n      if (element.selected) {\n        if (!this.orderData.creditIds.includes(element.creditID)) {\n          let obj = {\n            creditID: element.creditID,\n            status: element.status,\n            paidAmount: element.status === \"not_deducted\" ? element.paidAmount : Number(element.totalAmt) - Number(element.balance),\n            totalAmount: element.status === \"not_deducted\" ? element.amount : element.balance,\n            pendingAmount: element.balance\n          };\n          this.orderData.creditIds.push(element.creditID);\n          this.orderData.creditData.push(obj);\n        }\n      }\n    }\n\n    this.creditCalculation();\n    this.calculateFinalTotal();\n  }\n\n  creditCalculation() {\n    this.orderData.total.vendorCredit = 0;\n\n    for (const element of this.vendorCredits) {\n      if (element.selected) {\n        this.orderData.total.vendorCredit += Number(element.paidAmount);\n        this.orderData.creditData.map(v => {\n          if (element.creditID === v.creditID) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.balance) - Number(element.paidAmount);\n\n            if (Number(element.paidAmount) === Number(element.balance)) {\n              v.status = \"deducted\";\n            } else if (Number(element.paidAmount) < Number(element.balance)) {\n              v.status = \"partially_deducted\";\n            } else {\n              v.status = \"not_deducted\";\n            }\n          }\n        });\n      }\n    }\n  }\n\n  fetchStateTaxes() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this8.apiService.getData(\"stateTaxes\").toPromise();\n      _this8.stateTaxes = result.Items;\n    })();\n  }\n\n  taxExempt() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('this.order', _this9.orderData);\n\n      _this9.orderData.charges.taxes.map(v => {\n        console.log('this.v', v);\n        v.tax = 0;\n      });\n\n      _this9.orderData.stateID = null;\n\n      _this9.allTax();\n\n      _this9.taxTotal();\n\n      _this9.calculateFinalTotal();\n    })();\n  }\n\n  selecteProvince(stateID = undefined) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      if (stateID != undefined) {\n        let taxObj = {\n          GST: \"\",\n          HST: \"\",\n          PST: \"\",\n          stateCode: \"\",\n          stateName: \"\",\n          stateTaxID: \"\"\n        };\n\n        _this10.stateTaxes.map(v => {\n          if (v.stateTaxID === stateID) {\n            taxObj = v;\n          }\n        });\n\n        _this10.orderData.charges.taxes.map(v => {\n          if (v.name === \"GST\") {\n            v.tax = Number(taxObj.GST);\n          } else if (v.name === \"HST\") {\n            v.tax = Number(taxObj.HST);\n          } else if (v.name === \"PST\") {\n            v.tax = Number(taxObj.PST);\n          }\n        });\n\n        _this10.allTax();\n\n        _this10.taxTotal();\n      }\n    })();\n  }\n\n  typeChange(type) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      _this11.orderData.purchaseID = null;\n\n      if (type === \"product\") {\n        _this11.productDisabled = true;\n      } else {\n        _this11.productDisabled = false;\n      }\n    })();\n  }\n\n  getDueDate(e) {\n    if (e === \"15\") {\n      const test = moment().add(15, \"d\");\n      const test1 = moment(test).format(\"YYYY-MM-DD\");\n      this.orderData.dueDate = test1;\n    } else if (e === \"30\") {\n      const test = moment().add(30, \"d\");\n      const test1 = moment(test).format(\"YYYY-MM-DD\");\n      this.orderData.dueDate = test1;\n    } else if (e === \"45\") {\n      const test = moment().add(45, \"d\");\n      const test1 = moment(test).format(\"YYYY-MM-DD\");\n      this.orderData.dueDate = test1;\n    } else if (e === \"dueReceipt\") {\n      this.orderData.dueDate = moment().format(\"YYYY-MM-DD\");\n    } else if (e === \"dueEnd\") {\n      this.orderData.dueDate = moment().endOf(\"month\").format(\"YYYY-MM-DD\");\n    } else {\n      this.orderData.dueDate = null;\n    }\n  }\n\n};\n\nAddBillComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: AccountService\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: Location\n}, {\n  type: ActivatedRoute\n}, {\n  type: ApiService\n}];\n\nAddBillComponent = __decorate([Component({\n  selector: \"app-add-bill\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddBillComponent);\nexport { AddBillComponent };","map":null,"metadata":{},"sourceType":"module"}