{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./vehicle-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./vehicle-list.component.css\";\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport * as _ from 'lodash';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { environment } from '../../../../../environments/environment';\nimport { ApiService, HereMapService } from '../../../../services';\nimport { OnboardDefaultService } from '../../../../services/onboard-default.service';\nimport Constants from '../../constants';\nlet VehicleListComponent = class VehicleListComponent {\n  constructor(apiService, httpClient, hereMap, toastr, spinner, onboard, _sanitizer, modalService) {\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.hereMap = hereMap;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.onboard = onboard;\n    this._sanitizer = _sanitizer;\n    this.modalService = modalService;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.title = 'Vehicle List';\n    this.vehicles = [];\n    this.suggestedVehicles = [];\n    this.vehicleID = '';\n    this.currentStatus = null;\n    this.vehicleIdentification = '';\n    this.allOptions = {};\n    this.groupsList = {};\n    this.vehicleModelList = {};\n    this.vehicleManufacturersList = {};\n    this.serviceProgramsList = {};\n    this.driversList = {};\n    this.vendorsList = {};\n    this.currentView = 'list';\n    this.totalRecords = 20;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = '';\n    this.hideShow = {\n      vin: true,\n      vehicleName: true,\n      vehicleType: true,\n      make: true,\n      model: true,\n      lastLocation: true,\n      trip: false,\n      plateNo: true,\n      fuelType: true,\n      status: true,\n      group: false,\n      ownership: true,\n      driver: true,\n      serviceProgram: false,\n      serviceDate: false,\n      insuranceVendor: false,\n      insuranceAmount: false,\n      engineSummary: false,\n      primaryMeter: false,\n      fuelUnit: false,\n      startDate: true,\n      year: true,\n      annualSafety: true,\n      teamDriver: true\n    };\n    this.vehicleNext = false;\n    this.vehiclePrev = true;\n    this.vehicleDraw = 0;\n    this.vehiclePrevEvauatedKeys = [''];\n    this.vehicleStartPoint = 1;\n    this.vehicleEndPoint = this.pageLength;\n    this.vehicleTypeObects = {};\n    this.lastItemSK = '';\n    this.loaded = false;\n    this.getSuggestions = _.debounce(function (value) {\n      value = value.toLowerCase();\n\n      if (value != '') {\n        this.apiService.getData(`vehicles/suggestion/${value}`).subscribe(result => {\n          this.suggestedVehicles = result;\n        });\n      } else {\n        this.suggestedVehicles = [];\n      }\n    }, 800);\n  }\n\n  ngOnInit() {\n    this.onboard.checkInspectionForms();\n    this.fetchGroups(); // this.fetchVehicleModelList();\n    // this.fetchVehicleManufacturerList();\n\n    this.fetchDriversList();\n    this.fetchServiceProgramsList();\n    this.fetchVendorList();\n    this.initDataTable();\n    $(document).ready(() => {\n      setTimeout(() => {\n        $('#DataTables_Table_0_wrapper .dt-buttons').addClass('custom-dt-buttons').prependTo('.page-buttons');\n      }, 1800);\n    });\n    this.httpClient.get('assets/vehicleType.json').subscribe(data => {\n      this.vehicleTypeObects = data.reduce((a, b) => {\n        return a[b['code']] = b['name'], a;\n      }, {});\n    });\n  }\n\n  changeVehicleID() {\n    this.vehicleID = '';\n  }\n\n  fetchGroups() {\n    this.apiService.getData('groups/get/list').subscribe(result => {\n      this.groupsList = result;\n    });\n  }\n\n  fetchVehicleModelList() {\n    this.apiService.getData('vehicleModels/get/list').subscribe(result => {\n      this.vehicleModelList = result;\n    });\n  } // fetchVehicleManufacturerList() {\n  //   this.apiService.getData('manufacturers/get/list').subscribe((result: any) => {\n  //     this.vehicleManufacturersList = result;\n  //   });\n  // }\n\n\n  fetchDriversList() {\n    this.apiService.getData('drivers/get/list').subscribe(result => {\n      this.driversList = result;\n    });\n  }\n\n  fetchServiceProgramsList() {\n    this.apiService.getData('servicePrograms/get/list').subscribe(result => {\n      this.serviceProgramsList = result;\n    });\n  }\n\n  fetchVendorList() {\n    this.apiService.getData('contacts/get/list/vendor').subscribe(result => {\n      this.vendorsList = result;\n    });\n  }\n\n  setVehicle(vehicleID, vehicleIdentification) {\n    this.vehicleIdentification = vehicleIdentification;\n    this.vehicleID = vehicleIdentification;\n    this.suggestedVehicles = [];\n  }\n  /**\r\n   * change the view of summary\r\n   */\n\n\n  changeView() {\n    if (this.currentView == 'list') {\n      this.currentView = 'map';\n      setTimeout(() => {\n        this.hereMap.mapInit();\n      }, 500);\n    } else {\n      this.currentView = 'list';\n    }\n  }\n  /**\r\n   * export excel\r\n   */\n\n\n  export() {\n    $('.buttons-excel').trigger('click');\n  }\n\n  initDataTable() {\n    var _this = this;\n\n    if (this.lastEvaluatedKey !== 'end') {\n      this.apiService.getData('vehicles/fetch/records?vehicle=' + this.vehicleID + '&status=' + this.currentStatus + '&lastKey=' + this.lastEvaluatedKey).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          _this.dataMessage = Constants.FETCHING_DATA;\n\n          if (result.Items.length === 0) {\n            _this.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          if (result.Items.length > 0) {\n            result.Items.map(v => {\n              v.url = `/fleet/vehicles/detail/${v.vehicleID}`;\n            });\n\n            if (result.LastEvaluatedKey !== undefined) {\n              _this.lastEvaluatedKey = encodeURIComponent(result.Items[result.Items.length - 1].vehicleSK);\n            } else {\n              _this.lastEvaluatedKey = 'end';\n            }\n\n            _this.vehicles = _this.vehicles.concat(result.Items);\n            _this.loaded = true;\n            yield _this.getDashCamConnection(_this.vehicles);\n            yield _this.getDashCamStatus(_this.vehicles);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.initDataTable();\n    }\n\n    this.loaded = false;\n  }\n  /**\r\n   * Get device status dashCam Connection\r\n   * @param vehicleList all the vehicles\r\n   */\n\n\n  getDashCamConnection(vehicleList) {\n    return _asyncToGenerator(function* () {\n      if (vehicleList && vehicleList.length > 0) {\n        for (const data of vehicleList) {\n          if (data.deviceInfo) {\n            data['isDashCam'] = true;\n          }\n        }\n      }\n    })();\n  }\n  /**\r\n   * Get device status from DashCam\r\n   * @param vehicleList all the vehicles\r\n   */\n\n\n  getDashCamStatus(vehicleList) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (vehicleList && vehicleList.length > 0) {\n        for (const data of vehicleList) {\n          if (data.deviceInfo) {\n            const deviceId = data.deviceInfo[0].deviceSrNo.split('#')[1];\n            const response = yield _this2.apiService.getData(`vehicles/dashCam/status/${deviceId}`).toPromise();\n\n            if (response && response.isOnline !== undefined) {\n              data['isDashOnline'] = response.isOnline;\n            }\n          }\n        }\n      }\n    })();\n  }\n\n  searchFilter() {\n    if (this.vehicleIdentification !== '' || this.currentStatus !== null) {\n      this.vehicleIdentification = this.vehicleIdentification.toLowerCase();\n\n      if (this.vehicleID == '') {\n        this.vehicleID = this.vehicleIdentification;\n      }\n\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.vehicles = [];\n      this.lastEvaluatedKey = '';\n      this.suggestedVehicles = [];\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  resetFilter() {\n    if (this.vehicleIdentification !== '' || this.currentStatus !== null) {\n      this.vehicleID = '';\n      this.suggestedVehicles = [];\n      this.vehicleIdentification = '';\n      this.currentStatus = null;\n      this.lastEvaluatedKey = '';\n      this.vehicles = [];\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  deleteVehicle(eventData) {\n    if (confirm('Are you sure you want to delete?') === true) {\n      // let record = {\n      //   date: eventData.createdDate,\n      //   time: eventData.createdTime,\n      //   eventID: eventData.vehicleID,\n      //   status: eventData.currentStatus\n      // }\n      this.apiService.deleteData(`vehicles/delete/${eventData.vehicleID}/${eventData.vehicleIdentification}`).subscribe(result => {\n        this.vehicles = [];\n        this.vehicleDraw = 0;\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.lastEvaluatedKey = ''; // this.fetchVehiclesCount();\n\n        this.initDataTable();\n        this.toastr.success('Vehicle Deleted Successfully!');\n      });\n    }\n  }\n\n  hideShowColumn() {\n    //for headers\n    if (this.hideShow.vin == false) {\n      $('.col1').css('display', 'none');\n    } else {\n      $('.col1').css('display', '');\n    }\n\n    if (this.hideShow.vehicleName == false) {\n      $('.col2').css('display', 'none');\n    } else {\n      $('.col2').css('display', '');\n    }\n\n    if (this.hideShow.vehicleType == false) {\n      $('.col3').css('display', 'none');\n    } else {\n      $('.col3').css('display', '');\n    }\n\n    if (this.hideShow.make == false) {\n      $('.col4').css('display', 'none');\n    } else {\n      $('.col4').css('display', '');\n    }\n\n    if (this.hideShow.model == false) {\n      $('.col5').css('display', 'none');\n    } else {\n      $('.col5').removeClass('extra');\n      $('.col5').css('display', '');\n      $('.col5').css('min-width', '120px');\n    }\n\n    if (this.hideShow.lastLocation == false) {\n      $('.col6').css('display', 'none');\n    } else {\n      $('.col6').css('display', '');\n    }\n\n    if (this.hideShow.trip == false) {\n      $('.col7').css('display', 'none');\n    } else {\n      $('.col7').removeClass('extra');\n      $('.col7').css('display', '');\n      $('.col7').css('min-width', '200px');\n    }\n\n    if (this.hideShow.plateNo == false) {\n      $('.col8').css('display', 'none');\n    } else {\n      $('.col8').css('display', '');\n    }\n\n    if (this.hideShow.fuelType == false) {\n      $('.col9').css('display', 'none');\n    } else {\n      $('.col9').css('display', '');\n    }\n\n    if (this.hideShow.status == false) {\n      $('.col10').css('display', 'none');\n    } else {\n      $('.col10').css('display', '');\n    }\n\n    if (this.hideShow.group == false) {\n      $('.col11').css('display', 'none');\n    } else {\n      $('.col11').removeClass('extra');\n      $('.col11').css('display', '');\n      $('.col11').css('min-width', '200px');\n    }\n\n    if (this.hideShow.ownership == false) {\n      $('.col12').css('display', 'none');\n    } else {\n      $('.col12').removeClass('extra');\n      $('.col12').css('display', '');\n      $('.col12').css('min-width', '200px');\n    } //extra columns\n\n\n    if (this.hideShow.driver == false) {\n      $('.col13').css('display', 'none');\n    } else {\n      $('.col13').removeClass('extra');\n      $('.col13').css('display', '');\n      $('.col13').css('min-width', '200px');\n    }\n\n    if (this.hideShow.serviceProgram == false) {\n      $('.col14').css('display', 'none');\n    } else {\n      $('.col14').removeClass('extra');\n      $('.col14').css('display', '');\n      $('.col14').css('min-width', '200px');\n    }\n\n    if (this.hideShow.serviceDate == false) {\n      $('.col15').css('display', 'none');\n    } else {\n      $('.col15').removeClass('extra');\n      $('.col15').css('display', '');\n      $('.col15').css('min-width', '200px');\n    }\n\n    if (this.hideShow.insuranceVendor == false) {\n      $('.col16').css('display', 'none');\n    } else {\n      $('.col16').removeClass('extra');\n      $('.col16').css('display', '');\n      $('.col16').css('min-width', '200px');\n    }\n\n    if (this.hideShow.insuranceAmount == false) {\n      $('.col17').css('display', 'none');\n    } else {\n      $('.col17').removeClass('extra');\n      $('.col17').css('display', '');\n      $('.col17').css('min-width', '200px');\n    }\n\n    if (this.hideShow.engineSummary == false) {\n      $('.col18').css('display', 'none');\n    } else {\n      $('.col18').removeClass('extra');\n      $('.col18').css('display', '');\n      $('.col18').css('min-width', '200px');\n    }\n\n    if (this.hideShow.primaryMeter == false) {\n      $('.col19').css('display', 'none');\n    } else {\n      $('.col19').removeClass('extra');\n      $('.col19').css('display', '');\n      $('.col19').css('min-width', '200px');\n    }\n\n    if (this.hideShow.fuelUnit == false) {\n      $('.col20').css('display', 'none');\n    } else {\n      $('.col20').removeClass('extra');\n      $('.col20').css('display', '');\n      $('.col20').css('min-width', '200px');\n    }\n  }\n\n  refreshData() {\n    this.vehicleID = '';\n    this.suggestedVehicles = [];\n    this.vehicleIdentification = '';\n    this.currentStatus = null;\n    this.vehicles = [];\n    this.lastEvaluatedKey = '';\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.initDataTable();\n  }\n  /**\r\n   * Open Live View popup.\r\n   * @param content\r\n   */\n\n\n  openLiveView(content, vehicle, deviceInfo) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let deviceId = undefined;\n\n      if (deviceInfo && deviceInfo.length > 0) {\n        deviceId = deviceInfo[0].deviceSrNo.split('#')[1];\n        const response = yield _this3.apiService.getData(`vehicles/dashCam/liveFeed/${deviceId}`).toPromise();\n        _this3.url = _this3._sanitizer.bypassSecurityTrustResourceUrl(response.feedUrl);\n        _this3.liveStreamVehicle = `(${vehicle})`;\n\n        _this3.modalService.open(content, {\n          ariaLabelledBy: 'modal-dash-cam'\n        }).result.then(result => {}, reason => {});\n\n        _this3.liveModalTimeout = setTimeout(() => {\n          _this3.modalService.dismissAll();\n        }, 60000);\n      } else {\n        _this3.toastr.error('Connection to DashCam failed.');\n      }\n    })();\n  }\n  /**\r\n   * Clears the setTimeout if required. Currently it is not viewed\r\n   */\n\n\n  clearVideoTimeout() {\n    clearTimeout(this.liveModalTimeout);\n  }\n\n};\n\nVehicleListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: HttpClient\n}, {\n  type: HereMapService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: OnboardDefaultService\n}, {\n  type: DomSanitizer\n}, {\n  type: NgbModal\n}];\n\nVehicleListComponent = __decorate([Component({\n  selector: 'app-vehicle-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], VehicleListComponent);\nexport { VehicleListComponent };","map":null,"metadata":{},"sourceType":"module"}