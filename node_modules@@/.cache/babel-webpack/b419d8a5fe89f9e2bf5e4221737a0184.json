{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./asset-tracker.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./asset-tracker.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { GoogleMap, MapInfoWindow } from '@angular/google-maps';\nimport { ActivatedRoute } from '@angular/router';\nimport * as moment from \"moment\";\nimport { MessageService, PrimeNGConfig } from 'primeng/api';\nimport { ApiService } from 'src/app/services';\nlet AssetTrackerComponent = class AssetTrackerComponent {\n  /**\r\n   * Constructor\r\n   * @param apiService\r\n   * @param message\r\n   * @param route\r\n   */\n  constructor(apiService, message, route, primengConfig) {\n    this.apiService = apiService;\n    this.message = message;\n    this.route = route;\n    this.primengConfig = primengConfig;\n    this.width = \"100%\";\n    this.height = \"700px\";\n    this.cols = [{\n      field: 'battery',\n      header: 'Battery'\n    }, {\n      field: 'location',\n      header: 'Location'\n    }, {\n      field: 'speed',\n      header: 'Speed'\n    }, {\n      field: 'temperature',\n      header: 'Tracker Temp.'\n    }, {\n      field: 'time',\n      header: 'Time'\n    }];\n    this.center = {\n      lat: 48.48248695279594,\n      lng: -99.0688673798094\n    };\n    this.mapOptions = {\n      zoomControl: true,\n      mapTypeControl: true,\n      streetViewControl: false,\n      fullscreenControl: true,\n      zoom: 5,\n      mapId: '620eb1a41a9e36d4',\n      zoomControlOptions: {\n        position: google.maps.ControlPosition.RIGHT_TOP\n      },\n      center: this.center\n    };\n    this.locationData = [];\n    this.loading = false;\n    this.lineSymbol = {\n      path: google.maps.SymbolPath.CIRCLE,\n      scale: 8,\n      strokeColor: \"#393\"\n    };\n    this.startMarkerOptions = {\n      draggable: false,\n      animation: google.maps.Animation.DROP,\n      title: 'A',\n      label: 'A'\n    };\n    this.endMarkerOptions = {\n      draggable: false,\n      animation: google.maps.Animation.DROP,\n      title: 'B',\n      label: 'B'\n    };\n    this.markerOptions = {\n      draggable: false,\n      animation: google.maps.Animation.DROP\n    };\n    this.noDevices = false;\n    this.pathCoordinates = [];\n    this.durations = [{\n      name: '6 Hours',\n      value: '6h'\n    }, {\n      name: '12 Hours',\n      value: '12h'\n    }, {\n      name: '24 Hours',\n      value: '24h'\n    }, {\n      name: '48 Hours',\n      value: '48h'\n    }, {\n      name: '72 Hours',\n      value: '72h'\n    }];\n    this.selectedDuration = undefined;\n    this.showTraffic = false;\n    this.bounds = new google.maps.LatLngBounds();\n    /**\r\n     * Triggers when location icon is clicked on table\r\n     * @param event\r\n     */\n\n    this.onRowSelect = event => {\n      if (event && event.cords) {\n        const cords = event.cords.split(\",\");\n        const curPosition = new google.maps.LatLng({\n          lng: parseFloat(cords[0]),\n          lat: parseFloat(cords[1])\n        });\n        this.markerPositions.push({\n          data: event,\n          location: curPosition\n        });\n        this.center = {\n          lng: parseFloat(cords[0]),\n          lat: parseFloat(cords[1])\n        }; //  this.googleMap.googleMap.setCenter(this.center)\n\n        this.zoomIn(16);\n        this.googleMap.googleMap.panTo(curPosition);\n      } else {\n        this.message.add({\n          severity: 'error',\n          summary: 'Location not available',\n          detail: 'Tracker was not able to get GPS signal.'\n        });\n      }\n    };\n\n    this.zoomIncrement = 1;\n    this.zoomFactor = 2.0; // 2.0 - 0.1 (Slower (rough animation), Faster\n\n    this.zoomDecrement = 1;\n    this.assetID = this.route.snapshot.params.assetId;\n    this.markerPositions = new Array();\n  }\n\n  /**\r\n   * Angular OnInit()\r\n   */\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.primengConfig.ripple = true; // Extract query parameters\n\n      _this.extractQueryParams(); // await this.fetchAsset();\n\n\n      yield _this.getDeviceEventsForDuration(_this.selectedDuration);\n      _this.mapOptions.center = _this.center; // this.googleMap.googleMap.setCenter(this.center);\n\n      _this.polylineOptions = new google.maps.Polyline({\n        strokeColor: 'green',\n        path: _this.vertices\n      });\n    })();\n  }\n\n  extractQueryParams() {\n    this.route.queryParams.subscribe(params => {\n      this.assetId = params.assetId;\n    });\n  }\n\n  showTrafficLayer() {\n    this.showTraffic = !this.showTraffic;\n  }\n  /**\r\n   * update map data with selected duration\r\n   */\n\n\n  updateData() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.getDeviceEventsForDuration(_this2.selectedDuration.value);\n    })();\n  }\n  /**\r\n   * Open Marker Window\r\n   * @param marker\r\n   * @param data\r\n   */\n\n\n  openInfoWindow(marker, data) {\n    this.infoDetail = `${data.location} <br/>${data.speed} <br/> ${data.temperature}`;\n    this.infoWindow.open(marker);\n  }\n\n  zoomIn(endZoom) {\n    if (this.googleMap.googleMap.getZoom() < endZoom) {\n      this.googleMap.googleMap.setZoom(this.googleMap.googleMap.getZoom() + this.zoomIncrement);\n      setTimeout(() => {\n        this.zoomIn(endZoom);\n      }, this.zoomFactor * 100);\n    }\n  }\n\n  zoomOut(endZoom) {\n    if (this.googleMap.googleMap.getZoom() > endZoom) {\n      this.googleMap.googleMap.setZoom(this.googleMap.googleMap.getZoom() - this.zoomDecrement);\n      setTimeout(() => {\n        this.zoomOut(endZoom);\n      }, this.zoomFactor * 100);\n    }\n  }\n  /**\r\n   * Get Device location for duration\r\n   * @param assetIdentification\r\n   */\n\n\n  getDeviceEventsForDuration(duration = '6h') {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.loading = true;\n      const data = yield _this3.apiService.getData(`assetTrackers/getLocationData/${_this3.assetID}/${duration}`).toPromise();\n\n      if (data && data.length > 0) {\n        for (const item of data) {\n          const stillUtc = moment.utc(item.time).toDate();\n          const localTime = moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\");\n          item.time = localTime;\n        }\n\n        _this3.locationData = data;\n        _this3.loading = false;\n        const startCords = data[data.length - 1].cords.split(\",\");\n        const endCords = data[0].cords.split(\",\");\n        _this3.center = {\n          lng: parseFloat(startCords[0]),\n          lat: parseFloat(startCords[1])\n        };\n        _this3.startMarker = {\n          lng: parseFloat(startCords[0]),\n          lat: parseFloat(startCords[1])\n        };\n        _this3.endMarker = {\n          lng: parseFloat(endCords[0]),\n          lat: parseFloat(endCords[1])\n        };\n        data.forEach(path => {\n          const cords = path.cords.split(\",\");\n\n          _this3.pathCoordinates.push({\n            lng: parseFloat(cords[0]),\n            lat: parseFloat(cords[1])\n          });\n        });\n\n        _this3.drawPath(data);\n      } else {\n        _this3.noDevices = true;\n\n        _this3.message.add({\n          severity: 'error',\n          summary: 'Location data not available for selected duration',\n          detail: 'Please change the duration and try again.'\n        });\n\n        _this3.loading = false;\n      }\n    })();\n  }\n  /**\r\n   * draw path using polyline\r\n   * @param results\r\n   */\n\n\n  drawPath(results) {\n    try {\n      this.vertices = new Array();\n      let cords = results[0].cords.split(\",\");\n      let cords1 = results[results.length - 1].cords.split(\",\");\n      const endCords = {\n        lat: parseFloat(cords1[1]),\n        lng: parseFloat(cords1[0])\n      };\n      cords = results[0].cords.split(\",\");\n      const startCords = {\n        lat: parseFloat(cords[1]),\n        lng: parseFloat(cords[0])\n      };\n\n      for (let way of results) {\n        const cords = way.cords.split(\",\");\n        const latLng = new google.maps.LatLng(parseFloat(cords[1]), parseFloat(cords[0]));\n        this.vertices.push(latLng);\n        this.bounds.extend(latLng);\n      }\n\n      this.polylineOptions = new google.maps.Polyline({\n        strokeColor: 'green',\n        path: this.vertices\n      }); // if (this.googleMap) {\n      //   this.googleMap.googleMap.fitBounds(this.bounds);\n      //   this.googleMap.googleMap.setCenter(this.bounds.getCenter());\n      // }\n    } catch (err) {\n      console.error('Error', err);\n    }\n  }\n  /**\r\n   * create all markers from the map.\r\n   */\n\n\n  clearRoutes() {\n    if (this.googleMap.googleMap.getZoom() > 4) {\n      this.zoomOut(4);\n    }\n\n    this.markerPositions = [];\n  }\n  /**\r\n   * fetch Asset data\r\n   */\n\n\n  fetchAsset() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.apiService.getData(`assets/${_this4.assetId}`).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (res) {\n          if (res) {\n            let result = res.Items[0];\n            console.log(res.Items[0]);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), err => {});\n    })();\n  }\n\n};\n\nAssetTrackerComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: MessageService\n}, {\n  type: ActivatedRoute\n}, {\n  type: PrimeNGConfig\n}];\n\nAssetTrackerComponent.propDecorators = {\n  googleMap: [{\n    type: ViewChild,\n    args: [GoogleMap]\n  }],\n  infoWindow: [{\n    type: ViewChild,\n    args: [MapInfoWindow]\n  }]\n};\nAssetTrackerComponent = __decorate([Component({\n  selector: 'app-asset-tracker',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [MessageService],\n  styles: [__NG_CLI_RESOURCE__1]\n})], AssetTrackerComponent);\nexport { AssetTrackerComponent };","map":null,"metadata":{},"sourceType":"module"}