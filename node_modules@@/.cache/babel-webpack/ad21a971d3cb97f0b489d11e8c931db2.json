{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-sales-order.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-sales-order.component.css\";\nimport { Component } from \"@angular/core\";\nimport * as moment from \"moment\";\nimport { ApiService, AccountService, ListService } from \"../../../../../services\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Auth } from \"aws-amplify\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Location } from \"@angular/common\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { ActivatedRoute } from \"@angular/router\";\nlet AddSalesOrderComponent = class AddSalesOrderComponent {\n  constructor(apiService, route, httpClient, accountService, toaster, location, listService) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.route = route;\n    this.httpClient = httpClient;\n    this.accountService = accountService;\n    this.toaster = toaster;\n    this.location = location;\n    this.listService = listService;\n    this.assetUrl = this.apiService.AssetUrl;\n    this.pageTitle = \"Add\";\n    this.submitDisabled = false;\n    this.salesData = {\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      currency: \"CAD\",\n      sRef: \"\",\n      cusInfo: {\n        customerID: \"\",\n        addressID: \"\"\n      },\n      shipDate: \"\",\n      salePerson: \"\",\n      sOrderDetails: [{\n        commodity: \"\",\n        desc: \"\",\n        qty: 0,\n        qtyUnit: null,\n        rate: 0,\n        rateUnit: null,\n        amount: 0\n      }],\n      total: {\n        finalTotal: 0\n      },\n      remarks: \"\"\n    };\n    this.customers = [];\n    this.customerSelected = [];\n    this.notOfficeAddress = false;\n    this.currentUser = \"\";\n    this.response = \"\";\n    this.errors = {};\n    this.docs = [];\n    this.oldDocs = [];\n    this.removedDocs = [];\n    this.filesError = '';\n    this.sOrNo = '';\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.salesData.salePerson = `${_this.currentUser.firstName} ${_this.currentUser.lastName}`;\n    });\n  }\n\n  ngOnInit() {\n    this.saleID = this.route.snapshot.params[`saleID`];\n\n    if (this.saleID) {\n      this.pageTitle = \"Edit\";\n      this.fetchSaleOrder();\n    } else {\n      this.pageTitle = \"Add\";\n    }\n\n    this.route.queryParams.subscribe(params => {\n      this.cloneID = params.cloneID;\n\n      if (this.cloneID != undefined && this.cloneID != \"\") {\n        this.pageTitle = \"Clone\";\n        this.cloneSale(this.cloneID);\n      }\n    });\n    this.listService.fetchCustomers();\n    this.getCurrentuser();\n    let customerList = new Array();\n    this.getValidCustomers(customerList);\n    this.customers = customerList;\n  }\n\n  getValidCustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  fetchCustomer() {\n    if (this.salesData.customerID != null) {\n      let id = this.salesData.customerID;\n      this.selectedCustomer(id);\n    }\n\n    this.listService.fetchCustomers();\n  }\n\n  selectedCustomer(customerID) {\n    this.salesData.cusInfo.addressID = '';\n    this.apiService.getData(`contacts/detail/${customerID}`).subscribe(result => {\n      if (result.Items.length > 0) {\n        this.customerSelected = result.Items;\n\n        for (let i = 0; i < this.customerSelected[0].adrs.length; i++) {\n          const element = this.customerSelected[0].adrs[i];\n          element[\"isChecked\"] = false;\n        }\n\n        this.customerSelected[0].adrs[0].isChecked = true;\n        this.salesData.cusInfo.addressID = this.customerSelected[0].adrs[0].addressID;\n\n        if (this.customerSelected[0].adrs.length > 0) {\n          this.salesData.cusInfo.addressID = this.customerSelected[0].adrs[0].addressID;\n        }\n\n        let addressLength = this.customerSelected[0].adrs.length;\n        let getType = this.customerSelected[0].adrs[0].add1;\n        let getC_Code = this.customerSelected[0].adrs[0].cCode;\n\n        if (addressLength === 1 && (getType == \"\" || getType == null) && (getC_Code == \"\" || getC_Code == null)) {\n          this.notOfficeAddress = true;\n        } else {\n          this.notOfficeAddress = false;\n        }\n      }\n    });\n  }\n\n  getAddressID(value, i, id) {\n    if (value === true) {\n      this.salesData.cusInfo.addressID = id;\n\n      for (let index = 0; index < this.customerSelected[0].adrs.length; index++) {\n        const element = this.customerSelected[0].adrs[index];\n        element.isChecked = false;\n      }\n\n      this.customerSelected[0].adrs[i].isChecked = true;\n    }\n  }\n\n  changeUnit(value, i) {\n    this.salesData.sOrderDetails[i].qtyUnit = value;\n    this.salesData.sOrderDetails[i].rateUnit = value;\n  }\n\n  addDetails() {\n    let obj = {\n      commodity: \"\",\n      desc: \"\",\n      qty: 0,\n      qtyUnit: null,\n      rate: 0,\n      rateUnit: null,\n      amount: 0\n    };\n    const lastAdded = this.salesData.sOrderDetails[this.salesData.sOrderDetails.length - 1];\n\n    if (lastAdded.commodity !== \"\" && lastAdded.qty !== \"\" && lastAdded.qtyUnit !== null && lastAdded.rate !== \"\" && lastAdded.rateUnit !== null && lastAdded.amount !== 0) {\n      this.salesData.sOrderDetails.push(obj);\n    }\n  }\n\n  deleteDetail(d) {\n    this.salesData.total.finalTotal -= this.salesData.sOrderDetails[d].amount;\n    this.salesData.sOrderDetails.splice(d, 1);\n  }\n\n  calculateAmount(i) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let total = 0;\n      let amount = (_this2.salesData.sOrderDetails[i].qty ? _this2.salesData.sOrderDetails[i].qty : 0) * (_this2.salesData.sOrderDetails[i].rate ? _this2.salesData.sOrderDetails[i].rate : 0);\n      _this2.salesData.sOrderDetails[i].amount = parseFloat(amount.toFixed(2));\n\n      _this2.salesData.sOrderDetails.forEach(element => {\n        total += element.amount;\n      });\n\n      _this2.salesData.total.finalTotal = parseFloat(total);\n    })();\n  }\n\n  checkEmailStat(type) {\n    if (type === \"yes\") {\n      this.salesData[\"sendEmail\"] = true;\n    } else {\n      this.salesData[\"sendEmail\"] = false;\n    }\n\n    this.addSale();\n  }\n\n  addSale() {\n    this.submitDisabled = true;\n\n    if (this.cloneID) {\n      delete this.salesData.pk;\n      delete this.salesData.sOrNo;\n      delete this.salesData.saleID;\n      delete this.salesData.stlStatus;\n      delete this.salesData.status;\n      delete this.salesData.invStatus;\n      delete this.salesData._type;\n      delete this.salesData.created;\n      delete this.salesData.updated;\n    } // create form data instance\n\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.salesData));\n    this.accountService.postData(`sales-orders`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Order added successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchSaleOrder() {\n    this.accountService.getData(`sales-orders/detail/${this.saleID}`).subscribe(res => {\n      this.salesData = res[0];\n      this.sOrNo = res[0].sOrNo;\n      this.carrierID = res[0].pk;\n\n      if (res[0].docs.length > 0) {\n        res[0].docs.forEach(x => {\n          let obj = {};\n\n          if (x.storedName.split(\".\")[1] === \"jpg\" || x.storedName.split(\".\")[1] === \"png\" || x.storedName.split(\".\")[1] === \"jpeg\") {\n            obj = {\n              imgPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              docPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          } else {\n            obj = {\n              imgPath: \"assets/img/icon-pdf.png\",\n              docPath: `${this.assetUrl}/${this.carrierID}/${x.storedName}`,\n              displayName: x.displayName,\n              name: x.storedName,\n              ext: x.storedName.split(\".\")[1]\n            };\n          }\n\n          this.oldDocs.push(obj);\n        });\n      }\n    });\n  }\n\n  updateSale() {\n    this.submitDisabled = true;\n    this.salesData.removedDocs = this.removedDocs; // create form data instance\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.salesData));\n    this.accountService.putData(`sales-orders/update/${this.saleID}`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {//this.submitDisabled = false;\n            // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        // this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Order updated successfully.\");\n        this.cancel();\n      }\n    });\n  }\n\n  cloneSale(ID) {\n    this.accountService.getData(`sales-orders/detail/${ID}`).subscribe(res => {\n      this.salesData = res[0];\n    });\n  }\n\n  uploadDocs(documents) {\n    let files = [...documents];\n    let filesSize = 0;\n\n    if (files.length > 5) {\n      this.toaster.error(\"Files count limit exceeded\");\n      this.filesError = \"Files should not be more than 5\";\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      this.filesError = '';\n      filesSize += files[i].size / 1024 / 1024;\n\n      if (filesSize > 10) {\n        this.toaster.error(\"Files size limit exceeded\");\n        this.filesError = 'Files size limit exceeded. Files size should be less than 10mb';\n        return;\n      } else {\n        let name = files[i].name.split(\".\");\n        let ext = name[name.length - 1].toLowerCase();\n\n        if (ext == \"doc\" || ext == \"docx\" || ext == \"pdf\" || ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\") {\n          this.docs.push(files[i]);\n        } else {\n          this.filesError = \"Only .doc, .docx, .pdf, .jpg, .jpeg and png files allowed.\";\n        }\n      }\n    }\n  }\n\n  deleteDocument(name, index) {\n    this.oldDocs.filter(elem => {\n      if (elem.displayName === name) {\n        let obj = {\n          storedName: elem.name,\n          displayName: elem.displayName\n        };\n        this.removedDocs.push(obj);\n        ;\n      }\n    });\n    this.oldDocs.splice(index, 1);\n  }\n\n};\n\nAddSalesOrderComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: HttpClient\n}, {\n  type: AccountService\n}, {\n  type: ToastrService\n}, {\n  type: Location\n}, {\n  type: ListService\n}];\n\nAddSalesOrderComponent = __decorate([Component({\n  selector: \"app-add-sales-order\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddSalesOrderComponent);\nexport { AddSalesOrderComponent };","map":null,"metadata":{},"sourceType":"module"}