{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-orders.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-orders.component.css\";\nimport { Location } from \"@angular/common\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Component } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { NgbCalendar, NgbDateAdapter } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { BehaviorSubject, from, Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { RouteManagementServiceService } from \"src/app/services/route-management-service.service\";\nimport { environment } from \"../../../../../environments/environment.prod\";\nimport { ApiService, DashboardUtilityService, HereMapService, ListService } from \"../../../../services\";\nimport { PdfAutomationService } from \"../../pdf-automation/pdf-automation.service\";\nlet AddOrdersComponent = class AddOrdersComponent {\n  constructor(apiService, ngbCalendar, dateAdapter, HereMap, route, toastr, router, pdfService, httpClient, listService, domSanitizer, location, countryStateCity, routeManagement, dashboardUtilityService) {\n    this.apiService = apiService;\n    this.ngbCalendar = ngbCalendar;\n    this.dateAdapter = dateAdapter;\n    this.HereMap = HereMap;\n    this.route = route;\n    this.toastr = toastr;\n    this.router = router;\n    this.pdfService = pdfService;\n    this.httpClient = httpClient;\n    this.listService = listService;\n    this.domSanitizer = domSanitizer;\n    this.location = location;\n    this.countryStateCity = countryStateCity;\n    this.routeManagement = routeManagement;\n    this.dashboardUtilityService = dashboardUtilityService;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.isTrueDataSource = new BehaviorSubject(false);\n    this.isTrueList = this.isTrueDataSource.asObservable();\n    this.pageTitle = \"Add Order\";\n    this.searchTerm = new Subject();\n    this.searchResults = \"\";\n    this.apiKey = environment.mapConfig.apiKey;\n    this.time = {\n      hour: 13,\n      minute: 30,\n      second: 30\n    };\n    this.seconds = false;\n    this.meridian = true;\n    this.spinners = false;\n    this.apiSelect = \"\";\n    this.freightFee = 0;\n    this.fuelSurcharge = 0;\n    this.accessorialFee = 0;\n    this.accessorialDeduction = 0;\n    this.totalMiles = 0;\n    this.subTotal = 0;\n    this.totalAmount = 0;\n    this.discount = 0;\n    this.tax = 0;\n    this.shipperList = [];\n    this.receiverList = [];\n    this.stateTaxes = [];\n    this.stateTaxID = \"\";\n    this.mergedArray = [];\n    this.getAllCords = [];\n    this.googleCords = [];\n    this.assetTypes = [];\n    this.visibleIndex = 0;\n    this.customerSelected = [];\n    this.orderMode = \"FTL\";\n    this.cusPOs = [];\n    this.orderData = {\n      cusPOs: [],\n      stateTaxID: \"\",\n      invoiceGenerate: false,\n      customerID: null,\n      cusConfirmation: \"\",\n      cusAddressID: \"\",\n      orderNumber: \"\",\n      createdDate: \"\",\n      createdTime: \"\",\n      reference: \"\",\n      phone: \"\",\n      email: \"\",\n      zeroRated: true,\n      TotalAgreedAmount: \"\",\n      ShipperDetails: \"\",\n      ConsigneeDetails: \"\",\n      Customer: \"\",\n      Reference: \"\",\n      csa: \"\",\n      ctpat: \"\",\n      additionalcontactname: \"\",\n      pickuplocation: \"\",\n      pickupinstruction: \"\",\n      contactpersonatpickup: \"\",\n      shipperphone: \"\",\n      shipperreference: \"\",\n      shippernotes: \"\",\n      dropofflocation: \"\",\n      deliveryinstruction: \"\",\n      contactpersonatdelivery: \"\",\n      receiverphone: \"\",\n      receiverreference: \"\",\n      receivernotes: \"\",\n      shipperInfo: [],\n      receiverInfo: [],\n      freightDetails: {},\n      additionalContact: null,\n      invoiceEmail: false,\n      additionalDetails: {\n        trailerType: \"\",\n        sealNo: \"\",\n        sealType: \"\",\n        uploadedDocs: [],\n        refeerTemp: {\n          maxTemprature: \"\",\n          maxTempratureUnit: \"\",\n          minTemprature: \"\",\n          minTempratureUnit: \"\"\n        }\n      },\n      orderStatus: \"created\",\n      orderMode: \"FTL\",\n      tripType: \"Regular\",\n      shippersReceiversInfo: [],\n      charges: {\n        freightFee: {\n          type: null,\n          amount: 0,\n          currency: \"CAD\"\n        },\n        fuelSurcharge: {\n          type: null,\n          amount: 0,\n          currency: null\n        },\n        accessorialFeeInfo: {\n          accessorialFee: []\n        },\n        accessorialDeductionInfo: {\n          accessorialDeduction: []\n        }\n      },\n      taxesInfo: [],\n      discount: {\n        amount: \"\",\n        unit: \"\"\n      },\n      advance: 0,\n      finalAmount: 0,\n      milesInfo: {\n        totalMiles: null,\n        calculateBy: \"manual\"\n      },\n      remarks: \"\",\n      loc: \"\",\n      tripData: {\n        tripID: \"\",\n        tripNo: \"\"\n      }\n    };\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.notOfficeAddress = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.errors = {};\n    this.isConfirmExist = false;\n    this.isConfirmData = {\n      confirmNo: \"\",\n      orderNo: \"\"\n    };\n    this.allLoadTypes = [{\n      name: \"hazMat\"\n    }, {\n      name: \"oversize load\"\n    }, {\n      name: \"reefer\"\n    }, {\n      name: \"tanker\"\n    }];\n    this.loadTypeData = [];\n    this.activeId = \"\";\n    this.newTaxes = [{\n      type: \"\",\n      amount: 0,\n      taxAmount: 0\n    }];\n    this.customerPOs = [];\n    this.photoSizeError = \"\";\n    this.showShipperUpdate = false;\n    this.showReceiverUpdate = false;\n    this.shippersReceivers = [{\n      shippers: {\n        shipperID: null,\n        pickupPoint: [{\n          unit: false,\n          unitNumber: \"\",\n          address: {\n            countryName: \"\",\n            stateName: \"\",\n            cityName: null,\n            zipCode: \"\",\n            address: \"\",\n            pickupLocation: null,\n            manual: false,\n            countryCode: null,\n            stateCode: null,\n            states: [],\n            cities: [],\n            geoCords: {}\n          },\n          pickupDate: \"\",\n          pickupTime: \"\",\n          pickupInstruction: \"\",\n          contactPerson: \"\",\n          phone: \"\",\n          customerPO: [],\n          newCustomerPO: [],\n          commodity: [{\n            name: \"\",\n            quantity: \"\",\n            quantityUnit: null,\n            weight: \"\",\n            weightUnit: null,\n            pu: \"\"\n          }]\n        }],\n        driverLoad: false,\n        liveLoad: true,\n        save: true,\n        update: false,\n        isShow: true\n      },\n      receivers: {\n        receiverID: null,\n        dropPoint: [{\n          unit: false,\n          unitNumber: \"\",\n          address: {\n            zipCode: \"\",\n            address: \"\",\n            dropOffLocation: null,\n            manual: false,\n            countryName: \"\",\n            countryCode: null,\n            stateName: \"\",\n            stateCode: null,\n            cityName: null,\n            states: [],\n            cities: [],\n            geoCords: {}\n          },\n          dropOffDate: \"\",\n          dropOffTime: \"\",\n          dropOffInstruction: \"\",\n          contactPerson: \"\",\n          phone: \"\",\n          commodity: [{\n            name: \"\",\n            quantity: \"\",\n            quantityUnit: null,\n            weight: \"\",\n            weightUnit: null,\n            del: \"\"\n          }]\n        }],\n        driverUnload: false,\n        liveUnLoad: true,\n        save: true,\n        update: false,\n        isShow: true\n      }\n    }];\n    this.accessFeesInfo = {\n      accessFees: [{\n        type: null,\n        amount: 0,\n        currency: null\n      }]\n    };\n    this.deletedFiles = [];\n    this.accessorialDeductionInfo = {\n      accessDeductions: [{\n        type: null,\n        amount: 0,\n        currency: null\n      }]\n    };\n    this.shipAddresses = [];\n    this.receiverAddresses = [];\n    this.customers = [];\n    this.shippers = [];\n    this.receivers = [];\n    this.finalShippersReceivers = [{\n      shippers: [],\n      receivers: []\n    }];\n    this.shippersObjects = {};\n    this.receiversObjects = {};\n    this.uploadedDocs = [];\n    this.existingUploadedDocs = [];\n    this.packagingUnitsList = [];\n    this.isSubmit = false;\n    this.isShipperSubmit = false;\n    this.isReceiverSubmit = false;\n    this.orderAttachments = [];\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"\");\n    this.submitDisabled = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.ifStatus = \"\";\n    this.cusAdditionalContact = [];\n    this.recalledState = false;\n    this.orderPrefix = \"\";\n    const current = new Date(); // config.minDate = {\n    //   year: current.getFullYear(),\n    //   month: current.getMonth() + 1,\n    //   day: current.getDate(),\n    // };\n    // config.outsideDays = \"hidden\";\n    // this.pdfService.dataSubscribe$\n    //   .pipe(\n    //     tap((v) => {\n    //       if (v.toString() !== \"\" && v !== \"undefined\" && v !== undefined) {\n    //         const d = JSON.parse(v);\n    //         this.orderData.orderNumber = d.OrderNumber;\n    //         this.orderData.customerPO = d.CustomerPO;\n    //         this.orderData.reference = d.reference;\n    //         this.orderData.csa = d.csa;\n    //         this.orderData.ctpat = d.ctpat;\n    //         this.orderData.additionalcontactname = d.additionalcontactname;\n    //         this.orderData.email = d.email;\n    //         this.orderData.phone = d.phone;\n    //         this.shippersReceivers[0].shippers.shipperID = d.shippersshipperID;\n    //         this.shippersReceivers[0].shippers.pickupLocation =\n    //           d.shipperspickupLocation;\n    //         this.shippersReceivers[0].shippers.pickupDate =\n    //           d.shipperspickupDate;\n    //         this.shippersReceivers[0].shippers.pickupTime =\n    //           d.shipperspickupTime;\n    //         this.shippersReceivers[0].shippers.pickupInstruction =\n    //           d.shipperspickupInstruction;\n    //         this.shippersReceivers[0].shippers.contactPerson =\n    //           d.shipperscontactPerson;\n    //         this.shippersReceivers[0].shippers.phone = d.shippersshipperID;\n    //         this.shippersReceivers[0].shippers.commodity[0].name =\n    //           d.shipperscommodityname;\n    //         this.shippersReceivers[0].shippers.commodity[0].quantity =\n    //           d.shipperscommodityquantity;\n    //         this.shippersReceivers[0].shippers.commodity[0].quantityUnit =\n    //           d.shipperscommodityquantityUnit;\n    //         this.shippersReceivers[0].shippers.commodity[0].weight =\n    //           d.shippersweight;\n    //         this.shippersReceivers[0].shippers.commodity[0].weightUnit =\n    //           d.shippersweightUnit;\n    //         this.shippersReceivers[0].receivers.receiverID =\n    //           d.receiversreceiverID;\n    //         this.shippersReceivers[0].receivers.dropOffLocation =\n    //           d.receiversdropOffLocation;\n    //         this.shippersReceivers[0].receivers.dropOffDate =\n    //           d.receiversdropOffDate;\n    //         this.shippersReceivers[0].receivers.dropOffTime =\n    //           d.receiversdropOffTime;\n    //         this.shippersReceivers[0].receivers.dropOffInstruction =\n    //           d.receiversdropOffInstruction;\n    //         this.orderData.charges.freightFee.amount = d.freightFeeamount;\n    //         this.orderData.charges.freightFee.currency = d.freightFeecurrency;\n    //         this.orderData.charges.freightFee.type = d.freightFeetype;\n    //       }\n    //     })\n    // )\n    // .subscribe((v: any) => {\n    // });\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n  goBack() {\n    this.router.navigate([`/dispatch/orders/order-list/${this.routeManagement.orderUpdated()}`]); // <-- go back to previous location on cancel\n  }\n\n  getCarrierState() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let carrierID = localStorage.getItem(\"xfhCarrierId\");\n      let result = yield _this.apiService.getData(`carriers/${carrierID}`).toPromise();\n      let carrierAddress = result.Items[0].addressDetails;\n      let defaultAddress = [];\n\n      for (let index = 0; index < carrierAddress.length; index++) {\n        const element = carrierAddress[index];\n\n        if (element.defaultYard != undefined && element.defaultYard) {\n          defaultAddress.push(element);\n        }\n      }\n\n      return defaultAddress;\n    })();\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.listService.fetchCustomers();\n\n      _this2.disableButton();\n\n      $(\".modal\").on(\"hidden.bs.modal\", e => {\n        localStorage.setItem(\"isOpen\", \"false\");\n      });\n      _this2.getOrderID = _this2.route.snapshot.params[\"orderID\"];\n\n      if (_this2.getOrderID) {\n        console.log('orderID', _this2.getOrderID);\n\n        _this2.getShipperReceiverEdit();\n\n        _this2.fetchOrderByID();\n\n        _this2.pageTitle = `Edit Order`;\n      } else {\n        _this2.pageTitle = \"Add Order\"; // this.fetchStateTaxes();\n\n        _this2.getShippers();\n\n        _this2.getReceivers();\n\n        _this2.listService.fetchContactsByIDs();\n\n        _this2.listService.contactsObjectDataSource.subscribe(res => {\n          _this2.receiversObjects = res;\n          _this2.shippersObjects = res;\n        });\n      }\n\n      _this2.httpClient.get(\"assets/packagingUnit.json\").subscribe(data => {\n        _this2.packagingUnitsList = data;\n      }); // this.customers = this.listService.customersList;\n      // this.receivers = this.listService.receiverList;\n\n\n      _this2.route.queryParams.subscribe(params => {\n        _this2.cloneID = params.cloneID;\n\n        if (_this2.cloneID != undefined && _this2.cloneID != \"\") {\n          _this2.pageTitle = \"Clone Order\";\n\n          _this2.cloneOrder(_this2.cloneID);\n        }\n      });\n\n      _this2.route.queryParams.subscribe(params => {\n        const recallStatus = params.state;\n\n        if (recallStatus) {\n          _this2.recalledState = true;\n        }\n      });\n\n      if (!_this2.getOrderID) {\n        _this2.getOrderPrefix();\n      }\n\n      let customerList = new Array();\n\n      _this2.getValidCustomers(customerList);\n\n      _this2.customers = customerList;\n    })();\n  }\n\n  getShippers() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.shippers.length === 0) {\n        _this3.listService.fetchShippers();\n\n        let shipperList = new Array();\n\n        _this3.getValidShippers(shipperList);\n\n        _this3.shippers = shipperList;\n      }\n    })();\n  }\n\n  getReceivers() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.receivers.length === 0) {\n        _this4.listService.fetchReceivers();\n\n        let receiverList = new Array();\n\n        _this4.getValidReceivers(receiverList);\n\n        _this4.receivers = receiverList;\n      }\n    })();\n  }\n\n  getShipperReceiverEdit() {\n    this.apiService.getData(`contacts/get/forOrder/${this.getOrderID}`).subscribe(result => {\n      let newShippers = [];\n      let newReceivers = [];\n\n      if (result && result.length > 0) {\n        for (const item of result) {\n          if (item.isDeleted === 0 && item.eTypes.includes(\"shipper\")) {\n            newShippers.push(item);\n          }\n\n          if (item.isDeleted === 0 && item.eTypes.includes(\"receiver\")) {\n            newReceivers.push(item);\n          }\n        }\n\n        this.shippersObjects = newShippers.reduce((a, b) => {\n          return a[b[\"contactID\"]] = b[\"companyName\"], a;\n        }, {});\n        this.receiversObjects = newReceivers.reduce((a, b) => {\n          return a[b[\"contactID\"]] = b[\"companyName\"], a;\n        }, {});\n      }\n    });\n  }\n\n  getValidCustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  getValidShippers(shipperList) {\n    let ids = [];\n    this.listService.shipperList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          shipperList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  getValidReceivers(receiverList) {\n    let ids = [];\n    this.listService.receiverList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          receiverList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  fetchStateTaxes() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this5.apiService.getData(\"stateTaxes\").toPromise();\n      _this5.stateTaxes = result.Items;\n      console.log('order222', _this5.getOrderID);\n\n      if (!_this5.getOrderID && !_this5.cloneID) {\n        let getAddress = yield _this5.getCarrierState();\n        let data;\n\n        if (getAddress.length > 0) {\n          data = _this5.stateTaxes.filter(elem => elem.stateCode === getAddress[0].stateCode);\n        } else {\n          data = _this5.stateTaxes;\n        }\n\n        if (data && data.length > 0) {\n          _this5.orderData.stateTaxID = data[0].stateTaxID;\n          _this5.orderData.taxesInfo = [{\n            name: \"GST\",\n            amount: data[0].GST\n          }, {\n            name: \"HST\",\n            amount: data[0].HST\n          }, {\n            name: \"PST\",\n            amount: data[0].PST\n          }];\n        }\n      } else if (!_this5.getOrderID && _this5.cloneID) {\n        _this5.stateTaxes.map(v => {\n          if (_this5.orderData.stateTaxID == v.stateTaxID) {\n            _this5.orderData.taxesInfo = [{\n              name: \"GST\",\n              amount: v.GST\n            }, {\n              name: \"HST\",\n              amount: v.HST\n            }, {\n              name: \"PST\",\n              amount: v.PST\n            }];\n          }\n        });\n      } else {\n        _this5.stateTaxes.map(v => {\n          if (_this5.orderData.stateTaxID == v.stateTaxID) {\n            _this5.orderData.taxesInfo = [{\n              name: \"GST\",\n              amount: v.GST\n            }, {\n              name: \"HST\",\n              amount: v.HST\n            }, {\n              name: \"PST\",\n              amount: v.PST\n            }];\n          }\n        });\n      }\n\n      _this5.newTaxes = _this5.orderData.taxesInfo;\n\n      if (_this5.subTotal > 0) {\n        for (let i = 0; i < _this5.newTaxes.length; i++) {\n          const element = _this5.newTaxes[i];\n          element.taxAmount = _this5.subTotal * element.amount / 100;\n        }\n      }\n    })();\n  }\n\n  resetSearch() {\n    if (this.searchResults.length > 0) {\n      this.searchResults = [];\n    }\n  }\n\n  driverLoadChange(i, value) {\n    this.shippersReceivers[i].shippers.driverLoad = value;\n  }\n\n  driverUnLoadChange(i, value) {\n    this.shippersReceivers[i].receivers.driverUnload = value;\n  }\n\n  manualAddress(value, i, w, arr) {\n    if (arr === \"shipper\") {\n      if (value === true) {\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.pickupLocation = null;\n      }\n\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.address = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.cityName = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.stateCode = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.stateName = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.countryCode = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.countryName = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.zipCode = \"\";\n      this.shippersReceivers[i].shippers.pickupPoint[w].address.geoCords = {};\n    } else {\n      if (value === true) {\n        this.shippersReceivers[i].receivers.dropPoint[w].address.dropOffLocation = null;\n      }\n\n      this.shippersReceivers[i].receivers.dropPoint[w].address.address = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.cityName = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.stateCode = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.stateName = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.countryCode = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.countryName = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.zipCode = \"\";\n      this.shippersReceivers[i].receivers.dropPoint[w].address.geoCords = {};\n    }\n  }\n\n  saveShipper(i) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      // this.isShipperSubmit = true;\n      //check if all required fields are filled\n      // $(\"#poErr_\" + i).hide();\n      let newPicks = _this6.shippersReceivers[i].shippers;\n\n      if (!newPicks.shipperID) {\n        _this6.toastr.error(\"Please select shipper\");\n\n        return false;\n      }\n\n      for (const pick of newPicks.pickupPoint) {\n        if (pick.address.manual) {\n          if (!pick.address.address || !pick.address.cityName || !pick.address.stateCode || !pick.address.countryCode || !pick.address.zipCode || !pick.pickupDate || !pick.pickupTime || !pick.commodity[0].name) {\n            _this6.toastr.error(\"Please fill required fields.\");\n\n            return false;\n          }\n        } else if (!pick.address.pickupLocation || !pick.pickupDate || !pick.pickupTime || !pick.commodity[0].name) {\n          _this6.toastr.error(\"Please fill required fields.\");\n\n          return false;\n        }\n      }\n\n      let newPosData = [];\n\n      for (let index = 0; index < _this6.shippersReceivers[i].shippers.pickupPoint.length; index++) {\n        const element = _this6.shippersReceivers[i].shippers.pickupPoint[index];\n\n        for (let k = 0; k < element.customerPO.length; k++) {\n          const po = element.customerPO[k];\n          newPosData.push(po.label);\n        }\n\n        element.newCustomerPO = newPosData;\n      }\n\n      if (_this6.shippersReceivers[i].shippers.update == true) {\n        _this6.shippersReceivers[i].shippers.update == false;\n        _this6.shippersReceivers[i].shippers.save == true;\n      }\n\n      let data = {};\n\n      for (let index = 0; index < _this6.shippersReceivers[i].shippers.pickupPoint.length; index++) {\n        const element = _this6.shippersReceivers[i].shippers.pickupPoint[index];\n\n        if (element.address.manual === true) {\n          data = {\n            address: element.address.address,\n            cityName: element.address.cityName,\n            stateName: element.address.stateName,\n            countryName: element.address.countryName,\n            zipCode: element.address.zipCode\n          };\n          $(\"#adrsErr1_\" + i).css(\"display\", \"none\");\n          let result = yield _this6.newGeoCode(data);\n\n          if (result == null) {\n            $(\"#adrsErr1_\" + i).css(\"display\", \"block\");\n\n            _this6.toastr.error(\"Please add valid address\");\n\n            return false;\n          }\n\n          if (result != undefined || result != null) {\n            element.address.geoCords = result;\n          }\n        }\n\n        if (element.pickupDate != \"\" && element.pickupTime) {\n          element[\"dateAndTime\"] = element.pickupDate + \" \" + element.pickupTime;\n          delete element.pickupDate;\n          delete element.pickupTime;\n        }\n      }\n\n      let currentShipper = {\n        shipperID: _this6.shippersReceivers[i].shippers.shipperID,\n        pickupPoint: _this6.shippersReceivers[i].shippers.pickupPoint,\n        driverLoad: _this6.shippersReceivers[i].shippers.driverLoad,\n        liveLoad: _this6.shippersReceivers[i].shippers.liveLoad\n      };\n\n      _this6.finalShippersReceivers[i].shippers.push(currentShipper);\n\n      _this6.orderData.shippersReceiversInfo = _this6.finalShippersReceivers;\n      _this6.shippersReceivers[i].shippers.isShow = false;\n      setTimeout(() => {\n        $(\"html, body\").animate({\n          scrollTop: $(\"#shipList_\" + i).position().top\n        }, \"slow\");\n      }, 500);\n      yield _this6.shipperReceiverMerge();\n      yield _this6.getMiles(_this6.orderData.milesInfo.calculateBy);\n\n      _this6.toastr.success(\"Shipper added successfully.\");\n\n      yield _this6.emptyShipper(i);\n    })();\n  }\n\n  newGeoCode(data) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this7.apiService.getData(`pcMiles/geocoding/${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n      if (result.items != undefined && result.items.length > 0) {\n        return result.items[0].position;\n      }\n    })();\n  }\n\n  reverseGeoCode(cords) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.apiService.getData(`pcMiles/reverse/${cords}`).subscribe(result => {\n        if (result.length > 0) {\n          return result[0].Coords;\n        }\n      });\n    })();\n  }\n\n  getCords(value) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let platform = new H.service.Platform({\n        apikey: _this9.apiKey\n      });\n      const service = platform.getSearchService();\n\n      if (value !== \"\") {\n        let result = yield service.geocode({\n          q: value\n        });\n        return result.items[0];\n      }\n    })();\n  }\n\n  saveReceiver(i) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      // this.isReceiverSubmit = true;\n      let newDrops = _this10.shippersReceivers[i].receivers;\n\n      if (!newDrops.receiverID) {\n        _this10.toastr.error(\"Please select receiver\");\n\n        return false;\n      }\n\n      for (const drop of newDrops.dropPoint) {\n        if (drop.address.manual) {\n          if (!drop.address.address || !drop.address.cityName || !drop.address.stateCode || !drop.address.countryCode || !drop.address.zipCode || !drop.dropOffDate || !drop.dropOffTime || !drop.commodity[0].name) {\n            _this10.toastr.error(\"Please fill required fields.\");\n\n            return false;\n          }\n        } else if (!drop.address.dropOffLocation || !drop.dropOffDate || !drop.dropOffTime || !drop.commodity[0].name) {\n          _this10.toastr.error(\"Please fill required fields.\");\n\n          return false;\n        }\n      }\n\n      if (_this10.shippersReceivers[i].receivers.update == true) {\n        _this10.shippersReceivers[i].receivers.update == false;\n        _this10.shippersReceivers[i].receivers.save == true;\n      }\n\n      let data = {};\n\n      for (let index = 0; index < _this10.shippersReceivers[i].receivers.dropPoint.length; index++) {\n        const element = _this10.shippersReceivers[i].receivers.dropPoint[index];\n\n        if (element.address.manual === true) {\n          data = {\n            address: element.address.address,\n            cityName: element.address.cityName,\n            stateName: element.address.stateName,\n            countryName: element.address.countryName,\n            zipCode: element.address.zipCode\n          };\n          $(\"#adrsErr2_\" + i).css(\"display\", \"none\");\n          let result = yield _this10.newGeoCode(data);\n\n          if (result == null) {\n            $(\"#adrsErr2_\" + i).css(\"display\", \"block\");\n\n            _this10.toastr.error(\"Please add valid address\");\n\n            return false;\n          }\n\n          if (result != undefined || result != null) {\n            element.address.geoCords = result;\n          }\n        }\n\n        if (element.dropOffDate != \"\" && element.dropOffTime) {\n          element[\"dateAndTime\"] = element.dropOffDate + \" \" + element.dropOffTime;\n          delete element.dropOffDate;\n          delete element.dropOffTime;\n        }\n      }\n\n      let currentReceiver = {\n        receiverID: _this10.shippersReceivers[i].receivers.receiverID,\n        dropPoint: _this10.shippersReceivers[i].receivers.dropPoint,\n        driverUnload: _this10.shippersReceivers[i].receivers.driverUnload,\n        liveUnLoad: _this10.shippersReceivers[i].receivers.liveUnLoad\n      };\n\n      _this10.finalShippersReceivers[i].receivers.push(currentReceiver);\n\n      _this10.orderData.shippersReceiversInfo = _this10.finalShippersReceivers;\n      _this10.shippersReceivers[i].receivers.isShow = false;\n      setTimeout(() => {\n        $(\"html, body\").animate({\n          scrollTop: $(\"#receiveList_\" + i).position().top\n        }, \"slow\");\n      }, 500);\n      yield _this10.shipperReceiverMerge();\n\n      _this10.toastr.success(\"Receiver added successfully.\");\n\n      yield _this10.getMiles(_this10.orderData.milesInfo.calculateBy);\n      yield _this10.emptyReceiver(i);\n    })();\n  }\n\n  shipperReceiverMerge() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      _this11.mergedArray = [];\n\n      _this11.finalShippersReceivers.forEach(item => {\n        item.shippers.forEach(elem => {\n          elem.pickupPoint.forEach(point => {\n            _this11.mergedArray.push(point);\n          });\n        });\n        item.receivers.forEach(elem => {\n          elem.dropPoint.forEach(point => {\n            _this11.mergedArray.push(point);\n          });\n        });\n      });\n\n      _this11.mergedArray.sort((a, b) => {\n        return new Date(a.dateAndTime).valueOf() - new Date(b.dateAndTime).valueOf();\n      });\n    })();\n  }\n\n  emptyReceiver(i) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      _this12.shippersReceivers[i].receivers.receiverID = null;\n      _this12.shippersReceivers[i].receivers.dropPoint = [{\n        unit: false,\n        unitNumber: \"\",\n        address: {\n          address: \"\",\n          manual: false,\n          dropOffLocation: \"\",\n          cityName: \"\",\n          stateCode: \"\",\n          stateName: \"\",\n          countryName: \"\",\n          countryCode: \"\",\n          cities: [],\n          states: [],\n          zipCode: \"\",\n          geoCords: {}\n        },\n        dropOffDate: \"\",\n        dropOffTime: \"\",\n        dropOffInstruction: \"\",\n        contactPerson: \"\",\n        phone: \"\",\n        commodity: [{\n          name: \"\",\n          quantity: \"\",\n          quantityUnit: null,\n          weight: \"\",\n          weightUnit: null,\n          del: \"\"\n        }]\n      }];\n      _this12.shippersReceivers[i].receivers.driverUnload = false, _this12.shippersReceivers[i].receivers.save = true, _this12.shippersReceivers[i].receivers.update = false;\n      _this12.shippersReceivers[i].receivers.isShow = false;\n    })();\n  }\n\n  emptyShipper(i) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      _this13.shippersReceivers[i].shippers.shipperID = null;\n      _this13.customerPOs = [];\n      _this13.shippersReceivers[i].shippers.pickupPoint = [{\n        unit: false,\n        unitNumber: \"\",\n        address: {\n          address: \"\",\n          manual: false,\n          pickupLocation: \"\",\n          cityName: \"\",\n          stateCode: \"\",\n          stateName: \"\",\n          countryName: \"\",\n          countryCode: \"\",\n          cities: [],\n          states: [],\n          zipCode: \"\",\n          geoCords: {}\n        },\n        pickupDate: \"\",\n        pickupTime: \"\",\n        pickupInstruction: \"\",\n        customerPO: [],\n        newCustomerPO: [],\n        contactPerson: \"\",\n        phone: \"\",\n        commodity: [{\n          name: \"\",\n          quantity: \"\",\n          quantityUnit: null,\n          weight: \"\",\n          weightUnit: null,\n          pu: \"\"\n        }]\n      }];\n      _this13.shippersReceivers[i].shippers.driverLoad = false, _this13.shippersReceivers[i].shippers.liveLoad = true, _this13.shippersReceivers[i].shippers.save = true, _this13.shippersReceivers[i].shippers.update = false;\n      _this13.shippersReceivers[i].shippers.isShow = false;\n    })();\n  }\n  /*\r\n   * Selecting files before uploading\r\n   */\n\n\n  selectDocuments(event) {\n    let files = [...event.target.files];\n    let filesSize = 0;\n\n    if (files.length > 5) {\n      this.toastr.error(\"files count limit exceeded\");\n      this.photoSizeError = \"files should not be more than 5\";\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      filesSize += files[i].size / 1024 / 1024;\n\n      if (filesSize > 10) {\n        this.toastr.error(\"files size limit exceeded\");\n        return;\n      } else {\n        let name = files[i].name.split(\".\");\n        let ext = name[name.length - 1].toLowerCase();\n\n        if (ext == \"doc\" || ext == \"docx\" || ext == \"pdf\" || ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\") {\n          this.uploadedDocs.push(files[i]);\n        } else {\n          this.photoSizeError = \"Only .doc, .docx, .pdf, .jpg, .jpeg and png files allowed.\";\n        }\n      }\n    }\n  }\n\n  getTimeFormat(date) {\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? \"pm\" : \"am\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    var strTime = hours + \":\" + minutes + \" \" + ampm;\n    return strTime;\n  }\n\n  getMiles(value) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      _this14.getAllCords = [];\n      let flag = true;\n      let flag1 = true; // check if exiting accoridan has atleast one shipper and one receiver\n\n      for (let k = 0; k < _this14.finalShippersReceivers.length; k++) {\n        let shippers = _this14.finalShippersReceivers[k].shippers;\n        let receivers = _this14.finalShippersReceivers[k].receivers;\n        if (shippers.length == 0) flag = false;\n        if (receivers.length == 0) flag1 = false;\n      }\n\n      if (!flag && !flag1 && (value == \"google\" || value == \"pcmiles\")) {\n        _this14.toastr.error(\"Please add atleast one Shipper and Receiver in shipments.\");\n\n        setTimeout(() => {\n          $(\".milesCommon\").removeClass(\"active\");\n          _this14.orderData.milesInfo.calculateBy = \"manual\";\n          $(\"#manual\").addClass(\"active\");\n        }, 200);\n        return false;\n      }\n\n      _this14.orderData.milesInfo[\"calculateBy\"] = value;\n\n      if (_this14.mergedArray !== undefined) {\n        _this14.mergedArray.forEach(element => {\n          let cords = `${element.address.geoCords.lng},${element.address.geoCords.lat}`;\n\n          _this14.getAllCords.push(cords);\n        });\n\n        if (value === \"google\") {// this.mergedArray.forEach((element) => {\n          //   this.googleCords.push({\n          //     lat: element.position.lat,\n          //     lng: element.position.lng,\n          //   });\n          // });\n          // this.origin = this.googleCords[0];\n          // this.googleCords.shift();\n          // this.destination = this.googleCords;\n          // //\n          // this.orderData.milesInfo.totalMiles = await this.google.googleDistance([this.origin], this.destination);\n          //\n        } else if (value === \"pcmiles\") {\n          //\n          //\n          _this14.apiService.getData(\"trips/calculate/pc/miles?type=mileReport&vehType=Truck&stops=\" + _this14.getAllCords.join(\";\")).subscribe(result => {\n            if (result != undefined && result != \"\") {\n              _this14.orderData.milesInfo[\"totalMiles\"] = result;\n            } else {\n              _this14.orderData.milesInfo[\"totalMiles\"] = 0;\n            }\n          }, err => {// console.log(\"pc miles\", err);\n          });\n        } else {\n          _this14.orderData.milesInfo[\"totalMiles\"] = \"\";\n        }\n\n        _this14.getAllCords = [];\n      }\n    })();\n  }\n\n  selectedCustomer(customerID) {\n    this.orderData.additionalContact = null;\n    this.orderData.phone = \"\";\n    this.orderData.email = \"\";\n    this.apiService.getData(`contacts/detail/${customerID}`).subscribe(result => {\n      if (result.Items.length > 0) {\n        this.customerSelected = result.Items;\n\n        for (let i = 0; i < this.customerSelected[0].adrs.length; i++) {\n          const element = this.customerSelected[0].adrs[i];\n          element[\"isChecked\"] = false;\n        }\n\n        this.customerSelected[0].adrs[0].isChecked = true;\n\n        if (result.Items[0].addlCnt != undefined) {\n          this.cusAdditionalContact = result.Items[0].addlCnt;\n\n          if (this.cusAdditionalContact.length === 1 && this.cusAdditionalContact[0].fName == \"\") {\n            this.cusAdditionalContact = [];\n          }\n        }\n\n        if (this.customerSelected[0].adrs.length > 0 && !this.getOrderID && !this.cloneID) {\n          this.orderData.cusAddressID = this.customerSelected[0].adrs[0].addressID;\n          let newCountCode = this.customerSelected[0].adrs[0].cCode;\n          this.changeCusCurrency(newCountCode);\n        }\n\n        let addressLength = this.customerSelected[0].adrs.length;\n        let getType = this.customerSelected[0].adrs[0].add1;\n        let getC_Code = this.customerSelected[0].adrs[0].cCode;\n\n        if (addressLength === 1 && (getType == \"\" || getType == null) && (getC_Code == \"\" || getC_Code == null)) {\n          this.notOfficeAddress = true;\n        } else {\n          this.notOfficeAddress = false;\n        }\n\n        if (this.getOrderID) {\n          this.customerSelected[0].adrs.filter(elem => {\n            if (elem.addressID === this.orderData.cusAddressID) {\n              elem.isChecked = true;\n            } // address id doesnot match when address deleted from address book of particular entry\n\n\n            if (this.customerSelected[0].adrs.length === 1 && elem.addressID != this.orderData.cusAddressID) {\n              this.orderData.cusAddressID = elem.addressID;\n            }\n          });\n        }\n      }\n    });\n  }\n\n  changeCusCurrency(value) {\n    if (value === \"CA\") {\n      this.orderData.charges.freightFee.currency = \"CAD\";\n      this.orderData.charges.fuelSurcharge.currency = \"CAD\";\n      this.accessFeesInfo.accessFees.forEach(elem => {\n        elem.currency = \"CAD\";\n      });\n      this.accessorialDeductionInfo.accessDeductions.forEach(elem => {\n        elem.currency = \"CAD\";\n      });\n    } else {\n      this.orderData.charges.freightFee.currency = \"USD\";\n      this.orderData.charges.fuelSurcharge.currency = \"USD\";\n      this.accessFeesInfo.accessFees.forEach(elem => {\n        elem.currency = \"USD\";\n      });\n      this.accessorialDeductionInfo.accessDeductions.forEach(elem => {\n        elem.currency = \"USD\";\n      });\n    }\n  }\n\n  setAdditionalContact(event) {\n    for (let i = 0; i < this.cusAdditionalContact.length; i++) {\n      const element = this.cusAdditionalContact[i];\n\n      if (element.fullName == event) {\n        this.orderData.phone = element.phone;\n        this.orderData.email = element.email;\n      }\n    }\n  }\n\n  addCommodity(arr, parentIndex, i) {\n    if (arr === \"shipper\") {\n      this.shippersReceivers[parentIndex].shippers.pickupPoint[i].commodity.push({\n        name: \"\",\n        quantity: \"\",\n        quantityUnit: \"\",\n        weight: \"\",\n        weightUnit: \"\",\n        pu: \"\"\n      }); // let ttlLen = this.shippersReceivers[parentIndex].shippers.pickupPoint[i].commodity.length -1;\n      // let lastItem = this.shippersReceivers[parentIndex].shippers.pickupPoint[i].commodity[ttlLen];\n      // if(lastItem.name != '' && lastItem.pu != '' && lastItem.quantity != '' && lastItem.quantityUnit != null && lastItem.weight != '' && lastItem.quantityUnit != null) {\n      //   this.shippersReceivers[parentIndex].shippers.pickupPoint[i].commodity.push({\n      //     name: '',\n      //     quantity: '',\n      //     quantityUnit: '',\n      //     weight: '',\n      //     weightUnit: '',\n      //     pu : ''\n      //   });\n      // }\n    } else {\n      this.shippersReceivers[parentIndex].receivers.dropPoint[i].commodity.push({\n        name: \"\",\n        quantity: \"\",\n        quantityUnit: \"\",\n        weight: \"\",\n        weightUnit: \"\",\n        del: \"\"\n      }); // let ttlLen = this.shippersReceivers[parentIndex].receivers.dropPoint[i].commodity.length -1;\n      // let lastItem = this.shippersReceivers[parentIndex].receivers.dropPoint[i].commodity[ttlLen];\n      // if(lastItem.name != '' && lastItem.del != '' && lastItem.quantity != '' && lastItem.quantityUnit != null && lastItem.weight != '' && lastItem.quantityUnit != null) {\n      //   this.shippersReceivers[parentIndex].receivers.dropPoint[i].commodity.push({\n      //     name: '',\n      //     quantity: '',\n      //     quantityUnit: '',\n      //     weight: '',\n      //     weightUnit: '',\n      //     del: ''\n      //   });\n      // }\n    }\n  }\n\n  removeCommodity(obj, parentIndex, w, i) {\n    if (obj === \"shipper\") {\n      this.shippersReceivers[parentIndex].shippers.pickupPoint[w].commodity.splice(i, 1);\n    } else {\n      this.shippersReceivers[parentIndex].receivers.dropPoint[w].commodity.splice(i, 1);\n    }\n  }\n\n  toggleAccordian(ind) {\n    if (this.visibleIndex === ind) {\n      this.visibleIndex = -1;\n    } else {\n      this.visibleIndex = ind;\n    }\n  }\n\n  onChangeUnitType(type, value) {\n    if (type === \"order\") {\n      this.orderData[\"orderMode\"] = value;\n    } else {\n      this.orderData[\"tripType\"] = value;\n    }\n  }\n\n  checkTrailer(value) {\n    if (value) {\n      this.orderData.additionalDetails[\"trailerType\"] = \"\";\n    }\n  }\n\n  checkFormErrors() {\n    if (!this.orderData.customerID || !this.orderData.orderNumber || !this.orderData.charges.freightFee.type || !this.orderData.charges.freightFee.amount || !this.orderData.charges.freightFee.currency || !this.orderData.milesInfo.totalMiles || !this.orderData.milesInfo.calculateBy) {\n      //\n      return false;\n    } //\n\n\n    return true;\n  }\n\n  onSubmit() {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this15.orderData.zeroRated) {\n        _this15.orderData.taxesInfo.forEach(element => {\n          element.taxAmount = 0;\n        });\n      }\n\n      _this15.submitDisabled = true;\n\n      if (_this15.orderData.additionalContact != null && _this15.orderData.additionalContact.label != undefined && _this15.orderData.additionalContact.label != null) {\n        _this15.orderData.additionalContact = _this15.orderData.additionalContact.label;\n      }\n\n      _this15.orderData.shippersReceiversInfo = _this15.finalShippersReceivers;\n      _this15.orderData.cusPOs = _this15.cusPOs;\n      let flag = true;\n      let flag1 = true; // check if exiting accoridan has atleast one shipper and one receiver\n\n      for (let k = 0; k < _this15.finalShippersReceivers.length; k++) {\n        let shippers = _this15.finalShippersReceivers[k].shippers;\n        let receivers = _this15.finalShippersReceivers[k].receivers;\n        if (shippers.length == 0) flag = false;\n        if (receivers.length == 0) flag1 = false;\n      }\n\n      if (!flag && !flag1) {\n        _this15.toastr.error(\"Please add at least one Shipper and Receiver in shipments.\");\n\n        return false;\n      }\n\n      if (_this15.isConfirmExist) {\n        setTimeout(() => {\n          $(\"html, body\").animate({\n            scrollTop: $(\"#confirmErr\").position().top\n          }, \"slow\");\n        }, 500);\n        _this15.submitDisabled = false;\n        return;\n      }\n\n      for (let i = 0; i < _this15.orderData.shippersReceiversInfo.length; i++) {\n        const element = _this15.orderData.shippersReceiversInfo[i];\n\n        for (let j = 0; j < element.shippers.length; j++) {\n          const ship = element.shippers[j];\n\n          for (let l = 0; l < ship.pickupPoint.length; l++) {\n            const newPick = ship.pickupPoint[l];\n            delete newPick.address.states;\n            delete newPick.address.cities;\n          }\n        }\n\n        for (let x = 0; x < element.receivers.length; x++) {\n          const newReceive = element.receivers[x];\n\n          for (let l = 0; l < newReceive.dropPoint.length; l++) {\n            const newDrop = newReceive.dropPoint[l];\n            delete newDrop.address.states;\n            delete newDrop.address.cities;\n          }\n        }\n      } //for location search in listing page\n\n\n      let selectedLoc = \"\";\n      let newloc = \"\";\n\n      for (let g = 0; g < _this15.orderData.shippersReceiversInfo.length; g++) {\n        const element = _this15.orderData.shippersReceiversInfo[g];\n        element.receivers.map(h => {\n          h.dropPoint.map(elem => {\n            if (elem.address.manual) {\n              newloc = `${elem.address.address} ${elem.address.cityName} ${elem.address.stateName} ${elem.address.countryName} ${elem.address.zipCode}`;\n              selectedLoc += newloc.replace(/,/g, \"\").toLowerCase() + \"|\";\n            } else {\n              newloc = elem.address.dropOffLocation.replace(/,/g, \"\");\n              selectedLoc += newloc.toLowerCase() + \"|\";\n            }\n          });\n        });\n        element.shippers.map(h => {\n          h.pickupPoint.map(elem => {\n            if (elem.address.manual) {\n              newloc = `${elem.address.address} ${elem.address.cityName} ${elem.address.stateName} ${elem.address.countryName} ${elem.address.zipCode}`;\n              selectedLoc += newloc.replace(/,/g, \"\").toLowerCase() + \"|\";\n            } else {\n              newloc = elem.address.pickupLocation.replace(/,/g, \"\");\n              selectedLoc += newloc.toLowerCase() + \"|\";\n            }\n\n            if (elem.newCustomerPO != undefined) {\n              elem.customerPO = elem.newCustomerPO;\n              delete elem.newCustomerPO;\n            }\n          });\n        });\n      }\n\n      _this15.orderData[\"loc\"] = selectedLoc;\n      _this15.orderData.orderNumber = _this15.orderData.orderNumber.toString();\n      _this15.orderData.cusConfirmation = _this15.orderData.cusConfirmation ? _this15.orderData.cusConfirmation : \"NA\"; // create form data instance\n\n      const formData = new FormData(); //append docs if any\n\n      for (let j = 0; j < _this15.uploadedDocs.length; j++) {\n        formData.append(\"uploadedDocs\", _this15.uploadedDocs[j]);\n      } //append other fields\n\n\n      formData.append(\"data\", JSON.stringify(_this15.orderData));\n\n      _this15.apiService.postData(\"orders\", formData, true).subscribe({\n        complete: () => {},\n        error: err => {\n          _this15.submitDisabled = false;\n          from(err.error).pipe(map(val => {\n            const path = val.path; // We Can Use This Method\n\n            if (path.includes(\"order\")) {\n              _this15.toastr.error(val.message);\n            }\n\n            const key = val.message.match(/\"([^']+)\"/)[1];\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n            _this15.errors[key] = val.message;\n\n            if (key == \"order\") {\n              _this15.toastr.error(\"This Order already exists.\");\n            } //\n\n          })).subscribe({\n            complete: () => {\n              // this.throwErrors();\n              _this15.Success = \"\";\n              _this15.submitDisabled = false;\n            },\n            error: () => {\n              _this15.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          _this15.submitDisabled = false;\n\n          _this15.toastr.success(\"Order added successfully\");\n\n          _this15.goBack();\n        }\n      });\n    })();\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n\n  remove(data, i) {\n    if (data === \"shipper\") {// this.orderData.shipperInfo.splice(i, 1);\n    } else {// this.orderData.receiverInfo.splice(i, 1);\n    }\n  }\n\n  changeTax(value) {\n    if (!value && this.stateTaxes.length === 0) {\n      this.fetchStateTaxes();\n    }\n\n    this.calculateAmount();\n  }\n\n  calculateAmount() {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      _this16.freightFee = _this16.orderData.charges.freightFee[\"amount\"];\n      _this16.fuelSurcharge = _this16.orderData.charges.fuelSurcharge[\"amount\"];\n      let sum = 0;\n\n      _this16.accessFeesInfo.accessFees.forEach(item => {\n        sum += parseFloat(item.amount) || 0;\n      });\n\n      _this16.orderData.charges.accessorialFeeInfo[\"total\"] = sum;\n      _this16.orderData.charges.accessorialFeeInfo.accessorialFee = _this16.accessFeesInfo.accessFees;\n      let totalDeductions = 0;\n\n      _this16.accessorialDeductionInfo.accessDeductions.forEach(item => {\n        sum -= parseFloat(item.amount) || 0;\n        totalDeductions += parseFloat(item.amount) || 0;\n      });\n\n      _this16.orderData.charges.accessorialDeductionInfo[\"total\"] = totalDeductions;\n      _this16.orderData.charges.accessorialDeductionInfo.accessorialDeduction = _this16.accessorialDeductionInfo.accessDeductions;\n      sum += (parseFloat(_this16.freightFee) || 0) + (parseFloat(_this16.fuelSurcharge) || 0);\n      _this16.subTotal = sum.toFixed(2); // let discountAmount = parseFloat(this.orderData.discount[\"amount\"]) || 0;\n      // let discountUnit = this.orderData.discount[\"unit\"];\n      // if (discountUnit === \"percentage\") {\n      //   this.discount = (this.subTotal * discountAmount) / 100;\n      // } else {\n      //   this.discount = discountAmount;\n      // }\n\n      _this16.totalAmount = _this16.subTotal;\n      _this16.orderData[\"totalAmount\"] = _this16.totalAmount;\n      _this16.orderData.finalAmount = _this16.totalAmount;\n\n      if (!_this16.orderData.zeroRated) {\n        console.log('this.orderData===', _this16.orderData);\n        console.log('this.orderData===rate', _this16.orderData.zeroRated);\n        let gst = _this16.orderData.taxesInfo[0].amount ? _this16.orderData.taxesInfo[0].amount : 0;\n        let pst = _this16.orderData.taxesInfo[1].amount ? _this16.orderData.taxesInfo[1].amount : 0;\n        let hst = _this16.orderData.taxesInfo[2].amount ? _this16.orderData.taxesInfo[2].amount : 0;\n        let advance = _this16.orderData.advance;\n        let totalTax = parseFloat(gst) + parseFloat(pst) + parseFloat(hst);\n        let taxAmount = parseFloat(_this16.totalAmount) * totalTax / 100;\n        let final = (parseFloat(_this16.totalAmount) + taxAmount).toFixed(2);\n        _this16.orderData[\"totalAmount\"] = final;\n        _this16.totalAmount = final;\n        _this16.orderData.finalAmount = final - parseFloat(advance);\n      }\n\n      _this16.newTaxes = _this16.orderData.taxesInfo;\n\n      if (_this16.subTotal > 0) {\n        for (let i = 0; i < _this16.newTaxes.length; i++) {\n          const element = _this16.newTaxes[i];\n          element.taxAmount = _this16.subTotal * element.amount / 100;\n        }\n      }\n    })();\n  }\n\n  removeList(elem, parentIndex, i) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      if (elem === \"shipper\") {\n        _this17.finalShippersReceivers[parentIndex].shippers.splice(i, 1);\n\n        _this17.shippersReceivers[parentIndex].shippers.update = false;\n        _this17.shippersReceivers[parentIndex].shippers.save = true;\n\n        if (_this17.finalShippersReceivers[parentIndex].shippers.length === 0) {\n          _this17.shippersReceivers[parentIndex].shippers.isShow = true;\n        }\n      } else {\n        _this17.finalShippersReceivers[parentIndex].receivers.splice(i, 1);\n\n        _this17.shippersReceivers[parentIndex].receivers.update = false;\n        _this17.shippersReceivers[parentIndex].receivers.save = true;\n\n        if (_this17.finalShippersReceivers[parentIndex].receivers.length === 0) {\n          _this17.shippersReceivers[parentIndex].receivers.isShow = true;\n        }\n      }\n\n      yield _this17.shipperReceiverMerge();\n      yield _this17.getMiles(_this17.orderData.milesInfo.calculateBy);\n      _this17.showShipperUpdate = false;\n      _this17.showReceiverUpdate = false;\n    })();\n  }\n\n  assignLocation(i, w, value, id) {\n    let getAddress;\n\n    if (value === \"shipper\") {\n      getAddress = this.shipAddresses.filter(elem => elem.addressID == id);\n    }\n\n    if (value === \"shipper\") {\n      if (getAddress.length > 0) {\n        if (getAddress[0].manual) {\n          let newAddress = \"\";\n\n          if (getAddress[0].add1 != undefined && getAddress[0].add1 != \"\") {\n            newAddress = `${getAddress[0].add1}`;\n          }\n\n          if (getAddress[0].add2 != undefined && getAddress[0].add2 != \"\") {\n            if (newAddress != \"\") {\n              newAddress += `, ${getAddress[0].add2}`;\n            } else {\n              newAddress += `${getAddress[0].add2}`;\n            }\n          }\n\n          if (getAddress[0].ctyName != undefined && getAddress[0].ctyName != \"\") {\n            newAddress += `, ${getAddress[0].ctyName}`;\n          }\n\n          if (getAddress[0].sName != undefined && getAddress[0].sName != \"\") {\n            newAddress += `, ${getAddress[0].sName}`;\n          }\n\n          if (getAddress[0].cName != undefined && getAddress[0].cName != \"\") {\n            newAddress += `, ${getAddress[0].cName}`;\n          }\n\n          if (getAddress[0].zip != undefined && getAddress[0].zip != \"\") {\n            newAddress += `. ${getAddress[0].zip}`;\n          }\n\n          this.shippersReceivers[i].shippers.pickupPoint[w].address.pickupLocation = newAddress;\n        } else {\n          this.shippersReceivers[i].shippers.pickupPoint[w].address.pickupLocation = getAddress[0].userLoc;\n        }\n\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.geoCords = getAddress[0].geoCords;\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.cityName = getAddress[0].ctyName;\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.stateCode = getAddress[0].sCode;\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.stateName = getAddress[0].sName;\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.countryCode = getAddress[0].cCode;\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.countryName = getAddress[0].cName;\n        this.shippersReceivers[i].shippers.pickupPoint[w].address.zipCode = getAddress[0].zip;\n      }\n    } else {\n      let getAddress = this.receiverAddresses.filter(elem => elem.addressID == id);\n\n      if (getAddress.length > 0) {\n        if (getAddress[0].manual) {\n          let newAddress = \"\";\n\n          if (getAddress[0].add1 != undefined && getAddress[0].add1 != \"\") {\n            newAddress = `${getAddress[0].add1}`;\n          }\n\n          if (getAddress[0].add2 != undefined && getAddress[0].add2 != \"\") {\n            if (newAddress != \"\") {\n              newAddress += `, ${getAddress[0].add2}`;\n            } else {\n              newAddress += `${getAddress[0].add2}`;\n            }\n          }\n\n          if (getAddress[0].ctyName != undefined && getAddress[0].ctyName != \"\") {\n            newAddress += `, ${getAddress[0].ctyName}`;\n          }\n\n          if (getAddress[0].sName != undefined && getAddress[0].sName != \"\") {\n            newAddress += `, ${getAddress[0].sName}`;\n          }\n\n          if (getAddress[0].cName != undefined && getAddress[0].cName != \"\") {\n            newAddress += `, ${getAddress[0].cName}`;\n          }\n\n          if (getAddress[0].zip != undefined && getAddress[0].zip != \"\") {\n            newAddress += `. ${getAddress[0].zip}`;\n          }\n\n          this.shippersReceivers[i].receivers.dropPoint[w].address.dropOffLocation = newAddress;\n        } else {\n          this.shippersReceivers[i].receivers.dropPoint[w].address.dropOffLocation = getAddress[0].userLoc;\n        }\n\n        this.shippersReceivers[i].receivers.dropPoint[w].address.geoCords = getAddress[0].geoCords;\n        this.shippersReceivers[i].receivers.dropPoint[w].address.cityName = getAddress[0].ctyName;\n        this.shippersReceivers[i].receivers.dropPoint[w].address.stateCode = getAddress[0].sCode;\n        this.shippersReceivers[i].receivers.dropPoint[w].address.stateName = getAddress[0].sName;\n        this.shippersReceivers[i].receivers.dropPoint[w].address.countryCode = getAddress[0].cCode;\n        this.shippersReceivers[i].receivers.dropPoint[w].address.countryName = getAddress[0].cName;\n        this.shippersReceivers[i].receivers.dropPoint[w].address.zipCode = getAddress[0].zip;\n      }\n    }\n\n    $(\"div\").removeClass(\"show-search__result\");\n  }\n\n  addPickUpPoint(i, obj) {\n    if (obj == \"shipper\") {\n      this.shippersReceivers[i].shippers.pickupPoint.push({\n        unit: false,\n        unitNumber: \"\",\n        address: {\n          address: \"\",\n          manual: false,\n          pickupLocation: \"\",\n          cityName: \"\",\n          stateName: \"\",\n          stateCode: \"\",\n          countryName: \"\",\n          countryCode: \"\",\n          zipCode: \"\",\n          cities: [],\n          states: [],\n          geoCords: {}\n        },\n        pickupDate: \"\",\n        pickupTime: \"\",\n        pickupInstruction: \"\",\n        contactPerson: \"\",\n        phone: \"\",\n        customerPO: [],\n        newCustomerPO: [],\n        commodity: [{\n          name: \"\",\n          quantity: \"\",\n          quantityUnit: null,\n          weight: \"\",\n          weightUnit: null,\n          pu: \"\"\n        }]\n      });\n    } else {\n      this.shippersReceivers[i].receivers.dropPoint.push({\n        unit: false,\n        unitNumber: \"\",\n        address: {\n          address: \"\",\n          manual: false,\n          dropOffLocation: \"\",\n          cityName: \"\",\n          stateName: \"\",\n          stateCode: \"\",\n          countryName: \"\",\n          countryCode: \"\",\n          zipCode: \"\",\n          cities: [],\n          states: [],\n          geoCords: {}\n        },\n        dropOffDate: \"\",\n        dropOffTime: \"\",\n        dropOffInstruction: \"\",\n        contactPerson: \"\",\n        phone: \"\",\n        commodity: [{\n          name: \"\",\n          quantity: \"\",\n          quantityUnit: null,\n          weight: \"\",\n          weightUnit: null,\n          del: \"\"\n        }]\n      });\n    }\n  } // viewList(elem: string, j: number, i: number) {\n  //   this.editList(elem, j, i);\n  //   if (elem === \"shipper\") {\n  //     this.shippersReceivers[j].shippers.update = false;\n  //   } else {\n  //     this.shippersReceivers[j].receivers.update = false;\n  //   }\n  // }\n\n\n  editList(elem, parentIndex, i) {\n    let j = parentIndex;\n\n    if (elem === \"shipper\") {\n      let data = this.finalShippersReceivers[parentIndex].shippers[i];\n      this.shippersReceivers[j].shippers.shipperID = data.shipperID; // let newPosData = [];\n      // data.pickupPoint.forEach((element) => {\n      //   element.customerPO.forEach((po: any) => {\n      //     newPosData.push({ label: po });\n      //   });\n      //   element.customerPO = newPosData;\n      // });\n\n      this.shippersReceivers[j].shippers.pickupPoint = data.pickupPoint;\n\n      for (let index = 0; index < this.shippersReceivers[j].shippers.pickupPoint.length; index++) {\n        const element = this.shippersReceivers[j].shippers.pickupPoint[index];\n\n        if (element[\"dateAndTime\"] != undefined || element[\"dateAndTime\"] != \"\") {\n          let itemDateAndTime = element[\"dateAndTime\"].split(\" \");\n          element.pickupDate = itemDateAndTime[0];\n          element.pickupTime = itemDateAndTime[1];\n        }\n      }\n\n      this.shippersReceivers[j].shippers.driverLoad = data.driverLoad;\n      this.shippersReceivers[j].shippers.save = false;\n      this.shippersReceivers[j].shippers.update = true;\n      this.shippersReceivers[j].shippers.isShow = true;\n      this.stateShipperIndex = i;\n      this.showShipperUpdate = true;\n      this.getShippers();\n    } else {\n      let data = this.finalShippersReceivers[parentIndex].receivers[i];\n      this.shippersReceivers[j].receivers.receiverID = data.receiverID;\n      this.shippersReceivers[j].receivers.dropPoint = data.dropPoint;\n\n      for (let index = 0; index < this.shippersReceivers[j].receivers.dropPoint.length; index++) {\n        const element = this.shippersReceivers[j].receivers.dropPoint[index];\n\n        if (element[\"dateAndTime\"] != undefined || element[\"dateAndTime\"] != \"\") {\n          let itemDateAndTime = element[\"dateAndTime\"].split(\" \");\n          element.dropOffDate = itemDateAndTime[0];\n          element.dropOffTime = itemDateAndTime[1];\n        }\n      }\n\n      this.shippersReceivers[j].receivers.driverUnload = data.driverUnload;\n      this.shippersReceivers[j].receivers.save = false;\n      this.shippersReceivers[j].receivers.update = true;\n      this.shippersReceivers[j].receivers.isShow = true;\n      this.stateReceiverIndex = i;\n      this.getReceivers();\n    }\n\n    this.visibleIndex = i;\n    this.showReceiverUpdate = true;\n  }\n\n  updateShipperReceiver(obj, i) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      if (obj === \"shipper\") {\n        // for shipper\n        $(\"#poErr_\" + i).hide();\n        let newPicks = _this18.shippersReceivers[i].shippers;\n\n        if (!newPicks.shipperID) {\n          _this18.toastr.error(\"Please select shipper\");\n\n          return false;\n        }\n\n        for (const pick of newPicks.pickupPoint) {\n          if (pick.address.manual) {\n            if (!pick.address.address || !pick.address.cityName || !pick.address.stateCode || !pick.address.countryCode || !pick.address.zipCode || !pick.pickupDate || !pick.pickupTime || !pick.commodity[0].name) {\n              _this18.toastr.error(\"Please fill required fields.\");\n\n              return false;\n            }\n          } else if (!pick.address.pickupLocation || !pick.pickupDate || !pick.pickupTime || !pick.commodity[0].name) {\n            _this18.toastr.error(\"Please fill required fields.\");\n\n            return false;\n          }\n        }\n\n        let data = _this18.shippersReceivers[i].shippers;\n        _this18.finalShippersReceivers[i].shippers[_this18.stateShipperIndex].shipperID = data.shipperID;\n        let newPosData = [];\n        data.pickupPoint.forEach(element => {\n          element.customerPO.forEach(po => {\n            if (po && po != null) {\n              newPosData.push(po.label);\n            }\n          });\n          element.newCustomerPO = newPosData;\n        });\n        _this18.finalShippersReceivers[i].shippers[_this18.stateShipperIndex].pickupPoint = data.pickupPoint;\n        let location;\n\n        for (let index = 0; index < _this18.finalShippersReceivers[i].shippers[_this18.stateShipperIndex].pickupPoint.length; index++) {\n          const element = _this18.shippersReceivers[i].shippers.pickupPoint[index];\n\n          if (element.address.manual === true) {\n            location = {\n              address: element.address.address,\n              cityName: element.address.cityName,\n              stateName: element.address.stateName,\n              countryName: element.address.countryName,\n              zipCode: element.address.zipCode\n            };\n            $(\"#adrsErr1_\" + i).css(\"display\", \"none\");\n            let result = yield _this18.newGeoCode(location);\n\n            if (result == null) {\n              $(\"#adrsErr1_\" + i).css(\"display\", \"block\");\n\n              _this18.toastr.error(\"Please add valid address\");\n\n              return false;\n            }\n\n            if (result != undefined || result != null) {\n              element.address.geoCords = result;\n            }\n          }\n\n          element[\"dateAndTime\"] = element.pickupDate + \" \" + element.pickupTime;\n          delete element.pickupDate;\n          delete element.pickupTime;\n        }\n\n        _this18.finalShippersReceivers[i].shippers[_this18.stateShipperIndex].driverLoad = data.driverLoad;\n        _this18.showShipperUpdate = false;\n        data.save = true;\n        data.update = false;\n        data.isShow = false;\n\n        _this18.toastr.success(\"Shipper Updated successfully.\");\n\n        setTimeout(() => {\n          $(\"html, body\").animate({\n            scrollTop: $(\"#shipList_\" + i).position().top\n          }, \"slow\");\n        }, 500);\n\n        _this18.emptyShipper(i);\n      } else {\n        // for receiver\n        let newDrops = _this18.shippersReceivers[i].receivers;\n\n        if (!newDrops.receiverID) {\n          _this18.toastr.error(\"Please select receiver\");\n\n          return false;\n        }\n\n        for (const drop of newDrops.dropPoint) {\n          if (drop.address.manual) {\n            if (!drop.address.address || !drop.address.cityName || !drop.address.stateCode || !drop.address.countryCode || !drop.address.zipCode || !drop.dropOffDate || !drop.dropOffTime || !drop.commodity[0].name) {\n              _this18.toastr.error(\"Please fill required fields.\");\n\n              return false;\n            }\n          } else if (!drop.address.dropOffLocation || !drop.dropOffDate || !drop.dropOffTime || !drop.commodity[0].name) {\n            _this18.toastr.error(\"Please fill required fields.\");\n\n            return false;\n          }\n        }\n\n        let data = _this18.shippersReceivers[i].receivers;\n        delete _this18.finalShippersReceivers[i].receivers[_this18.stateReceiverIndex].dropOffDate;\n        delete _this18.finalShippersReceivers[i].receivers[_this18.stateReceiverIndex].dropOffTime;\n        _this18.finalShippersReceivers[i].receivers[_this18.stateReceiverIndex].receiverID = data.receiverID;\n        _this18.finalShippersReceivers[i].receivers[_this18.stateReceiverIndex].dropPoint = data.dropPoint;\n        let location;\n        let allDropPoints = _this18.finalShippersReceivers[i].receivers[_this18.stateReceiverIndex].dropPoint;\n\n        for (let index = 0; index < allDropPoints.length; index++) {\n          const element = _this18.shippersReceivers[i].receivers.dropPoint[index];\n\n          if (element.address.manual === true) {\n            location = {\n              address: element.address.address,\n              cityName: element.address.cityName,\n              stateName: element.address.stateName,\n              countryName: element.address.countryName,\n              zipCode: element.address.zipCode\n            };\n            $(\"#adrsErr2_\" + i).css(\"display\", \"none\");\n            let result = yield _this18.newGeoCode(location);\n\n            if (result == null) {\n              $(\"#adrsErr2_\" + i).css(\"display\", \"block\");\n\n              _this18.toastr.error(\"Please add valid address\");\n\n              return false;\n            }\n\n            if (result != undefined || result != null) {\n              element.address.geoCords = result;\n            }\n          }\n\n          element[\"dateAndTime\"] = element.dropOffDate + \" \" + element.dropOffTime;\n          delete element.dropOffDate;\n          delete element.dropOffTime;\n        }\n\n        _this18.finalShippersReceivers[i].receivers[_this18.stateReceiverIndex].driverUnload = data.driverUnload;\n        _this18.showReceiverUpdate = false;\n        data.save = true;\n        data.update = false;\n        data.isShow = false;\n\n        _this18.toastr.success(\"Receiver updated successfully.\");\n\n        setTimeout(() => {\n          $(\"html, body\").animate({\n            scrollTop: $(\"#receiveList_\" + i).position().top\n          }, \"slow\");\n        }, 500);\n\n        _this18.emptyReceiver(i);\n      }\n\n      yield _this18.shipperReceiverMerge();\n      yield _this18.getMiles(_this18.orderData.milesInfo.calculateBy);\n      _this18.visibleIndex = -1;\n    })();\n  }\n\n  addShipReceiver(obj, i) {\n    let length = this.shippersReceivers.length;\n\n    if (obj == \"shipper\") {\n      this.shippersReceivers[i].shippers.isShow = true;\n      this.getShippers();\n    } else {\n      this.shippersReceivers[i].receivers.isShow = true;\n      this.getReceivers();\n    }\n  }\n\n  disableButton() {\n    if (this.orderData.customerID == \"\" || this.orderData.customerID == null || this.finalShippersReceivers[0].receivers.length == 0 || this.finalShippersReceivers[0].shippers.length == 0 || this.orderData.milesInfo.calculateBy == \"\" || this.orderData.milesInfo.totalMiles == null || this.orderData.milesInfo.totalMiles == \"\" || this.orderData.charges.freightFee.type == \"\" || this.orderData.charges.freightFee.type == null || this.orderData.charges.freightFee.amount == null || this.orderData.charges.freightFee.currency == \"\" || this.orderData.charges.freightFee.currency == null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /***************\r\n   * For Edit Orders\r\n   */\n\n\n  fetchOrderByID() {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      _this19.apiService.getData(\"orders/\" + _this19.getOrderID).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          result = result.Items[0];\n          _this19.orderData.cusAddressID = result.cusAddressID;\n\n          if (!result.zeroRated) {\n            yield _this19.fetchStateTaxes();\n          }\n\n          let state = _this19.stateTaxes.find(o => o.stateTaxID == result.stateTaxID);\n\n          if (result.recptStat) {\n            _this19.recalledState = false;\n          }\n\n          _this19.orderData.taxesInfo = [{\n            name: \"GST\",\n            amount: state ? state.GST : \"\"\n          }, {\n            name: \"HST\",\n            amount: state ? state.HST : \"\"\n          }, {\n            name: \"PST\",\n            amount: state ? state.PST : \"\"\n          }];\n          _this19.orderData[\"recptStat\"] = result.recptStat ? result.recptStat : false;\n          _this19.orderData[\"customerID\"] = result.customerID;\n          _this19.orderData.cusConfirmation = result.cusConfirmation == \"NA\" ? \"\" : result.cusConfirmation;\n\n          _this19.selectedCustomer(result.customerID);\n\n          if (result.attachments !== undefined && result.attachments.length > 0) {\n            _this19.orderAttachments = result.attachments.map(x => ({\n              path: `${_this19.Asseturl}/${result.carrierID}/${x}`,\n              name: x\n            }));\n          }\n\n          if (result.brkAmount) {\n            _this19.orderData[\"brkAmount\"] = result.brkAmount;\n          }\n\n          if (result.brkCarrID) {\n            _this19.orderData[\"brkCarrID\"] = result.brkCarrID;\n          }\n\n          if (result.brkIns) {\n            _this19.orderData[\"brkIns\"] = result.brkIns;\n          }\n\n          _this19.orderData.tripData = result.tripData;\n          _this19.orderData[\"attachments\"] = result.attachments;\n          _this19.ifStatus = result.orderStatus;\n          _this19.orderData.orderStatus = result.orderStatus;\n          _this19.orderData.tripData = result.tripData;\n          _this19.orderData[\"zeroRated\"] = result.zeroRated;\n          _this19.orderData[\"additionalContact\"] = result.additionalContact;\n          _this19.orderData[\"createdDate\"] = result.createdDate;\n          _this19.orderData[\"createdTime\"] = result.createdTime;\n          _this19.isInvoiceGenerated = result.invoiceGenerate;\n          _this19.orderData[\"invoiceGenerate\"] = result.invoiceGenerate;\n          _this19.orderData[\"invoiceEmail\"] = result.invoiceEmail;\n          _this19.orderData[\"csa\"] = result.csa;\n          _this19.orderData[\"ctpat\"] = result.ctpat;\n          _this19.orderData[\"customerPO\"] = result.customerPO;\n          _this19.orderData[\"email\"] = result.email;\n          _this19.orderData[\"orderMode\"] = result.orderMode;\n          _this19.orderData[\"orderNumber\"] = result.orderNumber;\n          _this19.getOrderNumber = result.orderNumber;\n          _this19.orderData[\"phone\"] = result.phone;\n          _this19.orderData[\"reference\"] = result.reference;\n          _this19.orderData[\"remarks\"] = result.remarks;\n          _this19.orderData.advance = result.advance;\n          _this19.orderData.milesInfo[\"totalMiles\"] = result.milesInfo.totalMiles;\n          _this19.orderData.milesInfo[\"calculateBy\"] = result.milesInfo.calculateBy;\n          _this19.orderData.stateTaxID = result.stateTaxID;\n          _this19.orderData[\"tripType\"] = result.tripType;\n          _this19.orderData.additionalDetails.sealNo = result.additionalDetails.sealNo;\n          _this19.orderData.additionalDetails.sealType = result.additionalDetails.sealType;\n          _this19.orderData.additionalDetails[\"trailerType\"] = result.additionalDetails.trailerType; // this.orderData.additionalDetails[\"loadType\"] =\n          //   result.additionalDetails.loadType;\n\n          _this19.orderData.additionalDetails[\"refeerTemp\"] = result.additionalDetails.refeerTemp;\n\n          if (result.invData) {\n            _this19.orderData[\"invData\"] = result.invData;\n          }\n\n          _this19.orderData.shippersReceiversInfo = result.shippersReceiversInfo;\n          let shimentLength = result.shippersReceiversInfo.length; // this.shippersReceivers = result.shippersReceiversInfo;\n\n          _this19.addShipReceiveLength(shimentLength - 1);\n\n          _this19.finalShippersReceivers = result.shippersReceiversInfo;\n\n          _this19.shippersReceivers.forEach(elem => {\n            elem.shippers.isShow = false;\n            elem.receivers.isShow = false;\n          });\n\n          _this19.shipperReceiverMerge();\n\n          _this19.orderData.charges.freightFee.amount = result.charges.freightFee.amount;\n          _this19.orderData.charges.freightFee.currency = result.charges.freightFee.currency;\n          _this19.orderData.charges.freightFee.type = result.charges.freightFee.type;\n          _this19.orderData.charges.fuelSurcharge.amount = result.charges.fuelSurcharge.amount;\n          _this19.orderData.charges.fuelSurcharge.currency = result.charges.fuelSurcharge.currency;\n          _this19.orderData.charges.fuelSurcharge.type = result.charges.fuelSurcharge.type;\n          let newAccessDeductions = [];\n\n          for (let i = 0; i < result.charges.accessorialDeductionInfo.accessorialDeduction.length; i++) {\n            newAccessDeductions.push({\n              type: result.charges.accessorialDeductionInfo.accessorialDeduction[i].type,\n              currency: result.charges.accessorialDeductionInfo.accessorialDeduction[i].currency,\n              amount: result.charges.accessorialDeductionInfo.accessorialDeduction[i].amount\n            });\n          }\n\n          _this19.accessorialDeductionInfo.accessDeductions = newAccessDeductions;\n          let newAccessFees = [];\n\n          for (let i = 0; i < result.charges.accessorialFeeInfo.accessorialFee.length; i++) {\n            newAccessFees.push({\n              type: result.charges.accessorialFeeInfo.accessorialFee[i].type,\n              amount: result.charges.accessorialFeeInfo.accessorialFee[i].amount,\n              currency: result.charges.accessorialFeeInfo.accessorialFee[i].currency\n            });\n          }\n\n          _this19.accessFeesInfo.accessFees = newAccessFees;\n          _this19.orderData.advance = result.amount;\n          _this19.orderData.discount.unit = result.discount.unit;\n          _this19.orderData[\"totalAmount\"] = result.totalAmount;\n          _this19.orderData.advance = result.advance;\n          _this19.existingUploadedDocs = result.uploadedDocs;\n          _this19.orderData.cusPOs = result.cusPOs;\n          _this19.cusPOs = result.cusPOs;\n\n          _this19.calculateAmount();\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  addShipReceiveLength(length) {\n    for (let index = 0; index < length; index++) {\n      this.shippersReceivers.push({\n        shippers: {\n          shipperID: null,\n          pickupPoint: [{\n            unit: false,\n            unitNumber: \"\",\n            address: {\n              address: \"\",\n              manual: false,\n              pickupLocation: \"\",\n              cityName: \"\",\n              stateCode: \"\",\n              stateName: \"\",\n              countryCode: \"\",\n              countryName: \"\",\n              zipCode: \"\",\n              cities: [],\n              states: [],\n              geoCords: {}\n            },\n            pickupDate: \"\",\n            pickupTime: \"\",\n            pickupInstruction: \"\",\n            contactPerson: \"\",\n            phone: \"\",\n            customerPO: [],\n            newCustomerPO: [],\n            commodity: [{\n              name: \"\",\n              quantity: \"\",\n              quantityUnit: null,\n              weight: \"\",\n              weightUnit: null,\n              pu: \"\"\n            }]\n          }],\n          driverLoad: false,\n          liveLoad: true,\n          save: true,\n          update: false,\n          isShow: true\n        },\n        receivers: {\n          receiverID: null,\n          dropPoint: [{\n            unit: false,\n            unitNumber: \"\",\n            address: {\n              address: \"\",\n              manual: false,\n              dropOffLocation: \"\",\n              cityName: \"\",\n              stateCode: \"\",\n              stateName: \"\",\n              countryCode: \"\",\n              countryName: \"\",\n              zipCode: \"\",\n              cities: [],\n              states: [],\n              geoCords: {}\n            },\n            dropOffDate: \"\",\n            dropOffTime: \"\",\n            dropOffInstruction: \"\",\n            contactPerson: \"\",\n            phone: \"\",\n            commodity: [{\n              name: \"\",\n              quantity: \"\",\n              quantityUnit: null,\n              weight: \"\",\n              weightUnit: null,\n              del: \"\"\n            }]\n          }],\n          driverUnload: false,\n          liveUnLoad: true,\n          save: true,\n          update: false,\n          isShow: true\n        }\n      });\n    }\n  }\n\n  updateOrder(type) {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      // this.isSubmit = true;\n      // if (!this.checkFormErrors()) return false;\n      _this20.submitDisabled = true;\n\n      if (_this20.orderData.zeroRated) {\n        _this20.orderData.taxesInfo.forEach(element => {\n          element.taxAmount = 0;\n        });\n      }\n\n      _this20.orderData.shippersReceiversInfo = _this20.finalShippersReceivers;\n      _this20.orderData[\"uploadedDocs\"] = _this20.existingUploadedDocs;\n      _this20.orderData[\"orderID\"] = _this20.getOrderID;\n      _this20.orderData.orderNumber = _this20.orderData.orderNumber.toString();\n      _this20.orderData[\"deletedFiles\"] = _this20.deletedFiles;\n      let flag = true; // check if exiting accoridan has atleast one shipper and one receiver\n\n      for (let k = 0; k < _this20.finalShippersReceivers.length; k++) {\n        let shippers = _this20.finalShippersReceivers[k].shippers;\n        let receivers = _this20.finalShippersReceivers[k].receivers;\n        if (shippers.length == 0) flag = false;\n        if (receivers.length == 0) flag = false;\n      } //for location search in listing page\n\n\n      let selectedLoc = \"\";\n      let newloc = \"\";\n\n      for (let g = 0; g < _this20.orderData.shippersReceiversInfo.length; g++) {\n        const element = _this20.orderData.shippersReceiversInfo[g];\n        element.receivers.map(h => {\n          h.dropPoint.map(elem => {\n            if (elem.address.manual) {\n              newloc = `${elem.address.address} ${elem.address.cityName} ${elem.address.stateName} ${elem.address.countryName} ${elem.address.zipCode}`;\n              selectedLoc += newloc.replace(/,/g, \"\").toLowerCase() + \"|\";\n            } else {\n              newloc = elem.address.dropOffLocation.replace(/,/g, \"\");\n              selectedLoc += newloc.toLowerCase() + \"|\";\n            }\n          });\n        });\n        element.shippers.map(h => {\n          h.pickupPoint.map(elem => {\n            if (elem.address.manual) {\n              newloc = `${elem.address.address} ${elem.address.cityName} ${elem.address.stateName} ${elem.address.countryName} ${elem.address.zipCode}`;\n              selectedLoc += newloc.replace(/,/g, \"\").toLowerCase() + \"|\";\n            } else {\n              newloc = elem.address.pickupLocation.replace(/,/g, \"\");\n              selectedLoc += newloc.toLowerCase() + \"|\";\n            }\n\n            if (elem.newCustomerPO != undefined) {\n              elem.customerPO = elem.newCustomerPO;\n              delete elem.newCustomerPO;\n            }\n          });\n        });\n      }\n\n      if (!flag) {\n        _this20.toastr.error(\"Please add atleast one Shipper and Receiver in shipments.\");\n\n        return false;\n      }\n\n      if (_this20.isConfirmExist) {\n        setTimeout(() => {\n          $(\"html, body\").animate({\n            scrollTop: $(\"#confirmErr\").position().top\n          }, \"slow\");\n        }, 500);\n        _this20.submitDisabled = false;\n        return;\n      }\n\n      for (let i = 0; i < _this20.orderData.shippersReceiversInfo.length; i++) {\n        const element = _this20.orderData.shippersReceiversInfo[i];\n\n        for (let j = 0; j < element.shippers.length; j++) {\n          const ship = element.shippers[j];\n\n          for (let l = 0; l < ship.pickupPoint.length; l++) {\n            const newPick = ship.pickupPoint[l];\n            delete newPick.address.states;\n            delete newPick.address.cities;\n          }\n        }\n\n        for (let x = 0; x < element.receivers.length; x++) {\n          const newReceive = element.receivers[x];\n\n          for (let l = 0; l < newReceive.dropPoint.length; l++) {\n            const newDrop = newReceive.dropPoint[l];\n            delete newDrop.address.states;\n            delete newDrop.address.cities;\n          }\n        }\n      }\n\n      _this20.orderData[\"loc\"] = selectedLoc;\n      _this20.orderData.cusPOs = _this20.cusPOs;\n      _this20.orderData.cusConfirmation = _this20.orderData.cusConfirmation ? _this20.orderData.cusConfirmation : \"NA\"; // create form data instance\n\n      const formData = new FormData(); //append docs if any\n\n      for (let j = 0; j < _this20.uploadedDocs.length; j++) {\n        formData.append(\"uploadedDocs\", _this20.uploadedDocs[j]);\n      } //append other fields\n\n\n      formData.append(\"data\", JSON.stringify(_this20.orderData));\n      let url = \"\";\n\n      if (type === \"\") {\n        url = \"orders\";\n      } else if (type === \"recall\") {\n        url = \"admin/order/recall\";\n      }\n\n      _this20.apiService.putData(url, formData, true).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            const path = val.path; // We Can Use This Method\n\n            const key = val.message.match(/\"([^']+)\"/)[1];\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n            _this20.errors[key] = val.message;\n          })).subscribe({\n            complete: () => {\n              // this.throwErrors();\n              _this20.Success = \"\";\n              _this20.submitDisabled = false;\n            },\n            error: () => {\n              _this20.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          _this20.submitDisabled = false;\n\n          _this20.toastr.success(\"Order updated successfully\"); // this.goBack();\n\n\n          _this20.router.navigate([`/dispatch/orders/detail/${_this20.getOrderID}`]);\n        }\n      });\n    })();\n  }\n\n  addAccordian() {\n    let flag = true; // check if exiting accoridan has atleast one shipper and one receiver\n\n    for (let k = 0; k < this.finalShippersReceivers.length; k++) {\n      let shippers = this.finalShippersReceivers[k].shippers;\n      let receivers = this.finalShippersReceivers[k].receivers;\n      if (shippers.length == 0) flag = false;\n      if (receivers.length == 0) flag = false;\n    }\n\n    if (!flag) {\n      this.toastr.error(\"Please add atleast one Shipper and Receiver in existing shipment.\");\n      return false;\n    }\n\n    let allFields = {\n      shippers: {\n        shipperID: null,\n        pickupPoint: [{\n          unit: false,\n          unitNumber: \"\",\n          address: {\n            address: \"\",\n            manual: false,\n            pickupLocation: \"\",\n            cityName: \"\",\n            stateCode: \"\",\n            stateName: \"\",\n            countryCode: \"\",\n            countryName: \"\",\n            zipCode: \"\",\n            cities: [],\n            states: [],\n            geoCords: {}\n          },\n          pickupDate: \"\",\n          pickupTime: \"\",\n          pickupInstruction: \"\",\n          contactPerson: \"\",\n          phone: \"\",\n          customerPO: [],\n          newCustomerPO: [],\n          commodity: [{\n            name: \"\",\n            quantity: \"\",\n            quantityUnit: null,\n            weight: \"\",\n            weightUnit: null,\n            pu: \"\"\n          }]\n        }],\n        driverLoad: false,\n        liveLoad: true,\n        save: true,\n        update: false,\n        isShow: true\n      },\n      receivers: {\n        receiverID: null,\n        dropPoint: [{\n          unit: false,\n          unitNumber: \"\",\n          address: {\n            address: \"\",\n            manual: false,\n            dropOffLocation: \"\",\n            cityName: \"\",\n            stateCode: \"\",\n            stateName: \"\",\n            countryCode: \"\",\n            countryName: \"\",\n            zipCode: \"\",\n            cities: [],\n            states: [],\n            geoCords: {}\n          },\n          dropOffDate: \"\",\n          dropOffTime: \"\",\n          dropOffInstruction: \"\",\n          contactPerson: \"\",\n          phone: \"\",\n          commodity: [{\n            name: \"\",\n            quantity: \"\",\n            quantityUnit: null,\n            weight: \"\",\n            weightUnit: null,\n            del: \"\"\n          }]\n        }],\n        driverUnload: false,\n        liveUnLoad: true,\n        save: true,\n        update: false,\n        isShow: true\n      }\n    };\n    let ttlLength = this.shippersReceivers.length;\n    this.shippersReceivers.push(allFields);\n    this.shippersReceivers[ttlLength].shippers.isShow = true;\n    this.finalShippersReceivers.push({\n      shippers: [],\n      receivers: []\n    });\n  }\n\n  removeAccordian(i) {\n    this.shippersReceivers.splice(i, 1);\n    this.finalShippersReceivers.splice(i, 1);\n  }\n\n  searchFn(term, item) {\n    return item.name.includes(term) && item.name !== term;\n  }\n\n  addAccessFee(value) {\n    let curType = this.orderData.charges.freightFee.currency;\n\n    if (value === \"accessFee\") {\n      this.accessFeesInfo.accessFees.push({\n        type: \"\",\n        amount: 0,\n        currency: curType\n      });\n    } else {\n      this.accessorialDeductionInfo.accessDeductions.push({\n        type: \"\",\n        amount: 0,\n        currency: curType\n      });\n    }\n  }\n\n  deleteAccessFee(value, index) {\n    if (value === \"accessFee\") {\n      this.accessFeesInfo.accessFees.splice(index, 1);\n    } else {\n      this.accessorialDeductionInfo.accessDeductions.splice(index, 1);\n    }\n  }\n\n  tempChange(value) {\n    this.orderData.additionalDetails.refeerTemp.maxTempratureUnit = value;\n    this.orderData.additionalDetails.refeerTemp.minTempratureUnit = value;\n  }\n\n  changeCurrency(value) {\n    this.orderData.charges.freightFee.currency = value;\n    this.orderData.charges.fuelSurcharge.currency = value;\n    this.accessFeesInfo.accessFees.forEach(item => {\n      item.currency = value;\n    });\n    this.accessorialDeductionInfo.accessDeductions.forEach(item => {\n      item.currency = value;\n    });\n  }\n\n  stateSelectChange() {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      let selected = _this21.stateTaxes.find(o => o.stateTaxID == _this21.orderData.stateTaxID);\n\n      _this21.orderData.taxesInfo = [];\n      _this21.orderData.taxesInfo = [{\n        name: \"GST\",\n        amount: selected.GST\n      }, {\n        name: \"HST\",\n        amount: selected.HST\n      }, {\n        name: \"PST\",\n        amount: selected.PST\n      }];\n      _this21.tax = (parseInt(selected.GST) ? selected.GST : 0) + (parseInt(selected.HST) ? selected.HST : 0) + (parseInt(selected.PST) ? selected.PST : 0);\n      yield _this21.calculateAmount();\n    })();\n  }\n\n  caretClickShipper(i) {\n    if ($(\"#shipperArea-\" + i).children(\"i\").hasClass(\"fa-caret-right\")) {\n      $(\"#shipperArea-\" + i).children(\"i\").removeClass(\"fa-caret-right\");\n      $(\"#shipperArea-\" + i).children(\"i\").addClass(\"fa-caret-down\");\n    } else {\n      $(\"#shipperArea-\" + i).children(\"i\").addClass(\"fa-caret-right\");\n      $(\"#shipperArea-\" + i).children(\"i\").removeClass(\"fa-caret-down\");\n    }\n  }\n\n  caretClickReceiver(i) {\n    if ($(\"#receiverArea-\" + i).children(\"i\").hasClass(\"fa-caret-right\")) {\n      $(\"#receiverArea-\" + i).children(\"i\").removeClass(\"fa-caret-right\");\n      $(\"#receiverArea-\" + i).children(\"i\").addClass(\"fa-caret-down\");\n    } else {\n      $(\"#receiverArea-\" + i).children(\"i\").addClass(\"fa-caret-right\");\n      $(\"#receiverArea-\" + i).children(\"i\").removeClass(\"fa-caret-down\");\n    }\n  }\n\n  fetchLastOrderNumber() {\n    this.apiService.getData(\"orders/get/last/orderNo\").subscribe(result => {\n      this.orderData.orderNumber = result.toString();\n    });\n  } // assignReceiverValue(type, fieldName, fieldVaue, shipperInd, commIndex) {\n  //   if(type == 'commodity') {\n  //     if(fieldName == 'weightUnit' || fieldName == 'quantityUnit') {\n  //       this.shippersReceivers[shipperInd].receivers.commodity[commIndex][fieldName] = fieldVaue;\n  //     } else {\n  //       this.shippersReceivers[shipperInd].receivers.commodity[commIndex][fieldName] = fieldVaue.target.value;\n  //     }\n  //   }\n  // }\n\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = \"\";\n\n    if (ext == \"doc\" || ext == \"docx\" || ext == \"xlsx\") {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\"https://docs.google.com/viewer?url=\" + val + \"&embedded=true\");\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  } // delete uploaded images and documents\n\n\n  delete(type, name, index) {\n    let record = {\n      eventID: this.getOrderID,\n      type: type,\n      name: name,\n      date: this.orderData.createdDate,\n      time: this.orderData.createdTime\n    }; // this.apiService.postData(`orders/uploadDelete`, record).subscribe((result: any) => {\n    // });\n\n    this.deletedFiles.push(record);\n    this.orderAttachments.splice(index, 1);\n  }\n\n  removePickUpPoint(i, w, obj) {\n    if (obj == \"shipper\") {\n      this.shippersReceivers[i].shippers.pickupPoint.splice(w, 1);\n    } else {\n      this.shippersReceivers[i].receivers.dropPoint.splice(w, 1);\n    }\n  }\n\n  getStates(countryCode, str, i, w) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      let states = yield _this22.countryStateCity.GetStatesByCountryCode([countryCode]);\n      let countryName = yield _this22.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n\n      if (str === \"shipper\") {\n        _this22.shippersReceivers[i].shippers.pickupPoint[w].address.countryName = countryName;\n        _this22.shippersReceivers[i].shippers.pickupPoint[w].address.states = states;\n      } else {\n        _this22.shippersReceivers[i].receivers.dropPoint[w].address.countryName = countryName;\n        _this22.shippersReceivers[i].receivers.dropPoint[w].address.states = states;\n      }\n    })();\n  }\n\n  getCities(stateCode, str, i, w) {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      if (str === \"shipper\") {\n        let countryCode = _this23.shippersReceivers[i].shippers.pickupPoint[w].address.countryCode;\n        let stateResult = yield _this23.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n        _this23.shippersReceivers[i].shippers.pickupPoint[w].address.stateName = stateResult;\n        let cities = yield _this23.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n        _this23.shippersReceivers[i].shippers.pickupPoint[w].address.cities = cities;\n      } else {\n        let countryCode = _this23.shippersReceivers[i].receivers.dropPoint[w].address.countryCode;\n        let stateResult = yield _this23.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n        _this23.shippersReceivers[i].receivers.dropPoint[w].address.stateName = stateResult;\n        let cities = yield _this23.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n        _this23.shippersReceivers[i].receivers.dropPoint[w].address.cities = cities;\n      }\n    })();\n  }\n\n  getAddressID(value, i, id) {\n    if (value === true) {\n      this.orderData.cusAddressID = id;\n\n      for (let index = 0; index < this.customerSelected[0].adrs.length; index++) {\n        const element = this.customerSelected[0].adrs[index];\n        element.isChecked = false;\n      }\n\n      this.customerSelected[0].adrs[i].isChecked = true;\n      let newCountCode = this.customerSelected[0].adrs[i].cCode;\n      this.changeCusCurrency(newCountCode);\n    }\n  }\n\n  changeModalValue() {\n    this.listService.changeButton(false);\n  }\n\n  shipperReceiverAddress(value, id) {\n    if (value === \"shipper\") {\n      this.shipAddresses = [];\n    } else {\n      this.receiverAddresses = [];\n    }\n\n    if (id != null) {\n      this.apiService.getData(`contacts/detail/${id}`).subscribe(res => {\n        if (value === \"shipper\") {\n          this.shipAddresses = [];\n\n          if (res.Items[0].adrs.length === 1 && (res.Items[0].adrs[0].add1 === \"\" || res.Items[0].adrs[0].add1 === null) && (res.Items[0].adrs[0].cCode === \"\" || res.Items[0].adrs[0].cCode === null)) {\n            this.shipAddresses = [];\n          } else {\n            this.shipAddresses = res.Items[0].adrs;\n          }\n        } else {\n          this.receiverAddresses = [];\n\n          if (res.Items[0].adrs.length === 1 && (res.Items[0].adrs[0].aType === \"\" || res.Items[0].adrs[0].aType === null) && (res.Items[0].adrs[0].cCode === \"\" || res.Items[0].adrs[0].cCode === null)) {\n            this.receiverAddresses = [];\n          } else {\n            this.receiverAddresses = res.Items[0].adrs;\n          }\n        }\n      });\n    }\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  fetchData(i, value) {\n    if (value === \"shipper\") {\n      if (this.shippersReceivers[i].shippers.shipperID != \"\" || this.shippersReceivers[i].shippers.shipperID != null) {\n        let id = this.shippersReceivers[i].shippers.shipperID;\n        this.shipperReceiverAddress(\"shipper\", id);\n      }\n\n      this.listService.fetchShippers();\n    } else if (value === \"receiver\") {\n      if (this.shippersReceivers[i].receivers.receiverID != \"\" || this.shippersReceivers[i].receivers.receiverID != null) {\n        let id = this.shippersReceivers[i].receivers.receiverID;\n        this.shipperReceiverAddress(\"\", id);\n      }\n\n      this.listService.fetchReceivers();\n    } else if (value === \"customer\") {\n      if (this.orderData.customerID != null) {\n        let id = this.orderData.customerID;\n        this.selectedCustomer(id);\n      }\n\n      this.listService.fetchCustomers();\n    }\n  }\n\n  cloneOrder(id) {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      _this24.apiService.getData(\"orders/\" + id).subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (result) {\n          result = result.Items[0];\n          _this24.orderData.cusAddressID = result.cusAddressID;\n          yield _this24.fetchStateTaxes();\n\n          let state = _this24.stateTaxes.find(o => o.stateTaxID == result.stateTaxID);\n\n          _this24.orderData.taxesInfo = [{\n            name: \"GST\",\n            amount: state ? state.GST : \"\"\n          }, {\n            name: \"HST\",\n            amount: state ? state.HST : \"\"\n          }, {\n            name: \"PST\",\n            amount: state ? state.PST : \"\"\n          }];\n          _this24.orderData[\"customerID\"] = result.customerID;\n\n          _this24.selectedCustomer(result.customerID);\n\n          if (result.attachments !== undefined && result.attachments.length > 0) {\n            _this24.orderAttachments = result.attachments.map(x => ({\n              path: `${_this24.Asseturl}/${result.carrierID}/${x}`,\n              name: x\n            }));\n          }\n\n          _this24.orderData[\"attachments\"] = result.attachments;\n          _this24.ifStatus = result.orderStatus;\n          _this24.orderData.orderStatus = \"created\";\n          _this24.orderData[\"zeroRated\"] = result.zeroRated;\n          _this24.orderData[\"additionalContact\"] = result.additionalContact;\n          _this24.orderData[\"createdDate\"] = result.createdDate;\n          _this24.orderData[\"createdTime\"] = result.createdTime;\n          _this24.isInvoiceGenerated = result.invoiceGenerate;\n          _this24.orderData[\"invoiceEmail\"] = result.invoiceEmail;\n          _this24.orderData[\"csa\"] = result.csa;\n          _this24.orderData[\"ctpat\"] = result.ctpat;\n          _this24.orderData[\"customerPO\"] = result.customerPO;\n          _this24.orderData[\"email\"] = result.email;\n          _this24.orderData[\"orderMode\"] = result.orderMode; // this.orderData[\"orderNumber\"] = result.orderNumber;\n          // this.getOrderNumber = result.orderNumber;\n\n          _this24.orderData[\"phone\"] = result.phone;\n          _this24.orderData[\"reference\"] = result.reference;\n          _this24.orderData[\"remarks\"] = result.remarks;\n          _this24.orderData.advance = result.advance;\n          _this24.orderData.milesInfo[\"totalMiles\"] = result.milesInfo.totalMiles;\n          _this24.orderData.milesInfo[\"calculateBy\"] = result.milesInfo.calculateBy;\n          _this24.orderData.stateTaxID = result.stateTaxID;\n          _this24.orderData[\"tripType\"] = result.tripType;\n          _this24.orderData.additionalDetails.sealNo = result.additionalDetails.sealNo;\n          _this24.orderData.additionalDetails.sealType = result.additionalDetails.sealType;\n          _this24.orderData.additionalDetails[\"trailerType\"] = result.additionalDetails.trailerType; // this.orderData.additionalDetails[\"loadType\"] =\n          //   result.additionalDetails.loadType;\n\n          _this24.orderData.additionalDetails[\"refeerTemp\"] = result.additionalDetails.refeerTemp;\n          _this24.orderData.shippersReceiversInfo = result.shippersReceiversInfo;\n          let shimentLength = result.shippersReceiversInfo.length;\n\n          _this24.addShipReceiveLength(shimentLength - 1);\n\n          _this24.finalShippersReceivers = result.shippersReceiversInfo;\n\n          _this24.shippersReceivers.forEach(elem => {\n            elem.shippers.isShow = false;\n            elem.receivers.isShow = false;\n          });\n\n          _this24.shipperReceiverMerge(); // let newLoadTypes = [];\n          // if (\n          //   result.additionalDetails.loadType &&\n          //   result.additionalDetails.loadType.length > 0\n          // ) {\n          //   for (let i = 0; i < result.additionalDetails.loadType.length; i++) {\n          //     newLoadTypes.push(result.additionalDetails.loadType[i]);\n          //   }\n          //   this.loadTypeData = newLoadTypes;\n          // }\n\n\n          _this24.orderData.charges.freightFee.amount = result.charges.freightFee.amount;\n          _this24.orderData.charges.freightFee.currency = result.charges.freightFee.currency;\n          _this24.orderData.charges.freightFee.type = result.charges.freightFee.type;\n          _this24.orderData.charges.fuelSurcharge.amount = result.charges.fuelSurcharge.amount;\n          _this24.orderData.charges.fuelSurcharge.currency = result.charges.fuelSurcharge.currency;\n          _this24.orderData.charges.fuelSurcharge.type = result.charges.fuelSurcharge.type;\n          let newAccessDeductions = [];\n\n          for (let i = 0; i < result.charges.accessorialDeductionInfo.accessorialDeduction.length; i++) {\n            newAccessDeductions.push({\n              type: result.charges.accessorialDeductionInfo.accessorialDeduction[i].type,\n              currency: result.charges.accessorialDeductionInfo.accessorialDeduction[i].currency,\n              amount: result.charges.accessorialDeductionInfo.accessorialDeduction[i].amount\n            });\n          }\n\n          _this24.accessorialDeductionInfo.accessDeductions = newAccessDeductions;\n          let newAccessFees = [];\n\n          for (let i = 0; i < result.charges.accessorialFeeInfo.accessorialFee.length; i++) {\n            newAccessFees.push({\n              type: result.charges.accessorialFeeInfo.accessorialFee[i].type,\n              amount: result.charges.accessorialFeeInfo.accessorialFee[i].amount,\n              currency: result.charges.accessorialFeeInfo.accessorialFee[i].currency\n            });\n          }\n\n          _this24.accessFeesInfo.accessFees = newAccessFees;\n          _this24.orderData.advance = result.amount;\n          _this24.orderData.discount.unit = result.discount.unit;\n          _this24.orderData[\"totalAmount\"] = result.totalAmount;\n          _this24.orderData.advance = result.advance;\n          _this24.existingUploadedDocs = result.uploadedDocs;\n\n          _this24.calculateAmount();\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  addPos(pos) {\n    this.cusPOs.push(pos.label);\n  }\n\n  removePos(pos) {\n    let index = this.cusPOs.indexOf(pos.label);\n    this.cusPOs.splice(index, 1);\n  }\n\n  validateConfirmation() {\n    if (this.orderData.cusConfirmation !== \"\") {\n      this.isConfirmExist = false;\n      this.submitDisabled = true;\n      this.orderData.cusConfirmation = this.orderData.cusConfirmation ? this.orderData.cusConfirmation.trim() : \"NA\";\n      this.apiService.getData(`orders/validate/confirm?value=${this.orderData.cusConfirmation}`).subscribe(result => {\n        if (result) {\n          this.isConfirmExist = true;\n          this.isConfirmData.orderNo = result.orderNo;\n          this.isConfirmData.cusConfirmation = result.cusConfirmation;\n          this.submitDisabled = false;\n        } else {\n          this.isConfirmExist = false;\n          this.submitDisabled = false;\n        }\n      });\n    }\n  }\n\n  getOrderPrefix() {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this25.apiService.getData(`carriers/get/showPrefix?type=${\"order\"}`).toPromise();\n\n      if (result && result.length > 0) {\n        _this25.orderData.orderNumber = `${result[0].prefix}${result[0].sequence}`;\n      }\n    })();\n  }\n\n};\n\nAddOrdersComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: NgbCalendar\n}, {\n  type: NgbDateAdapter\n}, {\n  type: HereMapService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: Router\n}, {\n  type: PdfAutomationService\n}, {\n  type: HttpClient\n}, {\n  type: ListService\n}, {\n  type: DomSanitizer\n}, {\n  type: Location\n}, {\n  type: CountryStateCityService\n}, {\n  type: RouteManagementServiceService\n}, {\n  type: DashboardUtilityService\n}];\n\nAddOrdersComponent = __decorate([Component({\n  selector: \"app-add-orders\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddOrdersComponent);\nexport { AddOrdersComponent };","map":null,"metadata":{},"sourceType":"module"}