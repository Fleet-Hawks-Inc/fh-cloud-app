{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-inventory.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-inventory.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService, ListService } from '../../../../services';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { from } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient } from '@angular/common/http';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet AddInventoryComponent = class AddInventoryComponent {\n  constructor(apiService, route, router, domSanitizer, toastr, httpClient, listService, countryStateCity) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.domSanitizer = domSanitizer;\n    this.toastr = toastr;\n    this.httpClient = httpClient;\n    this.listService = listService;\n    this.countryStateCity = countryStateCity;\n    this.Asseturl = this.apiService.AssetUrl;\n    /**\r\n     * form props\r\n     */\n\n    this.pageTitle = '';\n    this.itemID = '';\n    this.partNumber = '';\n    this.cost = 0;\n    this.tax = 0;\n    this.totalCost = 0;\n    this.costUnit = null;\n    this.quantity = 0;\n    this.itemName = '';\n    this.description = '';\n    this.category = null;\n    this.warehouseID = '';\n    this.costUnitType = null;\n    this.aisle = '';\n    this.row = '';\n    this.bin = '';\n    this.warehouseVendorID = null;\n    this.trackingQuantity = '';\n    this.reorderPoint = '';\n    this.reorderQuality = '';\n    this.leadTime = '';\n    this.preferredVendorID = '';\n    this.days = '';\n    this.time = '';\n    this.notes = '';\n    this.photos = [];\n    this.documents = [];\n    this.vendors = [];\n    this.warehouses = [];\n    this.existingPhotos = [];\n    this.existingDocs = [];\n    this.uploadedPhotos = [];\n    this.uploadedDocs = [];\n    this.inventoryDocs = [];\n    this.inventoryImages = [];\n    /**\r\n     * group props\r\n     */\n\n    this.groupName = '';\n    this.groupDescription = '';\n    this.groupForm = '';\n    this.hasGroupSuccess = false;\n    this.groupSuccess = '';\n    /**\r\n     * warehouse props\r\n     */\n\n    this.warehouseName = '';\n    this.countryName = '';\n    this.countryCode = '';\n    this.stateName = '';\n    this.stateCode = '';\n    this.cityName = '';\n    this.zipCode = '';\n    this.address = '';\n    this.warehoseForm = '';\n    this.hasWarehouseSuccess = false;\n    this.warehouseSuccess = '';\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('');\n    this.states = [];\n    this.cities = [];\n    this.errors = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.submitDisabled = false;\n    this.Error = '';\n    this.Success = '';\n    this.categories = [];\n    this.itemID = this.route.snapshot.params[`itemID`];\n    this.requiredItem = this.route.snapshot.params[`item`];\n\n    if (this.itemID) {\n      this.pageTitle = `Edit Inventory Part`;\n      this.getInventory();\n    } else {\n      this.pageTitle = `Add Inventory Part`;\n    }\n\n    if (this.requiredItem) {\n      this.pageTitle = `Add Inventory Part`;\n      this.getRequiredInventory();\n    }\n\n    this.disableButton();\n  }\n  /*\r\n  * Selecting files before uploading\r\n  */\n\n\n  selectDocuments(event, obj) {\n    let files = [...event.target.files];\n\n    if (obj === 'uploadedDocs') {\n      this.uploadedDocs = [];\n\n      for (let i = 0; i < files.length; i++) {\n        this.uploadedDocs.push(files[i]);\n      }\n    } else {\n      this.uploadedPhotos = [];\n\n      for (let i = 0; i < files.length; i++) {\n        this.uploadedPhotos.push(files[i]);\n      }\n    }\n  }\n\n  calculateAmount() {\n    this.totalCost = this.cost * this.quantity + this.tax;\n  }\n\n  getRequiredInventory() {\n    this.apiService.getData('items/required/' + this.requiredItem).subscribe(result => {\n      result = result.Items[0];\n      this.partNumber = result.partNumber;\n      this.quantity = result.quantity;\n      this.itemName = result.itemName;\n      this.description = result.description;\n      this.preferredVendorID = result.preferredVendorID;\n    });\n  }\n\n  getInventory() {\n    this.apiService.getData('items/' + this.itemID).subscribe(result => {\n      result = result.Items[0];\n      this.partNumber = result.partNumber;\n      this.cost = result.cost;\n      this.totalCost = result.totalCost;\n      this.tax = result.tax;\n      this.costUnit = result.costUnit;\n      this.costUnitType = result.costUnitType;\n      this.quantity = result.quantity;\n      this.itemName = result.itemName;\n      this.description = result.description;\n      this.category = result.category;\n      this.warehouseID = result.warehouseID;\n      this.aisle = result.aisle;\n      this.row = result.row;\n      this.bin = result.bin;\n      this.warehouseVendorID = result.warehouseVendorID;\n      this.trackingQuantity = result.trackingQuantity;\n      this.reorderPoint = result.reorderPoint;\n      this.reorderQuality = result.reorderQuality;\n      this.leadTime = result.leadTime;\n      this.preferredVendorID = result.preferredVendorID;\n      this.days = result.days;\n      this.time = result.time;\n      this.notes = result.notes;\n      this.warrantyTime = result.warrantyTime, this.warrantyUnit = result.warrantyUnit, this.existingPhotos = result.uploadedPhotos;\n      this.existingDocs = result.uploadedDocs;\n\n      if (result.uploadedPhotos !== undefined && result.uploadedPhotos.length > 0) {\n        this.inventoryImages = result.uploadedPics; // this.allImages = result.uploadedPhotos;\n        //this.inventoryImages = result.uploadedPhotos.map(x => ({ path: `${this.Asseturl}/${result.carrierID}/${x}`, name: x }));\n      }\n\n      if (result.uploadedDocs !== undefined && result.uploadedDocs.length > 0) {\n        this.inventoryDocs = result.uploadDocument; // this.alldocs = result.uploadedDocs;\n        //this.inventoryDocs = result.uploadedDocs.map(x => ({ path: `${this.Asseturl}/${result.carrierID}/${x}`, name: x }));\n      }\n    });\n  }\n  /*Delete upload */\n\n\n  delete(type, name, index) {\n    this.apiService.deleteData(`items/uploadDelete/${this.itemID}/${type}/${name}`).subscribe(result => {\n      this.getInventory();\n\n      if (type == 'doc') {\n        this.inventoryDocs.splice(index, 1);\n      } else {\n        this.inventoryImages.splice(index, 1);\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.listService.fetchVendors();\n    this.fetchWarehouses();\n    this.fetchCategories();\n    this.vendors = this.listService.vendorList;\n  }\n\n  fetchWarehouses() {\n    this.apiService.getData('items/get/warehouses').subscribe(result => {\n      this.warehouses = result.Items;\n    });\n  }\n\n  getStates(countryCode) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.stateCode = '';\n      _this.cityName = '';\n      _this.states = yield _this.countryStateCity.GetStatesByCountryCode([countryCode]);\n    })();\n  }\n\n  getCities(countryCode, stateCode) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.cityName = '';\n      _this2.countryName = yield _this2.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n      _this2.stateName = yield _this2.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      _this2.cities = yield _this2.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n    })();\n  }\n\n  showWarehoseModal() {\n    $('#warehouseModal').modal('show');\n  }\n\n  showCategoryModal() {\n    $('#categoryModal').modal('show');\n  }\n\n  fetchVendors() {\n    this.apiService.getData(`vendors`).subscribe(result => {\n      this.vendors = result.Items;\n    });\n  }\n\n  addInventory() {\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.submitDisabled = true;\n    this.hideErrors();\n\n    if (this.category !== null && this.category.label != undefined) {\n      this.category = this.category.label;\n    } else {\n      this.category = this.category;\n    }\n\n    const data = {\n      partNumber: this.partNumber,\n      cost: this.cost,\n      totalCost: this.totalCost,\n      costUnitType: this.costUnitType,\n      costUnit: this.costUnit,\n      tax: this.tax,\n      quantity: this.quantity,\n      itemName: this.itemName,\n      description: this.description,\n      category: this.category,\n      warehouseID: this.warehouseID,\n      aisle: this.aisle,\n      row: this.row,\n      bin: this.bin,\n      warehouseVendorID: this.warehouseVendorID,\n      days: this.days,\n      time: this.time,\n      notes: this.notes,\n      warrantyTime: this.warrantyTime,\n      warrantyUnit: this.warrantyUnit\n    }; // create form data instance\n\n    const formData = new FormData(); // append photos if any\n\n    for (let i = 0; i < this.uploadedPhotos.length; i++) {\n      formData.append('uploadedPhotos', this.uploadedPhotos[i]);\n    } // append docs if any\n\n\n    for (let j = 0; j < this.uploadedDocs.length; j++) {\n      formData.append('uploadedDocs', this.uploadedDocs[j]);\n    } // append other fields\n\n\n    formData.append('data', JSON.stringify(data));\n    this.apiService.postData('items/add/item', formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.hasError = true;\n            this.submitDisabled = false;\n            this.Error = 'Please see the errors';\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        if (res === true) {\n          this.toastr.error('Part number already exists,please edit the existing entry');\n        } else {\n          this.response = res;\n          this.hasSuccess = true;\n          this.partNumber = '';\n          this.cost = 0;\n          this.totalCost = 0;\n          this.tax = 0;\n          this.costUnit = null;\n          this.quantity = 0;\n          this.itemName = '';\n          this.description = '';\n          this.category = null;\n          this.warehouseID = '';\n          this.aisle = '';\n          this.row = '';\n          this.bin = '';\n          this.warehouseVendorID = '';\n          this.trackingQuantity = '';\n          this.reorderPoint = '';\n          this.reorderQuality = '';\n          this.leadTime = '';\n          this.preferredVendorID = '';\n          this.days = '';\n          this.time = '';\n          this.notes = '';\n          this.warrantyTime = '', this.warrantyUnit = '';\n          this.toastr.success('Inventory Added Successfully');\n          this.router.navigateByUrl('/fleet/inventory/list');\n\n          if (this.requiredItem) {\n            this.deleteRequiredItem(this.requiredItem);\n          }\n        }\n      }\n    });\n  }\n\n  deleteRequiredItem(requiredItem) {\n    // let record = {\n    //   eventID: requiredItem\n    // }\n    this.apiService.deleteData(`items/delete/required/item/${requiredItem}`).subscribe(result => {\n      this.toastr.success('Required Inventory Item Deleted Successfully!');\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  updateInventory() {\n    this.hasError = false;\n    this.submitDisabled = true;\n    this.hasSuccess = false;\n    this.hideErrors();\n\n    if (this.category !== null && this.category.label != undefined) {\n      this.category = this.category.label;\n    } else {\n      this.category = this.category;\n    }\n\n    const data = {\n      itemID: this.itemID,\n      partNumber: this.partNumber,\n      cost: this.cost,\n      costUnit: this.costUnit,\n      tax: this.tax,\n      totalCost: this.totalCost,\n      costUnitType: this.costUnitType,\n      quantity: this.quantity,\n      itemName: this.itemName,\n      description: this.description,\n      category: this.category,\n      warehouseID: this.warehouseID,\n      aisle: this.aisle,\n      row: this.row,\n      bin: this.bin,\n      warehouseVendorID: this.warehouseVendorID,\n      notes: this.notes,\n      warrantyTime: this.warrantyTime,\n      warrantyUnit: this.warrantyUnit,\n      uploadedPhotos: this.existingPhotos,\n      uploadedDocs: this.existingDocs\n    }; // create form data instance\n\n    const formData = new FormData(); // append photos if any\n\n    for (let i = 0; i < this.uploadedPhotos.length; i++) {\n      formData.append('uploadedPhotos', this.uploadedPhotos[i]);\n    } // append docs if any\n\n\n    for (let j = 0; j < this.uploadedDocs.length; j++) {\n      formData.append('uploadedDocs', this.uploadedDocs[j]);\n    } // append other fields\n\n\n    formData.append('data', JSON.stringify(data));\n    this.apiService.putData('items', formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        this.hasError = true;\n        this.Error = err.error;\n        this.submitDisabled = false;\n      },\n      next: res => {\n        if (res === true) {\n          this.toastr.error('Part number already exists,please edit the existing entry');\n        } else {\n          this.response = res;\n          this.toastr.success('Inventory Updated Successfully');\n          this.router.navigateByUrl('/fleet/inventory/list');\n        }\n      }\n    });\n  }\n\n  addWarehouse() {\n    this.hasWarehouseSuccess = false;\n    this.submitDisabled = true;\n    this.hideErrors();\n    const data = {\n      warehouseName: this.warehouseName,\n      countryCode: this.countryCode,\n      countryName: this.countryName,\n      stateCode: this.stateCode,\n      stateName: this.stateName,\n      cityName: this.cityName,\n      zipCode: this.zipCode,\n      address: this.address\n    };\n    this.apiService.postData('items/add/warehouse', data).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.hasWarehouseSuccess = true;\n        this.warehouseSuccess = 'Warehouse Added successfully';\n        this.warehouseName = '';\n        this.countryCode = '';\n        this.stateCode = '';\n        this.countryName = '';\n        this.stateName = '';\n        this.cityName = '';\n        this.zipCode = '';\n        this.address = '';\n        this.fetchWarehouses();\n        $('#warehouseModal').modal('hide');\n        this.toastr.success('Warehouse Added successfully');\n      }\n    });\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = '';\n\n    if (ext === 'doc' || ext === 'docx' || ext === 'xlsx') {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('https://docs.google.com/viewer?url=' + val + '&embedded=true');\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  }\n\n  setSrcValue() {\n    this.pdfSrc = '';\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem('isOpen', 'true');\n    this.listService.changeButton(false);\n  }\n\n  disableButton() {\n    if (this.partNumber == '' || this.costUnit == '' || this.costUnit == null || this.costUnitType == '' || this.costUnitType == null || this.category == '' || this.category == null || this.warehouseID == '' || this.warehouseID == null || this.warehouseVendorID == '' || this.warehouseVendorID == null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getWarehouses() {\n    this.fetchWarehouses();\n  }\n\n  getVendors() {\n    this.listService.fetchVendors();\n  }\n\n  fetchCategories() {\n    this.httpClient.get('assets/jsonFiles/inventory/category.json').subscribe(data => {\n      data.forEach(element => {\n        this.categories.push(element);\n      });\n    });\n  }\n\n};\n\nAddInventoryComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: DomSanitizer\n}, {\n  type: ToastrService\n}, {\n  type: HttpClient\n}, {\n  type: ListService\n}, {\n  type: CountryStateCityService\n}];\n\nAddInventoryComponent = __decorate([Component({\n  selector: 'app-add-inventory',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddInventoryComponent);\nexport { AddInventoryComponent };","map":null,"metadata":{},"sourceType":"module"}