{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./event-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./event-detail.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../services';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HereMapService } from '../../../../services/here-map.service';\nimport { SafetyService } from 'src/app/services/safety.service';\nimport spacetime from 'spacetime';\nlet EventDetailComponent = class EventDetailComponent {\n  constructor(apiService, safetyService, toastr, spinner, router, route, hereMap) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.safetyService = safetyService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.router = router;\n    this.route = route;\n    this.hereMap = hereMap;\n    this.asseturl = this.apiService.AssetUrl;\n    this.errors = {};\n    this.event = {\n      eventDate: '',\n      eventTime: '',\n      location: '',\n      criticalityType: '-'\n    };\n    this.eventImages = [];\n    this.eventVideos = [];\n    this.showMap = true;\n    this.eventID = '';\n    this.safetyNotes = [];\n    this.slideConfig = {\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      dots: true,\n      infinite: true,\n      autoplay: false,\n      variableWidth: true,\n      autoplaySpeed: 1500\n    };\n    this.slideConfig1 = {\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      dots: true,\n      infinite: true,\n      autoplay: false,\n      variableWidth: true,\n      autoplaySpeed: 1500\n    };\n    this.vehiclesObject = {};\n    this.driversObject = {};\n\n    this.setMarker = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (location) {\n        const cords = location.split(',');\n\n        if (cords.length > 0) {\n          const lat = cords[0];\n          const lng = cords[1];\n          const startIcon = new H.map.Icon(\"/assets/img/mapIcon/dest.png\", {\n            size: {\n              w: 30,\n              h: 30\n            }\n          });\n\n          _this.map.setCenter({\n            lat,\n            lng\n          });\n\n          const currentLoc = new H.map.Marker({\n            lat,\n            lng\n          }, {\n            icon: startIcon\n          });\n\n          _this.map.addObject(currentLoc);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    this.platform = this.hereMap.mapSetAPI();\n    this.map = this.hereMap.mapInit();\n    this.eventID = this.route.snapshot.params['eventID'];\n    this.fetchEventDetail();\n    this.fetchAllDriverIDs();\n    this.fetchAllVehiclesIDs();\n    this.mapShow();\n    $('#viewVideosModal').modal({\n      show: false\n    }).on('hidden.bs.modal', function () {\n      $(\"video\").each(function () {\n        this.pause();\n      });\n    });\n  }\n\n  fetchEventDetail() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.safetyService.getData('critical-events/detail/' + _this2.eventID).subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (res) {\n          let result = res[0];\n          _this2.deviceSerialNo = result.deviceSerialNo || 'NA';\n          _this2.vehicle = result.vehicleID;\n          _this2.trip = result.tripID;\n          _this2.assigned = result.assigned;\n          _this2.eventDate = result.eventDate;\n          _this2.eventSource = result.eventSource;\n          _this2.eventStartDateTime = result.eventStartDateTime;\n          _this2.eventEndDateTime = result.eventEndDateTime;\n          _this2.eventTime = yield _this2.convertTimeFormat(result.eventTime);\n          _this2.createdBy = result.createdBy;\n          _this2.eventType = result.eventType;\n          _this2.eventSpeed = parseInt(result.speed);\n          _this2.deviceEventId = result.deviceEventId;\n          _this2.location = result.location.label ? result.location.label : 'NA';\n\n          if (result.location.cords != undefined) {\n            yield _this2.setMarker(result.location.cords);\n          }\n\n          _this2.safetyNotes = result.safetyNotes;\n\n          if (result.uploadedPhotos != undefined && result.uploadedPhotos.length > 0) {\n            _this2.eventImages = result.uploadPics; // this.eventImages = result.uploadedPhotos.map(x => ({\n            //    path: `${this.asseturl}/${result.pk}/${x}`,\n            //    name: x,\n            //  }));\n          }\n\n          if (result.uploadedVideos != undefined && result.uploadedVideos.length > 0) {\n            _this2.eventVideos = result.uploadVideo; // this.eventVideos = result.uploadedVideos.map(x => ({\n            //    path: `${this.asseturl}/${result.pk}/${x}`,\n            //    name: x\n            //  }));\n          }\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  convertTimeFormat(time) {\n    // Check correct time format and split into components\n    time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n    if (time.length > 1) {\n      // If time format correct\n      time = time.slice(1); // Remove full string match value\n\n      time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM\n\n      time[0] = +time[0] % 12 || 12; // Adjust hours\n    }\n\n    return time.join(''); // return adjusted time or original string\n  }\n\n  mapShow() {\n    setTimeout(() => {\n      this.hereMap.mapSetAPI();\n      this.hereMap.mapInit();\n    }, 100);\n  }\n\n  getLocation(location) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cords = location.split(',');\n\n        if (cords.length == 2) {\n          const params = {\n            lat: cords[0].trim(),\n            lng: cords[1].trim()\n          };\n          const location = yield _this3.hereMap.revGeoCode(params);\n\n          if (location && location.items.length > 0) {\n            return location.items[0].title;\n          } else {\n            _this3.showMap = false;\n            return 'NA';\n          }\n        } else {\n          _this3.showMap = false;\n          return 'NA';\n        }\n      } catch (error) {\n        _this3.showMap = false;\n        return 'NA';\n      }\n    })();\n  }\n\n  fetchAllVehiclesIDs() {\n    this.apiService.getData('vehicles/get/list').subscribe(result => {\n      this.vehiclesObject = result;\n    });\n  }\n\n  fetchAllDriverIDs() {\n    this.apiService.getData('drivers/get/list').subscribe(result => {\n      this.driversObject = result;\n    });\n  }\n\n  addNotes() {\n    if (this.newNotes.trim().length > 0) {\n      let data = {\n        notes: this.newNotes,\n        eventID: this.eventID\n      };\n      this.safetyService.postData('critical-events/notes', data).subscribe(res => {\n        this.fetchEventDetail();\n        this.toastr.success('Notes added successfully');\n        this.newNotes = '';\n      });\n    }\n  }\n  /**\r\n   * Fetch Event Evidence only in case of Automatic events generated by DashCam\r\n   */\n\n\n  fetchEvidence() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this4.eventVideos = [];\n        const eventStartDate = spacetime(_this4.eventStartDateTime).format('numeric-cn');\n        const eventEndDate = spacetime(_this4.eventEndDateTime).format('numeric-cn');\n        const body = {\n          deviceSerialNo: _this4.deviceSerialNo,\n          startDateTime: `${eventStartDate} 00:00:00`,\n          endDateTime: `${eventEndDate} 23:59:59`,\n          deviceEventId: _this4.deviceEventId\n        };\n        const response = yield _this4.safetyService.postData('critical-events/fetchEvent', body).toPromise();\n\n        if (response && response.alarmFiles && response.alarmFiles.length > 0) {\n          for (const video of response.alarmFiles) {\n            const params = {\n              path: video.videoUrl,\n              name: video.alarmType\n            };\n\n            _this4.eventVideos.push(params);\n          }\n        } else {\n          _this4.toastr.error('Event Video not available. Please try again.');\n        }\n      } catch (error) {\n        _this4.toastr.error('Unable to fetch evidence.');\n      }\n    })();\n  }\n\n};\n\nEventDetailComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: SafetyService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: Router\n}, {\n  type: ActivatedRoute\n}, {\n  type: HereMapService\n}];\n\nEventDetailComponent = __decorate([Component({\n  selector: 'app-event-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], EventDetailComponent);\nexport { EventDetailComponent };","map":null,"metadata":{},"sourceType":"module"}