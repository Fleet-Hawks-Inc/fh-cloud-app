{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { ApiService } from \"./api.service\";\nimport { Subject, BehaviorSubject } from \"rxjs\";\nimport { AccountService } from \"src/app/services/account.service\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nlet ListService = class ListService {\n  constructor(apiService, accountService, modalService) {\n    this.apiService = apiService;\n    this.accountService = accountService;\n    this.modalService = modalService;\n    this.vendorDataSource = new BehaviorSubject([]);\n    this.vendorList = this.vendorDataSource.asObservable();\n    this.shipperDataSource = new BehaviorSubject([]);\n    this.shipperList = this.shipperDataSource.asObservable();\n    this.isTrueDataSource = new BehaviorSubject(false);\n    this.isTrueList = this.isTrueDataSource.asObservable();\n    this.shipperObjectDataSource = new BehaviorSubject([]);\n    this.shipperObjectList = this.shipperObjectDataSource.asObservable();\n    this.receiverObjectDataSource = new BehaviorSubject([]);\n    this.receiverObjectList = this.receiverObjectDataSource.asObservable();\n    this.receiverDataSource = new BehaviorSubject([]);\n    this.receiverList = this.receiverDataSource.asObservable();\n    this.manufacturerDataSource = new BehaviorSubject([]);\n    this.manufacturerList = this.manufacturerDataSource.asObservable();\n    this.modelDataSource = new BehaviorSubject([]);\n    this.modelList = this.modelDataSource.asObservable();\n    this.countryDataSource = new BehaviorSubject([]);\n    this.countryList = this.countryDataSource.asObservable();\n    this.stateDataSource = new BehaviorSubject([]);\n    this.stateList = this.stateDataSource.asObservable();\n    this.cityDataSource = new BehaviorSubject([]);\n    this.cityList = this.cityDataSource.asObservable();\n    this.assetManuDataSource = new BehaviorSubject([]);\n    this.assetManufacturesList = this.assetManuDataSource.asObservable();\n    this.assetModelsDataSource = new BehaviorSubject([]);\n    this.assetModelsList = this.assetModelsDataSource.asObservable();\n    this.ownerOperatorDataSource = new BehaviorSubject([]);\n    this.ownerOperatorList = this.ownerOperatorDataSource.asObservable();\n    this.serviceProgramDataSource = new BehaviorSubject([]);\n    this.serviceProgramList = this.serviceProgramDataSource.asObservable();\n    this.vehicleDataSource = new BehaviorSubject([]);\n    this.vehicleList = this.vehicleDataSource.asObservable();\n    this.driversDataSource = new BehaviorSubject([]);\n    this.driversList = this.driversDataSource.asObservable();\n    this.customersDataSource = new BehaviorSubject([]);\n    this.customersList = this.customersDataSource.asObservable();\n    this.issuesDataSource = new BehaviorSubject([]);\n    this.issuesList = this.issuesDataSource.asObservable();\n    this.tasksDataSource = new BehaviorSubject([]);\n    this.tasksList = this.tasksDataSource.asObservable();\n    this.assetsDataSource = new BehaviorSubject([]);\n    this.assetsList = this.assetsDataSource.asObservable();\n    this.accountsDataSource = new BehaviorSubject([]);\n    this.accountsList = this.accountsDataSource.asObservable();\n    this.addressDataSource = new BehaviorSubject([]);\n    this.addressList = this.addressDataSource.asObservable();\n    this.docModalSource = new BehaviorSubject([]);\n    this.docModalList = this.docModalSource.asObservable();\n    this.getDocsModalSource = new BehaviorSubject([]);\n    this.getDocsModalList = this.getDocsModalSource.asObservable();\n    this.paymentModelDataSource = new BehaviorSubject([]);\n    this.paymentModelList = this.paymentModelDataSource.asObservable();\n    this.otherModelDataSource = new BehaviorSubject([]);\n    this.otherModelList = this.otherModelDataSource.asObservable();\n    this.paymentSaveDataSource = new BehaviorSubject([]);\n    this.paymentSaveList = this.paymentSaveDataSource.asObservable();\n    this.contactsObjectDataSource = new BehaviorSubject([]);\n    this.contactsList = this.contactsObjectDataSource.asObservable();\n    this.paymentPdfObjDataSource = new BehaviorSubject([]);\n    this.paymentPdfList = this.paymentPdfObjDataSource.asObservable();\n    this.brokeragePdfDataSource = new BehaviorSubject([]);\n    this.brokeragePdfList = this.brokeragePdfDataSource.asObservable();\n    this.bolPdfDataSource = new BehaviorSubject([]);\n    this.bolPdfList = this.bolPdfDataSource.asObservable();\n    this.settlementDetailsDataSource = new BehaviorSubject([]);\n    this.settlementDetails = this.settlementDetailsDataSource.asObservable();\n    this._subject = new BehaviorSubject({});\n    this.popup = new Subject();\n  }\n\n  fetchVendors() {\n    this.apiService.getData(\"contacts/get/type/vendor\").subscribe(result => {\n      this.vendorDataSource.next(result);\n    });\n  }\n\n  fetchShippers() {\n    this.apiService.getData(\"contacts/get/type/consignor\").subscribe(result => {\n      this.shipperDataSource.next(result);\n    });\n  }\n\n  fetchReceivers() {\n    this.apiService.getData(\"contacts/get/type/consignee\").subscribe(result => {\n      this.receiverDataSource.next(result);\n    });\n  }\n\n  fetchCountries() {\n    this.apiService.getData(\"countries\").subscribe(result => {\n      this.countryDataSource.next(result.Items);\n    });\n  }\n\n  fetchStates() {\n    this.apiService.getData(`states`).subscribe(result => {\n      this.stateDataSource.next(result.Items);\n    });\n  }\n\n  fetchCities() {\n    this.apiService.getData(`cities`).subscribe(result => {\n      this.cityDataSource.next(result.Items);\n    });\n  }\n\n  fetchOwnerOperators() {\n    this.apiService.getData(`contacts/get/type/ownerOperator`).subscribe(result => {\n      this.ownerOperatorDataSource.next(result);\n    });\n  }\n\n  fetchServicePrograms() {\n    this.apiService.getData('servicePrograms').subscribe(result => {\n      this.serviceProgramDataSource.next(result);\n    });\n  }\n\n  fetchVehicles() {\n    this.apiService.getData(`vehicles`).subscribe(result => {\n      this.vehicleDataSource.next(result.Items);\n    });\n  }\n\n  fetchDrivers() {\n    this.apiService.getData(`drivers`).subscribe(result => {\n      this.driversDataSource.next(result.Items);\n    });\n  }\n\n  fetchCustomers() {\n    this.apiService.getData(`contacts/fetch/order/customers`).subscribe(result => {\n      this.customersDataSource.next(result);\n    });\n  }\n  /*\r\n   * Get all taskList\r\n   */\n\n\n  fetchTasks() {\n    this.apiService.getData(`tasks?type=service`).subscribe(result => {\n      this.tasksDataSource.next(result);\n    });\n  }\n\n  fetchVehicleIssues(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let promise = yield _this.apiService.getData(`issues/vehicle/${id}`).toPromise();\n      let newIssues = [];\n      promise.filter(elem => {\n        if (elem.currentStatus == \"OPEN\") {\n          newIssues.push(elem);\n        }\n      });\n\n      _this.issuesDataSource.next(newIssues);\n    })();\n  }\n\n  fetchAssetsIssues(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let promise = yield _this2.apiService.getData(`issues/asset/${id}`).toPromise();\n      let newIssues = [];\n      promise.filter(elem => {\n        if (elem.currentStatus == \"OPEN\") {\n          newIssues.push(elem);\n        }\n      });\n\n      _this2.issuesDataSource.next(newIssues);\n    })();\n  }\n\n  fetchAssets() {\n    this.apiService.getData(`assets`).subscribe(result => {\n      this.assetsDataSource.next(result.Items);\n    });\n  }\n\n  appendIssues(data) {\n    this._subject.next(data);\n\n    this.fetchAppendIssues();\n  }\n\n  fetchAppendIssues() {\n    return this._subject.asObservable();\n  } // fetch accounts of chart of accounts\n\n\n  fetchChartAccounts() {\n    this.accountService.getData(\"chartAc/fetch/list\").subscribe(res => {\n      this.accountsDataSource.next(res);\n    });\n  }\n\n  fetchShippersByIDs() {\n    this.apiService.getData(\"contacts/get/list/consignor\").subscribe(result => {\n      this.shipperObjectDataSource.next(result);\n    });\n  }\n\n  fetchReceiversByIDs() {\n    this.apiService.getData(\"contacts/get/list/consignee\").subscribe(result => {\n      this.receiverObjectDataSource.next(result);\n    });\n  }\n\n  fetchContactsByIDs() {\n    this.apiService.getData(\"contacts/get/list\").subscribe(result => {\n      this.contactsObjectDataSource.next(result);\n    });\n  }\n\n  changeButton(value) {\n    this.isTrueDataSource.next(value);\n  }\n\n  triggerModal(value) {\n    this.addressDataSource.next(value);\n  }\n\n  openDocTypeMOdal(value) {\n    this.docModalSource.next(value);\n  }\n\n  getAllDocs(value) {\n    this.getDocsModalSource.next(value);\n  }\n\n  openPaymentChequeModal(value) {\n    this.paymentModelDataSource.next(value);\n  }\n\n  triggerPaymentSave(value) {\n    this.paymentSaveDataSource.next(value);\n  }\n\n  separateModals(value) {\n    this.otherModelDataSource.next(value);\n  }\n\n  triggerDownloadPaymentPdf(value) {\n    this.paymentPdfObjDataSource.next(value);\n  }\n\n  triggerBrokeragePdf(value) {\n    this.brokeragePdfDataSource.next(value);\n  }\n\n  triggerBolPdf(value) {\n    this.bolPdfDataSource.next(value);\n  }\n\n  showSettlementsDetailPreview(value) {\n    this.settlementDetailsDataSource.next(value);\n  }\n\n};\n\nListService.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: AccountService\n}, {\n  type: NgbModal\n}];\n\nListService = __decorate([Injectable({\n  providedIn: \"root\"\n})], ListService);\nexport { ListService };","map":null,"metadata":{},"sourceType":"module"}