{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-trip.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-trip.component.css\";\nimport { Component, ElementRef, ViewChild } from \"@angular/core\";\nimport { moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport { ApiService } from \"../../../../services\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { from, Subject, throwError } from \"rxjs\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { HereMapService } from \"../../../../services/here-map.service\";\nimport Constant from \"src/app/pages/fleet/constants\";\nimport { SelectionType, ColumnMode } from \"@swimlane/ngx-datatable\";\nimport { debounceTime, distinctUntilChanged, switchMap, catchError } from \"rxjs/operators\";\nimport { Auth } from \"aws-amplify\";\nimport * as moment from \"moment\";\nimport { Location } from \"@angular/common\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { RouteManagementServiceService } from \"src/app/services/route-management-service.service\";\nlet AddTripComponent = class AddTripComponent {\n  constructor(apiService, modalService, route, router, toastr, spinner, location, hereMap, countryStateCity, el, // public selectionType: SelectionType, // public columnMode: ColumnMode,\n  routeMnagementSvc) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.modalService = modalService;\n    this.route = route;\n    this.router = router;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.location = location;\n    this.hereMap = hereMap;\n    this.countryStateCity = countryStateCity;\n    this.el = el;\n    this.routeMnagementSvc = routeMnagementSvc;\n    this.orderModalRef = undefined;\n    this.newCoords = [];\n    this.actualMiles = 0;\n    this.selectedVehicleSpecs = [];\n    this.optionalSpec = {\n      height: 400\n    };\n    this.searchTerm = new Subject();\n    this.carriers = [];\n    this.routes = [];\n    this.orderMiles = {\n      calculateBy: \"manual\",\n      totalMiles: 0\n    };\n    this.isLoading = false;\n    this.permanentRoutes = [];\n    this.errors = {};\n    this.trips = [];\n    this.vehicles = [];\n    this.assets = [];\n    this.drivers = [];\n    this.codrivers = [];\n    this.tripData = {\n      tripNo: \"\",\n      orderNo: \"\",\n      routeID: null,\n      bol: \"\",\n      reeferTemperature: \"\",\n      reeferTemperatureUnit: null,\n      orderId: [],\n      orderType: \"FTL\",\n      tripPlanning: [],\n      notifications: {\n        changeRoute: false,\n        pickUp: false,\n        dropOff: false,\n        tripToDriver: false,\n        tripToDispatcher: false\n      },\n      tripStatus: \"confirmed\",\n      dateCreated: \"\",\n      driverIDs: [],\n      vehicleIDs: [],\n      assetIDs: [],\n      stlStatus: [],\n      carrierIDs: [],\n      loc: \"\",\n      mapFrom: \"order\",\n      iftaMiles: [],\n      split: [],\n      stlLink: false\n    };\n    this.ltlOrders = [];\n    this.ftlOrders = [];\n    this.selectedAssets = [];\n    this.OrderIDs = [];\n    this.temporaryOrderIDs = [];\n    this.temporaryOrderNumber = [];\n    this.typeOptions = [\"Start\", \"Pickup\", \"Delivery\", \"Stop\", \"Enroute\", \"Relay\", \"Switch\", \"Yard\"];\n    this.ftlOptions = {};\n    this.ltlOptions = {};\n    this.assetModalData = {};\n    this.textFieldValues = {\n      type: null,\n      orderID: null,\n      commodity: null,\n      date: null,\n      pickupTime: null,\n      dropTime: null,\n      actualPickupTime: null,\n      actualDropTime: null,\n      name: \"\",\n      locData: {},\n      mileType: null,\n      miles: 0,\n      vehicleName: \"\",\n      vehicleID: \"\",\n      driverName: \"\",\n      driverUsername: \"\",\n      coDriverName: \"\",\n      coDriverUsername: \"\",\n      carrierName: \"\",\n      carrierID: null,\n      trailer: {},\n      trailerName: \"\",\n      driverID: \"\",\n      coDriverID: \"\",\n      locationName: \"\",\n      locMan: false,\n      milesMan: false,\n      lat: \"\",\n      lng: \"\"\n    };\n    this.tempTextFieldValues = {\n      trailer: [],\n      coDriverUsername: \"\",\n      driverUsername: \"\",\n      vehicleID: \"\",\n      driverID: \"\",\n      coDriverID: \"\"\n    };\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.tempLocation = {\n      countryID: \"\",\n      countryName: \"\",\n      stateID: \"\",\n      stateName: \"\",\n      cityID: \"\",\n      cityName: \"\",\n      address1: \"\",\n      address2: \"\",\n      zipcode: \"\",\n      locationName: \"\",\n      type: \"\",\n      index: \"\"\n    };\n    this.response = \"\";\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = \"\";\n    this.Success = \"\";\n    this.mapView = false; // edit loc variables\n\n    this.selectedLocationCountryId = \"\";\n    this.selectedLocationStateId = \"\";\n    this.selectedLocationCityId = \"\";\n    this.selectedLocationAddress1 = \"\";\n    this.selectedLocationAddress2 = \"\";\n    this.selectedLocationAddress3 = \"\";\n    this.assetDataVehicleID = null;\n    this.assetDataDriverUsername = null;\n    this.assetDataCoDriverUsername = null;\n    this.informationAsset = [];\n    this.allFetchedOrders = [];\n    this.shippersObjects = [];\n    this.receiversObjects = [];\n    this.ordersPlan = [];\n    this.customersObjects = [];\n    this.orderNo = \"\";\n    this.tripID = \"\";\n    this.pageTitle = \"\";\n    this.driversObjects = [];\n    this.assetsObjects = [];\n    this.vehiclesObjects = [];\n    this.carriersObject = [];\n    this.currentUser = \"\";\n    this.OldOrderIDs = [];\n    this.dateCreated = moment().format(\"YYYY-MM-DD\");\n    this.mapOrderActive = \"active\";\n    this.mapRouteActive = \"\";\n    this.mapOrderActiveDisabled = false;\n    this.mapRouteActiveDisabled = false;\n    this.submitDisabled = false;\n    this.orderStops = [];\n    this.isEdit = false;\n    this.tripNoDisabled = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.splitArr = [];\n    this.locObj = {\n      addr: \"\",\n      cCode: null,\n      sCode: null,\n      cName: \"\",\n      sName: \"\",\n      ctName: null,\n      zipCode: \"\",\n      type: \"\",\n      index: \"\"\n    };\n    this.locDisabled = false;\n    this.dummySplitArr = [];\n    this.disableSplit = false;\n    this.assetData = {\n      assetIdentification: \"\",\n      isTemp: true\n    };\n    this.lastFtLOrderSK = \"\";\n    this.lastLtlOrderSK = \"\";\n    this.dataMessage = \"\";\n    this.vehicleMessage = \"\";\n    this.assetMessage = \"\";\n    this.driverMessage = \"\";\n    this.loaded = false;\n    this.rowHeight = 60;\n    this.headerHeight = 50;\n    this.pageLimit = 10;\n    this.selectedFTL = [];\n    this.selectedLTL = [];\n    this.SelectionType = SelectionType;\n    this.ColumnMode = ColumnMode;\n    this.orderSearch = \"\";\n    this.activeTab = \"\";\n    this.searchOrder = \"\";\n    this.recalledState = false;\n    this.planOrderData = [];\n    this.planComm = [];\n    this.currentCarrID = \"\";\n    this.tripsObject = {};\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.currentCarrID = localStorage.getItem('xfhCarrierId');\n      _this.currentUser = localStorage.getItem(\"currentUserName\");\n    });\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.tripID = _this2.route.snapshot.params[\"tripID\"];\n\n      if (_this2.tripID != undefined) {\n        _this2.pageTitle = \"Edit Trip\";\n      } else {\n        _this2.pageTitle = \"Add Trip\";\n      }\n\n      _this2.route.queryParams.subscribe(params => {\n        const recallStatus = params.state;\n\n        if (recallStatus) {\n          _this2.recalledState = true;\n        }\n      });\n\n      _this2.route.queryParams.subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (params) {\n          _this2.orderId = params.orderId;\n          _this2.orderNum = params.orderNum;\n\n          if (_this2.orderId != undefined) {\n            yield _this2.fetchOrderDetails([_this2.orderId]);\n\n            _this2.changeMapRoute('order');\n\n            _this2.temporaryOrderIDs.push(_this2.orderId);\n\n            _this2.temporaryOrderNumber.push(_this2.orderNum);\n\n            yield _this2.fetchFTLOrders();\n            yield _this2.fetchLTLOrders();\n            yield _this2.saveSelectOrderIDS();\n          }\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n\n      _this2.fetchCarriers();\n\n      _this2.orderFTLInit();\n\n      _this2.mapShow();\n\n      _this2.searchLocation();\n\n      _this2.getCurrentuser();\n\n      _this2.fetchVehicles();\n\n      _this2.fetchAssets();\n\n      _this2.fetchDrivers();\n\n      yield _this2.fetchCountries();\n\n      if (_this2.tripID != undefined) {\n        _this2.fetchTripDetail();\n      }\n    })();\n  }\n\n  dropdownOpen() {\n    $(\".table-responsive\").css(\"overflow\", \"inherit\");\n  }\n\n  dropdownClose() {\n    $(\".table-responsive\").css(\"overflow\", \"auto\");\n  }\n\n  fetchDriverStatus(driverID) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this3.apiService.getData(`drivers/status/${_this3.tripID}/${driverID}`).toPromise();\n      return result.status.toUpperCase();\n    })();\n  }\n\n  fetchCarriers() {\n    this.apiService.getData(\"contacts/get/type/carrier\").subscribe(result => {\n      // this.carriers = result;\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.carriers.push(element);\n        }\n      });\n      this.carriersObject = result.reduce((a, b) => {\n        return a[b[\"contactID\"]] = b[\"isDeleted\"] == 1 ? b[\"companyName\"] + \"  - Deleted\" : b[\"companyName\"], a;\n      }, {});\n    });\n  }\n\n  drop(event) {\n    this.ArrayShuffle(this.trips, event.previousIndex, event.currentIndex);\n    moveItemInArray(this.trips, event.previousIndex, event.currentIndex);\n  }\n\n  ArrayShuffle(array, previousIndex, currentIndex) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var prevValOnIndex = array[previousIndex];\n      var newArr = [];\n      let locations = [];\n      var j = 0;\n\n      for (const i of array) {\n        if (currentIndex === j) {\n          yield newArr.push(prevValOnIndex);\n          j = j + 1;\n        } else {\n          yield newArr.push(array[j]);\n          j = j + 1;\n        }\n      }\n\n      newArr.map(function (v) {\n        if (v.locationName != undefined && v.locationName != \"\") {\n          if (v.milesMan === false || v.milesMan === undefined) {\n            v.miles = 0;\n          }\n\n          locations.push(v.locationName);\n        }\n      });\n\n      if (locations.length > 0) {\n        _this4.resetMap();\n      }\n\n      _this4.actualMiles = 0;\n\n      _this4.getMiles();\n    })();\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  goBack() {\n    this.router.navigate([`/dispatch/trips/trip-list/${this.routeMnagementSvc.tripUpdated()}`]);\n  }\n\n  addRow() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.textFieldValues.type !== null && _this5.textFieldValues.locationName !== \"\" && _this5.textFieldValues.date !== null && _this5.textFieldValues.name !== \"\" && _this5.textFieldValues.mileType !== null) {\n        if (_this5.trips.length > 0) {\n          if (!_this5.textFieldValues.milesMan) {\n            let endingPoint = _this5.textFieldValues[\"lng\"] + \",\" + _this5.textFieldValues[\"lat\"];\n            yield _this5.getSingleRowMiles(endingPoint, _this5.trips.length);\n          }\n        }\n\n        _this5.textFieldValues[`planID`] = uuidv4();\n        _this5.textFieldValues[`splitDone`] = false;\n        let commName = \"\";\n\n        _this5.textFieldValues.commodity.forEach((cm, index) => {\n          commName += cm.trim();\n\n          if (index < _this5.textFieldValues.commodity.length - 1) {\n            commName += \", \";\n          }\n        });\n\n        _this5.planOrderData.map(v => {\n          if (v.orderID === _this5.textFieldValues.orderID) {\n            _this5.textFieldValues[\"orderNo\"] = v.orderNo;\n          }\n        });\n\n        _this5.textFieldValues[\"commName\"] = commName; // planOrderData\n\n        _this5.trips.push(_this5.textFieldValues);\n\n        _this5.disableSplit = false;\n        _this5.textFieldValues = {\n          orderID: null,\n          commodity: null,\n          type: null,\n          date: null,\n          pickupTime: null,\n          dropTime: null,\n          actualPickupTime: null,\n          actualDropTime: null,\n          name: \"\",\n          locData: {},\n          locationName: \"\",\n          lat: \"\",\n          lng: \"\",\n          mileType: null,\n          miles: 0,\n          vehicleName: \"\",\n          vehicleID: \"\",\n          driverName: \"\",\n          driverUsername: \"\",\n          coDriverName: \"\",\n          coDriverUsername: \"\",\n          carrierName: \"\",\n          carrierID: null,\n          trailer: {},\n          trailerName: \"\",\n          driverID: \"\",\n          coDriverID: \"\",\n          locMan: false,\n          milesMan: false\n        };\n\n        _this5.emptyAssetModalFields();\n\n        _this5.selectedAssets = [];\n        let locations = [];\n\n        for (let k = 0; k < _this5.trips.length; k++) {\n          const element = _this5.trips[k];\n\n          if (element.locationName != \"\" && element.locationName != undefined) {\n            locations.push(element.locationName);\n          }\n        }\n\n        if (locations.length > 1) {\n          _this5.resetMap();\n        }\n\n        _this5.getMilesTotal();\n      } else {\n        _this5.toastr.error(\"Please fill the required fields\");\n\n        return false;\n      }\n    })();\n  }\n\n  delRow(index) {\n    let planID = this.trips[index].planID;\n    this.trips.splice(index, 1);\n    this.splitArr.map(v => {\n      v.map(k => {\n        if (planID === k.planID) {\n          const ind = v.indexOf(k.planID);\n          v.splice(ind, 1);\n        }\n      });\n    });\n    let locations = [];\n\n    for (const tripp of this.trips) {\n      if (tripp.locationName != undefined && tripp.locationName != \"\") {\n        locations.push(tripp.locationName);\n      }\n    }\n\n    if (locations.length > 0) {\n      this.actualMiles = 0;\n      this.getMiles();\n    }\n  }\n\n  emptyAssetModalFields() {\n    // empty the values of asset modal and temp_text_fields after adding\n    this.tempTextFieldValues.vehicleName = \"\";\n    this.tempTextFieldValues.vehicleID = null;\n    this.tempTextFieldValues.trailer = [];\n    this.tempTextFieldValues.driverName = \"\";\n    this.tempTextFieldValues.driverUsername = \"\";\n    this.tempTextFieldValues.coDriverName = \"\";\n    this.tempTextFieldValues.coDriverUsername = \"\";\n    this.tempTextFieldValues.trailerName = \"\";\n    this.emptyAsigneeModal();\n  }\n\n  showEditRow(index) {\n    let editRowValues = this.trips[index];\n\n    if (this.trips[index].driverID == undefined) {\n      this.trips[index].driverID = \"\";\n    }\n\n    if (this.trips[index].coDriverID == undefined) {\n      this.trips[index].coDriverID = \"\";\n    }\n\n    if (this.trips[index].vehicleID == undefined) {\n      this.trips[index].vehicleID = \"\";\n    }\n\n    if (this.trips[index].assetID == undefined) {\n      this.trips[index].assetID = [];\n    }\n\n    if (this.trips[index].driverID === \"\" && this.trips[index].coDriverID === \"\" && this.trips[index].vehicleID === \"\" && this.trips[index].assetID.length === 0) {\n      this.trips[index].disablecarr = false;\n    } else {\n      this.trips[index].disablecarr = true;\n    }\n\n    $(\"#editCell1\" + index).val(editRowValues.type);\n    $(\"#editCell5\" + index).val(editRowValues.mileType);\n    $(\"#editCell11\" + index).val(editRowValues.carrierID);\n    $(\"#editCell4\" + index).val(editRowValues.locationName);\n    $(\".labelRow\" + index).css(\"display\", \"none\");\n    $(\".editRow\" + index).removeClass(\"rowStatus\");\n  }\n\n  editRow(index) {\n    if ($(\"#editCell3\" + index).val() != \"\" && $(\"#editCell3\" + index).val() != null && $(\"#editCell3\" + index).val() != undefined) {\n      this.trips[index].name = $(\"#editCell3\" + index).val();\n    }\n\n    let commName = \"\";\n\n    if (this.trips[index].commodity) {\n      this.trips[index].commodity.forEach((cm, index) => {\n        commName += cm.trim();\n\n        if (index < this.trips[index].commodity.length - 1) {\n          commName += \", \";\n        }\n      });\n    }\n\n    this.trips[index].commName = commName;\n    this.trips[index].miles = $(\"#editCell6\" + index).val();\n    this.trips[index].time = $(\"#editCell12\" + index).val();\n    this.trips[index].pickupTime = $(\"#editCell13\" + index).val();\n    this.trips[index].dropTime = $(\"#editCell14\" + index).val();\n    this.trips[index].actualPickupTime = $(\"#editCell15\" + index).val();\n    this.trips[index].actualDropTime = $(\"#editCell16\" + index).val();\n    $(\".labelRow\" + index).css(\"display\", \"\");\n    $(\".editRow\" + index).addClass(\"rowStatus\");\n    this.getVehicles();\n    this.getMilesTotal();\n  }\n\n  closeEditRow(index) {\n    $(\".labelRow\" + index).css(\"display\", \"\");\n    $(\".editRow\" + index).addClass(\"rowStatus\");\n  }\n\n  fetchRoutes() {\n    if (this.permanentRoutes.length === 0) {\n      this.spinner.show();\n      this.apiService.getData(\"routes\").subscribe({\n        complete: () => {},\n        error: () => {},\n        next: result => {\n          this.spinner.hide();\n          this.permanentRoutes = result[\"Items\"];\n        }\n      });\n    }\n  }\n\n  mapShow() {\n    this.hereMap.mapSetAPI();\n    this.hereMap.mapInit();\n  }\n\n  showMOdal() {\n    let ngbModalOptions = {\n      keyboard: true,\n      windowClass: \"trip-assignment--modal\"\n    };\n    this.orderModalRef = this.modalService.open(this.orderModal, ngbModalOptions);\n    this.fetchFTLOrders();\n    this.fetchLTLOrders();\n  }\n\n  emptyAsigneeModal() {\n    this.assetDataVehicleID = null;\n    this.informationAsset = [];\n    this.assetDataDriverUsername = null;\n    this.assetDataCoDriverUsername = null;\n    $(\".vehicleClass\").removeClass(\"td_border\");\n    $(\".assetClass\").removeClass(\"td_border\");\n    $(\".driverClass\").removeClass(\"td_border\");\n    $(\".codriverClass\").removeClass(\"td_border\");\n  }\n\n  showAssetModal(type, index) {\n    this.emptyAsigneeModal();\n\n    if (type === \"add\") {\n      if (this.textFieldValues.carrierID == \"\" || this.textFieldValues.carrierID == null) {\n        this.tempTextFieldValues.type = \"add\";\n        this.tempTextFieldValues.index = \"\";\n        this.openTripAssignModel(); // $('#assetModal').modal('show');\n      } else {\n        return false;\n      }\n    } else {\n      if ($(\"#editCell11\" + index).val() !== \"\") {\n        return false;\n      } else {\n        this.tempTextFieldValues.type = \"edit\";\n        this.tempTextFieldValues.index = index;\n        let editRowValues = this.trips[index];\n        this.assetDataVehicleID = editRowValues.vehicleID;\n        this.informationAsset = [];\n        this.assetDataDriverUsername = editRowValues.driverUsername;\n        this.assetDataCoDriverUsername = editRowValues.coDriverUsername; // set temp fields value\n\n        this.tempTextFieldValues.vehicleName = editRowValues.vehicleName;\n        this.tempTextFieldValues.vehicleID = editRowValues.vehicleID;\n        this.tempTextFieldValues.driverID = editRowValues.driverID;\n        this.tempTextFieldValues.coDriverID = editRowValues.coDriverID;\n        this.tempTextFieldValues.driverName = editRowValues.driverName;\n        this.tempTextFieldValues.driverUsername = editRowValues.driverUsername;\n        this.tempTextFieldValues.coDriverName = editRowValues.coDriverName;\n        this.tempTextFieldValues.coDriverUsername = editRowValues.coDriverUsername;\n        this.tempTextFieldValues.trailerName = editRowValues.trailerName;\n        this.openTripAssignModel();\n        setTimeout(() => {\n          $(\"#veh_\" + editRowValues.vehicleID).addClass(\"td_border\");\n          $(\"#drivr_\" + editRowValues.driverID).addClass(\"td_border\");\n          $(\"#codrivr_\" + editRowValues.coDriverID).addClass(\"td_border\"); // set selected asset values\n\n          if (editRowValues.trailer != undefined) {\n            for (let i = 0; i < editRowValues.trailer.length; i++) {\n              const element = editRowValues.trailer[i];\n              this.informationAsset = [...this.informationAsset, element.id];\n              let objj = {\n                id: element.id,\n                name: element.name\n              };\n              this.tempTextFieldValues.trailer.push(objj);\n              $(\"#asset_\" + element.id).addClass(\"td_border\");\n            }\n          }\n        }, 1000); // $('#assetModal').modal('show');\n      }\n    }\n  }\n\n  selectOrderIDS(type) {\n    this.temporaryOrderIDs = [];\n    this.temporaryOrderNumber = [];\n    let current = this;\n\n    if (type === \"ftl\") {\n      $('input[name=\"ltlOrderIds\"]').prop(\"checked\", false);\n      $('input[name=\"checkUncheckltl\"]').prop(\"checked\", false);\n      $('input[name=\"ftlOrderIds\"]:checked').each(function () {\n        $('input[name=\"checkUncheckftl\"]').prop(\"checked\", true);\n        current.temporaryOrderIDs.push(this.id);\n        current.temporaryOrderNumber.push(this.value);\n      });\n    } else if (type === \"ltl\") {\n      $('input[name=\"ftlOrderIds\"]').prop(\"checked\", false);\n      $('input[name=\"checkUncheckftl\"]').prop(\"checked\", false);\n      $('input[name=\"ltlOrderIds\"]:checked').each(function () {\n        $('input[name=\"checkUncheckltl\"]').prop(\"checked\", true);\n        current.temporaryOrderIDs.push(this.id);\n        current.temporaryOrderNumber.push(this.value);\n      });\n    }\n  }\n\n  saveSelectOrderIDS() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.OrderIDs = _this6.temporaryOrderIDs;\n\n      if (_this6.orderModalRef) {\n        _this6.orderModalRef.close();\n      }\n\n      _this6.orderNo = _this6.temporaryOrderNumber.toString();\n      let tripPlans = [];\n      let current = _this6;\n      let totalMilesOrder = 0;\n      let calculateBy = \"\";\n      _this6.orderStops = [];\n\n      if (_this6.activeTab == \"FTL\") {\n        _this6.allFetchedOrders = _this6.ftlOrders;\n      } else {\n        _this6.allFetchedOrders = _this6.ltlOrders;\n      }\n\n      _this6.planOrderData = [];\n      _this6.planComm = [];\n\n      for (let i = 0; i < _this6.OrderIDs.length; i++) {\n        const element = _this6.OrderIDs[i];\n        let locations = [];\n\n        _this6.allFetchedOrders.map(v => {\n          if (element == v.orderID) {\n            let ordObj = {\n              orderID: v.orderID,\n              orderNo: v.orderNumber\n            };\n\n            _this6.planOrderData.push(ordObj);\n\n            current.tripData.orderType = v.orderMode;\n            calculateBy = v.milesInfo.calculateBy; // totalMilesOrder += parseFloat(v.milesInfo.totalMiles);\n\n            if (v.shippersReceiversInfo) {\n              v.shippersReceiversInfo.map(m => {\n                let PDate = moment().format(\"YYYY-MM-DD\");\n                let PTime = \"\";\n                m.shippers.map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator(function* (n) {\n                    n.pickupPoint.map(pk => {\n                      if (pk.dateAndTime != undefined && pk.dateAndTime != \"\") {\n                        let dmy = pk.dateAndTime.split(\" \");\n                        PDate = dmy[0];\n                        PTime = dmy[1];\n                      }\n\n                      let pickLocation = \"\";\n\n                      if (pk.address.manual) {\n                        pickLocation = `${pk.address.address}, ${pk.address.cityName}, ${pk.address.stateName}. ${pk.address.countryName}`;\n                      } else {\n                        pickLocation = pk.address.pickupLocation;\n                      }\n\n                      let comm = [];\n                      let commName = \"\";\n                      pk.commodity.forEach((cm, index) => {\n                        cm.name = cm.name.trim();\n                        comm.push(cm.name);\n                        commName += cm.name;\n\n                        if (index < pk.commodity.length - 1) {\n                          commName += \", \";\n                        }\n\n                        if (!_this6.planComm.includes(cm.name)) {\n                          _this6.planComm.push(cm.name);\n                        }\n                      });\n                      let pickupMiles = 0;\n                      let obj = {\n                        mileType: \"loaded\",\n                        orderID: v.orderID,\n                        orderNo: v.orderNumber,\n                        commName: commName,\n                        commodity: comm,\n                        splitDone: false,\n                        split: false,\n                        planID: uuidv4(),\n                        type: \"Pickup\",\n                        date: PDate,\n                        name: n.shipperName,\n                        dateTime: pk.dateAndTime,\n                        miles: pickupMiles,\n                        carrierID: null,\n                        carrierName: \"\",\n                        // time: PTime,\n                        pickupTime: PTime,\n                        dropTime: \"\",\n                        actualPickupTime: \"\",\n                        actualDropTime: \"\",\n                        locationName: pickLocation,\n                        vehicleName: \"\",\n                        trailerName: \"\",\n                        driverName: \"\",\n                        coDriverName: \"\",\n                        fromOrder: \"yes\",\n                        lat: pk.address.geoCords.lat,\n                        lng: pk.address.geoCords.lng,\n                        locData: {},\n                        locMan: false,\n                        milesMan: false\n                      };\n\n                      if (n.pickupLocation != \"\" && n.pickupLocation != undefined) {\n                        locations.push(n.pickupLocation);\n                      }\n\n                      tripPlans.push(obj);\n                      tripPlans.sort((a, b) => {\n                        return new Date(a.dateTime).valueOf() - new Date(b.dateTime).valueOf();\n                      });\n                    });\n                  });\n\n                  return function (_x2) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              });\n              v.shippersReceiversInfo.map(j => {\n                j.receivers.map( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator(function* (k) {\n                    k.dropPoint.map(dr => {\n                      let dropLocation = \"\";\n\n                      if (dr.address.manual) {\n                        dropLocation = `${dr.address.address}, ${dr.address.cityName}, ${dr.address.stateName}, ${dr.address.countryName}`;\n                      } else {\n                        dropLocation = dr.address.dropOffLocation;\n                      }\n\n                      let DrDate = moment().format(\"YYYY-MM-DD\");\n                      let DrTime = \"\";\n\n                      if (dr.dateAndTime != undefined && dr.dateAndTime != \"\") {\n                        let dmy = dr.dateAndTime.split(\" \");\n                        DrDate = dmy[0];\n                        DrTime = dmy[1];\n                      }\n\n                      let comm = [];\n                      let commName = \"\";\n                      dr.commodity.forEach((cm, index) => {\n                        cm.name = cm.name.trim();\n                        comm.push(cm.name);\n                        commName += cm.name;\n\n                        if (index < dr.commodity.length - 1) {\n                          commName += \", \";\n                        }\n\n                        if (!_this6.planComm.includes(cm.name)) {\n                          _this6.planComm.push(cm.name);\n                        }\n                      });\n                      let deliveryMiles = 0;\n                      let obj = {\n                        mileType: \"loaded\",\n                        orderID: v.orderID,\n                        orderNo: v.orderNumber,\n                        commName: commName,\n                        commodity: comm,\n                        splitDone: false,\n                        split: false,\n                        planID: uuidv4(),\n                        type: \"Delivery\",\n                        date: DrDate,\n                        dateTime: dr.dateAndTime,\n                        name: k.receiverName,\n                        miles: deliveryMiles,\n                        carrierID: null,\n                        carrierName: \"\",\n                        // time: DrTime,\n                        pickupTime: \"\",\n                        dropTime: DrTime,\n                        actualPickupTime: \"\",\n                        actualDropTime: \"\",\n                        locationName: dropLocation,\n                        vehicleName: \"\",\n                        trailerName: \"\",\n                        driverName: \"\",\n                        coDriverName: \"\",\n                        fromOrder: \"yes\",\n                        lat: dr.address.geoCords.lat,\n                        lng: dr.address.geoCords.lng,\n                        locData: {},\n                        locMan: false,\n                        milesMan: false\n                      };\n\n                      if (k.dropOffLocation != \"\" && k.dropOffLocation != undefined) {\n                        locations.push(k.dropOffLocation);\n                      }\n\n                      tripPlans.push(obj);\n                      tripPlans.sort((a, b) => {\n                        return new Date(a.dateTime).valueOf() - new Date(b.dateTime).valueOf();\n                      });\n                    });\n                  });\n\n                  return function (_x3) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n              });\n            }\n\n            return i;\n          }\n        });\n\n        if (locations.length > 0) {\n          _this6.resetMap();\n        }\n      }\n\n      if (_this6.tripData.mapFrom == \"order\") {\n        _this6.trips = tripPlans;\n        _this6.orderMiles = {\n          calculateBy: calculateBy,\n          totalMiles: totalMilesOrder\n        };\n        _this6.actualMiles = 0;\n\n        _this6.getMiles();\n      }\n\n      _this6.orderStops = tripPlans;\n    })();\n  }\n\n  getMiles() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let savedCord = \"\";\n      _this7.orderMiles.totalMiles = 0;\n\n      for (let i = 0; i < _this7.trips.length; i++) {\n        const element = _this7.trips[i];\n\n        if (i > 0) {\n          if (element.lng != undefined && element.lat != undefined) {\n            let endingPoint = element.lng + \",\" + element.lat;\n\n            try {\n              if (element.milesMan === false || element.milesMan === undefined) {\n                let newsMiles = savedCord + \";\" + endingPoint;\n\n                _this7.apiService.getData(\"trips/calculate/pc/miles?type=mileReport&stops=\" + newsMiles).subscribe(result => {\n                  if (element.milesMan === false || element.milesMan === undefined) {\n                    element.miles = result;\n                  }\n\n                  _this7.calculateActualMiles(result);\n                });\n              } else {\n                _this7.orderMiles.totalMiles += Number(element.miles);\n              }\n            } catch (error) {\n              _this7.toastr.error(\"No route found with these locations.\");\n\n              return false;\n            }\n\n            savedCord = endingPoint;\n          }\n        } else {\n          if (element.milesMan === false || element.milesMan === undefined) {\n            element.miles = 0;\n          }\n\n          savedCord = element.lng + \",\" + element.lat;\n        }\n      }\n\n      _this7.getStateWiseMiles();\n    })();\n  }\n\n  getMilesTotal() {\n    this.orderMiles.totalMiles = 0;\n    this.actualMiles = 0;\n\n    for (let i = 0; i < this.trips.length; i++) {\n      const element = this.trips[i];\n\n      if (element.milesMan) {\n        this.orderMiles.totalMiles += Number(element.miles);\n      } else {\n        this.actualMiles += Number(element.miles);\n      }\n    }\n  }\n\n  getSingleRowMiles(endingPoint, tripLength) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let savedCord = \"\";\n      savedCord = _this8.trips[tripLength - 1].lng + \",\" + _this8.trips[tripLength - 1].lat;\n\n      try {\n        let newsMiles = savedCord + \";\" + endingPoint;\n\n        _this8.apiService.getData(\"trips/calculate/pc/miles?type=mileReport&stops=\" + newsMiles).subscribe(result => {\n          // if (\n          //   this.trips[tripLength].milesMan === false ||\n          //   this.trips[tripLength].milesMan === undefined\n          // ) {\n          _this8.trips[tripLength].miles = result; // }\n\n          _this8.calculateActualMiles(result);\n\n          _this8.getStateWiseMiles();\n        });\n      } catch (error) {\n        throw new Error(error);\n      }\n    })();\n  }\n\n  calculateActualMiles(miles) {\n    this.actualMiles += parseFloat(miles);\n  }\n\n  checkUncheckAll(type) {\n    this.temporaryOrderIDs = [];\n    let current = this;\n\n    if (type === \"ftl\") {\n      $('input[name=\"ltlOrderIds\"]').prop(\"checked\", false);\n\n      if ($('input[name=\"ftlOrderIds\"]:checked').length > 0) {\n        // uncheck all\n        this.temporaryOrderIDs = [];\n        $('input[name=\"ftlOrderIds\"]').prop(\"checked\", false);\n      } else {\n        // check all\n        $('input[name=\"ftlOrderIds\"]').each(function () {\n          $(this).prop(\"checked\", true); // current.temporaryOrderIDs.push(this.value);\n\n          current.temporaryOrderIDs.push(this.id);\n          current.temporaryOrderNumber.push(this.value);\n        });\n      }\n    } else if (type === \"ltl\") {\n      $('input[name=\"ftlOrderIds\"]').prop(\"checked\", false);\n\n      if ($('input[name=\"ltlOrderIds\"]:checked').length > 0) {\n        // uncheck all\n        this.temporaryOrderIDs = [];\n        $('input[name=\"ltlOrderIds\"]').prop(\"checked\", false);\n      } else {\n        // check all\n        $('input[name=\"ltlOrderIds\"]').each(function () {\n          $(this).prop(\"checked\", true);\n          current.temporaryOrderIDs.push(this.id);\n          current.temporaryOrderNumber.push(this.value);\n        });\n      }\n    }\n  }\n\n  fetchVehicles() {\n    if (this.vehicles.length === 0) {\n      this.vehicleMessage = Constant.FETCHING_DATA;\n      this.apiService.getData(\"vehicles\").subscribe(result => {\n        // this.vehicles = result.Items;\n        if (result.Items.length === 0) {\n          this.vehicleMessage = Constant.NO_RECORDS_FOUND;\n        }\n\n        result.Items.forEach(element => {\n          if (element.isDeleted === 0) {\n            this.vehicles = [...this.vehicles, element];\n          }\n        });\n        this.vehiclesObjects = result.Items.reduce((a, b) => {\n          return a[b[\"vehicleID\"]] = b[\"isDeleted\"] == 1 ? b[\"vehicleIdentification\"] + \"  - Deleted\" : b[\"vehicleIdentification\"], a;\n        }, {});\n      });\n    }\n  }\n\n  fetchAssets() {\n    if (this.assets.length === 0) {\n      this.assetMessage = Constant.FETCHING_DATA;\n      this.apiService.getData(\"assets/tripAssets\").subscribe(result => {\n        // this.assets = result.Items;\n        if (result.Items.length === 0) {\n          this.assetMessage = Constant.NO_RECORDS_FOUND;\n        }\n\n        result.Items.forEach(element => {\n          if (element.isDeleted === 0) {\n            this.assets = [...this.assets, element];\n          }\n        });\n        this.assetsObjects = result.Items.reduce((a, b) => {\n          return a[b[\"assetID\"]] = b[\"isDeleted\"] == 1 ? b[\"assetIdentification\"] + \"  - Deleted\" : b[\"assetIdentification\"], a;\n        }, {});\n      });\n    }\n  }\n\n  fetchDrivers() {\n    if (this.drivers.length === 0) {\n      this.driverMessage = Constant.FETCHING_DATA;\n      this.apiService.getData(\"drivers/fetch/forTrips\").subscribe(result => {\n        if (result.Items.length === 0) {\n          this.driverMessage = Constant.NO_RECORDS_FOUND;\n        }\n\n        result.Items.forEach(element => {\n          if (element.isDeleted === 0) {\n            element.fullName = element.firstName;\n            this.drivers = [...this.drivers, element];\n          }\n        });\n        this.codrivers = this.drivers;\n        this.driversObjects = result.Items.reduce((a, b) => {\n          return a[b[\"driverID\"]] = b[\"firstName\"], a;\n        }, {});\n      });\n    }\n  }\n\n  fetchCoDriver(driverID) {\n    this.codrivers = this.drivers.filter(function (obj) {\n      if (obj.driverID !== driverID) {\n        return obj;\n      }\n    });\n  }\n\n  saveAssetModalData(addType = \"\") {\n    if (this.tempTextFieldValues.coDriverUsername == undefined) {\n      this.tempTextFieldValues.coDriverUsername = \"\";\n    }\n\n    if (this.tempTextFieldValues.vehicleID == undefined) {\n      this.tempTextFieldValues.vehicleID = \"\";\n    }\n\n    if (this.tempTextFieldValues.driverUsername == undefined) {\n      this.tempTextFieldValues.driverUsername = \"\";\n    }\n\n    if (this.tempTextFieldValues.trailerName == undefined) {\n      this.tempTextFieldValues.trailerName = \"\";\n    }\n\n    if (this.tempTextFieldValues.type === \"add\") {\n      this.textFieldValues.vehicleName = this.tempTextFieldValues.vehicleName;\n      this.textFieldValues.vehicleID = this.tempTextFieldValues.vehicleID;\n      this.textFieldValues.trailer = this.tempTextFieldValues.trailer;\n      this.textFieldValues.driverID = this.tempTextFieldValues.driverID;\n      this.textFieldValues.coDriverID = this.tempTextFieldValues.coDriverID;\n      this.textFieldValues.driverName = this.tempTextFieldValues.driverName;\n      this.textFieldValues.driverUsername = this.tempTextFieldValues.driverUsername;\n      this.textFieldValues.coDriverName = this.tempTextFieldValues.coDriverName;\n      this.textFieldValues.coDriverUsername = this.tempTextFieldValues.coDriverUsername;\n      this.textFieldValues.trailerName = this.tempTextFieldValues.trailerName;\n      this.textFieldValues.driverID = this.tempTextFieldValues.driverID;\n      this.textFieldValues.coDriverID = this.tempTextFieldValues.coDriverID;\n      this.tripData.tripStatus = \"confirmed\";\n\n      if (this.textFieldValues.vehicleID != \"\" || this.textFieldValues.driverUsername != \"\" || this.textFieldValues.coDriverUsername != \"\" || this.textFieldValues.trailerName != \"\") {\n        $(\"#cell11\").prop(\"disabled\", true);\n      } else {\n        $(\"#cell11\").prop(\"disabled\", false);\n      }\n\n      this.tripModalRef.close(); //$('#assetModal').modal('hide');\n    } else if (this.tempTextFieldValues.type === \"edit\") {\n      let index = this.tempTextFieldValues.index;\n      this.trips[index].vehicleName = this.tempTextFieldValues.vehicleName;\n      this.trips[index].vehicleID = this.tempTextFieldValues.vehicleID;\n      this.trips[index].trailer = this.tempTextFieldValues.trailer;\n      this.trips[index].driverName = this.tempTextFieldValues.driverName;\n      this.trips[index].driverUsername = this.tempTextFieldValues.driverUsername;\n      this.trips[index].coDriverName = this.tempTextFieldValues.coDriverName;\n      this.trips[index].coDriverUsername = this.tempTextFieldValues.coDriverUsername;\n      this.trips[index].trailerName = this.tempTextFieldValues.trailerName;\n      this.trips[index].driverID = this.tempTextFieldValues.driverID;\n      this.trips[index].coDriverID = this.tempTextFieldValues.coDriverID;\n      this.trips[index].trailerID = this.informationAsset;\n\n      if (this.trips[index].vehicleID != \"\" || this.trips[index].driverUsername != \"\" || this.trips[index].coDriverUsername != \"\" || this.trips[index].trailerName != \"\") {\n        $(\"#editCell11\" + index).prop(\"disabled\", true);\n      } else {\n        $(\"#editCell11\" + index).prop(\"disabled\", false);\n      } // if user select to populate all the fields\n\n\n      if (addType == \"populate\") {\n        for (let l = 0; l < this.trips.length; l++) {\n          const element = this.trips[l];\n\n          if (element.carrierID === null || element.carrierID === \"\") {\n            element.vehicleName = this.tempTextFieldValues.vehicleName;\n            element.vehicleID = this.tempTextFieldValues.vehicleID;\n            element.trailer = this.tempTextFieldValues.trailer;\n            element.driverName = this.tempTextFieldValues.driverName;\n            element.driverUsername = this.tempTextFieldValues.driverUsername;\n            element.coDriverName = this.tempTextFieldValues.coDriverName;\n            element.coDriverUsername = this.tempTextFieldValues.coDriverUsername;\n            element.trailerName = this.tempTextFieldValues.trailerName;\n            element.driverID = this.tempTextFieldValues.driverID;\n            element.coDriverID = this.tempTextFieldValues.coDriverID;\n            element.trailerID = this.informationAsset;\n            element.disablecarr = true;\n          }\n        }\n\n        this.assignConfirmModal.close();\n      }\n\n      this.getStateWiseMiles();\n      this.emptyAssetModalFields();\n      this.tripModalRef.close(); // $('#assetModal').modal('hide');\n    }\n  }\n\n  getNewRowValues(event, type) {\n    if (type === \"date\") {\n      this.textFieldValues.date = event.target.value;\n    } else if (type === \"name\") {\n      this.textFieldValues.name = event.target.value;\n    } else if (type === \"location\") {\n      this.textFieldValues.locationName = event.target.value;\n    } else if (type === \"miles\") {\n      this.textFieldValues.miles = event.target.value;\n    } else if (type === \"tripType\") {\n      this.textFieldValues.type = event.target.value;\n    } else if (type === \"mileType\") {\n      this.textFieldValues.mileType = event.target.value;\n    } else if (type === \"carrier\") {\n      this.textFieldValues.carrierID = event.target.value;\n      this.textFieldValues.carrierName = event.target.options[event.target.options.selectedIndex].text;\n    }\n  }\n\n  vehicleChange($event, type) {\n    if ($event === undefined) {\n      $(\".vehicleClass\").removeClass(\"td_border\");\n      this.tempTextFieldValues.vehicleName = \"\";\n      this.tempTextFieldValues.vehicleID = \"\";\n      this.assetDataVehicleID = null;\n    } else {\n      if (type === \"click\") {\n        this.assetDataVehicleID = $event.vehicleID;\n      }\n\n      this.tempTextFieldValues.vehicleName = $event.vehicleIdentification;\n      this.tempTextFieldValues.vehicleID = $event.vehicleID;\n      $(\".vehicleClass\").removeClass(\"td_border\");\n      $(\"#veh_\" + $event.vehicleID).addClass(\"td_border\");\n      $(\".trips-vehicle__listing\").animate({\n        scrollTop: $(\"#veh_\" + $event.vehicleID).position().top\n      }, \"slow\");\n    }\n  }\n\n  driverChange($event, type, eventType) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      if ($event === undefined) {\n        if (type === \"driver\") {\n          $(\".driverClass\").removeClass(\"td_border\");\n          _this9.tempTextFieldValues.driverName = \"\";\n          _this9.tempTextFieldValues.driverUsername = \"\";\n          _this9.assetDataDriverUsername = null;\n          _this9.tempTextFieldValues.driverID = \"\";\n        } else {\n          $(\".codriverClass\").removeClass(\"td_border\");\n          _this9.tempTextFieldValues.coDriverName = \"\";\n          _this9.tempTextFieldValues.coDriverUsername = \"\";\n          _this9.assetDataCoDriverUsername = null;\n          _this9.tempTextFieldValues.coDriverID = \"\";\n        }\n      } else {\n        if (type === \"driver\") {\n          yield _this9.spinner.show();\n          yield _this9.fetchCoDriver($event.driverID);\n          _this9.tempTextFieldValues.driverName = $event.fullName;\n          _this9.tempTextFieldValues.driverUsername = $event.userName;\n          _this9.tempTextFieldValues.driverID = $event.driverID;\n\n          if (_this9.assetDataDriverUsername === _this9.assetDataCoDriverUsername) {\n            _this9.assetDataCoDriverUsername = null;\n          }\n\n          if (eventType === \"click\") {\n            _this9.assetDataDriverUsername = $event.userName;\n          }\n\n          $(\".driverClass\").removeClass(\"td_border\");\n          $(\"#drivr_\" + $event.driverID).addClass(\"td_border\");\n          $(\".trips-drivers__listing\").animate({\n            scrollTop: $(\"#drivr_\" + $event.driverID).position().top\n          }, \"slow\");\n          yield _this9.spinner.hide();\n        } else if (type === \"codriver\") {\n          _this9.tempTextFieldValues.coDriverName = $event.fullName;\n          _this9.tempTextFieldValues.coDriverUsername = $event.userName;\n          _this9.tempTextFieldValues.coDriverID = $event.driverID;\n\n          if (eventType === \"click\") {\n            _this9.assetDataCoDriverUsername = $event.userName;\n          }\n\n          $(\".codriverClass\").removeClass(\"td_border\");\n          $(\"#codrivr_\" + $event.driverID).addClass(\"td_border\");\n          $(\".trips-codrivers__listing\").animate({\n            scrollTop: $(\"#codrivr_\" + $event.driverID).position().top\n          }, \"slow\");\n        }\n      }\n    })();\n  }\n\n  assetsChange($event, type) {\n    this.tempTextFieldValues.trailerName = \"\";\n\n    if ($event === undefined) {\n      $(\".assetClass\").removeClass(\"td_border\");\n    } else {\n      if (type === \"change\") {\n        this.tempTextFieldValues.trailer = [];\n        $(\".assetClass\").removeClass(\"td_border\");\n        let arayy = [];\n\n        for (let i = 0; i < $event.length; i++) {\n          const element = $event[i];\n          $(\"#asset_\" + element.assetID).addClass(\"td_border\");\n\n          if (!arayy.includes(element.assetID)) {\n            arayy.push(element.assetID);\n          }\n\n          let objj = {\n            id: element.assetID,\n            name: element.assetIdentification\n          };\n          this.tempTextFieldValues.trailer.push(objj);\n        }\n\n        if ($event.length > 0) {\n          let lastItem = $event[$event.length - 1];\n          $(\".trips-assets__listing\").animate({\n            scrollTop: $(\"#asset_\" + lastItem.assetID).position().top\n          }, \"slow\");\n        }\n      } else {\n        let arayy = [];\n        $(\"#asset_\" + $event.assetID).addClass(\"td_border\");\n        let objj = {\n          id: $event.assetID,\n          name: $event.assetIdentification\n        };\n        const exist = this.tempTextFieldValues.trailer.some(el => el.id === $event.assetID);\n        if (!exist) this.tempTextFieldValues.trailer.push(objj); // this.tempTextFieldValues.trailer.push(objj);\n\n        for (let i = 0; i < this.tempTextFieldValues.trailer.length; i++) {\n          const element = this.tempTextFieldValues.trailer[i];\n\n          if (!arayy.includes(element.id)) {\n            arayy.push(element.id);\n          } // arayy.push(element.id);\n\n        }\n\n        this.informationAsset = arayy;\n      }\n\n      let trailerNames = this.tempTextFieldValues.trailer.map(function (v) {\n        return v.name;\n      });\n      trailerNames = trailerNames.join();\n      this.tempTextFieldValues.trailerName = trailerNames;\n    }\n  }\n\n  onAddTrip() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      _this10.hideErrors();\n\n      _this10.submitDisabled = true;\n      _this10.tripData.dateCreated = moment(_this10.dateCreated).format(\"YYYY-MM-DD\");\n      _this10.tripData.orderId = _this10.OrderIDs;\n      _this10.tripData.mapFrom = _this10.mapOrderActive === \"active\" ? \"order\" : \"route\";\n      _this10.tripData.tripPlanning = [];\n      let planData = _this10.trips;\n\n      if (_this10.tripData.orderId.length == 0) {\n        _this10.toastr.error(\"Please select order(s).\");\n\n        _this10.submitDisabled = false;\n        return false;\n      }\n\n      if (planData.length == 0) {\n        _this10.toastr.error(\"Please add trip plan.\");\n\n        _this10.submitDisabled = false;\n        return false;\n      }\n\n      if (planData.length < 2) {\n        _this10.toastr.error(\"Please add atleast two trip plans.\");\n\n        _this10.submitDisabled = false;\n        return false;\n      }\n\n      let selectedDriverids = [];\n      let selectedCarrierids = [];\n      let selectedVehicles = [];\n      let selectedAssets = [];\n      let selectedLocations = \"\";\n      let stlStatus = [];\n\n      if (planData.length >= 2) {\n        let addedPlan = planData.map(function (v) {\n          return v.type;\n        });\n\n        if (addedPlan.includes(\"Pickup\") !== true || addedPlan.includes(\"Delivery\") !== true) {\n          _this10.toastr.error(\"Pickup and delivery points are required.\");\n\n          return false;\n        }\n\n        for (let i = 0; i < planData.length; i++) {\n          const element = planData[i];\n          let obj = {\n            type: \"\",\n            date: \"\",\n            name: \"\",\n            location: \"\",\n            mileType: \"\",\n            miles: \"\",\n            vehicleID: \"\",\n            vehicleName: \"\",\n            assetID: [],\n            driverUsername: \"\",\n            codriverUsername: \"\",\n            carrierID: null,\n            pickupTime: \"\",\n            dropTime: \"\",\n            // actualPickupTime: '',\n            // actualDropTime: '',\n            lat: \"\",\n            lng: \"\",\n            driverID: \"\",\n            coDriverID: \"\",\n            locData: {},\n            locMan: false,\n            milesMan: false,\n            planID: \"\",\n            orderID: element.orderID ? element.orderID : null,\n            commodity: element.commodity ? element.commodity : []\n          };\n          obj.type = element.type;\n          obj.date = element.date;\n          obj.name = element.name;\n          obj.location = element.locationName;\n          obj.mileType = element.mileType;\n          obj.miles = element.miles;\n          obj.vehicleID = element.vehicleID;\n          obj.vehicleName = _this10.vehiclesObjects[element.vehicleID];\n          obj.pickupTime = element.pickupTime;\n          obj.dropTime = element.dropTime; // obj.actualPickupTime = element.actualPickupTime;\n          // obj.actualDropTime = element.actualDropTime;\n\n          obj.lat = element.lat;\n          obj.lng = element.lng;\n          obj.driverID = element.driverID;\n          obj.coDriverID = element.coDriverID;\n          obj.locData = element.locData;\n          obj.locMan = element.locMan ? element.locMan : false;\n          obj.milesMan = element.milesMan ? element.milesMan : false;\n          obj.planID = element.planID;\n\n          if (element.driverID != \"\" && element.driverID != undefined && element.driverID != null) {\n            if (!selectedDriverids.includes(element.driverID)) {\n              selectedDriverids.push(element.driverID);\n              let driverStatus = element.driverID + \":false\";\n              stlStatus.push(driverStatus);\n            }\n          }\n\n          if (element.coDriverID != \"\" && element.coDriverID != undefined && element.coDriverID != null) {\n            if (!selectedDriverids.includes(element.coDriverID)) {\n              selectedDriverids.push(element.coDriverID);\n              let driverStatus = element.coDriverID + \":false\";\n              stlStatus.push(driverStatus);\n            }\n          }\n\n          if (element.vehicleID != \"\" && element.vehicleID != undefined) {\n            if (!selectedVehicles.includes(element.vehicleID)) {\n              selectedVehicles.push(element.vehicleID);\n            }\n          }\n\n          if (element.locationName != \"\" && element.locationName != undefined) {\n            element.locationName = element.locationName.replace(/,/g, \"\");\n            selectedLocations += element.locationName.toLowerCase() + \"|\";\n          }\n\n          if (element.carrierID != \"\" && element.carrierID != undefined && element.carrierID != null) {\n            if (!selectedCarrierids.includes(element.carrierID)) {\n              selectedCarrierids.push(element.carrierID);\n              let carrStatus = element.carrierID + \":false\";\n              stlStatus.push(carrStatus);\n            }\n          }\n\n          if (element.trailer != \"\" && element.trailer != undefined) {\n            for (let j = 0; j < element.trailer.length; j++) {\n              const element1 = element.trailer[j];\n              obj.assetID.push(element1.id);\n\n              if (element1.id != \"\" && element1.id != undefined) {\n                if (!selectedAssets.includes(element1.id)) {\n                  selectedAssets.push(element1.id);\n                }\n              }\n            }\n          }\n\n          obj.driverUsername = element.driverUsername;\n          obj.codriverUsername = element.coDriverUsername;\n          obj.carrierID = element.carrierID;\n\n          _this10.tripData.tripPlanning.push(obj);\n        }\n      }\n\n      _this10.tripData.driverIDs = selectedDriverids;\n      _this10.tripData.vehicleIDs = selectedVehicles;\n      _this10.tripData.assetIDs = selectedAssets;\n      _this10.tripData.loc = selectedLocations;\n      _this10.tripData.stlStatus = stlStatus;\n      _this10.tripData.carrierIDs = selectedCarrierids;\n\n      _this10.splitTripArr();\n\n      _this10.errors = {};\n      _this10.hasError = false;\n      _this10.hasSuccess = false;\n\n      _this10.apiService.postData(\"trips\", _this10.tripData).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n            _this10.errors[val.context.key] = val.message;\n          })).subscribe({\n            complete: () => {\n              _this10.submitDisabled = false;\n\n              _this10.spinner.hide(); // this.throwErrors();\n\n            },\n            error: () => {\n              _this10.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          _this10.submitDisabled = false;\n\n          _this10.spinner.hide();\n\n          _this10.response = res; // this.updateOrderStatus();\n\n          _this10.toastr.success(\"Trip added successfully.\");\n\n          _this10.goBack();\n        }\n      });\n    })();\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + \"</label>\").addClass(\"error\");\n    });\n    this.spinner.hide();\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass(\"error\").next().remove(\"label\");\n    });\n    this.errors = {};\n  }\n\n  changeOrderTab(tabType) {\n    this.orderSearch = \"\";\n\n    if (tabType == \"LTL\") {\n      this.activeTab = \"LTL\";\n    } else if (tabType = \"FTL\") {\n      this.activeTab = \"FTL\";\n    }\n  }\n\n  onLTLScroll(offsetY) {\n    const viewHeight = this.el.nativeElement.getBoundingClientRect().height - this.headerHeight;\n\n    if (!this.isLoading && offsetY + viewHeight + this.ftlOrders.length * this.rowHeight) {\n      let limit = this.pageLimit;\n\n      if (this.ftlOrders.length === 0) {\n        const pageSize = Math.ceil(viewHeight / this.rowHeight);\n        limit = Math.max(pageSize, this.pageLimit);\n      }\n\n      if (this.loaded) {\n        this.fetchLTLOrders();\n      }\n\n      this.loaded = false;\n    }\n  }\n\n  onLTLSelect(selected) {\n    this.selectedFTL = [];\n    this.temporaryOrderIDs = [];\n    this.temporaryOrderNumber = [];\n\n    if (this.selectedLTL.length > 0) {\n      this.selectedLTL.forEach(element => {\n        this.temporaryOrderIDs.push(element.orderID);\n        this.temporaryOrderNumber.push(element.orderNumber);\n      });\n    }\n  }\n\n  fetchLTLOrders(refresh) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      _this11.isLoading = true;\n\n      if (refresh === true) {\n        _this11.lastLtlOrderSK = \"\", _this11.ltlOrders = [];\n      }\n\n      if (_this11.lastLtlOrderSK !== \"end\") {\n        const result = yield _this11.apiService.getData(`orders/get/type/LTL?lastKey=${_this11.lastLtlOrderSK}`).toPromise();\n        _this11.dataMessage = Constant.FETCHING_DATA;\n\n        if (result.Items.length === 0) {\n          _this11.dataMessage = Constant.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          _this11.isLoading = false;\n\n          if (result.LastEvaluatedKey !== undefined) {\n            _this11.lastLtlOrderSK = encodeURIComponent(result.LastEvaluatedKey.orderSK);\n          } else {\n            _this11.lastLtlOrderSK = \"end\";\n          }\n\n          let res = result.Items.map(i => {\n            i.pickupLocations = \"\";\n            i.deliveryLocations = \"\";\n            i.customer = i.customerName;\n\n            if (i.shippersReceiversInfo) {\n              let ind = 1;\n              let ind2 = 1;\n              i.shippersReceiversInfo.map(j => {\n                j.receivers.map(k => {\n                  k.dropPoint.map(dr => {\n                    let dateTime = \"\";\n\n                    if (dr.dateAndTime != undefined && dr.dateAndTime != \"\") {\n                      let dmy = dr.dateAndTime.split(\" \");\n                      dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n                    }\n\n                    if (dr.address.manual) {\n                      i.deliveryLocations += ind + \". \" + dr.address.address + \" <br/>\" + dateTime + \" <br/>\";\n                    } else {\n                      i.deliveryLocations += ind + \". \" + dr.address.dropOffLocation + \" <br/>\" + dateTime + \" <br/>\";\n                    }\n\n                    ind++;\n                  });\n                });\n              });\n              i.shippersReceiversInfo.map(m => {\n                m.shippers.map(n => {\n                  n.pickupPoint.map(pk => {\n                    let dateTime = \"\";\n\n                    if (pk.dateAndTime != undefined && pk.dateAndTime != \"\") {\n                      let dmy = pk.dateAndTime.split(\" \");\n                      dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n                    }\n\n                    if (pk.address.manual) {\n                      i.pickupLocations += ind2 + \". \" + pk.address.address + \" <br/>\" + dateTime + \" <br/>\";\n                    } else {\n                      i.pickupLocations += ind2 + \". \" + pk.address.pickupLocation + \" <br/>\" + dateTime + \" <br/>\";\n                    }\n\n                    ind2++;\n                  });\n                });\n              });\n            }\n\n            return i;\n          });\n          _this11.ltlOrders = _this11.ltlOrders.concat(res);\n          _this11.loaded = true;\n          _this11.isLoading = false; //this.allFetchedOrders=this.ltlOrders\n          //await this.setOrdersDataFormat(result.Items, \"all\")\n        }\n      }\n    })();\n  }\n\n  orderFTLInit() {\n    this.orderSearch = \"\";\n    this.activeTab = \"FTL\";\n    this.lastFtLOrderSK = \"\";\n  }\n\n  onFTLSelect({\n    selected\n  }) {\n    this.selectedLTL = [];\n    this.temporaryOrderIDs = [];\n    this.temporaryOrderNumber = [];\n\n    if (this.selectedFTL.length > 0) {\n      this.selectedFTL.forEach(element => {\n        this.temporaryOrderIDs.push(element.orderID);\n        this.temporaryOrderNumber.push(element.orderNumber);\n      });\n    }\n  }\n\n  onFTLScroll(offsetY) {\n    const viewHeight = this.el.nativeElement.getBoundingClientRect().height - this.headerHeight;\n\n    if (!this.isLoading && offsetY + viewHeight + this.ftlOrders.length * this.rowHeight) {\n      let limit = this.pageLimit;\n\n      if (this.ftlOrders.length === 0) {\n        const pageSize = Math.ceil(viewHeight / this.rowHeight);\n        limit = Math.max(pageSize, this.pageLimit);\n      }\n\n      if (this.loaded) {\n        this.fetchFTLOrders();\n      }\n\n      this.loaded = false;\n    }\n  }\n\n  searchSingleOrder() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this12.searchOrder) {\n        _this12.dataMessage = Constant.FETCHING_DATA;\n        const result = yield _this12.apiService.getData(`orders/search/${_this12.activeTab}?orderNumber=${_this12.searchOrder}`).toPromise();\n\n        if (result.Items.length != 0) {\n          let res = result.Items.map(i => {\n            i.pickupLocations = \"\";\n            i.deliveryLocations = \"\";\n            i.customer = i.customerName;\n\n            if (i.shippersReceiversInfo) {\n              let ind = 1;\n              let ind2 = 1;\n              i.shippersReceiversInfo.map(j => {\n                j.receivers.map(k => {\n                  k.dropPoint.map(dr => {\n                    let dateTime = \"\";\n\n                    if (dr.dateAndTime != undefined && dr.dateAndTime != \"\") {\n                      let dmy = dr.dateAndTime.split(\" \");\n                      dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n                    }\n\n                    if (dr.address.manual) {\n                      i.deliveryLocations += ind + \". \" + dr.address.address + \" <br/>\" + dateTime + \" <br/>\";\n                    } else {\n                      i.deliveryLocations += ind + \". \" + dr.address.dropOffLocation + \" <br/>\" + dateTime + \" <br/>\";\n                    }\n\n                    ind++;\n                  });\n                });\n              });\n              i.shippersReceiversInfo.map(m => {\n                m.shippers.map(n => {\n                  n.pickupPoint.map(pk => {\n                    let dateTime = \"\";\n\n                    if (pk.dateAndTime != undefined && pk.dateAndTime != \"\") {\n                      let dmy = pk.dateAndTime.split(\" \");\n                      dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n                    }\n\n                    if (pk.address.manual) {\n                      i.pickupLocations += ind2 + \". \" + pk.address.address + \" <br/>\" + dateTime + \" <br/>\";\n                    } else {\n                      i.pickupLocations += ind2 + \". \" + pk.address.pickupLocation + \" <br/>\" + dateTime + \" <br/>\";\n                    }\n\n                    ind2++;\n                  });\n                });\n              });\n            }\n\n            return i;\n          });\n\n          if (_this12.activeTab == \"FTL\") {\n            _this12.ftlOrders = res;\n          } else {\n            _this12.ltlOrders = res;\n          }\n        } else {\n          _this12.ftlOrders = [];\n          _this12.ltlOrders = [];\n          _this12.dataMessage = Constant.NO_RECORDS_FOUND;\n        }\n      } else {\n        _this12.toastr.error(\"Search Field Required\");\n      }\n    })();\n  }\n\n  resetOrders() {\n    this.searchOrder = \"\";\n    this.ftlOrders = [];\n    this.ltlOrders = [];\n    this.selectedFTL = [];\n    this.selectedLTL = [];\n    this.lastFtLOrderSK = \"\";\n    this.fetchFTLOrders();\n    this.lastLtlOrderSK = \"\";\n    this.fetchLTLOrders();\n  }\n\n  fetchFTLOrders(refresh) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      _this13.isLoading = true;\n\n      if (refresh === true) {\n        _this13.lastFtLOrderSK = \"\", _this13.ftlOrders = [];\n      }\n\n      if (_this13.lastFtLOrderSK !== \"end\") {\n        const result = yield _this13.apiService.getData(`orders/get/type/FTL?lastKey=${_this13.lastFtLOrderSK}`).toPromise();\n        _this13.dataMessage = Constant.FETCHING_DATA;\n\n        if (result.Items.length === 0) {\n          _this13.dataMessage = Constant.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          _this13.isLoading = false;\n\n          if (result.LastEvaluatedKey !== undefined) {\n            _this13.lastFtLOrderSK = encodeURIComponent(result.LastEvaluatedKey.orderSK);\n          } else {\n            _this13.lastFtLOrderSK = \"end\";\n          }\n\n          let res = result.Items.map(i => {\n            i.pickupLocations = \"\";\n            i.deliveryLocations = \"\";\n            i.customer = i.customerName;\n\n            if (i.shippersReceiversInfo) {\n              let ind = 1;\n              let ind2 = 1;\n              i.shippersReceiversInfo.map(j => {\n                j.receivers.map(k => {\n                  k.dropPoint.map(dr => {\n                    let dateTime = \"\";\n\n                    if (dr.dateAndTime != undefined && dr.dateAndTime != \"\") {\n                      let dmy = dr.dateAndTime.split(\" \");\n                      dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n                    }\n\n                    if (dr.address.manual) {\n                      i.deliveryLocations += ind + \". \" + dr.address.address + \" <br/>\" + dateTime + \" <br/>\";\n                    } else {\n                      i.deliveryLocations += ind + \". \" + dr.address.dropOffLocation + \" <br/>\" + dateTime + \" <br/>\";\n                    }\n\n                    ind++;\n                  });\n                });\n              });\n              i.shippersReceiversInfo.map(m => {\n                m.shippers.map(n => {\n                  n.pickupPoint.map(pk => {\n                    let dateTime = \"\";\n\n                    if (pk.dateAndTime != undefined && pk.dateAndTime != \"\") {\n                      let dmy = pk.dateAndTime.split(\" \");\n                      dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n                    }\n\n                    if (pk.address.manual) {\n                      i.pickupLocations += ind2 + \". \" + pk.address.address + \" <br/>\" + dateTime + \" <br/>\";\n                    } else {\n                      i.pickupLocations += ind2 + \". \" + pk.address.pickupLocation + \" <br/>\" + dateTime + \" <br/>\";\n                    }\n\n                    ind2++;\n                  });\n                });\n              });\n            }\n\n            return i;\n          });\n          _this13.ftlOrders = _this13.ftlOrders.concat(res);\n          _this13.loaded = true;\n          _this13.isLoading = false; //this.allFetchedOrders=this.ftlOrders\n          //await this.setOrdersDataFormat(result.Items, \"all\")\n        }\n      }\n    })();\n  }\n\n  setOrdersDataFormat(orders, type) {\n    let data = orders.map(i => {\n      const element = i;\n      i.pickupLocations = \"\";\n      i.deliveryLocations = \"\";\n\n      if (i.shippersReceiversInfo) {\n        let ind = 1;\n        let ind2 = 1;\n        i.shippersReceiversInfo.map(j => {\n          j.receivers.map(k => {\n            k.dropPoint.map(dr => {\n              let dateTime = \"\";\n\n              if (dr.dateAndTime != undefined && dr.dateAndTime != \"\") {\n                let dmy = dr.dateAndTime.split(\" \");\n                dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n              }\n\n              if (dr.address.manual) {\n                i.deliveryLocations += ind + \". \" + dr.address.address + \" <br/>\" + dateTime + \" <br/>\";\n              } else {\n                i.deliveryLocations += ind + \". \" + dr.address.dropOffLocation + \" <br/>\" + dateTime + \" <br/>\";\n              }\n\n              ind++;\n            });\n          });\n        });\n        i.shippersReceiversInfo.map(m => {\n          m.shippers.map(n => {\n            n.pickupPoint.map(pk => {\n              let dateTime = \"\";\n\n              if (pk.dateAndTime != undefined && pk.dateAndTime != \"\") {\n                let dmy = pk.dateAndTime.split(\" \");\n                dateTime = moment(dmy[0]).format(\"YYYY/MM/DD\") + \" \" + dmy[1];\n              }\n\n              if (pk.address.manual) {\n                i.pickupLocations += ind2 + \". \" + pk.address.address + \" <br/>\" + dateTime + \" <br/>\";\n              } else {\n                i.pickupLocations += ind2 + \". \" + pk.address.pickupLocation + \" <br/>\" + dateTime + \" <br/>\";\n              }\n\n              ind2++;\n            });\n          });\n        });\n      }\n\n      if (type == \"all\") {\n        element.selected = false;\n      } else {\n        element.selected = true;\n      }\n\n      if (element.orderMode == \"FTL\") {\n        if (type == \"all\") {\n          this.ftlOrders.push(element);\n        } else {\n          this.ftlOrders.unshift(element);\n        }\n      } else if (element.orderMode == \"LTL\") {\n        if (type == \"all\") {\n          this.ltlOrders.push(element);\n        } else {\n          this.ltlOrders.unshift(element);\n        }\n      }\n\n      if (type != \"all\") {\n        this.allFetchedOrders.push(i);\n      }\n\n      return i;\n    });\n\n    if (type == \"all\") {\n      this.allFetchedOrders = data;\n    }\n  }\n\n  searchLocation() {\n    let target;\n    this.searchTerm.pipe(map(e => {\n      $(\".map-search__results\").hide();\n      $(e.target).closest(\"td\").addClass(\"show-search__result\");\n      target = e;\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.hereMap.searchEntries(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      this.searchResults = res;\n    });\n  }\n\n  assignLocation(elem, item, index) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      // await this.resetMap();\n      if (elem == \"editLoc\") {\n        _this14.trips[index].locationName = item.address;\n        let result = yield _this14.getAddressDetail(item.place_id);\n\n        if (result != undefined) {\n          _this14.trips[index][\"lat\"] = result.position.lat;\n          _this14.trips[index][\"lng\"] = result.position.lng;\n        }\n\n        _this14.actualMiles = 0;\n        yield _this14.getMiles();\n        yield _this14.resetMap();\n      } else {\n        _this14.textFieldValues.locationName = item.address;\n        let result = yield _this14.getAddressDetail(item.place_id);\n\n        if (result != undefined) {\n          _this14.textFieldValues.lat = result.position.lat;\n          _this14.textFieldValues.lng = result.position.lng;\n        }\n      }\n\n      _this14.searchResults = false;\n      $(\"td\").removeClass(\"show-search__result\");\n    })();\n  }\n\n  getAddressDetail(id) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this15.apiService.getData(`pcMiles/detail/${id}`).toPromise();\n      return result;\n    })();\n  }\n\n  fetchTripDetail() {\n    var _this16 = this;\n\n    this.spinner.show();\n    this.apiService.getData(\"trips/\" + this.tripID).subscribe( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (result) {\n        _this16.tripNoDisabled = true;\n        _this16.isEdit = true;\n        result = result.Items[0];\n        let tripPlanning = result.tripPlanning;\n        _this16.tripData[\"reeferTemperature\"] = result.reeferTemperature;\n        _this16.tripData[\"reeferTemperatureUnit\"] = result.reeferTemperatureUnit;\n        _this16.tripData[\"tripNo\"] = result.tripNo;\n        _this16.tripData[\"routeID\"] = result.routeID;\n        _this16.tripData[\"bol\"] = result.bol;\n        _this16.tripData[\"createdDate\"] = result.createdDate;\n        _this16.tripData[\"createdTime\"] = result.createdTime;\n        _this16.tripData[\"mapFrom\"] = result.mapFrom;\n        _this16.tripData[\"settlmnt\"] = result.settlmnt;\n        _this16.dateCreated = result.dateCreated;\n        _this16.tripData[\"oldOrdr\"] = result.orderId;\n        _this16.orderNo = \"\";\n\n        if (result.mapFrom == \"order\") {\n          _this16.mapOrderActive = \"active\";\n          _this16.mapRouteActive = \"\";\n        } else {\n          _this16.mapOrderActive = \"\";\n          _this16.mapRouteActive = \"active\";\n        } //fetch order details\n\n\n        if (result.orderId.length > 0) {\n          yield _this16.fetchOrderDetails(result.orderId);\n          _this16.OrderIDs = result.orderId;\n        }\n\n        _this16.tripData[\"orderType\"] = result.orderType;\n        _this16.tripData[\"timeCreated\"] = result.timeCreated;\n        _this16.tripData[\"tripStatus\"] = result.tripStatus;\n        _this16.tripData.notifications = result.notifications;\n        let locations = []; // for(let plann of tripPlanning) {\n        //     if(plann.location != undefined && plann.location != ''){\n        //         locations.push(plann.location)\n        //     }\n        // }\n\n        for (let i = 0; i < tripPlanning.length; i++) {\n          const element = tripPlanning[i];\n          let obj = {\n            orderID: element.orderID ? element.orderID : null,\n            commodity: element.commodity ? element.commodity : null,\n            commName: \"\",\n            orderNo: \"\",\n            planID: element.planID,\n            carrierID: element.carrierID ? element.carrierID : null,\n            carrierName: element.carrierName ? element.carrierName : \"\",\n            coDriverName: element.coDriverName ? element.coDriverName : \"\",\n            coDriverUsername: element.codriverUsername ? element.codriverUsername : \"\",\n            date: element.date,\n            // time: element.time,\n            pickupTime: element.pickupTime,\n            dropTime: element.dropTime,\n            actualPickupTime: element.actualPickupTime ? element.actualPickupTime : \"\",\n            actualDropTime: element.actualDropTime ? element.actualDropTime : \"\",\n            driverName: element.driverName ? element.driverName : \"\",\n            driverUsername: element.driverUsername ? element.driverUsername : \"\",\n            driverStatus: element.driverStatus ? element.driverStatus : \"\",\n            coDriverStatus: element.coDriverStatus ? element.coDriverStatus : \"\",\n            // location: element.location,\n            driverID: element.driverID ? element.driverID : null,\n            coDriverID: element.coDriverID ? element.coDriverID : null,\n            locationName: element.location,\n            mileType: element.mileType,\n            miles: element.miles,\n            name: element.name,\n            trailer: [],\n            trailerID: element.assetID,\n            type: element.type,\n            vehicleID: element.vehicleID ? element.vehicleID : \"\",\n            vehicleName: element.vehicleName ? element.vehicleName : \"\",\n            lat: element.lat,\n            lng: element.lng,\n            locMan: element.locMan,\n            milesMan: element.milesMan,\n            locData: element.locData\n          };\n          let commName = \"\";\n\n          if (element.commodity) {\n            element.commodity.forEach((cm, index) => {\n              commName += cm.trim();\n\n              if (index < element.commodity.length - 1) {\n                commName += \", \";\n              }\n            });\n            obj.commName = commName;\n          }\n\n          if (_this16.planOrderData.length > 0) {\n            _this16.planOrderData.map(op => {\n              if (op.orderID === obj.orderID) {\n                obj.orderNo = op.orderNo;\n              }\n            });\n          }\n\n          if (element.location != undefined && element.location != \"\") {\n            locations.push(element.location);\n          }\n\n          _this16.actualMiles += parseFloat(element.miles);\n\n          _this16.trips.push(obj);\n\n          let assetArr = [];\n\n          for (let j = 0; j < element.assetID.length; j++) {\n            const assetID = element.assetID[j];\n            let assObj = {\n              id: assetID,\n              name: _this16.assetsObjects[assetID]\n            };\n            assetArr.push(assObj);\n            _this16.trips[i].trailer = assetArr;\n          }\n\n          let trailerNames = assetArr.map(function (v) {\n            return v.name;\n          });\n          trailerNames = trailerNames.join();\n          _this16.trips[i].trailerName = trailerNames;\n        } // split trip\n\n\n        if (result.split) {\n          result.split.map((x, cind) => {\n            _this16.splitArr[cind] = [];\n            x.plan.map(c => {\n              _this16.trips.map(t => {\n                if (t.planID === c) {\n                  _this16.dummySplitArr.push(t.planID);\n\n                  t.splitDone = true;\n                  t.split = true;\n                  t.splitName = x.splitName;\n\n                  _this16.splitArr[cind].push(t);\n                }\n              });\n            });\n          });\n        }\n\n        if (_this16.dummySplitArr.length === _this16.trips.length) {\n          _this16.disableSplit = true;\n        } else {\n          _this16.disableSplit = false;\n        }\n\n        if (locations.length > 0) {\n          _this16.resetMap();\n        }\n\n        _this16.spinner.hide();\n      });\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  }\n\n  onUpdateTrip(type) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      _this17.hideErrors();\n\n      _this17.submitDisabled = true;\n      _this17.tripData.orderId = _this17.OrderIDs;\n      _this17.tripData.tripPlanning = [];\n      _this17.tripData[\"tripID\"] = _this17.route.snapshot.params[\"tripID\"];\n      _this17.tripData.dateCreated = moment(_this17.dateCreated).format(\"YYYY-MM-DD\");\n      _this17.tripData.mapFrom = _this17.mapOrderActive === \"active\" ? \"order\" : \"route\";\n      let planData = _this17.trips;\n\n      if (_this17.tripData.orderId.length == 0) {\n        _this17.toastr.error(\"Please select order.\");\n\n        _this17.submitDisabled = false;\n        return false;\n      }\n\n      if (planData.length == 0) {\n        _this17.toastr.error(\"Please add trip plan.\");\n\n        _this17.submitDisabled = false;\n        return false;\n      }\n\n      if (planData.length < 2) {\n        _this17.toastr.error(\"Please add atleast two trip plans.\");\n\n        _this17.submitDisabled = false;\n        return false;\n      }\n\n      if (planData.length >= 2) {\n        let addedPlan = planData.map(function (v) {\n          return v.type;\n        });\n\n        if (addedPlan.includes(\"Pickup\") !== true || addedPlan.includes(\"Delivery\") !== true) {\n          _this17.toastr.error(\"Pickup and delivery points are required.\");\n\n          return false;\n        }\n      }\n\n      let selectedCarrierids = [];\n      let selectedDriverids = [];\n      let selectedVehicles = [];\n      let selectedLocations = \"\";\n      let selectedAssets = [];\n      let stlStatus = [];\n\n      for (let i = 0; i < planData.length; i++) {\n        const element = planData[i];\n        let obj = {\n          type: \"\",\n          date: \"\",\n          name: \"\",\n          location: \"\",\n          mileType: \"\",\n          miles: \"\",\n          vehicleID: \"\",\n          vehicleName: \"\",\n          assetID: [],\n          driverUsername: \"\",\n          codriverUsername: \"\",\n          carrierID: null,\n          // time: '',\n          pickupTime: \"\",\n          dropTime: \"\",\n          // actualPickupTime: '',\n          // actualDropTime: '',\n          lat: \"\",\n          lng: \"\",\n          driverID: \"\",\n          coDriverID: \"\",\n          locData: {},\n          locMan: false,\n          milesMan: false,\n          planID: \"\",\n          orderID: element.orderID ? element.orderID : null,\n          commodity: element.commodity ? element.commodity : []\n        };\n        obj.type = element.type;\n        obj.date = element.date;\n        obj.name = element.name;\n        obj.location = element.locationName, obj.mileType = element.mileType;\n        obj.miles = element.miles;\n        obj.vehicleID = element.vehicleID;\n        obj.vehicleName = _this17.vehiclesObjects[element.vehicleID]; //   obj.time = element.time;\n\n        obj.pickupTime = element.pickupTime;\n        obj.dropTime = element.dropTime; // obj.actualPickupTime = element.actualPickupTime;\n        // obj.actualDropTime = element.actualDropTime;\n\n        obj.lat = element.lat;\n        obj.lng = element.lng;\n        obj.driverID = element.driverID;\n        obj.coDriverID = element.coDriverID;\n        obj.locData = element.locData;\n        obj.locMan = element.locMan ? element.locMan : false;\n        obj.milesMan = element.milesMan ? element.milesMan : false;\n        obj.planID = element.planID;\n\n        if (element.trailer != undefined && element.trailer != null) {\n          for (let j = 0; j < element.trailer.length; j++) {\n            const element1 = element.trailer[j];\n            obj.assetID.push(element1.id);\n\n            if (element1.id != \"\" && element1.id != undefined) {\n              if (!selectedAssets.includes(element1.id)) {\n                selectedAssets.push(element1.id);\n              }\n            }\n          }\n        }\n\n        obj.driverUsername = element.driverUsername;\n        obj.codriverUsername = element.coDriverUsername;\n        obj.carrierID = element.carrierID;\n\n        if (element.driverID != \"\" && element.driverID != undefined && element.driverID != null) {\n          if (!selectedDriverids.includes(element.driverID)) {\n            selectedDriverids.push(element.driverID);\n            let driverStatus = element.driverID + \":false\";\n            stlStatus.push(driverStatus);\n          }\n        }\n\n        if (element.coDriverID != \"\" && element.coDriverID != undefined && element.coDriverID != null) {\n          if (!selectedDriverids.includes(element.coDriverID)) {\n            selectedDriverids.push(element.coDriverID);\n            let driverStatus = element.coDriverID + \":false\";\n            stlStatus.push(driverStatus);\n          }\n        }\n\n        if (element.vehicleID != \"\" && element.vehicleID != undefined) {\n          if (!selectedVehicles.includes(element.vehicleID)) {\n            selectedVehicles.push(element.vehicleID);\n          }\n        }\n\n        if (element.carrierID != null && element.carrierID != undefined && element.carrierID != null) {\n          if (!selectedCarrierids.includes(element.carrierID)) {\n            selectedCarrierids.push(element.carrierID);\n            let carrStatus = element.carrierID + \":false\";\n            stlStatus.push(carrStatus);\n          }\n        }\n\n        if (element.locationName != \"\" && element.locationName != undefined) {\n          element.locationName = element.locationName.replace(/,/g, \"\");\n          selectedLocations += element.locationName.toLowerCase() + \"|\";\n        }\n\n        _this17.tripData.tripPlanning.push(obj);\n      }\n\n      _this17.splitTripArr();\n\n      _this17.tripData.driverIDs = selectedDriverids;\n      _this17.tripData.vehicleIDs = selectedVehicles;\n      _this17.tripData.assetIDs = selectedAssets;\n      _this17.tripData.loc = selectedLocations;\n      _this17.tripData.stlStatus = stlStatus;\n      _this17.tripData.carrierIDs = selectedCarrierids; // this.spinner.show();\n\n      _this17.errors = {};\n      _this17.hasError = false;\n      _this17.hasSuccess = false;\n      let url = \"\";\n\n      if (type === \"recall\") {\n        url = \"trip-recall/trip/recall\";\n      } else {\n        url = \"trips\";\n      }\n\n      _this17.apiService.putData(url, _this17.tripData).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n            _this17.errors[val.context.key] = val.message;\n          })).subscribe({\n            complete: () => {\n              _this17.submitDisabled = false;\n\n              _this17.spinner.hide(); // this.throwErrors();\n\n            },\n            error: () => {\n              _this17.submitDisabled = false;\n            },\n            next: () => {}\n          });\n        },\n        next: res => {\n          _this17.submitDisabled = false;\n\n          _this17.spinner.hide();\n\n          _this17.response = res;\n\n          _this17.toastr.success(\"Trip updated successfully.\"); // this.goBack();\n\n\n          _this17.router.navigate([`/dispatch/trips/trip-details/${_this17.tripID}`]);\n        }\n      });\n    })();\n  }\n\n  splitTripArr() {\n    this.tripData.split = [];\n\n    for (let i = 0; i < this.splitArr.length; i++) {\n      const element = this.splitArr[i];\n      let obz = {\n        plan: [],\n        stlStatus: [],\n        settlmnt: false,\n        assgnIds: [],\n        splitID: uuidv4(),\n        splitName: i + 1\n      };\n      this.tripData.split[i] = obz;\n      element.map(v => {\n        let stlStr = \"\";\n\n        if (v.carrierID != \"\" && v.carrierID != null && v.carrierID != undefined) {\n          if (!this.tripData.split[i].assgnIds.includes(v.carrierID)) {\n            stlStr = `${v.carrierID}:false`;\n            this.tripData.split[i].assgnIds.push(v.carrierID);\n            this.tripData.split[i].stlStatus.push(stlStr);\n          }\n        }\n\n        if (v.driverID != \"\" && v.driverID != null && v.driverID != undefined) {\n          if (!this.tripData.split[i].assgnIds.includes(v.driverID)) {\n            stlStr = `${v.driverID}:false`;\n            this.tripData.split[i].assgnIds.push(v.driverID);\n            this.tripData.split[i].stlStatus.push(stlStr);\n          }\n        }\n\n        if (v.coDriverID != \"\" && v.coDriverID != null && v.coDriverID != undefined) {\n          if (!this.tripData.split[i].assgnIds.includes(v.coDriverID)) {\n            stlStr = `${v.coDriverID}:false`;\n            this.tripData.split[i].assgnIds.push(v.coDriverID);\n            this.tripData.split[i].stlStatus.push(stlStr);\n          }\n        }\n\n        this.tripData.split[i].plan.push(v.planID);\n      });\n    }\n  }\n\n  resetMap() {\n    this.newCoords = [];\n    this.trips.map(v => {\n      if (v.lat != \"\" && v.lng != \"\") {\n        this.newCoords.push(`${v.lat},${v.lng}`);\n      }\n    });\n    this.hereMap.calculateRoute(this.newCoords, this.optionalSpec);\n  }\n\n  getVehicles() {\n    this.selectedVehicleSpecs = [];\n    this.trips.forEach(trip => {\n      if (trip.vehicleID) {\n        this.selectedVehicleSpecs.push(this.vehicles.find(({\n          vehicleID\n        }) => vehicleID == trip.vehicleID).specifications);\n      }\n    });\n\n    if (this.selectedVehicleSpecs.length > 0) {\n      this.optionalSpec = {\n        height: Math.max.apply(Math, this.selectedVehicleSpecs.map(function (spec) {\n          return spec.height * 100;\n        }))\n      };\n      this.resetMap();\n    }\n  }\n\n  fetchOrderDetails(orderIds) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      _this18.OldOrderIDs = orderIds;\n      orderIds = JSON.stringify(orderIds);\n      let result = yield _this18.apiService.getData(\"orders/fetch/selectedOrders?orderIds=\" + orderIds).toPromise(); // .subscribe((result: any) => {\n\n      let calcultedBy = \"\"; // let totalMilesOrder = 0;\n\n      _this18.planComm = [];\n\n      for (let i = 0; i < result.length; i++) {\n        const element = result[i];\n        const v = result[i]; // if (v.invoiceGenerate) {\n        //   this.submitDisabled = true;\n        // }\n\n        calcultedBy = element.milesInfo.calculateBy; // totalMilesOrder += parseFloat(element.milesInfo.totalMiles);\n\n        _this18.orderNo += element.orderNumber;\n\n        if (i < result.length - 1) {\n          _this18.orderNo = _this18.orderNo + \", \";\n        }\n\n        let ordObj = {\n          orderID: v.orderID,\n          orderNo: v.orderNumber\n        };\n\n        _this18.planOrderData.push(ordObj);\n\n        if (v.shippersReceiversInfo) {\n          v.shippersReceiversInfo.map(m => {\n            let PDate = \"\";\n            let PTime = \"\";\n            m.shippers.map( /*#__PURE__*/function () {\n              var _ref6 = _asyncToGenerator(function* (n) {\n                n.pickupPoint.map(pk => {\n                  if (pk.dateAndTime != undefined && pk.dateAndTime != \"\") {\n                    let dmy = pk.dateAndTime.split(\" \");\n                    PDate = dmy[0].split(\"-\").reverse().join(\"-\");\n                    PTime = dmy[1];\n                  }\n\n                  let pickLocation = \"\";\n\n                  if (pk.address.manual) {\n                    pickLocation = `${pk.address.address}, ${pk.address.city}, ${pk.address.state}. ${pk.address.country}`;\n                  } else {\n                    pickLocation = pk.address.pickupLocation;\n                  }\n\n                  pk.commodity.map(cm => {\n                    cm.name = cm.name.trim();\n\n                    if (!_this18.planComm.includes(cm.name)) {\n                      _this18.planComm.push(cm.name);\n                    }\n                  });\n                  let pickupMiles = 0;\n                  let obj = {\n                    type: \"Pickup\",\n                    // date: PDate,\n                    name: _this18.shippersObjects[n.shipperID],\n                    miles: pickupMiles,\n                    carrierID: null,\n                    carrierName: \"\",\n                    // time: PTime,\n                    pickupTime: PTime,\n                    dropTime: \"\",\n                    actualPickupTime: \"\",\n                    actualDropTime: \"\",\n                    locationName: pickLocation,\n                    vehicleName: \"\",\n                    trailerName: \"\",\n                    driverName: \"\",\n                    coDriverName: \"\",\n                    fromOrder: \"yes\",\n                    lat: pk.address.geoCords.lat,\n                    lng: pk.address.geoCords.lng\n                  };\n\n                  _this18.orderStops.push(obj);\n\n                  _this18.orderStops.sort((a, b) => b.type.localeCompare(a.type));\n                });\n              });\n\n              return function (_x5) {\n                return _ref6.apply(this, arguments);\n              };\n            }());\n          });\n          v.shippersReceiversInfo.map(j => {\n            j.receivers.map( /*#__PURE__*/function () {\n              var _ref7 = _asyncToGenerator(function* (k) {\n                k.dropPoint.map(dr => {\n                  let DrDate = \"\";\n                  let DrTime = \"\";\n\n                  if (dr.dateAndTime != undefined && dr.dateAndTime != \"\") {\n                    let dmy = dr.dateAndTime.split(\" \");\n                    DrDate = dmy[0].split(\"-\").reverse().join(\"-\");\n                    DrTime = dmy[1];\n                  }\n\n                  let dropLocation = \"\";\n\n                  if (dr.address.manual) {\n                    dropLocation = `${dr.address.address}, ${dr.address.city}, ${dr.address.state}, ${dr.address.country}`;\n                  } else {\n                    dropLocation = dr.address.dropOffLocation;\n                  }\n\n                  dr.commodity.map(cm => {\n                    cm.name = cm.name.trim();\n\n                    if (!_this18.planComm.includes(cm.name)) {\n                      _this18.planComm.push(cm.name);\n                    }\n                  });\n                  let deliveryMiles = 0;\n                  let obj = {\n                    type: \"Delivery\",\n                    // date: DrDate,\n                    name: _this18.receiversObjects[k.receiverID],\n                    miles: deliveryMiles,\n                    carrierID: null,\n                    carrierName: \"\",\n                    // time: DrTime,\n                    pickupTime: \"\",\n                    dropTime: DrTime,\n                    actualPickupTime: \"\",\n                    actualDropTime: \"\",\n                    locationName: dropLocation,\n                    vehicleName: \"\",\n                    trailerName: \"\",\n                    driverName: \"\",\n                    coDriverName: \"\",\n                    fromOrder: \"yes\",\n                    lat: dr.address.geoCords.lat,\n                    lng: dr.address.geoCords.lng\n                  };\n\n                  _this18.orderStops.push(obj);\n\n                  _this18.orderStops.sort((a, b) => b.type.localeCompare(a.type));\n                });\n              });\n\n              return function (_x6) {\n                return _ref7.apply(this, arguments);\n              };\n            }());\n          });\n        }\n      }\n\n      _this18.setOrdersDataFormat(result, \"selected\"); // this.orderMiles = {\n      //   calculateBy: calcultedBy,\n      //   totalMiles: totalMilesOrder,\n      // };\n      // });\n\n    })();\n  }\n\n  getRoutes() {\n    this.fetchRoutes();\n    this.mapOrderActive = \"\";\n    this.mapRouteActive = \"active\";\n    this.tripData.mapFrom = \"route\";\n  }\n\n  changeMapRoute(type) {\n    var _this19 = this;\n\n    if (type == \"route\") {\n      if (this.tripData.routeID != \"\" && this.tripData.routeID != null) {\n        this.orderStops = this.trips;\n        this.trips = [];\n        this.actualMiles = 0; //change route\n\n        this.apiService.getData(\"routes/\" + this.tripData.routeID).subscribe( /*#__PURE__*/function () {\n          var _ref8 = _asyncToGenerator(function* (result) {\n            let routeData = result.Items[0];\n            let routePath = [];\n            _this19.newCoords = [];\n\n            if (routeData.stops.length > 0) {\n              for (let i = 0; i < routeData.stops.length; i++) {\n                const element = routeData.stops[i];\n                routePath.push(element.stopName);\n                let routeType = \"\";\n\n                if (i == 0) {\n                  routeType = \"Pickup\";\n                } else if (i > 0 && i < routeData.stops.length) {\n                  routeType = \"Stop\";\n                }\n\n                if (i == routeData.stops.length - 1) {\n                  routeType = \"Delivery\";\n                }\n\n                let obj = {\n                  splitDone: false,\n                  split: false,\n                  planID: uuidv4(),\n                  type: routeType,\n                  name: \"\",\n                  miles: 0,\n                  carrierID: null,\n                  carrierName: \"\",\n                  pickupTime: \"\",\n                  dropTime: \"\",\n                  actualPickupTime: \"\",\n                  actualDropTime: \"\",\n                  locationName: element.name,\n                  vehicleName: \"\",\n                  trailerName: \"\",\n                  driverName: \"\",\n                  coDriverName: \"\",\n                  fromOrder: \"yes\",\n                  lat: element.lat,\n                  lng: element.lng\n                };\n\n                _this19.newCoords.push(`${element.lat},${element.lng}`);\n\n                _this19.trips.push(obj);\n              }\n\n              yield _this19.hereMap.calculateRoute(_this19.newCoords);\n            }\n\n            yield _this19.getMiles();\n          });\n\n          return function (_x7) {\n            return _ref8.apply(this, arguments);\n          };\n        }());\n        this.mapOrderActive = \"\";\n        this.mapRouteActive = \"active\";\n        this.tripData.mapFrom = \"route\";\n      } else {\n        this.mapOrderActive = \"active\";\n        this.mapRouteActive = \"\";\n        this.tripData.mapFrom = \"order\";\n        this.mapOrderActiveDisabled = false;\n        this.toastr.error(\"Please select permanent route\");\n      }\n    } else {\n      if (this.orderNo != \"\" && this.orderNo != undefined) {\n        this.trips = this.orderStops;\n        this.actualMiles = 0;\n        this.getMiles();\n        this.resetMap();\n        this.mapOrderActive = \"active\";\n        this.mapRouteActive = \"\";\n        this.tripData.mapFrom = \"order\";\n      } else {\n        this.mapOrderActive = \"\";\n        this.mapRouteActive = \"active\";\n        this.tripData.mapFrom = \"route\";\n        this.toastr.error(\"Please select order\");\n      }\n    }\n  }\n\n  makeRoutePlan() {\n    if (this.tripData.mapFrom == \"route\") {\n      this.changeMapRoute(\"route\");\n    }\n  }\n\n  scrollError() {\n    let errorList;\n    setTimeout(() => {\n      errorList = document.getElementsByClassName(\"error\").length;\n\n      if (errorList > 0) {\n        let topPosition = $(\".error\").parent(\"div\").offset().top;\n        window.scrollTo({\n          top: topPosition - 200,\n          left: 0,\n          behavior: \"smooth\"\n        });\n      }\n    }, 1500);\n  }\n\n  getStateWiseMiles() {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      let unitIDs = [];\n      let unitData = [];\n\n      for (const plan of _this20.trips) {\n        if (plan.vehicleID !== undefined && plan.vehicleID !== \"\") {\n          if (!unitIDs.includes(plan.vehicleID)) {\n            unitIDs.push(plan.vehicleID);\n            let obj = {\n              vehicleID: plan.vehicleID,\n              assetID: \"\",\n              locations: []\n            };\n\n            if (plan.lng && plan.lat) {\n              let endingPoint = plan.lng + \",\" + plan.lat;\n              obj.locations.push(endingPoint);\n            }\n\n            unitData.push(obj);\n          } else {\n            unitData.map(v => {\n              if (v.vehicleID === plan.vehicleID) {\n                let endingPoint = plan.lng + \",\" + plan.lat;\n                v.locations.push(endingPoint);\n              }\n            });\n          }\n        }\n\n        if (plan.trailerID !== undefined && plan.trailerID !== \"\" && plan.trailerID.length > 0) {\n          for (const asset of plan.trailerID) {\n            if (!unitIDs.includes(asset)) {\n              unitIDs.push(asset);\n              let obj = {\n                assetID: asset,\n                vehicleID: \"\",\n                locations: []\n              };\n\n              if (plan.lng && plan.lat) {\n                let endingPoint = plan.lng + \",\" + plan.lat;\n                obj.locations.push(endingPoint);\n              }\n\n              unitData.push(obj);\n            } else {\n              unitData.map(v => {\n                if (v.assetID === asset) {\n                  let endingPoint = plan.lng + \",\" + plan.lat;\n                  v.locations.push(endingPoint);\n                }\n              });\n            }\n          }\n        }\n      }\n\n      let tripIfta = [];\n      tripIfta[0] = [];\n\n      for (const vehicle of unitData) {\n        if (vehicle.locations.length > 1) {\n          try {\n            let newsMiles = JSON.stringify(vehicle.locations);\n\n            _this20.apiService.getData(\"trips/calculate/pc/miles?type=stateReport&stops=\" + newsMiles).subscribe(result => {\n              for (let m = 0; m < result.length; m++) {\n                const milesElement = result[m];\n                milesElement.distanceUnit = \"miles\";\n                delete milesElement.Empty;\n                delete milesElement.Energy;\n                delete milesElement.Ferry;\n              }\n\n              let data = {};\n\n              if (vehicle.vehicleID) {\n                data = {\n                  [vehicle.vehicleID]: result\n                };\n              } else if (vehicle.assetID) {\n                data = {\n                  [vehicle.assetID]: result\n                };\n              }\n\n              tripIfta[0].push(data);\n            });\n          } catch (error) {\n            return false;\n          }\n        }\n      }\n\n      _this20.tripData.iftaMiles = tripIfta;\n    })();\n  }\n\n  showConfirmationPopup() {\n    let ngbModalOptions = {\n      backdrop: \"static\",\n      keyboard: false,\n      windowClass: \"assign-confirm__main\"\n    };\n    this.tripModalRef.close();\n    this.assignConfirmModal = this.modalService.open(this.assignConfirmationModal, ngbModalOptions);\n  }\n\n  locationModel(type, index = \"\") {\n    this.locObj = {\n      addr: \"\",\n      cCode: null,\n      sCode: null,\n      cName: \"\",\n      sName: \"\",\n      ctName: null,\n      zipCode: \"\",\n      type: \"\",\n      index: \"\"\n    };\n\n    if (this.locObj.type == \"add\") {\n      this.textFieldValues.locationName = \"\";\n    }\n\n    if (this.textFieldValues.locMan || this.trips[index].locMan) {\n      this.locObj.type = type;\n      this.locObj.index = index;\n\n      if (this.locObj.type == \"edit\") {\n        this.locObj.addr = this.trips[index].locData.addr;\n        this.locObj.ctName = this.trips[index].locData.ctName;\n        this.locObj.sName = this.trips[index].locData.sName;\n        this.locObj.cName = this.trips[index].locData.cName;\n        this.locObj.zipCode = this.trips[index].locData.zip;\n        this.locObj.sCode = this.trips[index].locData.sCode;\n        this.locObj.cCode = this.trips[index].locData.cCode;\n      }\n\n      $(\"#manualLocationModal\").modal(\"show\");\n    }\n  }\n\n  fetchCountries() {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      _this21.countries = yield _this21.countryStateCity.GetAllCountries();\n    })();\n  }\n\n  getStates(countryCode) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      _this22.states = yield _this22.countryStateCity.GetStatesByCountryCode([countryCode]);\n      _this22.locObj.cName = yield _this22.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n    })();\n  }\n\n  getCities(stateCode, countryCode) {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      _this23.cities = yield _this23.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n      _this23.locObj.sName = yield _this23.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n    })();\n  }\n\n  saveManualLocation() {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      _this24.locDisabled = true;\n      let data = {\n        address: _this24.locObj.addr,\n        cityName: _this24.locObj.ctName,\n        stateName: _this24.locObj.sName,\n        countryName: _this24.locObj.cName,\n        zipCode: _this24.locObj.zipCode\n      };\n      let tripData = {\n        addr: _this24.locObj.addr,\n        ctName: _this24.locObj.ctName,\n        sName: _this24.locObj.sName,\n        cName: _this24.locObj.cName,\n        zip: _this24.locObj.zipCode,\n        sCode: _this24.locObj.sCode,\n        cCode: _this24.locObj.cCode\n      };\n      let result = yield _this24.newGeoCode(data);\n\n      if (_this24.locObj.type == \"add\") {\n        _this24.textFieldValues.locData = tripData;\n        _this24.textFieldValues.lat = result.lat;\n        _this24.textFieldValues.lng = result.lng;\n      }\n\n      _this24.textFieldValues.locationName = `${_this24.locObj.addr}, ${_this24.locObj.ctName}, ${_this24.locObj.sName}, ${_this24.locObj.cName}, ${_this24.locObj.zipCode} `;\n      $(\"#manualLocationModal\").modal(\"hide\");\n    })();\n  }\n\n  newGeoCode(data) {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this25.apiService.getData(`pcMiles/geocoding/${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n      if (result.items != undefined && result.items.length > 0) {\n        return result.items[0].position;\n      }\n\n      _this25.locDisabled = false;\n    })();\n  }\n\n  selectManualAddress(index) {\n    this.trips[index].locationName = \"\";\n    this.locObj = {\n      addr: \"\",\n      cCode: null,\n      sCode: null,\n      cName: \"\",\n      sName: \"\",\n      ctName: null,\n      zipCode: \"\",\n      type: \"\",\n      index: \"\"\n    };\n  }\n\n  splitTrip() {\n    let tripDriver = [];\n\n    for (const element of this.trips) {\n      if (element.split && !this.dummySplitArr.includes(element.planID)) {\n        this.dummySplitArr.push(element.planID);\n        element.splitDone = true;\n        tripDriver.push(element);\n      }\n    }\n\n    if (tripDriver.length > 0) {\n      if (this.dummySplitArr.length === this.trips.length) {\n        this.disableSplit = true;\n      } else {\n        this.disableSplit = false;\n      }\n\n      this.splitArr.push(tripDriver);\n    }\n  }\n\n  delSubTrip(index) {\n    let delArr = this.splitArr[index];\n\n    if (delArr) {\n      for (const element of this.splitArr[index]) {\n        element.splitDone = false;\n        element.split = false;\n        let planInd = this.dummySplitArr.indexOf(element.planID);\n        this.dummySplitArr.splice(planInd, 1);\n      }\n\n      this.splitArr.splice(index, 1);\n      this.disableSplit = false;\n    }\n  }\n\n  openManualAsset(modal) {\n    this.tripModalRef.close();\n    let ngbModalOptions = {\n      backdrop: \"static\",\n      keyboard: false,\n      windowClass: \"asset-manual__main\",\n      backdropClass: \"light-blue-backdrop\"\n    };\n    this.manualAssetRef = this.modalService.open(modal, ngbModalOptions);\n  }\n\n  addManualAsset() {\n    this.submitDisabled = true;\n    this.tripModalRef.close();\n    this.apiService.postData(\"assets/addManualAsset\", this.assetData).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toastr.success(\"Asset added successfully.\");\n        this.assetData = {\n          assetIdentification: \"\",\n          isTemp: true\n        };\n        this.fetchAssets();\n        this.manualAssetRef.close();\n        this.openTripAssignModel();\n      }\n    });\n  }\n\n  openTripAssignModel() {\n    let ngbModalOptions = {\n      backdrop: \"static\",\n      keyboard: false,\n      windowClass: \"trips-assign__main\"\n    };\n    this.tripModalRef = this.modalService.open(this.assignAssetModel, ngbModalOptions);\n  }\n\n  copyRow(index) {\n    let row = this.trips[index]; // assign values\n\n    this.textFieldValues.type = row.type;\n    this.textFieldValues.orderID = row.orderID;\n    this.textFieldValues.commodity = row.commodity;\n    this.textFieldValues.date = row.date;\n    this.textFieldValues.pickupTime = row.pickupTime;\n    this.textFieldValues.dropTime = row.dropTime;\n    this.textFieldValues.actualPickupTime = row.actualPickupTime;\n    this.textFieldValues.actualDropTime = row.actualDropTime;\n    this.textFieldValues.name = row.name;\n    this.textFieldValues.locData = row.locData;\n    this.textFieldValues.mileType = row.mileType;\n    this.textFieldValues.miles = 0;\n    this.textFieldValues.vehicleName = row.vehicleName;\n    this.textFieldValues.vehicleID = row.vehicleID;\n    this.textFieldValues.driverName = row.driverName;\n    this.textFieldValues.driverUsername = row.driverUsername;\n    this.textFieldValues.coDriverName = row.coDriverName;\n    this.textFieldValues.coDriverUsername = row.coDriverUsername;\n    this.textFieldValues.carrierName = row.carrierName;\n    this.textFieldValues.carrierID = row.carrierID;\n    this.textFieldValues.trailer = row.trailer;\n    this.textFieldValues.trailerName = row.trailerName;\n    this.textFieldValues.driverID = row.driverID;\n    this.textFieldValues.coDriverID = row.coDriverID;\n    this.textFieldValues.locationName = row.locationName;\n    this.textFieldValues.locMan = row.locMan;\n    this.textFieldValues.milesMan = row.milesMan;\n    this.textFieldValues.lat = row.lat;\n    this.textFieldValues.lng = row.lng;\n  }\n\n  checkType(val, index = \"\") {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      if (val === \"Yard\") {\n        let result = yield _this26.apiService.getData(`carriers/${_this26.currentCarrID}`).toPromise();\n        const address = result.Items[0].addressDetails;\n        let yardAddress;\n        let yardGeoCode = {\n          lat: \"\",\n          lng: \"\"\n        };\n\n        for (let index = 0; index < address.length; index++) {\n          const element = address[index];\n\n          if (element.defaultYard) {\n            if (element.manual) {\n              yardAddress = `${element.address} ${element.cityName} ${element.stateName} ${element.countryName}. ${element.zipCode}`;\n            } else {\n              yardAddress = element.userLocation;\n            }\n\n            yardGeoCode = element.geoCords;\n          }\n        }\n\n        if (index === \"\") {\n          _this26.textFieldValues.locationName = yardAddress;\n          _this26.textFieldValues.lat = yardGeoCode.lat;\n          _this26.textFieldValues.lng = yardGeoCode.lng;\n        } else {\n          _this26.trips[index].locationName = yardAddress;\n          _this26.trips[index].lat = yardGeoCode.lat;\n          _this26.trips[index].lng = yardGeoCode.lng;\n        }\n      } else {\n        if (index === \"\") {\n          _this26.textFieldValues.locationName = \"\";\n          _this26.textFieldValues.lat = \"\";\n          _this26.textFieldValues.lng = \"\";\n        } else {\n          _this26.trips[index].locationName = \"\";\n          _this26.trips[index].lat = \"\";\n          _this26.trips[index].lng = \"\";\n        }\n      }\n    })();\n  }\n\n};\n\nAddTripComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: NgbModal\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: Location\n}, {\n  type: HereMapService\n}, {\n  type: CountryStateCityService\n}, {\n  type: ElementRef\n}, {\n  type: RouteManagementServiceService\n}];\n\nAddTripComponent.propDecorators = {\n  assignAssetModel: [{\n    type: ViewChild,\n    args: [\"assignAssetModel\", {\n      static: true\n    }]\n  }],\n  assignConfirmationModal: [{\n    type: ViewChild,\n    args: [\"assignConfirmationModal\", {\n      static: true\n    }]\n  }],\n  orderModal: [{\n    type: ViewChild,\n    args: [\"orderModal\", {\n      static: true\n    }]\n  }]\n};\nAddTripComponent = __decorate([Component({\n  selector: \"app-add-trip\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddTripComponent);\nexport { AddTripComponent };","map":null,"metadata":{},"sourceType":"module"}