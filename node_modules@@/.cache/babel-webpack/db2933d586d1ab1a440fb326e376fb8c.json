{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-expense-payment.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-expense-payment.component.css\";\nimport { Component } from \"@angular/core\";\nimport * as moment from \"moment\";\nimport { ApiService } from \"src/app/services/api.service\";\nimport Constants from \"src/app/pages/fleet/constants\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { AccountService } from \"src/app/services/account.service\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport { ListService } from \"src/app/services/list.service\";\nimport { Location } from \"@angular/common\";\nlet AddExpensePaymentComponent = class AddExpensePaymentComponent {\n  constructor(apiService, toaster, accountService, router, listService, location) {\n    this.apiService = apiService;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.router = router;\n    this.listService = listService;\n    this.location = location;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n    this.dataMessageExp = Constants.NO_RECORDS_FOUND;\n    this.paymentData = {\n      paymentTo: null,\n      entityId: null,\n      paymentNo: \"\",\n      txnDate: moment().format(\"YYYY-MM-DD\"),\n      fromDate: null,\n      toDate: null,\n      settlementIds: [],\n      advancePayIds: [],\n      payMode: null,\n      payModeNo: \"\",\n      payModeDate: null,\n      currency: \"CAD\",\n      finalAmount: 0,\n      accountID: null,\n      advData: [],\n      transactionLog: [],\n      expData: [],\n      expIds: [],\n      advTotal: 0,\n      expTotal: 0\n    };\n    this.drivers = [];\n    this.carriers = [];\n    this.ownerOperators = [];\n    this.payModeLabel = \"\";\n    this.editDisabled = true;\n    this.settlements = [];\n    this.advancePayments = [];\n    this.searchDisabled = false;\n    this.accList = {};\n    this.expenses = [];\n    this.submitDisabled = false;\n    this.errors = {};\n    this.response = \"\";\n    this.showModal = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.expErr = \"\";\n  }\n\n  ngOnInit() {\n    this.subscription = this.listService.paymentSaveList.subscribe(res => {\n      if (res.openFrom === \"addForm\") {\n        this.addRecord();\n      }\n    });\n    this.fetchAccounts();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  emptyPrevSelection() {\n    this.settlements = [];\n    this.advancePayments = [];\n    this.expenses = [];\n    this.paymentData.finalAmount = 0;\n    this.paymentData.advTotal = 0;\n    this.paymentData.expTotal = 0;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n    this.dataMessageExp = Constants.NO_RECORDS_FOUND;\n  }\n\n  getEntityData(type = \"\") {\n    this.emptyPrevSelection();\n\n    if (type === \"driver\") {\n      this.carriers = [];\n      this.ownerOperators = [];\n      this.fetchDrivers();\n    } else if (type === \"carrier\") {\n      this.drivers = [];\n      this.ownerOperators = [];\n      this.fetchCarriers();\n    } else if (type === \"owner_operator\") {\n      this.drivers = [];\n      this.carriers = [];\n      this.fetchOwnerOperators();\n    }\n  }\n\n  fetchDrivers() {\n    this.apiService.getData(`drivers/get/all/active`).subscribe(result => {\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.drivers.push(element);\n        }\n      });\n    });\n  }\n\n  fetchCarriers() {\n    this.apiService.getData(\"contacts/get/type/carrier\").subscribe(result => {\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.carriers.push(element);\n        }\n      });\n    });\n  }\n\n  fetchOwnerOperators() {\n    this.apiService.getData(`contacts/get/type/ownerOperator`).subscribe(result => {\n      result.forEach(element => {\n        if (element.isDeleted === 0) {\n          this.ownerOperators.push(element);\n        }\n      });\n    });\n  }\n\n  fetchSearchData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.settlements = [];\n      _this.advancePayments = [];\n      _this.expenses = [];\n\n      if (_this.paymentData.entityId != null) {\n        if (_this.paymentData.fromDate !== null && _this.paymentData.toDate == null) {\n          _this.toaster.error(\"Please select to date\");\n\n          return false;\n        }\n\n        _this.dataMessage = Constants.FETCHING_DATA;\n        _this.searchDisabled = true;\n\n        _this.fetchAdvancePayments();\n\n        const result = yield _this.accountService.getData(`settlement/expenses/entity/${_this.paymentData.entityId}?from=${_this.paymentData.fromDate}&to=${_this.paymentData.toDate}&type=${_this.paymentData.paymentTo}&curr=${_this.paymentData.currency}`).toPromise(); // .subscribe((result: any) => {\n\n        if (result.length === 0) {\n          _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        _this.searchDisabled = false;\n        result.map(u => {\n          u.selected = false;\n        });\n        _this.settlements = result; // });\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  fetchAdvancePayments() {\n    this.dataMessageAdv = Constants.FETCHING_DATA;\n    this.accountService.getData(`advance/entity/${this.paymentData.entityId}?from=${this.paymentData.fromDate}&to=${this.paymentData.toDate}&curr=${this.paymentData.currency}&type=expense&fetch=other&entityType=${this.paymentData.paymentTo}`).subscribe(result => {\n      if (result.length === 0) {\n        this.dataMessageAdv = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.advancePayments = result;\n      this.advancePayments.map(v => {\n        v.selected = false;\n\n        if (v.payMode) {\n          v.payMode = v.payMode.replace(\"_\", \" \");\n        }\n\n        v.fullPayment = false;\n        v.paidAmount = 0;\n        v.paidStatus = false;\n        v.status = v.status.replace(\"_\", \" \");\n        v.errText = \"\";\n        v.prevPaidAmount = Number(v.amount) - Number(v.pendingPayment);\n        v.prevPaidAmount = v.prevPaidAmount.toFixed(2);\n      });\n    });\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/get/all/list`).subscribe(result => {\n      this.accList = result;\n    });\n  }\n\n  selectedSettlements() {\n    let tripIDs = [];\n    this.paymentData.settlementIds = [];\n    this.settlements.map(p => {\n      if (p.selected) {\n        this.paymentData.settlementIds.push(p.sttlID);\n        tripIDs = tripIDs.concat(p.tripIds);\n      }\n    });\n\n    if (tripIDs.length > 0) {\n      let selTrips = encodeURIComponent(JSON.stringify(tripIDs));\n      this.fetchExpenses(selTrips);\n    }\n  }\n\n  fetchExpenses(tripIDs) {\n    this.dataMessageExp = Constants.FETCHING_DATA;\n    this.accountService.getData(`expense/getBy/trips/${tripIDs}?curr=${this.paymentData.currency}`).subscribe(result => {\n      if (result.length === 0) {\n        this.dataMessageExp = Constants.NO_RECORDS_FOUND;\n      }\n\n      result.map(exp => {\n        exp.prevPaidAmount = Number(exp.finalTotal) - Number(exp.balance);\n        exp.status = exp.status ? exp.status : \"pending\";\n        exp.status = exp.status.replace(\"_\", \" \");\n        exp.paidStatus = false;\n        exp.errText = \"\";\n      });\n      this.expenses = result;\n    });\n  }\n\n  assignFullPayment(type, index, data) {\n    if (type === \"expense\") {\n      if (data.fullPayment) {\n        this.expenses[index].paidAmount = data.balance;\n        this.expenses[index].selected = true;\n        this.expenses[index].paidStatus = true;\n      } else {\n        this.expenses[index].paidAmount = 0;\n        this.expenses[index].paidStatus = false;\n      }\n\n      this.selectedExpenses();\n    } else {\n      if (data.fullPayment) {\n        this.advancePayments[index].paidAmount = data.pendingPayment;\n        this.advancePayments[index].selected = true;\n        this.advancePayments[index].paidStatus = true;\n      } else {\n        this.advancePayments[index].paidAmount = 0;\n        this.advancePayments[index].paidStatus = false;\n      }\n\n      this.selectedAdvancepayments();\n    }\n  }\n\n  selectedExpenses() {\n    this.paymentData.expData = [];\n    this.paymentData.expIds = [];\n    this.paymentData.expTotal = 0;\n\n    for (const element of this.expenses) {\n      if (element.selected && !this.paymentData.expIds.includes(element.expenseID)) {\n        if (!element.paidAmount) {\n          element.paidAmount = 0;\n        }\n\n        let status = \"deducted\";\n\n        if (Number(element.paidAmount) < Number(element.balance)) {\n          status = \"partially_deducted\";\n        }\n\n        const obj = {\n          expID: element.expenseID,\n          amount: element.paidAmount,\n          status: status,\n          pendingAmount: Number(element.balance) - Number(element.paidAmount),\n          tripID: element.tripID,\n          expDate: element.txnDate,\n          expTotal: element.finalTotal,\n          tripNo: element.tripNo\n        };\n        this.paymentData.expTotal += Number(element.paidAmount);\n        this.paymentData.expData.push(obj);\n        this.paymentData.expIds.push(element.expenseID);\n\n        if (this.paymentData.expTotal >= 0) {\n          this.submitDisabled = false;\n        } else {\n          this.submitDisabled = true;\n        }\n      }\n    }\n\n    this.paymentCalculation();\n  }\n\n  checkInput(type, index = \"\") {\n    if (type == \"expense\") {\n      let expenseAmount = Number(this.expenses[index][\"balance\"]);\n      let enteredAmount = Number(this.expenses[index][\"paidAmount\"]);\n\n      if (enteredAmount < 0 || enteredAmount > expenseAmount) {\n        this.expenses[index][\"errText\"] = \"Please enter valid amount\"; // this.submitDisabled = true;\n      } else {\n        this.expenses[index][\"errText\"] = \"\"; // this.submitDisabled = false;\n      }\n    } else if (type == \"advance\") {\n      let advAmount = Number(this.advancePayments[index][\"pendingPayment\"]);\n      let enteredAmount = Number(this.advancePayments[index][\"paidAmount\"]);\n\n      if (enteredAmount < 0 || enteredAmount > advAmount) {\n        this.advancePayments[index][\"errText\"] = \"Please enter valid amount\"; // this.submitDisabled = true;\n      } else {\n        this.advancePayments[index][\"errText\"] = \"\"; // this.submitDisabled = false;\n      }\n\n      this.selectedAdvancepayments();\n    }\n  }\n\n  selectedAdvancepayments() {\n    this.paymentData.advancePayIds = [];\n    this.paymentData.advData = [];\n    this.paymentData.advTotal = 0;\n\n    for (const element of this.advancePayments) {\n      if (element.selected && !this.paymentData.advancePayIds.includes(element.paymentID)) {\n        let status = \"deducted\";\n\n        if (Number(element.paidAmount) < Number(element.pendingPayment)) {\n          status = \"partially_deducted\";\n        }\n\n        const obj = {\n          paymentID: element.paymentID,\n          amount: element.paidAmount,\n          status: status,\n          pendingAmount: Number(element.pendingPayment) - Number(element.paidAmount),\n          advPayNo: element.paymentNo,\n          advTotal: element.amount\n        };\n        this.paymentData.advTotal += Number(element.paidAmount);\n        this.paymentData.advancePayIds.push(element.paymentID);\n        this.paymentData.advData.push(obj);\n      }\n    }\n\n    this.paymentCalculation();\n  }\n\n  paymentCalculation() {\n    // this.paymentData.finalAmount = Math.abs(\n    //   Number(this.paymentData.advTotal) - Number(this.paymentData.expTotal)\n    // );\n    this.expErr = \"\";\n    this.paymentData.finalAmount = Number(this.paymentData.expTotal) - Number(this.paymentData.advTotal);\n  }\n\n  addRecord() {\n    if (this.paymentData.expTotal === 0) {\n      this.toaster.error(\"Please enter expense amount\");\n      return false;\n    } // if (this.paymentData.advTotal === 0) {\n    //   this.toaster.error(\"Please enter advance amount\");\n    //   return false;\n    // }\n\n\n    if (this.paymentData.expTotal < this.paymentData.advTotal) {\n      this.expErr = \"Advance total cannot exceed the expense total amount\";\n      return false;\n    }\n\n    for (const element of this.advancePayments) {\n      if (element.selected && element.paidAmount == \"\") {\n        this.toaster.error(\"Please enter valid advance payment\");\n        return false;\n      }\n    }\n\n    if (this.paymentData.finalAmount < 0) {\n      return false;\n    }\n\n    this.submitDisabled = true;\n    this.accountService.postData(\"expense-payments\", this.paymentData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, \"This Field\");\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success(\"Expense payment added successfully.\");\n        let obj = {\n          type: '',\n          openFrom: ''\n        };\n        this.listService.triggerPaymentSave(obj);\n        let payObj = {\n          showModal: false,\n          page: \"\"\n        };\n        this.listService.openPaymentChequeModal(payObj);\n        this.router.navigateByUrl(\"/accounts/payments/expense-payments/list\");\n      }\n    });\n  }\n\n  showCheque() {\n    this.showModal = true;\n    let obj = {\n      entityId: this.paymentData.entityId,\n      chequeDate: this.paymentData.payModeDate,\n      chequeAmount: this.paymentData.finalAmount,\n      type: \"expensePayment\",\n      paymentTo: this.paymentData.paymentTo,\n      chequeNo: this.paymentData.payModeNo,\n      currency: this.paymentData.currency,\n      showModal: this.showModal,\n      fromDate: this.paymentData.fromDate,\n      toDate: this.paymentData.toDate,\n      finalAmount: this.paymentData.finalAmount,\n      txnDate: this.paymentData.txnDate,\n      page: \"addForm\"\n    };\n    this.listService.openPaymentChequeModal(obj);\n  }\n\n  changePaymentMode(type) {\n    let label = \"\";\n\n    if (type == \"cash\") {\n      label = \"Cash\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"cheque\") {\n      label = \"Cheque\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"eft\") {\n      label = \"EFT\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"credit_card\") {\n      label = \"Credit Card\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"debit_card\") {\n      label = \"Debit Card\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"demand_draft\") {\n      label = \"Demand Draft\";\n      this.paymentData.payModeNo = null;\n    }\n\n    this.payModeLabel = label;\n    this.paymentData.payModeDate = null;\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n};\n\nAddExpensePaymentComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}, {\n  type: Router\n}, {\n  type: ListService\n}, {\n  type: Location\n}];\n\nAddExpensePaymentComponent = __decorate([Component({\n  selector: \"app-add-expense-payment\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddExpensePaymentComponent);\nexport { AddExpensePaymentComponent };","map":null,"metadata":{},"sourceType":"module"}