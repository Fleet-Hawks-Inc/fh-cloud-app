{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./imported-contacts.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./imported-contacts.component.css\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport CSVFileValidator from 'csv-file-validator';\nimport Constants from '../../constants';\nimport { ToastrService } from 'ngx-toastr';\nimport { ApiService } from 'src/app/services';\nimport { ActivatedRoute } from '@angular/router';\nlet ImportedContactsComponent = class ImportedContactsComponent {\n  constructor(apiService, route, toastr) {\n    this.apiService = apiService;\n    this.route = route;\n    this.toastr = toastr;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.loaded = false;\n    this.validData = [];\n    this.importCustomers = [];\n    this.isFileValid = false;\n    this.inValidMessages = [];\n    this.importDocs = [];\n    this.check = false;\n    this.submitDisabled = true;\n    this.importData = {\n      module: 'contact',\n      eType: 'customer'\n    }; // columns of data table\n\n    this.dataColumns = [{\n      field: 'displayName',\n      header: 'File Name',\n      type: \"text\"\n    }, {\n      field: 'timeCreated',\n      header: 'Uploaded',\n      type: \"text\"\n    }, {\n      field: \"module\",\n      header: 'Module',\n      type: 'text'\n    }, {\n      field: 'fileStatus',\n      header: 'Status',\n      type: \"text\"\n    }];\n    this.display = false;\n\n    this.isStatusValid = status => {\n      return status == 'active' || status == 'inActive' || status == 'sold' || status == 'outOfService';\n    };\n  }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.importData.eType = params.entity;\n      this.entity = (params.entity + 's').replace('_', ' ');\n    });\n    this.setToggleOptions();\n    this.fetchCustomersImport();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  chooseFile(event) {\n    let files = event.target.files;\n    let condition = true;\n\n    if (condition) {\n      this.importDocs = [];\n      this.importDocs = files;\n      this.inValidMessages = [];\n      const reader = new FileReader();\n      reader.addEventListener('load', event => {\n        let csvdata = event.target.result;\n      });\n      reader.readAsBinaryString(event.target.files[0]);\n    }\n  }\n\n  validateCSV($event) {\n    const data = {\n      headers: [{\n        name: 'company_name',\n        inputName: 'companyname',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column`;\n        },\n        validate: function (name) {\n          const vname = /^[a-zA-Z0-9\\s]+$/;\n          return vname.test(name);\n        }\n      }, {\n        name: 'phone',\n        inputName: 'phone',\n        required: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column.`;\n        },\n        validate: function (phoneno) {\n          const phoneformat = /^\\+?([0-9]{2})\\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})$/;\n          return phoneformat.test(phoneno);\n        }\n      }, {\n        name: 'email',\n        inputName: 'email',\n        required: true,\n        unique: true,\n        requiredError: function (headerName, rowNumber, columnNumber) {\n          return `${headerName} is required in the ${rowNumber} row / ${columnNumber} column.`;\n        },\n        validate: function (email) {\n          const reqExp = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;\n          return reqExp.test(email);\n        }\n      }]\n    };\n    CSVFileValidator($event.srcElement.files[0], data).then(csvData => {\n      if (csvData.data.length !== 0 && csvData.data.length < 201) {\n        if (csvData.inValidMessages.length === 0) {\n          this.validData = csvData.data;\n          this.check = true;\n          this.submitDisabled = false;\n        } else {\n          this.isFileValid = false;\n          this.check = false;\n          this.submitDisabled = true;\n          this.inValidMessages = csvData.inValidMessages;\n        }\n\n        csvData.data;\n      } else if (csvData.data.length == 0) {\n        this.submitDisabled = true;\n        this.toastr.error(\"There are no records in the file uploaded\");\n      } else {\n        this.submitDisabled = true;\n        this.toastr.error(\"'The file should contain a maximum of 200 records'\");\n      }\n    }).catch(err => {});\n  }\n\n  pwdModalClose() {\n    $('#importDocs').val('');\n    this.inValidMessages = [];\n  }\n\n  fetchCustomersImport() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this.apiService.getData(`importer/get?type=contact&entity=${_this.importData.eType}`).toPromise();\n\n      if (result.length === 0) {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        _this.loaded = true;\n      }\n\n      if (result && result.length > 0) {\n        _this.importCustomers = result;\n      }\n\n      _this.loaded = true;\n    })();\n  }\n\n  uploadImport() {\n    if (this.check == true) {\n      if (this.importDocs.length > 0) {\n        const formData = new FormData();\n\n        for (let i = 0; i < this.importDocs.length; i++) {\n          formData.append(\"importDocs\", this.importDocs[i]);\n        }\n\n        this.submitDisabled = true; //append other fields\n\n        formData.append(\"data\", JSON.stringify(this.importData));\n        this.apiService.postData('importer', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            this.submitDisabled = true;\n            $('#importDocs').val('');\n          },\n          next: res => {\n            this.submitDisabled = false;\n            this.toastr.success(\"The file has been scheduled for processing and you will be notified via email once it is completed\");\n            $('#importDocs').val('');\n            this.display = false;\n            this.fetchCustomersImport();\n          }\n        });\n      }\n    }\n  }\n\n  openModal() {\n    this.display = true;\n  }\n\n  cancel() {\n    this.inValidMessages = [];\n    this.myInputVariable.nativeElement.value = \"\";\n  }\n\n  refreshData() {\n    this.importCustomers = [];\n    this.fetchCustomersImport();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n  /**\r\n    * Clears the table filters\r\n    * @param table Table\r\n    */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nImportedContactsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}];\n\nImportedContactsComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  myInputVariable: [{\n    type: ViewChild,\n    args: ['myInput']\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nImportedContactsComponent = __decorate([Component({\n  selector: 'app-imported-contacts',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ImportedContactsComponent);\nexport { ImportedContactsComponent };","map":null,"metadata":{},"sourceType":"module"}