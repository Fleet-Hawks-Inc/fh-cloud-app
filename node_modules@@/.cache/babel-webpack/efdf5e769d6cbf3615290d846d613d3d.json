{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./inventory-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./inventory-list.component.css\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { ApiService } from '../../../../services';\nimport { Router } from '@angular/router';\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Constants from '../../constants';\nimport { ListService } from '../../../../services';\nimport * as _ from 'lodash';\nimport { environment } from '../../../../../environments/environment';\nlet InventoryListComponent = class InventoryListComponent {\n  constructor(apiService, router, toastr, spinner, listService) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.router = router;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.listService = listService;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.dataMessageReq = Constants.FETCHING_DATA;\n    this.items = [];\n    this.itemGroups = {};\n    this.vendors = {};\n    this.warehouses = [];\n    this.allWarehouses = [];\n    this.partNumber = '';\n    this.partDetails = '';\n    this.quantity = '';\n    this.date = '';\n    this.warehouseID1 = '';\n    this.warehouseID2 = '';\n    this.hideShow = {\n      part: true,\n      name: true,\n      category: true,\n      vendor: true,\n      quantity: true,\n      unitCost: true,\n      warehouse: true,\n      warranty: false,\n      preferredVendor: false\n    };\n    this.totalRecords = 10;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = '';\n    this.partNo = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    this.itemID = '';\n    this.itemName = '';\n    this.category = null;\n    this.groupName = '';\n    this.vendorID = null;\n    this.companyName = '';\n    this.suggestedVendors = [];\n    this.suggestedItems = [];\n    this.requiredItems = [];\n    this.allItems = [];\n    this.itemDetail = {\n      itemID: '',\n      reqItemID: '',\n      partNumber: '',\n      itemName: '',\n      prevQuantity: '',\n      reqQuantity: '',\n      totalQuantity: ''\n    };\n    this.itemPrevData = {\n      quantity: ''\n    };\n    this.transfer = {\n      partNumber: '',\n      itemID: '',\n      quantity: 0,\n      notes: '',\n      transferQuantity: 0,\n      warehouseID1: '',\n      warehouseID2: '',\n      vendorID: '',\n      date: ''\n    };\n    this.requiredItemName = '';\n    this.requiredCompanyName = '';\n    this.requiredPartNumber = null;\n    this.requiredItemID = null;\n    this.requiredVendorID = null;\n    this.requiredSuggestedItems = [];\n    this.totalRecordsRequired = 10;\n    this.requiredLastEvaluatedKey = '';\n    this.currentTab = 'inv';\n    this.requiredSuggestedVendors = [];\n    this.allVendors = [];\n    this.allCompanies = [];\n    this.searchItems = [];\n    this.requiredSuggestedPartNo = [];\n    this.quantityError = false;\n    this.loaded = false;\n    this.lastItemSK = '';\n    this.lastSK = '';\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date1 = new Date();\n    this.futureDatesLimit = {\n      year: this.date1.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.get = _.get; // columns of data table\n\n    this.dataColumns = [{\n      field: 'partNumber',\n      header: 'Part#',\n      type: \"text\"\n    }, {\n      field: 'itemName',\n      header: 'Item Name',\n      type: \"text\"\n    }, {\n      field: 'category',\n      header: 'Category',\n      type: \"text\"\n    }, {\n      field: 'vendor',\n      header: 'Vendor',\n      type: \"text\"\n    }, {\n      field: 'unitcost',\n      header: 'Unit Cost',\n      type: \"text\"\n    }, {\n      field: 'tax',\n      header: 'Tax',\n      type: \"text\"\n    }, {\n      field: 'quantity',\n      header: 'Quantity',\n      type: \"text\"\n    }, {\n      field: 'totalCost',\n      header: 'Total Cost',\n      type: \"text\"\n    }, {\n      field: 'warehouseDetails',\n      header: 'Warehouse Details',\n      type: \"text\"\n    }];\n    this.reqDataColumns = [{\n      field: 'partNumber',\n      header: 'Part#',\n      type: \"text\"\n    }, {\n      field: 'reqItemName',\n      header: 'Item Name',\n      type: \"text\"\n    }, {\n      field: 'vendor',\n      header: 'Vendor',\n      type: \"text\"\n    }, {\n      field: 'quantity',\n      header: 'Quantity',\n      type: \"text\"\n    }];\n    this.getItemSuggestions = _.debounce(function (value, type) {\n      if (value != '') {\n        value = value.toLowerCase();\n\n        if (type === 'inv') {\n          this.apiService.getData(`items/suggestion/${value}?type=inventory`).subscribe(result => {\n            this.suggestedItems = result;\n          });\n        } else {\n          this.apiService.getData(`items/suggestion/${value}?item=required`).subscribe(result => {\n            this.requiredSuggestedItems = result;\n          });\n        }\n      } else {\n        this.suggestedItems = [];\n        this.requiredSuggestedItems = [];\n      }\n    }, 800);\n    this.getPartNumberSuggestions = _.debounce(function (value) {\n      if (value != '') {\n        value = value.toLowerCase();\n        this.apiService.getData(`items/partNo/suggestion/${value}?item=required`).subscribe(result => {\n          this.requiredSuggestedPartNo = result;\n        });\n      } else {\n        this.requiredSuggestedPartNo = [];\n      }\n    }, 800);\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.initDataTable();\n\n          _this.initDataTableRequired();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    this.setToggleOptions();\n    this.fetchWarehouses();\n    this.fetchAllItemsList();\n    this.setreqToggleOptions();\n    this.initDataTable();\n    this.initDataTableRequired();\n    this.fetchVendors();\n    this.listService.fetchVendors();\n    this.disableButton();\n    this.allVendors = this.listService.vendorList;\n  } //Existing Inventory\n\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  } //Required Inventory\n\n\n  setreqToggleOptions() {\n    this.reqSelectedColumns = this.reqDataColumns;\n  }\n\n  get reqSelectedColumns() {\n    return this._reqSelectedColumns;\n  }\n\n  set reqSelectedColumns(val) {\n    //restore original order\n    this._reqSelectedColumns = this.reqDataColumns.filter(col => val.includes(col));\n  }\n\n  setPartNo(itemName) {\n    this.requiredPartNumber = itemName;\n    this.requiredSuggestedPartNo = [];\n  }\n\n  setItem(itemID, itemName, type) {\n    if (type == 'inv') {\n      this.itemName = itemName;\n      this.itemID = itemName;\n      this.suggestedItems = [];\n    } else {\n      this.requiredItemName = itemName;\n      this.requiredItemID = itemName;\n      this.requiredSuggestedItems = [];\n    }\n  }\n\n  clearInput() {// this.suggestedDrivers = null;\n  }\n\n  clearSuggestions() {// this.driverName = null;\n  }\n\n  resetFilter() {\n    if (this.itemName !== '' || this.vendorID !== null || this.category !== null) {\n      this.itemID = this.itemName = this.groupName = this.companyName = '';\n      this.vendorID = null;\n      this.category = null;\n      this.lastItemSK = '';\n      this.items = [];\n      this.suggestedItems = [];\n      this.suggestedVendors = [];\n      this.initDataTable();\n      this.dataMessage = Constants.FETCHING_DATA;\n    } else {\n      return false;\n    }\n  }\n\n  resetRequiredFilter() {\n    if (this.requiredItemID !== null || this.requiredItemName !== '' || this.requiredVendorID !== null || this.requiredPartNumber !== '') {\n      this.requiredItemName = this.requiredCompanyName = this.requiredPartNumber = '';\n      this.requiredItemID = null;\n      this.requiredVendorID = null;\n      this.lastSK = \"\";\n      this.requiredSuggestedPartNo = [];\n      this.requiredItems = [];\n      this.initDataTableRequired();\n      this.dataMessageReq = Constants.FETCHING_DATA;\n    } else {\n      return false;\n    }\n  }\n\n  fetchVendors() {\n    this.apiService.getData(`contacts/get/list`).subscribe(result => {\n      this.vendors = result;\n    });\n  }\n\n  openTransferModal() {\n    $('#transferModal').modal('show');\n  }\n\n  fetchWarehouses() {\n    this.apiService.getData('items/get/list/warehouses').subscribe(result => {\n      this.warehouses = result;\n    });\n  }\n\n  deleteItem(eventData) {\n    if (confirm('Are you sure you want to delete?') === true) {\n      let record = {\n        date: eventData.createdDate,\n        time: eventData.createdTime,\n        eventID: eventData.itemID\n      };\n      this.apiService.deleteData(`items/delete/item/${eventData.itemID}/${eventData.itemName}`).subscribe(result => {\n        this.items = [];\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.lastEvaluatedKey = '';\n        this.initDataTable();\n        this.toastr.success('Inventory Item Deleted Successfully!');\n      });\n    }\n  }\n\n  initDataTable() {\n    if (this.lastItemSK !== 'end') {\n      this.apiService.getData('items/fetch/records?item=' + this.itemID + \"&vendorID=\" + this.vendorID + \"&category=\" + this.category + \"&lastKey=\" + this.lastItemSK).subscribe(result => {\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n          this.loaded = true;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            this.lastItemSK = encodeURIComponent(result.Items[result.Items.length - 1].warehouseSK);\n          } else {\n            this.lastItemSK = 'end';\n          }\n\n          this.items = this.items.concat(result.Items);\n          this.loaded = true;\n        }\n      });\n    }\n  }\n\n  initDataTableRequired() {\n    if (this.lastSK !== 'end') {\n      this.apiService.getData('items/fetch/required/records?item=' + this.requiredItemID + '&vendorID=' + this.requiredVendorID + '&partNo=' + this.requiredPartNumber + '&lastKey=' + this.lastSK).subscribe(result => {\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n          this.loaded = true;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            this.lastSK = encodeURIComponent(result.Items[result.Items.length - 1].warehouseSK);\n          } else {\n            this.lastSK = 'end';\n          }\n\n          this.requiredItems = this.requiredItems.concat(result.Items);\n          this.loaded = true;\n        }\n      });\n    }\n  }\n\n  hideShowColumn() {\n    // for headers\n    if (this.hideShow.part === false) {\n      $('.col1').css('display', 'none');\n    } else {\n      $('.col1').css('display', '');\n    }\n\n    if (this.hideShow.name === false) {\n      $('.col2').css('display', 'none');\n    } else {\n      $('.col2').css('display', '');\n    }\n\n    if (this.hideShow.category === false) {\n      $('.col3').css('display', 'none');\n    } else {\n      $('.col3').css('display', '');\n    }\n\n    if (this.hideShow.vendor === false) {\n      $('.col4').css('display', 'none');\n    } else {\n      $('.col4').css('display', '');\n    }\n\n    if (this.hideShow.quantity === false) {\n      $('.col5').css('display', 'none');\n    } else {\n      $('.col5').css('display', '');\n    }\n\n    if (this.hideShow.unitCost === false) {\n      $('.col7').css('display', 'none');\n    } else {\n      $('.col7').css('display', '');\n    }\n\n    if (this.hideShow.warehouse === false) {\n      $('.col8').css('display', 'none');\n    } else {\n      $('.col8').css('display', '');\n    } // extra columns\n\n\n    if (this.hideShow.warranty === false) {\n      $('.col9').css('display', 'none');\n    } else {\n      $('.col9').removeClass('extra');\n      $('.col9').css('display', '');\n    }\n\n    if (this.hideShow.preferredVendor === false) {\n      $('.col12').css('display', 'none');\n    } else {\n      $('.col12').removeClass('extra');\n      $('.col12').css('display', '');\n    }\n  }\n\n  searchFilter() {\n    if (this.itemName !== '' || this.vendorID !== null || this.category !== null) {\n      this.itemName = this.itemName.toLowerCase();\n\n      if (this.itemID == '') {\n        this.itemID = this.itemName;\n      }\n\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.lastItemSK = \"\";\n      this.items = [];\n      this.suggestedItems = [];\n      this.suggestedVendors = [];\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  searchRequiredFilter() {\n    if (this.requiredItemID !== '' || this.requiredVendorID !== null || this.requiredPartNumber !== '') {\n      this.requiredItems = [];\n      this.requiredSuggestedPartNo = [];\n      this.lastSK = \"\";\n      this.dataMessageReq = Constants.FETCHING_DATA;\n      this.initDataTableRequired();\n    } else {\n      return false;\n    }\n  }\n\n  fetchAllItemsList() {\n    this.apiService.getData(`items/get/list`).subscribe(result => {\n      this.allItems = result;\n    });\n  }\n\n  deleteRequiredItem(eventData) {\n    if (confirm('Are you sure you want to delete?') === true) {\n      let record = {\n        // date: eventData.createdDate,\n        // time: eventData.createdTime,\n        eventID: eventData.itemID\n      };\n      this.apiService.deleteData(`items/delete/required/item/${eventData.itemID}/${eventData.itemName}`).subscribe(result => {\n        this.requiredItems = [];\n        this.requiredLastEvaluatedKey = '';\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.initDataTableRequired();\n        this.toastr.success('Required Inventory Item Deleted Successfully!');\n      });\n    }\n  }\n\n  addInventory(partData) {\n    this.apiService.getData('items/partNumber/details/' + partData.partNumber).subscribe(result => {\n      const data = result.Items[0];\n      this.itemPrevData = result.Items[0];\n      const actualQuantity = result.Items[0].quantity;\n      this.itemDetail.itemID = data.itemID;\n      this.itemDetail.reqItemID = partData.itemID;\n      this.itemDetail.partNumber = data.partNumber;\n      this.itemDetail.itemName = data.itemName;\n      this.itemDetail.prevQuantity = data.quantity;\n      this.itemDetail.reqQuantity = partData.quantity;\n      this.itemDetail.totalQuantity = partData.quantity + data.quantity;\n      this.itemPrevData.quantity = this.itemDetail.totalQuantity;\n\n      if (actualQuantity > 0) {\n        $('#existingInvModal').modal('show');\n      } else {\n        this.updateItem(this.itemDetail.reqItemID);\n      }\n    });\n  }\n\n  updateItem(reqItemID) {\n    this.apiService.putData('items/update/item', this.itemPrevData).subscribe({\n      complete: () => {},\n      error: err => {},\n      next: res => {\n        $('#existingInvModal').modal('hide');\n        this.apiService.deleteData(`requiredItems/${reqItemID}`).subscribe(result => {\n          this.requiredItems = [];\n          this.toastr.success('Inventory Updated Successfully');\n        });\n      }\n    });\n  }\n\n  tabChange(type) {\n    this.currentTab = type;\n  }\n\n  getWarehouseItems(id) {\n    this.allWarehouses = [];\n\n    if (id != undefined) {\n      this.apiService.getData(`items/warehouseParts/${id}`).subscribe(result => {\n        this.allWarehouses = result;\n      });\n    }\n  }\n\n  getQuanity(id) {\n    if (id != undefined) {\n      var result = this.allWarehouses.filter(item => {\n        return item.partNumber === id;\n      });\n      this.partQuantity = result[0].quantity;\n      this.transfer.vendorID = result[0].warehouseVendorID;\n      this.transfer.itemID = result[0].itemID;\n      this.transfer.quantity = result[0].quantity;\n    }\n  }\n\n  checkQuanity(value) {\n    if (value > this.partQuantity) {\n      this.quantityError = true;\n      this.transfer.transferQuantity = this.partQuantity;\n    } else {\n      this.quantityError = false;\n    }\n  }\n\n  transferInventory() {\n    this.apiService.postData('items/transfer/', this.transfer).subscribe(result => {\n      this.transfer = {\n        itemID: '',\n        quantity: 0,\n        partNumber: '',\n        notes: '',\n        transferQuantity: 0,\n        warehouseID1: '',\n        warehouseID2: '',\n        vendorID: '',\n        date: ''\n      };\n      $('#transferModal').modal('hide');\n      this.toastr.success('Inventory Transferred Successfully.');\n      this.lastEvaluatedKey = '';\n    });\n  }\n\n  disableButton() {\n    if (this.transfer.warehouseID1 == '' || this.transfer.warehouseID1 == null || this.transfer.warehouseID2 == '' || this.transfer.warehouseID2 == null || this.transfer.partNumber == '' || this.transfer.partNumber == null || this.transfer.transferQuantity <= 0 || this.transfer.transferQuantity == null || this.transfer.date == '' || this.transfer.date == null || this.quantityError || this.transfer.notes.length > 500) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  refreshData() {\n    this.itemID = '';\n    this.itemName = '';\n    this.groupName = '';\n    this.companyName = '';\n    this.vendorID = null;\n    this.category = null;\n    this.lastItemSK = \"\";\n    this.items = [];\n    this.suggestedItems = [];\n    this.initDataTable();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  refreshReqData() {\n    this.requiredItemName = '';\n    this.requiredCompanyName = '';\n    this.requiredPartNumber = '';\n    this.requiredItemID = null;\n    this.lastSK = \"\";\n    this.requiredVendorID = null;\n    this.requiredSuggestedPartNo = [];\n    this.requiredItems = [];\n    this.dataMessageReq = Constants.FETCHING_DATA;\n    this.initDataTableRequired();\n  }\n  /**\r\n  * Clears the table filters\r\n  * @param table Table\r\n  */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nInventoryListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ListService\n}];\n\nInventoryListComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }],\n  reqSelectedColumns: [{\n    type: Input\n  }]\n};\nInventoryListComponent = __decorate([Component({\n  selector: 'app-inventory-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], InventoryListComponent);\nexport { InventoryListComponent };","map":null,"metadata":{},"sourceType":"module"}