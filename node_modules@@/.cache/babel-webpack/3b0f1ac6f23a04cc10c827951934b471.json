{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./alarm.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./alarm.component.css\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { ApiService } from 'src/app/services';\nimport { CurrencyPipe } from '@angular/common';\nimport { ToastrService } from \"ngx-toastr\";\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { HereMapService } from '../../../../../services';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../../../environments/environment';\nimport * as _ from 'lodash';\nimport { NgSelectComponent } from '@ng-select/ng-select';\nimport Constants from 'src/app/pages/fleet/constants';\nlet AlarmComponent = class AlarmComponent {\n  constructor(apiService, currencyPipe, spinner, httpClient, hereMap, toastr) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.currencyPipe = currencyPipe;\n    this.spinner = spinner;\n    this.httpClient = httpClient;\n    this.hereMap = hereMap;\n    this.toastr = toastr;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.lastEvaluatedKey = undefined;\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.autoCarrier = [];\n    this.beverageRack = [];\n    this.flatbed = [];\n    this.controlledTemp = [];\n    this.isChecked = false;\n    this.headCheckbox = false;\n    this.closeResult = '';\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.totalRecords = 10;\n    this.pageLength = 10;\n    this.loaded = false;\n    this.get = _.get;\n    this.isSearch = false;\n    this.alarm = [];\n    this.visible = true;\n    this.dataColumns = [{\n      field: 'alAssetName',\n      header: 'Alarm Name',\n      type: \"text\"\n    }, {\n      field: 'alDeviceNo',\n      header: 'Device Number',\n      type: \"text\"\n    }, {\n      field: 'alTripNo',\n      header: 'Trip Number',\n      type: \"text\"\n    }, {\n      field: 'highTemp',\n      header: 'Hight Temp',\n      type: \"text\"\n    }, {\n      field: 'lowTemp',\n      header: 'Low Temp',\n      type: \"text\"\n    }];\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.initDataTable();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.initDataTable();\n\n      _this2.setToggleOptions(); //this.fetchOrderReport();\n\n    })();\n  }\n\n  initDataTable() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let result;\n\n      if (_this3.lastEvaluatedKey != undefined) {\n        result = yield _this3.apiService.getData('alarms/report/get/' + _this3.lastEvaluatedKey).toPromise();\n      } else {\n        result = yield _this3.apiService.getData('alarms/report/get').toPromise();\n      }\n\n      result.data.forEach(item => {\n        if (item.alTempCelsius === 0) {\n          item.highTemp = `${item.highTemp} Fahrenheit`;\n          item.lowTemp = `${item.lowTemp} Fahrenheit`;\n        } else {\n          item.highTemp = `${item.highTemp} Celsius`;\n          item.lowTemp = `${item.lowTemp} Celsius`;\n        }\n      });\n      _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n      _this3.loaded = true;\n\n      if (result.nextKey !== undefined) {\n        _this3.lastEvaluatedKey = result.nextKey;\n      } else {\n        _this3.lastEvaluatedKey = undefined;\n      }\n\n      _this3.alarm = _this3.alarm.concat(result.data);\n      _this3.loaded = true;\n      _this3.isSearch = false;\n    })();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  refreshData() {\n    this.alarm = [];\n    this.lastEvaluatedKey = undefined;\n    this.loaded = false;\n    this.initDataTable();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  someClickHandler(info) {\n    this.message = info.id + ' - ' + info.firstName;\n  }\n\n  valuechange() {\n    this.visible = !this.visible;\n  }\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nAlarmComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: CurrencyPipe\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HttpClient\n}, {\n  type: HereMapService\n}, {\n  type: ToastrService\n}];\n\nAlarmComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nAlarmComponent = __decorate([Component({\n  selector: 'app-alarm',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AlarmComponent);\nexport { AlarmComponent };","map":null,"metadata":{},"sourceType":"module"}