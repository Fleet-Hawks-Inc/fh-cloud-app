{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./summary.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./summary.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from 'src/app/services';\nimport { Router } from '@angular/router';\nimport * as moment from 'moment';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Constants from 'src/app/pages/fleet/constants';\nlet SummaryComponent = class SummaryComponent {\n  constructor(apiService, router, toastr, spinner) {\n    this.apiService = apiService;\n    this.router = router;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.vehiclesList = [];\n    this.vehicleList = {};\n    this.vehicles = [];\n    this.fuelList = [];\n    this.unitID = null;\n    this.assetUnitID = null;\n    this.allAssets = [];\n    this.vehicleID = '';\n    this.vehicleIdentification = '';\n    this.allVehicles = [];\n    this.assetList = {};\n    this.lastItemSK = '';\n    this.loaded = false;\n    this.currency = '';\n    this.fuelCount = {\n      cad_amount: 0,\n      usd_amount: 0,\n      l_quantity: 0,\n      g_quantity: 0\n    };\n    this.vehicleSet = [];\n    this.assetsSet = [];\n    this.exportList = [];\n    this.start = null;\n    this.end = null;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n  }\n\n  ngOnInit() {\n    this.fetchFuelReport();\n    this.fetchVehicleList();\n    this.fetchAllVehicles();\n    this.fetchAssetList();\n    this.fetchAllAssets();\n    this.fetchFuelCount();\n  }\n\n  fetchAssetList() {\n    this.apiService.getData('assets/get/list').subscribe(result => {\n      this.assetList = result;\n    });\n  }\n\n  fetchVehicleList() {\n    this.apiService.getData(`vehicles/get/list`).subscribe(result => {\n      this.vehicleList = result;\n    });\n  }\n\n  fetchAllAssets() {\n    this.apiService.getData('assets/get/minor/details').subscribe(result => {\n      this.assetsSet = result.Items;\n    });\n  }\n\n  fetchAllVehicles() {\n    this.apiService.getData('vehicles/list/minor').subscribe(result => {\n      result['Items'].map(v => {\n        if (v.isDeleted === 0) {\n          this.vehicleSet.push(v);\n        }\n      });\n    });\n  }\n\n  fetchFuelCount() {\n    this.apiService.getData('fuelEntries/fetch/fuel/count').subscribe(result => {\n      this.fuelCount = result;\n    });\n  }\n\n  fetchFuelReport(refresh) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this.lastItemSK = '';\n        _this.fuelList = [];\n      }\n\n      if (_this.lastItemSK !== 'end') {\n        const result = yield _this.apiService.getData(`fuelEntries/fetch/fuel/report?unitID=${_this.unitID}&asset=${_this.assetUnitID}&startDate=${_this.start}&endDate=${_this.end}&lastKey=${_this.lastItemSK}`).toPromise();\n\n        if (result.Items.length == 0) {\n          _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            _this.lastItemSK = encodeURIComponent(result.Items[result.Items.length - 1].fuelSK);\n          } else {\n            _this.lastItemSK = 'end';\n          }\n\n          result[`Items`].forEach(element => {\n            let date = moment(element.data.date);\n\n            if (element.data.time) {\n              let time = moment(element.data.time, 'h mm a');\n              date.set({\n                hour: time.get('hour'),\n                minute: time.get('minute')\n              });\n              date = date.format('MMM Do YYYY, h:mm a');\n            } else {\n              date = date.format('MMM Do YYYY');\n            }\n\n            element.dateTime = date;\n          });\n          _this.fuelList = _this.fuelList.concat(result.Items);\n          _this.loaded = true;\n        }\n      }\n    })();\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.fetchFuelReport();\n    }\n\n    this.loaded = false;\n  }\n\n  searchFilter() {\n    if (this.unitID !== null || this.assetUnitID !== null || this.start !== null || this.end !== null) {\n      if (this.start != null && this.end == null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start == null && this.end != null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start > this.end) {\n        this.toastr.error('Start Date should be less then end date.');\n        return false;\n      } else {\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fuelList = [];\n        this.lastItemSK = '';\n        this.fetchFuelReport();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  resetFilter() {\n    if (this.unitID !== null || this.assetUnitID !== null || this.start !== null || this.end !== null) {\n      this.unitID = null;\n      this.assetUnitID = null;\n      this.start = null;\n      this.end = null;\n      this.fuelList = [];\n      this.lastItemSK = '';\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.fetchFuelReport();\n    } else {\n      return false;\n    }\n  }\n\n  generateFuelCSV() {\n    if (this.exportList.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.exportList.forEach(element => {\n        let obj = {};\n        let retailCADTotal = [];\n        let retailUSDTotal = [];\n\n        if (element.data.currency === 'CAD') {\n          retailCADTotal = element.data.amt;\n        }\n\n        if (element.data.currency === 'USD') {\n          retailUSDTotal = element.data.amt;\n        }\n\n        obj['Date/Time'] = element.dateTime.replace(/, /g, ' &');\n        obj['Use Type'] = element.data.useType;\n        obj['Unit Name'] = this.assetList[element.unitID] || this.vehicleList[element.unitID];\n        obj['Fuel Card#'] = element.data.cardNo;\n        obj['City'] = element.data.city;\n        obj['Fuel Type'] = element.data.type;\n        obj['Fuel Quantity'] = element.data.qty + \" \";\n        obj['Liters or Gallons'] = element.data.uom === \"L\" ? 'LTR' : 'GL';\n        obj['Odometer'] = element.data.odometer;\n        obj['Retail Price Per L'] = element.data.rPpu + ' ' + element.data.currency;\n        obj['Retail Amount Before Tax'] = element.data.rBeforeTax + ' ' + element.data.currency;\n        obj['Total Discount'] = element.data.discAmt;\n        obj['Retail Amount CAD'] = retailCADTotal;\n        obj['Retail Amount USD'] = retailUSDTotal;\n        dataObject.push(obj);\n      });\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += '\\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += '\\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}Fuel-Report.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n  getSetExport() {\n    this.apiService.getData(\"fuelEntries/get/export\").subscribe(result => {\n      result[`Items`].forEach(element => {\n        let date = moment(element.data.date);\n\n        if (element.data.time) {\n          let time = moment(element.data.time, 'h mm a');\n          date.set({\n            hour: time.get('hour'),\n            minute: time.get('minute')\n          });\n          date = date.format('MMM Do YYYY h:mm a');\n        } else {\n          date = date.format('MMM Do YYYY');\n        }\n\n        element.dateTime = date;\n      });\n      this.exportList = result.Items;\n      this.generateFuelCSV();\n    });\n  }\n\n  csvExport() {\n    if (this.unitID !== null || this.assetUnitID !== null) {\n      this.exportList = this.fuelList;\n      this.generateFuelCSV();\n    } else {\n      this.getSetExport();\n    }\n  }\n\n};\n\nSummaryComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}];\n\nSummaryComponent = __decorate([Component({\n  selector: 'app-summary',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SummaryComponent);\nexport { SummaryComponent };","map":null,"metadata":{},"sourceType":"module"}