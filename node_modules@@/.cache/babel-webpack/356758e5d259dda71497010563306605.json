{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./vehicle-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./vehicle-detail.component.css\";\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ReactiveFormConfig, RxFormBuilder } from '@rxweb/reactive-form-validators';\nimport { ToastrService } from 'ngx-toastr';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nimport { environment } from '../../../../../environments/environment';\nimport { ApiService } from '../../../../services';\nimport Constants from '../../constants';\nlet VehicleDetailComponent = class VehicleDetailComponent {\n  constructor(apiService, route, router, httpClient, toastr, domSanitizer, countryStateCity, modalService, formBuilder) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.domSanitizer = domSanitizer;\n    this.countryStateCity = countryStateCity;\n    this.modalService = modalService;\n    this.formBuilder = formBuilder;\n    this.noRecordMsg = Constants.NO_RECORDS_FOUND;\n    this.slides = [];\n    this.docs = [];\n    this.pDocs = [];\n    this.lDocs = [];\n    this.Asseturl = this.apiService.AssetUrl;\n    this.environment = environment;\n    /**\r\n     * Vehicle Prop\r\n     */\n\n    this.driversList = {};\n    this.vehicleModelList = {};\n    this.vehicleManufacturersList = {};\n    this.groupsList = {};\n    this.statesList = {};\n    this.countriesList = {};\n    this.vendors = {};\n    this.iftaReporting = '';\n    this.annualSafetyDate = '';\n    this.vehicleID = '';\n    this.vehicleIdentification = '';\n    this.vehicleType = '';\n    this.VIN = '';\n    this.year = '';\n    this.manufacturerID = '';\n    this.uploadedDocs = [];\n    this.existingDocs = [];\n    this.modelID = '';\n    this.plateNumber = '';\n    this.stateID = '';\n    this.countryID = '';\n    this.driverID = '';\n    this.teamDriverID = '';\n    this.serviceProgramID = [];\n    this.primaryMeter = '';\n    this.repeatByTime = '';\n    this.repeatByTimeUnit = '';\n    this.reapeatbyOdometerMiles = '';\n    this.currentStatus = '';\n    this.ownership = '';\n    this.groupID = '';\n    this.aceID = '';\n    this.aciID = '';\n    this.vehicleColor = '';\n    this.bodyType = '';\n    this.bodySubType = '';\n    this.msrp = '';\n    this.inspectionFormID = '';\n    this.lifeCycle = {\n      inServiceDate: '',\n      inServiceOdometer: 0,\n      estimatedServiceMonths: 0,\n      estimatedServiceMiles: 0,\n      estimatedResaleValue: '',\n      outOfServiceDate: '',\n      outOfServiceOdometer: 0,\n      startDate: '',\n      estimatedServiceYear: ''\n    };\n    this.specifications = {\n      height: 0,\n      heightUnit: '',\n      length: 0,\n      lengthUnit: '',\n      width: 0,\n      widthUnit: '',\n      interiorVolume: '',\n      passangerVolume: '',\n      groundClearnce: 0,\n      groundClearnceUnit: '',\n      bedLength: 0,\n      bedLengthUnit: '',\n      cargoVolume: '',\n      curbWeight: '',\n      grossVehicleWeightRating: '',\n      towingCapacity: '',\n      maxPayload: '',\n      EPACity: 0,\n      EPACombined: 0,\n      EPAHighway: 0,\n      tareWeight: ''\n    };\n    this.insurance = {\n      dateOfIssue: '',\n      premiumAmount: 0,\n      premiumCurrency: '',\n      vendorID: '',\n      dateOfExpiry: '',\n      remiderEvery: '',\n      policyNumber: '',\n      amount: 0,\n      amountCurrency: '',\n      reminder: ''\n    };\n    this.fluid = {\n      fuelType: '',\n      fuelTankOneCapacity: 0,\n      fuelQuality: '',\n      fuelTankTwoCapacity: 0,\n      oilCapacity: 0,\n      fuelTankOneType: '',\n      fuelTankTwoType: '',\n      oilCapacityType: '',\n      defType: '',\n      def: ''\n    };\n    this.wheelsAndTyres = {\n      numberOfTyres: 0,\n      driveType: '',\n      brakeSystem: '',\n      wheelbase: '',\n      rearAxle: '',\n      frontTyreType: '',\n      rearTyreType: '',\n      frontTrackWidth: '',\n      rearTrackWidth: '',\n      frontWheelDiameter: '',\n      rearWheelDiameter: '',\n      frontTyrePSI: '',\n      rearTyrePSI: ''\n    };\n    this.engine = {\n      engineSummary: '',\n      engineBrand: '',\n      aspiration: '',\n      blockType: '',\n      bore: 0,\n      camType: '',\n      stroke: '',\n      valves: '',\n      compression: '',\n      cylinders: '',\n      displacement: '',\n      fuelIndication: '',\n      fuelQuality: '',\n      maxHP: '',\n      maxTorque: 0,\n      readlineRPM: '',\n      transmissionSummary: '',\n      transmissionType: '',\n      transmissonBrand: '',\n      transmissionGears: ''\n    };\n    this.purchase = {\n      purchaseVendorID: '',\n      warrantyExpirationDate: '',\n      purchasePrice: '',\n      purchasePriceCurrency: '',\n      warrantyExpirationMeter: '',\n      purchaseDate: '',\n      purchaseComments: '',\n      purchaseOdometer: '',\n      gstInc: false\n    };\n    this.loan = {\n      loanVendorID: '',\n      amountOfLoan: '',\n      amountOfLoanCurrency: '',\n      aspiration: '',\n      annualPercentageRate: '',\n      downPayment: '',\n      downPaymentCurrency: '',\n      dateOfLoan: '',\n      monthlyPayment: '',\n      monthlyPaymentCurrency: '',\n      firstPaymentDate: '',\n      numberOfPayments: '',\n      loadEndDate: '',\n      accountNumber: '',\n      generateExpenses: '',\n      notes: '',\n      loanDueDate: '',\n      lReminder: false,\n      gstInc: false\n    };\n    this.settings = {\n      primaryMeter: 'miles',\n      fuelUnit: 'gallons(USA)',\n      hardBreakingParams: 0,\n      hardAccelrationParams: 0,\n      turningParams: 0,\n      measurmentUnit: 'imperial'\n    };\n    this.issues = [];\n    this.reminders = [];\n    this.serviceReminders = [];\n    this.renewalReminders = [];\n    this.inspectionForms = {\n      inspectionFormName: '',\n      parameters: [],\n      isDefaultInspectionType: '0',\n      inspectionType: ''\n    };\n    this.fuelEntries = [];\n    this.documents = [];\n    this.servicePrograms = [];\n    this.serviceHistory = [];\n    this.devices = [];\n    this.fuelTypes = {};\n    this.slideConfig = {\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      dots: true,\n      infinite: true,\n      autoplay: true,\n      autoplaySpeed: 5000\n    };\n    this.contactsObjects = {};\n    this.vehicleTypeObects = {};\n    this.ownerOperatorName = '';\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('');\n    this.tasksList = [];\n    this.usersList = [];\n    this.countryName = '';\n    this.stateName = '';\n    this.vehicleLogs = [];\n    this.groupsObjects = {};\n    this.groupName = '';\n    this.groupId = '';\n    this.deviceInfo = {\n      deviceType: '',\n      deviceId: '',\n      deviceSrNo: '',\n      email: ''\n    };\n  }\n\n  ngOnInit() {\n    ReactiveFormConfig.set({\n      'validationMessage': {\n        \"required\": \"This field is required\",\n        \"email\": \"Email is invalid.\"\n      }\n    });\n    this.vehicleID = this.route.snapshot.params['vehicleID'];\n    this.getVehicle();\n    this.fetchIssues();\n    this.fetchReminders();\n    this.fetchProgramDetails();\n    this.fetchDriversList(); // this.fetchVehicleModelList();\n    // this.fetchVehicleManufacturerList();\n\n    this.fetchGroupsList();\n    this.fetchTasksList();\n    this.fetchUsersList();\n    this.fetchVehicleLogs();\n    this.fetchContactsByIDs();\n    this.httpClient.get('assets/vehicleType.json').subscribe(data => {\n      this.vehicleTypeObects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n    this.fetchGroups();\n  }\n\n  fetchContactsByIDs() {\n    this.apiService.getData('contacts/get/list').subscribe(result => {\n      this.contactsObjects = result;\n    });\n  }\n\n  fetchGroupsList() {\n    this.apiService.getData(\"groups/get/list\").subscribe(result => {\n      this.groupsList = result;\n    });\n  }\n\n  fetchTasksList() {\n    this.apiService.getData(\"tasks/get/list\").subscribe(result => {\n      this.tasksList = result;\n    });\n  }\n\n  fetchDriversList() {\n    this.apiService.getData(\"drivers/get/list\").subscribe(result => {\n      this.driversList = result;\n    });\n  }\n\n  fetchUsersList() {\n    this.apiService.getData(\"common/users/get/list\").subscribe(result => {\n      this.usersList = result;\n    });\n  }\n\n  fetchVehicleModelList() {\n    this.apiService.getData(\"vehicleModels/get/list\").subscribe(result => {\n      this.vehicleModelList = result;\n    });\n  }\n\n  fetchVehicleManufacturerList() {\n    this.apiService.getData(\"manufacturers/get/list\").subscribe(result => {\n      this.vehicleManufacturersList = result;\n    });\n  }\n\n  closeIssue(issueID) {\n    this.apiService.getData(`issues/setStatus/${issueID}/CLOSE`).subscribe(result => {\n      this.fetchIssues();\n    });\n  }\n\n  fetchReminders() {\n    this.apiService.getData(`reminders/vehicle/${this.vehicleID}`).subscribe(result => {\n      this.reminders = result.Items;\n\n      for (let i = 0; i < this.reminders.length; i++) {\n        const element = this.reminders[i];\n\n        if (element.type == 'service') {\n          this.serviceReminders.push(element);\n        } else {\n          this.renewalReminders.push(element);\n        }\n      }\n    });\n  }\n\n  fetchIssues() {\n    this.apiService.getData(`issues/vehicle/${this.vehicleID}`).subscribe(result => {\n      result.Items.map(elem => {\n        if (elem.currentStatus == 'OPEN') {\n          this.issues.push(elem);\n        }\n      });\n    });\n  }\n\n  getVehicle() {\n    var _this = this;\n\n    this.apiService.getData(\"vehicles/\" + this.vehicleID).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (vehicleResult) {\n        vehicleResult = vehicleResult.Items[0]; // Check if DashCam is added to enable Share Live location button\n\n        if (vehicleResult.deviceInfo && vehicleResult.deviceInfo.length > 0) {\n          for (const device of vehicleResult.deviceInfo) {\n            if (device.deviceType === \"DashCam\") {\n              _this.deviceInfo.deviceId = device.deviceId;\n              _this.deviceInfo.deviceSrNo = device.deviceSrNo;\n              _this.deviceInfo.deviceType = device.deviceType;\n            }\n          }\n        }\n\n        _this.ownerOperatorName = vehicleResult.ownerOperatorID;\n\n        if (vehicleResult.inspectionFormID != '' && vehicleResult.inspectionFormID != undefined) {\n          _this.apiService.getData(`inspectionForms/${vehicleResult.inspectionFormID}`).subscribe(result1 => {\n            if (result1.Items.length > 0) {\n              if (result1.Items[0].isDefaultInspectionType === undefined) {\n                result1.Items[0].isDefaultInspectionType = '0';\n              }\n\n              _this.inspectionForms = result1.Items[0];\n            }\n          });\n        }\n\n        _this.annualSafetyDate = vehicleResult.annualSafetyDate;\n        _this.vehicleIdentification = vehicleResult.vehicleIdentification;\n        _this.vehicleType = vehicleResult.vehicleType;\n        _this.VIN = vehicleResult.VIN;\n        _this.year = vehicleResult.year;\n        _this.manufacturerID = vehicleResult.manufacturerID;\n        _this.modelID = vehicleResult.modelID;\n        _this.plateNumber = vehicleResult.plateNumber;\n        _this.countryName = yield _this.countryStateCity.GetSpecificCountryNameByCode(vehicleResult.countryID);\n        _this.stateName = yield _this.countryStateCity.GetStateNameFromCode(vehicleResult.stateID, vehicleResult.countryID);\n        _this.driverID = vehicleResult.driverID;\n        _this.teamDriverID = vehicleResult.teamDriverID;\n        _this.serviceProgramID = vehicleResult.servicePrograms;\n\n        _this.fetchProgramDetails();\n\n        _this.primaryMeter = vehicleResult.primaryMeter;\n        _this.repeatByTime = vehicleResult.repeatByTime;\n        _this.repeatByTimeUnit = vehicleResult.repeatByTimeUnit;\n        _this.reapeatbyOdometerMiles = vehicleResult.reapeatbyOdometerMiles;\n        _this.currentStatus = vehicleResult.currentStatus;\n        _this.ownership = vehicleResult.ownership;\n        _this.groupId = vehicleResult.groupID;\n        _this.aceID = vehicleResult.aceID;\n        _this.aciID = vehicleResult.aciID;\n        _this.vehicleColor = vehicleResult.vehicleColor;\n        _this.bodyType = vehicleResult.bodyType;\n        _this.bodySubType = vehicleResult.bodySubType;\n        _this.msrp = vehicleResult.msrp;\n        _this.inspectionFormID = vehicleResult.inspectionFormID;\n        _this.iftaReporting = vehicleResult.iftaReporting;\n        _this.lifeCycle = {\n          inServiceDate: vehicleResult.lifeCycle.inServiceDate,\n          inServiceOdometer: vehicleResult.lifeCycle.inServiceOdometer,\n          estimatedServiceMonths: vehicleResult.lifeCycle.estimatedServiceMonths,\n          estimatedServiceMiles: vehicleResult.lifeCycle.estimatedServiceMiles,\n          estimatedResaleValue: vehicleResult.lifeCycle.estimatedResaleValue,\n          outOfServiceDate: vehicleResult.lifeCycle.outOfServiceDate,\n          outOfServiceOdometer: vehicleResult.lifeCycle.outOfServiceOdometer,\n          startDate: vehicleResult.lifeCycle.startDate,\n          estimatedServiceYear: vehicleResult.lifeCycle.estimatedServiceYears\n        };\n        _this.specifications = {\n          height: vehicleResult.specifications.height,\n          heightUnit: vehicleResult.specifications.heightUnit,\n          width: vehicleResult.specifications.width,\n          widthUnit: vehicleResult.specifications.widthUnit,\n          length: vehicleResult.specifications.length,\n          lengthUnit: vehicleResult.specifications.lengthUnit,\n          interiorVolume: vehicleResult.specifications.interiorVolume,\n          passangerVolume: vehicleResult.specifications.passangerVolume,\n          groundClearnce: vehicleResult.specifications.groundClearnce,\n          groundClearnceUnit: vehicleResult.specifications.groundClearnceUnit,\n          bedLength: vehicleResult.specifications.bedLength,\n          bedLengthUnit: vehicleResult.specifications.bedLengthUnit,\n          cargoVolume: vehicleResult.specifications.cargoVolume,\n          curbWeight: vehicleResult.specifications.curbWeight,\n          grossVehicleWeightRating: vehicleResult.specifications.grossVehicleWeightRating,\n          towingCapacity: vehicleResult.specifications.towingCapacity,\n          maxPayload: vehicleResult.specifications.maxPayload,\n          EPACity: vehicleResult.specifications.EPACity,\n          EPACombined: vehicleResult.specifications.EPACombined,\n          EPAHighway: vehicleResult.specifications.EPAHighway,\n          tareWeight: vehicleResult.specifications.tareWeight\n        };\n\n        if (vehicleResult.insurance.remiderEvery === 'weekly') {\n          vehicleResult.insurance.remiderEvery = 'Week(s)';\n        } else if (vehicleResult.insurance.remiderEvery === 'monthly') {\n          vehicleResult.insurance.remiderEvery = 'Month(s)';\n        } else if (vehicleResult.insurance.remiderEvery === 'yearly') {\n          vehicleResult.insurance.remiderEvery = 'Year(s)';\n        }\n\n        _this.insurance = {\n          dateOfIssue: vehicleResult.insurance.dateOfIssue,\n          premiumAmount: vehicleResult.insurance.premiumAmount,\n          premiumCurrency: vehicleResult.insurance.premiumCurrency,\n          vendorID: vehicleResult.insurance.vendorID,\n          dateOfExpiry: vehicleResult.insurance.dateOfExpiry,\n          reminder: `${vehicleResult.insurance.reminder}`,\n          remiderEvery: `${vehicleResult.insurance.remiderEvery}`,\n          policyNumber: vehicleResult.insurance.policyNumber,\n          amount: vehicleResult.insurance.amount,\n          amountCurrency: vehicleResult.insurance.amountCurrency\n        };\n        _this.fluid = {\n          fuelType: vehicleResult.fluid.fuelType,\n          fuelTankOneCapacity: vehicleResult.fluid.fuelTankOneCapacity,\n          fuelTankOneType: vehicleResult.fluid.fuelTankOneType,\n          fuelQuality: vehicleResult.fluid.fuelQuality,\n          fuelTankTwoType: vehicleResult.fluid.fuelTankTwoType,\n          fuelTankTwoCapacity: vehicleResult.fluid.fuelTankTwoCapacity,\n          oilCapacity: vehicleResult.fluid.oilCapacity,\n          oilCapacityType: vehicleResult.fluid.oilCapacityType,\n          defType: vehicleResult.fluid.defType,\n          def: vehicleResult.fluid.def\n        };\n        _this.wheelsAndTyres = {\n          numberOfTyres: vehicleResult.wheelsAndTyres.numberOfTyres,\n          driveType: vehicleResult.wheelsAndTyres.driveType,\n          brakeSystem: vehicleResult.wheelsAndTyres.brakeSystem,\n          wheelbase: vehicleResult.wheelsAndTyres.wheelbase,\n          rearAxle: vehicleResult.wheelsAndTyres.rearAxle,\n          frontTyreType: vehicleResult.wheelsAndTyres.frontTyreType,\n          rearTyreType: vehicleResult.wheelsAndTyres.rearTyreType,\n          frontTrackWidth: vehicleResult.wheelsAndTyres.frontTrackWidth,\n          rearTrackWidth: vehicleResult.wheelsAndTyres.rearTrackWidth,\n          frontWheelDiameter: vehicleResult.wheelsAndTyres.frontWheelDiameter,\n          rearWheelDiameter: vehicleResult.wheelsAndTyres.rearWheelDiameter,\n          frontTyrePSI: vehicleResult.wheelsAndTyres.frontTyrePSI,\n          rearTyrePSI: vehicleResult.wheelsAndTyres.rearTyrePSI\n        };\n        _this.engine = {\n          engineSummary: vehicleResult.engine.engineSummary,\n          engineBrand: vehicleResult.engine.engineBrand,\n          aspiration: vehicleResult.engine.aspiration,\n          blockType: vehicleResult.engine.blockType,\n          bore: vehicleResult.engine.bore,\n          camType: vehicleResult.engine.camType,\n          stroke: vehicleResult.engine.stroke,\n          valves: vehicleResult.engine.valves,\n          compression: vehicleResult.engine.compression,\n          cylinders: vehicleResult.engine.cylinders,\n          displacement: vehicleResult.engine.displacement,\n          fuelIndication: vehicleResult.engine.fuelIndication,\n          fuelQuality: vehicleResult.engine.fuelQuality,\n          maxHP: vehicleResult.engine.maxHP,\n          maxTorque: vehicleResult.engine.maxTorque,\n          readlineRPM: vehicleResult.engine.readlineRPM,\n          transmissionSummary: vehicleResult.engine.transmissionSummary,\n          transmissionType: vehicleResult.engine.transmissionType,\n          transmissonBrand: vehicleResult.engine.transmissonBrand,\n          transmissionGears: vehicleResult.engine.transmissionGears\n        };\n        _this.purchase = {\n          purchaseVendorID: vehicleResult.purchase.purchaseVendorID,\n          warrantyExpirationDate: vehicleResult.purchase.warrantyExpirationDate,\n          purchasePrice: vehicleResult.purchase.purchasePrice,\n          purchasePriceCurrency: vehicleResult.purchase.purchasePriceCurrency,\n          warrantyExpirationMeter: vehicleResult.purchase.warrantyExpirationMeter,\n          purchaseDate: vehicleResult.purchase.purchaseDate,\n          purchaseComments: vehicleResult.purchase.purchaseComments,\n          purchaseOdometer: vehicleResult.purchase.purchaseOdometer,\n          gstInc: vehicleResult.purchase.gstInc\n        };\n        _this.loan = {\n          loanVendorID: vehicleResult.loan.loanVendorID,\n          amountOfLoan: vehicleResult.loan.amountOfLoan,\n          amountOfLoanCurrency: vehicleResult.loan.amountOfLoanCurrency,\n          aspiration: vehicleResult.loan.aspiration,\n          annualPercentageRate: vehicleResult.loan.annualPercentageRate,\n          downPayment: vehicleResult.loan.downPayment,\n          downPaymentCurrency: vehicleResult.loan.downPaymentCurrency,\n          monthlyPaymentCurrency: vehicleResult.loan.monthlyPaymentCurrency,\n          dateOfLoan: vehicleResult.loan.dateOfLoan,\n          monthlyPayment: vehicleResult.loan.monthlyPayment,\n          firstPaymentDate: vehicleResult.loan.firstPaymentDate,\n          numberOfPayments: vehicleResult.loan.numberOfPayments,\n          loadEndDate: vehicleResult.loan.loadEndDate,\n          accountNumber: vehicleResult.loan.accountNumber,\n          generateExpenses: vehicleResult.loan.generateExpenses,\n          loanDueDate: vehicleResult.loan.loanDueDate,\n          lReminder: vehicleResult.loan.lReminder,\n          gstInc: vehicleResult.loan.gstInc,\n          notes: vehicleResult.loan.notes\n        };\n        _this.settings = {\n          primaryMeter: vehicleResult.settings.primaryMeter,\n          fuelUnit: vehicleResult.settings.fuelUnit,\n          hardBreakingParams: vehicleResult.settings.hardBreakingParams,\n          hardAccelrationParams: vehicleResult.settings.hardAccelrationParams,\n          turningParams: vehicleResult.settings.turningParams,\n          measurmentUnit: vehicleResult.settings.measurmentUnit\n        };\n        _this.slides = vehicleResult.uploadedPics;\n        _this.pDocs = vehicleResult.purchaseDocsUpload;\n        _this.lDocs = vehicleResult.loanDocsUpload;\n        _this.docs = vehicleResult.uploadDocument;\n\n        _this.fetchGroups();\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  deleteVehicle() {\n    this.apiService.deleteData(\"vehicles/\" + this.vehicleID).subscribe(result => {\n      this.toastr.success(\"Vehicle Deleted Successfully!\");\n      this.router.navigateByUrl(\"/fleet/vehicles/list\");\n    });\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = '';\n\n    if (ext == 'doc' || ext == 'docx' || ext == 'xlsx' || ext == 'pdf') {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('https://docs.google.com/viewer?url=' + val + '&embedded=true');\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  }\n\n  deleteDocument(value, name, index) {\n    this.apiService.deleteData(`vehicles/uploadDelete/${this.vehicleID}/${value}/${name}`).subscribe(result => {\n      if (value == 'doc') {\n        this.docs = [];\n        this.uploadedDocs = result.Attributes.uploadedDocs;\n        this.existingDocs = result.Attributes.uploadedDocs;\n        result.Attributes.uploadedDocs.map(x => {\n          let obj = {\n            name: x,\n            path: `${this.Asseturl}/${result.carrierID}/${x}`\n          };\n          this.docs.push(obj);\n        });\n      } else if (value == 'loan') {\n        this.lDocs = [];\n        this.uploadedDocs = result.Attributes.loanDocs;\n        this.existingDocs = result.Attributes.loanDocs;\n        result.Attributes.loanDocs.map(x => {\n          let obj = {\n            name: x,\n            path: `${this.Asseturl}/${result.carrierID}/${x}`\n          };\n          this.lDocs.push(obj);\n        });\n      } else {\n        this.pDocs = [];\n        this.uploadedDocs = result.Attributes.purchaseDocs;\n        this.existingDocs = result.Attributes.purchaseDocs;\n        result.Attributes.purchaseDocs.map(x => {\n          let obj = {\n            name: x,\n            path: `${this.Asseturl}/${result.carrierID}/${x}`\n          };\n          this.pDocs.push(obj);\n        });\n      }\n    });\n  }\n\n  fetchProgramDetails() {\n    if (this.serviceProgramID.length > 0) {\n      let serviceProgramID = JSON.stringify(this.serviceProgramID);\n      this.apiService.getData('servicePrograms/' + serviceProgramID).subscribe(result => {\n        this.servicePrograms = result;\n      });\n    }\n  }\n\n  fetchVehicleLogs() {\n    this.apiService.getData(`auditLogs/details/${this.vehicleID}`).subscribe(res => {\n      this.vehicleLogs = res.Items;\n\n      if (this.vehicleLogs.length > 0) {\n        this.vehicleLogs.map(a => {\n          a.dateAndTime = `${a.createdDate} ${a.createTime}`;\n\n          if (a.eventParams.userName !== undefined) {\n            const newString = a.eventParams.userName.split(\"_\");\n            a.userFirstName = newString[0];\n            a.userLastName = newString[1];\n          }\n\n          if (a.eventParams.name !== undefined) {\n            a.entityNumber = a.eventParams.name;\n          }\n\n          if (a.eventParams.name !== undefined) {\n            if (a.eventParams.name.includes(\"_\")) {\n              const newString = a.eventParams.name.split(\"_\");\n              a.firstName = newString[0];\n              a.lastName = newString[1];\n            }\n          }\n        });\n        this.vehicleLogs.sort((c, d) => {\n          return new Date(d.dateAndTime).valueOf() - new Date(c.dateAndTime).valueOf();\n        });\n      }\n    });\n  }\n\n  locationDetails() {\n    this.router.navigate([`/fleet/tracking/vehicle-dash-cam-tracker/${this.deviceInfo.deviceSrNo.split('#')[1]}`], {\n      queryParams: {\n        vehicleId: this.vehicleID\n      }\n    });\n  }\n\n  fetchGroups() {\n    if (this.groupId !== '') {\n      this.apiService.getData(`groups/get/list?type=vehicles&groupId=${this.groupId}`).subscribe(result => {\n        this.groupsObjects = result;\n      });\n    }\n  }\n\n};\n\nVehicleDetailComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: DomSanitizer\n}, {\n  type: CountryStateCityService\n}, {\n  type: NgbModal\n}, {\n  type: RxFormBuilder\n}];\n\nVehicleDetailComponent = __decorate([Component({\n  selector: 'app-vehicle-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], VehicleDetailComponent);\nexport { VehicleDetailComponent };","map":null,"metadata":{},"sourceType":"module"}