{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./aci-details.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./aci-details.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport * as moment from 'moment';\nimport { HttpClient } from '@angular/common/http';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet AciDetailsComponent = class AciDetailsComponent {\n  constructor(apiService, route, toastr, router, httpClient, countryStateCity) {\n    this.apiService = apiService;\n    this.route = route;\n    this.toastr = toastr;\n    this.router = router;\n    this.httpClient = httpClient;\n    this.countryStateCity = countryStateCity;\n    this.title = 'ACI e-Manifest Details';\n    this.countryCodeName = {};\n    this.assetTypeCode = {};\n    this.stateCodeToName = {};\n    this.truck = {\n      number: '',\n      type: '',\n      vinNumber: '',\n      dotNumber: '',\n      cargoExemptions: [],\n      insurancePolicy: {\n        insuranceCompanyName: '',\n        policyNumber: '',\n        issuedDate: '',\n        policyAmount: '',\n        amountCurrency: ''\n      },\n      licensePlate: {\n        number: '',\n        stateProvince: '',\n        country: ''\n      },\n      sealNumbers: []\n    };\n    this.mainDriver = {};\n    this.drivers = [];\n    this.trailers = [];\n    this.shipments = [];\n    this.shipmentArray = [];\n    this.containers = [];\n    this.passengers = [];\n    this.createdBy = '';\n    this.modifiedBy = '';\n    this.shipmentData = {\n      shipmentID: '',\n      shipmentType: '',\n      loadedOn: {\n        type: '',\n        number: ''\n      },\n      CCC: '',\n      cargoControlNumber: '',\n      referenceOnlyShipment: '',\n      portOfEntry: '',\n      releaseOffice: '',\n      subLocation: '',\n      importerCsaBusinessNumber: '',\n      uniqueConsignmentReferenceNumber: '',\n      estimatedArrivalDate: '',\n      estimatedArrivalTimeZone: '',\n      cityOfLoading: {\n        cityName: '',\n        stateProvince: ''\n      },\n      cityOfAcceptance: {\n        cityName: '',\n        stateProvince: ''\n      },\n      specialInstructions: '',\n      shipper: '',\n      consignee: '',\n      deliveryDestinations: [],\n      notifyParties: [],\n      commodities: []\n    };\n    this.driverData = {\n      driverID: '',\n      driverNumber: '',\n      firstName: '',\n      gender: '',\n      lastName: '',\n      dateOfBirth: '',\n      citizenshipCountry: '',\n      fastCardNumber: '',\n      travelDocuments: []\n    };\n    this.passengerData = {\n      passengerID: '',\n      firstName: '',\n      gender: '',\n      lastName: '',\n      dateOfBirth: '',\n      citizenshipCountry: '',\n      fastCardNumber: '',\n      travelDocuments: []\n    };\n    this.borderResponses = [];\n    this.errors = {};\n    this.documentTypeList = [];\n    this.documentsTypesObjects = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.sendBorderConnectOption = false;\n    this.packagingUnitsObjects = {};\n    this.vehicleTypeObjects = {};\n    this.cargoExemptionTypeObjects = {};\n    this.shipmentTypeObjects = {};\n    this.canadianPortsObjects = {};\n    this.subLocationObjects = {};\n    this.releaseOfficeObjects = {};\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.manifestID = _this.route.snapshot.params[`manifestID`];\n\n      _this.fetchACIEntry();\n\n      _this.fetchAssetsCodeName();\n\n      _this.fetchDocuments();\n\n      _this.fetchVehicleType();\n\n      _this.fetchCargoExemptionType();\n\n      _this.fetchPackagingUnits();\n\n      _this.fetchShipmentType();\n\n      _this.fetchCanadianPorts();\n\n      _this.fetchSublocationList();\n\n      _this.fetchReleaseOfficeList();\n    })();\n  }\n\n  fetchAssetsCodeName() {\n    this.httpClient.get('assets/jsonFiles/trailers.json').subscribe(data => {\n      this.assetTypeCode = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchVehicleType() {\n    this.httpClient.get('assets/vehicleType.json').subscribe(data => {\n      this.vehicleTypeObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchSublocationList() {\n    this.httpClient.get('assets/ACIsubLocations.json').subscribe(data => {\n      this.subLocationObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchCargoExemptionType() {\n    this.httpClient.get('assets/ACIcargoExemption.json').subscribe(data => {\n      this.cargoExemptionTypeObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchReleaseOfficeList() {\n    this.httpClient.get('assets/ACIReleaseOffice.json').subscribe(data => {\n      this.releaseOfficeObjects = data.reduce((a, b) => {\n        return a[b[`number`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchShipmentType() {\n    this.httpClient.get('assets/jsonFiles/ACIShipmentType.json').subscribe(data => {\n      this.shipmentTypeObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchDocuments() {\n    this.httpClient.get('assets/travelDocumentType.json').subscribe(data => {\n      this.documentTypeList = data;\n      this.documentsTypesObjects = this.documentTypeList.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchPackagingUnits() {\n    this.httpClient.get('assets/jsonFiles/ACIpackagingUnit.json').subscribe(data => {\n      this.packagingUnitsObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchCanadianPorts() {\n    this.httpClient.get('assets/canadianPorts.json').subscribe(data => {\n      this.canadianPortsObjects = data.reduce((a, b) => {\n        return a[b[`number`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchACIEntry() {\n    var _this2 = this;\n\n    this.apiService.getData('eManifests/ACIdetails/' + this.manifestID).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        _this2.manifestID = _this2.manifestID;\n        _this2.data = result.data;\n        _this2.sendId = result.sendId;\n        _this2.companyKey = result.companyKey;\n        _this2.operation = result.operation;\n        _this2.tripNumber = result.tripNumber;\n        _this2.CCC = result.CCC;\n        _this2.portOfEntry = result.portOfEntry;\n        _this2.subLocation = result.subLocation;\n        _this2.estimatedArrivalDateTime = result.estimatedArrivalDateTime;\n        _this2.estimatedArrivalTimeZone = result.estimatedArrivalTimeZone;\n        _this2.truck = {\n          number: result.truck.number,\n          type: result.truck.type,\n          vinNumber: result.truck.vinNumber,\n          dotNumber: result.truck.dotNumber,\n          insurancePolicy: {\n            insuranceCompanyName: result.truck.insurancePolicy.insuranceCompanyName,\n            policyNumber: result.truck.insurancePolicy.policyNumber,\n            issuedDate: result.truck.insurancePolicy.issuedDate,\n            policyAmount: result.truck.insurancePolicy.policyAmount,\n            amountCurrency: result.truck.insurancePolicy.amountCurrency\n          },\n          licensePlate: {\n            number: result.truck.licensePlate.number,\n            stateProvince: yield _this2.countryStateCity.GetStateNameFromCode(result.truck.licensePlate.stateProvince, result.truck.licensePlate.country),\n            country: yield _this2.countryStateCity.GetSpecificCountryNameByCode(result.truck.licensePlate.country)\n          },\n          sealNumbers: result.truck.sealNumbers,\n          cargoExemptions: result.truck.cargoExemptions\n        };\n        _this2.mainDriver = result.mainDriver;\n        _this2.drivers = result.drivers;\n        _this2.passengers = result.passengers;\n        _this2.trailers = result.trailers;\n        _this2.containers = result.containers, _this2.shipments = result.shipments;\n\n        _this2.fetchLoadingStateCities(result.shipments);\n\n        _this2.currentStatus = result.currentStatus;\n        _this2.timeCreated = moment(result.timeCreated).format(`MMMM D YYYY, h:mm:ss a`);\n        _this2.timeModified = moment(result.timeModified).format(`MMMM D YYYY, h:mm:ss a`);\n        _this2.createdBy = result.createdBy;\n        _this2.modifiedBy = result.modifiedBy;\n        _this2.borderResponses = result.borderResponses;\n        _this2.createdDate = result.createdDate;\n        _this2.createdTime = result.createdTime;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  fetchLoadingStateCities(shipments) {\n    var _this3 = this;\n\n    for (let s = 0; s < shipments.length; s++) {\n      shipments.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (e) {\n          e.cityOfAcceptance.stateProvince = yield _this3.countryStateCity.GetStateNameFromCode(e.cityOfAcceptance.stateProvince, e.cityOfAcceptance.country);\n          e.cityOfLoading.stateProvince = yield _this3.countryStateCity.GetStateNameFromCode(e.cityOfLoading.stateProvince, e.cityOfLoading.country);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }\n\n  setStatus(val) {\n    let record = {\n      date: this.createdDate,\n      time: this.createdTime,\n      eventID: this.manifestID,\n      manifestType: 'ACI',\n      status: val\n    };\n    this.apiService.postData('eManifests/setStatus', record).subscribe(result => {\n      this.toastr.success('Status Updated Successfully!');\n      this.currentStatus = val;\n    });\n  }\n\n  sendCBSAFn() {\n    this.apiService.getData('eManifests/ACI/CBSAdetails/' + this.manifestID).subscribe(result => {// this.sendBorderConnectOption = result;\n      // if (this.sendBorderConnectOption === true) {\n      //   const val = 'Queued';\n      //   const setStatus: any = this.apiService.getData('ACIeManifest/setStatus/' + this.manifestID + '/' + val).subscribe((result: any) => {\n      //     this.toastr.success('Status Updated Successfully!');\n      //      this.currentStatus = val;\n      //   });\n      // }\n    });\n  }\n\n  showShipmentDetails(shipmentID) {\n    const fetchedShipmentData = this.shipments.filter(item => item.shipmentID === shipmentID);\n    this.shipmentData = {\n      shipmentID: fetchedShipmentData[0].shipmentID,\n      shipmentType: fetchedShipmentData[0].shipmentType,\n      loadedOn: {\n        type: fetchedShipmentData[0].loadedOn.type,\n        number: fetchedShipmentData[0].loadedOn.number\n      },\n      CCC: fetchedShipmentData[0].CCC,\n      cargoControlNumber: fetchedShipmentData[0].cargoControlNumber,\n      referenceOnlyShipment: fetchedShipmentData[0].referenceOnlyShipment,\n      portOfEntry: fetchedShipmentData[0].portOfEntry,\n      releaseOffice: fetchedShipmentData[0].releaseOffice,\n      subLocation: fetchedShipmentData[0].subLocation,\n      importerCsaBusinessNumber: fetchedShipmentData[0].importerCsaBusinessNumber,\n      uniqueConsignmentReferenceNumber: fetchedShipmentData[0].uniqueConsignmentReferenceNumber,\n      estimatedArrivalDate: fetchedShipmentData[0].estimatedArrivalDate,\n      estimatedArrivalTimeZone: fetchedShipmentData[0].estimatedArrivalTimeZone,\n      cityOfLoading: {\n        cityName: fetchedShipmentData[0].cityOfLoading.cityName,\n        stateProvince: fetchedShipmentData[0].cityOfLoading.stateProvince\n      },\n      cityOfAcceptance: {\n        cityName: fetchedShipmentData[0].cityOfAcceptance.cityName,\n        stateProvince: fetchedShipmentData[0].cityOfAcceptance.stateProvince\n      },\n      specialInstructions: fetchedShipmentData[0].specialInstructions,\n      shipper: fetchedShipmentData[0].shipper.name,\n      consignee: fetchedShipmentData[0].consignee.name,\n      deliveryDestinations: fetchedShipmentData[0].deliveryDestinations,\n      notifyParties: fetchedShipmentData[0].notifyParties,\n      commodities: fetchedShipmentData[0].commodities\n    };\n  }\n\n  showDriverDetails(driverID) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const fetchedDriverData = _this4.drivers.filter(item => item.driverID === driverID);\n\n      _this4.driverData = {\n        driverID: fetchedDriverData[0].driverID,\n        driverNumber: fetchedDriverData[0].driverNumber,\n        firstName: fetchedDriverData[0].firstName,\n        gender: fetchedDriverData[0].gender,\n        lastName: fetchedDriverData[0].lastName,\n        dateOfBirth: fetchedDriverData[0].dateOfBirth,\n        citizenshipCountry: yield _this4.countryStateCity.GetSpecificCountryNameByCode(fetchedDriverData[0].citizenshipCountry),\n        fastCardNumber: fetchedDriverData[0].fastCardNumber,\n        travelDocuments: fetchedDriverData[0].travelDocuments\n      };\n\n      for (let d = 0; d < fetchedDriverData[0].travelDocuments.length; d++) {\n        fetchedDriverData[0].travelDocuments.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (e) {\n            e.stateProvince = yield _this4.countryStateCity.GetStateNameFromCode(e.stateProvince, e.country);\n            e.country = yield _this4.countryStateCity.GetSpecificCountryNameByCode(e.country);\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  showMainDriverDetails() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.driverData = {\n        driverID: _this5.mainDriver.driverID,\n        driverNumber: _this5.mainDriver.driverNumber,\n        firstName: _this5.mainDriver.firstName,\n        gender: _this5.mainDriver.gender,\n        lastName: _this5.mainDriver.lastName,\n        dateOfBirth: _this5.mainDriver.dateOfBirth,\n        citizenshipCountry: yield _this5.countryStateCity.GetSpecificCountryNameByCode(_this5.mainDriver.citizenshipCountry),\n        fastCardNumber: _this5.mainDriver.fastCardNumber,\n        travelDocuments: _this5.mainDriver.travelDocuments\n      };\n\n      for (let d = 0; d < _this5.mainDriver.travelDocuments.length; d++) {\n        _this5.mainDriver.travelDocuments.map( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (e) {\n            e.stateProvince = yield _this5.countryStateCity.GetStateNameFromCode(e.stateProvince, e.country);\n            e.country = yield _this5.countryStateCity.GetSpecificCountryNameByCode(e.country);\n          });\n\n          return function (_x4) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  showPassengerDetails(passengerID) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const fetchedPassengerData = _this6.passengers.filter(item => item.passengerID === passengerID);\n\n      _this6.passengerData = {\n        passengerID: fetchedPassengerData[0].passengerID,\n        firstName: fetchedPassengerData[0].firstName,\n        gender: fetchedPassengerData[0].gender,\n        lastName: fetchedPassengerData[0].lastName,\n        dateOfBirth: fetchedPassengerData[0].dateOfBirth,\n        citizenshipCountry: yield _this6.countryStateCity.GetSpecificCountryNameByCode(fetchedPassengerData[0].citizenshipCountry),\n        fastCardNumber: fetchedPassengerData[0].fastCardNumber,\n        travelDocuments: fetchedPassengerData[0].travelDocuments\n      };\n\n      for (let d = 0; d < fetchedPassengerData[0].travelDocuments.length; d++) {\n        fetchedPassengerData[0].travelDocuments.map( /*#__PURE__*/function () {\n          var _ref5 = _asyncToGenerator(function* (e) {\n            e.stateProvince = yield _this6.countryStateCity.GetStateNameFromCode(e.stateProvince, e.country);\n            e.country = yield _this6.countryStateCity.GetSpecificCountryNameByCode(e.country);\n          });\n\n          return function (_x5) {\n            return _ref5.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  amendManifest() {\n    const amend = true;\n    this.router.navigateByUrl('/dispatch/cross-border/ACI-edit-eManifest/' + this.manifestID + `?amendManifest=` + amend);\n  }\n\n  cancelManifest(manifestID) {\n    this.apiService.getData(`eManifests/ACImanifest/cancelManifest/` + manifestID).subscribe();\n  }\n\n};\n\nAciDetailsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ToastrService\n}, {\n  type: Router\n}, {\n  type: HttpClient\n}, {\n  type: CountryStateCityService\n}];\n\nAciDetailsComponent = __decorate([Component({\n  selector: 'app-aci-details',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AciDetailsComponent);\nexport { AciDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}