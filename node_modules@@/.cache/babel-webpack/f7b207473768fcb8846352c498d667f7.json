{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./driver-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./driver-list.component.css\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Component, Input, ViewChild } from \"@angular/core\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\nimport * as _ from \"lodash\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { environment } from \"../../../../../environments/environment\";\nimport { ApiService } from \"../../../../services\";\nimport Constants from \"../../constants\";\nlet DriverListComponent = class DriverListComponent {\n  constructor(apiService, httpClient, toastr, countryStateCity) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.countryStateCity = countryStateCity;\n    this.environment = environment.isFeatureEnabled;\n    this.documentsTypesObects = {};\n    this.title = \"Driver List\";\n    this.mapView = false;\n    this.listView = true;\n    this.visible = true;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.drivers = [];\n    this.statesObject = {};\n    this.countriesObject = {};\n    this.citiesObject = {};\n    this.vehiclesObject = {};\n    this.groupssObject = {};\n    this.vendorsObject = {};\n    this.ownerOperatorsObject = {};\n    this.driverID = '';\n    this.driverName = '';\n    this.dutyStatus = '';\n    this.driverType = null;\n    this.suggestedDrivers = []; //homeworld: Observable<{}>;\n    //totalRecords = 10;\n    //pageLength = 10;\n\n    this.lastEvaluatedKey = '';\n    this.loaded = false;\n    this.hideShow = {\n      name: true,\n      dutyStatus: true,\n      location: true,\n      currCycle: true,\n      currVehicle: false,\n      assets: false,\n      contact: false,\n      dl: true,\n      document: false,\n      status: true,\n      groupID: true,\n      citizenship: false,\n      address: false,\n      paymentType: false,\n      sin: false,\n      contractStart: false,\n      homeTerminal: false,\n      fastNumber: false,\n      email: true,\n      phone: true,\n      driverType: true,\n      startDate: true,\n      licenceExpiry: true,\n      licStateName: true\n    };\n    this.groupName = '';\n    this.groupId = '';\n    this.groupsObjects = {};\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.isSearch = false;\n    this.get = _.get; // columns of data table\n\n    this.dataColumns = [{\n      width: '8%',\n      field: 'firstName',\n      header: 'First Name',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'lastName',\n      header: 'Last Name',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'email',\n      header: 'Email',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'phone',\n      header: 'Phone',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'userName',\n      header: 'Username',\n      type: \"text\"\n    }, {\n      width: '7%',\n      field: 'driverType',\n      header: 'Type',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'companyName',\n      header: 'Company',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'startDate',\n      header: 'Start Date',\n      type: \"text\"\n    }, {\n      width: '9%',\n      field: 'CDL_Number',\n      header: 'CDL#',\n      type: \"text\"\n    }, {\n      width: '7%',\n      field: 'licenceExpiry',\n      header: 'CDL Expiry',\n      type: \"text\"\n    }, {\n      width: '8%',\n      field: 'isImport',\n      header: 'Added By',\n      type: \"text\"\n    }, {\n      width: '7%',\n      field: \"driverStatus\",\n      header: 'Status',\n      type: 'text'\n    }];\n    this.getSuggestions = _.debounce(function (value) {\n      value = value.toLowerCase();\n\n      if (value != \"\") {\n        this.loadMsg = Constants.LOAD_DATA;\n        this.apiService.getData(`drivers/get/suggestions/${value}`).subscribe(result => {\n          if (result.length === 0) {\n            this.suggestedDrivers = [];\n            this.loadMsg = Constants.NO_LOAD_FOUND;\n          }\n\n          if (result.length > 0) {\n            result.map(v => {\n              if (v.middleName != undefined && v.middleName != '') {\n                v.fullName = `${v.firstName} ${v.middleName} ${v.lastName}`;\n              } else {\n                v.fullName = `${v.firstName} ${v.lastName}`;\n              }\n\n              return v;\n            });\n            this.suggestedDrivers = result;\n          } else {}\n        });\n      } else {\n        this.suggestedDrivers = [];\n      }\n    }, 800);\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.fetchDrivers();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.setToggleOptions();\n\n      _this2.setEmployeeOptions(); // this.fetchAllDocumentsTypes();\n      // this.fetchAllVehiclesIDs();\n      // this.fetchAllVendorsIDs();\n      // this.fetchOwnerOperatorsByIDss();\n\n\n      yield _this2.fetchDrivers();\n    })();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  setEmployeeOptions() {\n    this.employeeOptions = [{\n      \"value\": \"contractor\",\n      \"name\": \"Contractor\"\n    }, {\n      \"name\": \"Employee\",\n      \"value\": \"employee\"\n    }, {\n      \"name\": \"All\",\n      \"value\": \"null\"\n    }];\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  fetchAllDocumentsTypes() {\n    this.httpClient.get(`assets/travelDocumentType.json`).subscribe(data => {\n      this.allDocumentsTypes = data;\n      this.documentsTypesObects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  setDriver(driverID) {\n    if (driverID != undefined && driverID != '') {\n      this.driverID = driverID;\n    }\n\n    this.loadMsg = Constants.NO_LOAD_DATA;\n  }\n\n  fetchAllGrorups() {\n    this.apiService.getData(`groups/get/list?type=drivers&groupId=${this.groupId}`).subscribe(result => {\n      this.groupssObject = result;\n    });\n  }\n\n  fetchGroups() {\n    this.apiService.getData(`groups/get/driverlist?type=drivers`).subscribe(result => {\n      this.groupsObjects = result;\n    });\n  }\n\n  fetchAllVendorsIDs() {\n    this.apiService.getData('contacts/get/list/vendor').subscribe(result => {\n      this.vendorsObject = result;\n    });\n  }\n\n  fetchOwnerOperatorsByIDss() {\n    this.apiService.getData(`contacts/get/list/ownerOperator`).subscribe(result => {\n      this.ownerOperatorsObject = result;\n    });\n  }\n\n  fetchAllCitiesIDs() {\n    this.apiService.getData(\"cities/get/list\").subscribe(result => {\n      this.citiesObject = result;\n    });\n  }\n\n  fetchAllVehiclesIDs() {\n    this.apiService.getData(\"vehicles/get/list\").subscribe(result => {\n      this.vehiclesObject = result;\n    });\n  }\n\n  deactivateDriver(eventData) {\n    if (confirm(\"Are you sure you want to delete?\") === true) {\n      // let record = {\n      //   date: eventData.createdDate,\n      //   time: eventData.createdTime,\n      //   eventID: eventData.driverID,\n      //   status: eventData.driverStatus\n      // }\n      this.apiService.deleteData(`drivers/delete/${eventData.driverID}/${eventData.firstName}/${eventData.lastName}/${eventData.userName}`).subscribe(result => {\n        this.drivers = []; // this.driverDraw = 0;\n\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.lastEvaluatedKey = \"\";\n        this.fetchDrivers(); // this.fetchDriversCount();\n\n        this.toastr.success(\"Driver is deleted!\");\n      });\n    }\n  }\n\n  fetchDrivers() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.lastEvaluatedKey !== 'end') {\n        let result = yield _this3.apiService.getData(`drivers/fetch/records?driver=${_this3.driverID}&dutyStatus=${_this3.dutyStatus}&type=${_this3.driverType}&lastKey=${_this3.lastEvaluatedKey}`).toPromise();\n\n        if (result.data.length === 0) {\n          _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n          _this3.loaded = true;\n        }\n\n        result.data.map(v => {\n          v.url = `/fleet/drivers/detail/${v.driverID}`;\n        });\n        _this3.suggestedDrivers = [];\n\n        if (result.nextPage !== undefined) {\n          _this3.lastEvaluatedKey = encodeURIComponent(result.nextPage);\n        } else {\n          _this3.lastEvaluatedKey = 'end';\n        }\n\n        _this3.drivers = _this3.drivers.concat(result.data);\n        _this3.loaded = true;\n        _this3.isSearch = false;\n      }\n    })();\n  }\n\n  fetchAddress(drivers) {\n    var _this4 = this;\n\n    for (let d = 0; d < drivers.length; d++) {\n      drivers.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (e) {\n          e.citizenship = yield _this4.countryStateCity.GetSpecificCountryNameByCode(e.citizenship);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()); // for(let i=0;i<drivers[d].address.length; i++){\n\n      if (drivers[d].address !== undefined) {\n        drivers[d].address.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (a) {\n            if (a.manual) {\n              a.countryName = yield _this4.countryStateCity.GetSpecificCountryNameByCode(a.countryCode);\n              a.stateName = yield _this4.countryStateCity.GetStateNameFromCode(a.stateCode, a.countryCode);\n            }\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      } // }\n\n    }\n  }\n\n  searchFilter() {\n    if (this.driverID !== '' || this.dutyStatus !== '' || this.driverType !== null) {\n      this.isSearch = true;\n      this.drivers = [];\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.lastEvaluatedKey = '';\n      this.fetchDrivers();\n    } else {\n      return false;\n    }\n  }\n\n  clearInput() {\n    this.suggestedDrivers = null;\n  }\n\n  clearSuggestions() {\n    this.driverName = null;\n  }\n\n  resetFilter() {\n    if (this.driverID !== '' || this.dutyStatus !== '' || this.driverType !== null) {\n      this.isSearch = true;\n      this.driverID = '';\n      this.dutyStatus = '';\n      this.driverName = null;\n      this.driverType = null;\n      this.drivers = [];\n      this.loaded = false;\n      this.lastEvaluatedKey = '';\n      this.suggestedDrivers = null;\n      this.fetchDrivers();\n    } else {\n      return false;\n    }\n  }\n\n  refreshData() {\n    this.drivers = [];\n    this.driverID = '';\n    this.dutyStatus = '';\n    this.driverName = '';\n    this.driverType = null;\n    this.lastEvaluatedKey = '';\n    this.loaded = false;\n    this.fetchDrivers();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n  /**\r\n   * Clears the table filters\r\n   * @param table Table\r\n   */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nDriverListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: CountryStateCityService\n}];\n\nDriverListComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nDriverListComponent = __decorate([Component({\n  selector: \"app-driver-list\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DriverListComponent);\nexport { DriverListComponent };","map":null,"metadata":{},"sourceType":"module"}