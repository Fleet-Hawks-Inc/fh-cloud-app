{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./my-document-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./my-document-list.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../services/api.service';\nimport { map } from 'rxjs/operators';\nimport { from } from 'rxjs';\nimport { Auth } from 'aws-amplify';\nimport * as moment from \"moment\";\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport Constants from '../../../fleet/constants';\nimport { environment } from 'src/environments/environment';\nlet MyDocumentListComponent = class MyDocumentListComponent {\n  constructor(apiService, toastr, spinner) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.environment = environment.isFeatureEnabled;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.documents = [];\n    this.ifEdit = false;\n    this.modalTitle = 'Add Document';\n    this.documentsDocs = [];\n    this.documentMode = 'Manual';\n    this.allOptions = {};\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.Success = '';\n    this.errors = {};\n    this.documentData = {\n      categoryType: 'user',\n      tripID: '',\n      documentNumber: '',\n      docType: '',\n      documentName: '',\n      description: '',\n      uploadedDocs: ''\n    };\n    this.totalRecords = 10;\n    this.pageLength = 10;\n    this.serviceUrl = '';\n    this.filterValues = {\n      docID: '',\n      searchValue: '',\n      startDate: '',\n      endDate: '',\n      start: '',\n      end: ''\n    };\n    this.lastEvaluatedKey = '';\n    this.suggestions = [];\n    this.tripsObjects = {};\n    this.docNext = false;\n    this.docPrev = true;\n    this.docDraw = 0;\n    this.docPrevEvauatedKeys = [''];\n    this.docStartPoint = 1;\n    this.docEndPoint = this.pageLength;\n    this.uploadeddoc = [];\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.currentUser = `${_this.currentUser.firstName} ${_this.currentUser.lastName}`;\n    });\n    this.selectedFileNames = new Map();\n  }\n\n  ngOnInit() {\n    this.fetchDocumentsCount();\n    this.fetchTrips();\n    this.fetchTripsByIDs();\n    this.initDataTable();\n    $(document).ready(() => {\n      this.form = $('#form_').validate();\n    });\n  } // fetchDocuments = () => {\n  //   this.apiService.getData('documents?userType=user').subscribe({\n  //     complete: () => { },\n  //     error: () => { },\n  //     next: (result: any) => {\n  //       let data = result.Items.filter(function(v){ \n  //         if(v.categoryType == 'user'){return v;} \n  //       })\n  //       this.totalRecords = data.length;\n  //     }\n  //   });\n  // };\n\n\n  fetchDocumentsCount() {\n    this.apiService.getData('documents/get/count?categoryType=user&searchValue=' + this.filterValues.searchValue + \"&from=\" + this.filterValues.start + \"&to=\" + this.filterValues.end).subscribe({\n      complete: () => {},\n      error: () => {},\n      next: result => {\n        this.totalRecords = result.Count;\n\n        if (this.filterValues.searchValue != '' || this.filterValues.start != '' || this.filterValues.end != '') {\n          this.docEndPoint = this.totalRecords;\n        }\n      }\n    });\n  }\n  /*\r\n   * Get all trips from api\r\n   */\n\n\n  fetchTrips() {\n    this.apiService.getData('trips').subscribe(result => {\n      this.trips = result.Items;\n    });\n  }\n  /*\r\n  * Get all trips from api\r\n  */\n\n\n  fetchTripsByIDs() {\n    this.apiService.getData('trips/get/list').subscribe(result => {\n      this.tripsObjects = result;\n    });\n  }\n\n  addDocument() {\n    this.hideErrors();\n    this.spinner.show(); // create form data instance\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadeddoc.length; i++) {\n      formData.append('uploadedDocs', this.uploadeddoc[i]);\n    } //append other fields\n\n\n    formData.append('data', JSON.stringify(this.documentData));\n    this.apiService.postData('documents', formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.spinner.hide();\n        this.toastr.success('Document Added successfully');\n        $('#addDocumentModal').modal('hide');\n        this.fetchDocumentsCount();\n        this.initDataTable();\n        this.documentData.documentNumber = '';\n        this.documentData.docType = '';\n        this.documentData.tripID = '';\n        this.documentData.documentName = '';\n        this.documentData.description = '';\n      }\n    });\n  }\n\n  throwErrors() {\n    this.spinner.hide();\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n  /*\r\n    * Fetch Document details before updating\r\n    */\n\n\n  editDocument(id) {\n    this.spinner.show();\n    this.currentID = id;\n    this.ifEdit = true;\n    this.modalTitle = 'Edit';\n    this.newDoc = '';\n    this.apiService.getData(`documents/${this.currentID}`).subscribe(result => {\n      result = result.Items[0];\n      this.spinner.hide();\n      this.documentData.tripID = result.tripID;\n      this.documentData.documentNumber = result.documentNumber;\n      this.documentData.documentName = result.documentName;\n      this.documentData.docType = result.docType;\n      this.documentData.description = result.description;\n      this.documentData['uploadedDocs'] = result.uploadedDocs;\n      this.newDoc = `${this.Asseturl}/${result.carrierID}/${result.uploadedDocs}`;\n    });\n    $('#addDocumentModal').modal('show');\n  }\n\n  updateDocument() {\n    this.documentData['docID'] = this.currentID; // create form data instance\n\n    const formData = new FormData(); //append photos if any\n\n    for (let i = 0; i < this.uploadeddoc.length; i++) {\n      formData.append('uploadedDocs', this.uploadeddoc[i]);\n    } //append other fields\n\n\n    formData.append('data', JSON.stringify(this.documentData));\n    this.apiService.putData('documents', formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.toastr.success('Document Updated successfully');\n        $('#addDocumentModal').modal('hide');\n        this.documentData.documentNumber = '';\n        this.documentData.docType = '';\n        this.documentData.tripID = '';\n        this.documentData.documentName = '';\n        this.documentData.description = '';\n        this.initDataTable();\n      }\n    });\n  }\n\n  deactivateDoc(value, docID) {\n    if (confirm(\"Are you sure you want to delete?\") === true) {\n      this.apiService.deleteData(`documents/isDeleted/${docID}/${value}`).subscribe(result => {\n        this.documents = [];\n        this.docDraw = 0;\n        this.lastEvaluatedKey = '';\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fetchDocumentsCount();\n        this.initDataTable();\n      });\n    }\n  }\n\n  initDataTable() {\n    this.spinner.show();\n    this.apiService.getData('documents/fetch/records?categoryType=user&searchValue=' + this.filterValues.searchValue + \"&from=\" + this.filterValues.start + \"&to=\" + this.filterValues.end + '&lastKey=' + this.lastEvaluatedKey).subscribe(result => {\n      if (result.Items.length == 0) {\n        this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      this.suggestions = [];\n      this.getStartandEndVal();\n      this.documents = result['Items'];\n\n      if (this.filterValues.docID !== '' || this.filterValues.start !== '' || this.filterValues.end !== '') {\n        this.docStartPoint = 1;\n        this.docEndPoint = this.totalRecords;\n      }\n\n      if (result['LastEvaluatedKey'] !== undefined) {\n        this.docNext = false; // for prev button\n\n        if (!this.docPrevEvauatedKeys.includes(result['LastEvaluatedKey'].docID)) {\n          this.docPrevEvauatedKeys.push(result['LastEvaluatedKey'].docID);\n        }\n\n        this.lastEvaluatedKey = result['LastEvaluatedKey'].docID;\n      } else {\n        this.docNext = true;\n        this.lastEvaluatedKey = '';\n        this.docEndPoint = this.totalRecords;\n      }\n\n      if (this.totalRecords < this.docEndPoint) {\n        this.docEndPoint = this.totalRecords;\n      } // disable prev btn\n\n\n      if (this.docDraw > 0) {\n        this.docPrev = false;\n      } else {\n        this.docPrev = true;\n      }\n\n      this.spinner.hide();\n    }, err => {\n      this.spinner.hide();\n    });\n  }\n\n  searchFilter() {\n    if (this.filterValues.startDate !== '' || this.filterValues.endDate !== '' || this.filterValues.searchValue !== '') {\n      if (this.filterValues.startDate !== '' && this.filterValues.endDate == '') {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.filterValues.startDate == '' && this.filterValues.endDate !== '') {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else {\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.documents = [];\n        this.suggestions = [];\n\n        if (this.filterValues.startDate !== '') {\n          let start = this.filterValues.startDate;\n          this.filterValues.start = moment(start + ' 00:00:01').format(\"X\");\n          this.filterValues.start = this.filterValues.start * 1000;\n        }\n\n        if (this.filterValues.endDate !== '') {\n          let end = this.filterValues.endDate;\n          this.filterValues.end = moment(end + ' 23:59:59').format(\"X\");\n          this.filterValues.end = this.filterValues.end * 1000;\n        }\n\n        this.pageLength = this.totalRecords;\n        this.fetchDocumentsCount();\n        this.initDataTable();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  resetFilter() {\n    if (this.filterValues.startDate !== '' || this.filterValues.endDate !== '' || this.filterValues.searchValue !== '') {\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.documents = [];\n      this.suggestions = [];\n      this.filterValues = {\n        docID: '',\n        searchValue: '',\n        startDate: '',\n        endDate: '',\n        start: '',\n        end: ''\n      };\n      this.fetchDocumentsCount();\n      this.initDataTable();\n      this.resetCountResult();\n    } else {\n      return false;\n    }\n  }\n\n  getSuggestions(searchvalue = '') {\n    this.suggestions = [];\n\n    if (searchvalue !== '') {\n      this.apiService.getData('documents/get/suggestions/' + searchvalue + '?categoryType=user').subscribe({\n        complete: () => {},\n        error: () => {},\n        next: result => {\n          this.suggestions = [];\n\n          for (let i = 0; i < result.Items.length; i++) {\n            const element = result.Items[i];\n            let obj = {\n              id: element.docID,\n              name: element.documentNumber\n            };\n            this.suggestions.push(obj);\n          }\n        }\n      });\n    }\n  }\n\n  searchSelectedRoute(document) {\n    // this.filterValues.docID = document.id;\n    this.filterValues.searchValue = document.name;\n    this.suggestions = [];\n  }\n\n  getStartandEndVal() {\n    this.docStartPoint = this.docDraw * this.pageLength + 1;\n    this.docEndPoint = this.docStartPoint + this.pageLength - 1;\n  } // next button func\n\n\n  nextResults() {\n    this.docDraw += 1;\n    this.initDataTable();\n  } // prev button func\n\n\n  prevResults() {\n    this.docDraw -= 1;\n    this.lastEvaluatedKey = this.docPrevEvauatedKeys[this.docDraw];\n    this.initDataTable();\n  }\n\n  resetCountResult() {\n    this.docStartPoint = 1;\n    this.docEndPoint = this.pageLength;\n    this.docDraw = 0;\n  }\n\n  selectDoc(event) {\n    let files = [...event.target.files];\n    this.uploadeddoc = [];\n    this.uploadeddoc.push(files[0]);\n  }\n\n};\n\nMyDocumentListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}];\n\nMyDocumentListComponent = __decorate([Component({\n  selector: 'app-my-document-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], MyDocumentListComponent);\nexport { MyDocumentListComponent };","map":null,"metadata":{},"sourceType":"module"}