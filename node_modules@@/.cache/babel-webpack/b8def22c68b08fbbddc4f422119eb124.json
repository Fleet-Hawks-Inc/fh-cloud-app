{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./province-miles.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./province-miles.component.css\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { ApiService, HereMapService } from '../../../../../services';\nimport { ToastrService } from 'ngx-toastr';\nimport * as moment from 'moment';\nimport { ActivatedRoute } from \"@angular/router\";\nimport Constants from 'src/app/pages/fleet/constants';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { environment } from '../../../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { NgSelectComponent } from '@ng-select/ng-select';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport * as _ from 'lodash';\nlet ProvinceMilesComponent = class ProvinceMilesComponent {\n  constructor(apiService, toastr, countryStateCity, hereMap, _sanitizer, modalService, route, spinner, httpClient) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.countryStateCity = countryStateCity;\n    this.hereMap = hereMap;\n    this._sanitizer = _sanitizer;\n    this.modalService = modalService;\n    this.route = route;\n    this.spinner = spinner;\n    this.httpClient = httpClient;\n    this.environment = environment.isFeatureEnabled;\n    this.allData = [];\n    this.docCountries = [];\n    this.states = [];\n    this.start = null;\n    this.end = null;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.lastItemSK = '';\n    this.datee = '';\n    this.loaded = false;\n    this.exportData = [];\n    this.stateCode = null; // dummyData = [];\n\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.suggestedVehicles = [];\n    this.vehicleIdentification = '';\n    this.vehicleId = '';\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.isSearch = false;\n    this.get = _.get;\n    this.listView = true;\n    this.visible = true;\n    this.dataColumns = [{\n      field: 'vehicle',\n      header: 'Vehicle',\n      type: \"text\"\n    }, {\n      field: 'tripNo',\n      header: 'Trip',\n      type: \"text\"\n    }, {\n      field: 'orderName',\n      header: 'Order',\n      type: \"text\"\n    }, {\n      field: 'dateType',\n      header: 'Date',\n      type: \"text\"\n    }, {\n      field: 'usState',\n      header: 'Province(US)',\n      type: \"text\"\n    }, {\n      field: 'uMiles',\n      header: 'US Province Miles',\n      type: \"text\"\n    }, {\n      field: 'canState',\n      header: 'Province(Canada)',\n      type: \"text\"\n    }, {\n      field: 'caMiles',\n      header: 'Canada Province Miles',\n      type: \"text\"\n    }, {\n      field: 'cMiles',\n      header: 'Canada Total Miles',\n      type: \"text\"\n    }, {\n      field: 'usiles',\n      header: 'US Total Miles',\n      type: \"text\"\n    }, {\n      field: 'miles',\n      header: 'Trip Miles',\n      type: \"text\"\n    }, {\n      field: 'newStatus',\n      header: 'Trip Status',\n      type: \"text\"\n    }]; // async fetchStates(countryCode: any) {\n    //   this.states = await this.countryStateCity.GetStatesByCountryCode([\n    //     countryCode,\n    //   ]);\n    // }\n\n    this.getSuggestions = _.debounce(function (value) {\n      value = value.toLowerCase();\n\n      if (value != '') {\n        this.apiService.getData(`vehicles/suggestion/${value}`).subscribe(result => {\n          this.suggestedVehicles = result;\n        });\n      } else {\n        this.suggestedVehicles = [];\n      }\n    }, 800);\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.fetchProvinceMilesData();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.end = moment().format(\"YYYY-MM-DD\");\n      _this2.start = moment().subtract(1, 'months').format('YYYY-MM-DD');\n\n      _this2.fetchProvinceMilesData();\n\n      _this2.setToggleOptions();\n    })();\n  }\n\n  setVehicle(vehicleIDs, vehicleIdentification) {\n    this.vehicleIdentification = vehicleIdentification;\n    this.vehicleId = vehicleIDs;\n    this.suggestedVehicles = [];\n  }\n\n  fetchProvinceMilesData() {\n    if (this.lastItemSK !== 'end') {\n      this.apiService.getData(`vehicles/fetch/provinceMiles?vehicle=${this.vehicleId}&startDate=${this.start}&endDate=${this.end}&lastKey=${this.lastItemSK}&date=${this.datee}`).subscribe(result => {\n        this.allData = this.allData.concat(result.Items); // this.dummyData = this.dummyData.concat(result.Items)\n\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.LastEvaluatedKey !== undefined) {\n          this.lastItemSK = encodeURIComponent(result.LastEvaluatedKey.tripSK);\n          this.datee = encodeURIComponent(result.LastEvaluatedKey.dateCreated);\n        } else {\n          this.lastItemSK = 'end';\n        }\n\n        this.loaded = true;\n\n        for (let element of result.Items) {\n          element.newStatus = element.tripStatus;\n          let dataa = element;\n          element.miles = 0;\n\n          if (element.stlLink === true) {\n            element.newStatus = \"settled\";\n          } else {\n            if (element.recall === true) {\n              element.newStatus = `${element.tripStatus} (R)`;\n            }\n          } // if (element.recall === true) {\n          //   element.newStatus = `${element.tripStatus} (R)`;\n          // }\n          // else {\n          //   if (element.stlLink === true) {\n          //     element.newStatus = \"settled\";\n          //   }\n          // }\n\n\n          for (let element1 of dataa.tripPlanning) {\n            element.miles += Number(element1.miles);\n          }\n        } //To filter according stateCode\n        // if (this.stateCode !== null) {\n        //   this.allData = []\n        //   for (let data of this.dummyData) {\n        //     if (data.vehicleProvinces.includes(this.stateCode)) {\n        //       if (data.vehicleProvinces === 0) {\n        //         this.dataMessage = Constants.NO_RECORDS_FOUND\n        //       }\n        //       this.allData.push(data)\n        //       if (this.allData === 0) {\n        //         this.dataMessage = Constants.NO_RECORDS_FOUND\n        //       }\n        //     }\n        //   }\n        //   if (this.allData.length === 0) {\n        //     this.dataMessage = Constants.NO_RECORDS_FOUND\n        //   }\n        // }\n\n      });\n    }\n  }\n\n  searchFilter() {\n    if (this.vehicleIdentification !== '' || this.start != null && this.end != null) {\n      this.vehicleIdentification = this.vehicleIdentification.toLowerCase();\n\n      if (this.vehicleId == '') {\n        this.vehicleId = this.vehicleIdentification;\n      }\n\n      if (this.start != null && this.end == null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start == null && this.end != null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start > this.end) {\n        this.toastr.error('Start Date should be less then end date.');\n        return false;\n      } else {\n        this.lastItemSK = '';\n        this.suggestedVehicles = [];\n        this.allData = []; // this.dummyData = [];\n\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fetchProvinceMilesData();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  refreshData() {\n    this.end = moment().format(\"YYYY-MM-DD\");\n    this.start = moment().subtract(1, 'months').format('YYYY-MM-DD');\n    this.allData = [];\n    this.lastItemSK = '';\n    this.loaded = false;\n    this.fetchProvinceMilesData();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  reset() {\n    if (this.vehicleIdentification !== '') {\n      this.vehicleId = '';\n      this.suggestedVehicles = [];\n      this.vehicleIdentification = '';\n      this.lastItemSK = '';\n      this.allData = [];\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.fetchProvinceMilesData();\n    } else {\n      return false;\n    }\n  }\n\n  fetchFullExport(type = '') {\n    this.apiService.getData(`vehicles/fetch/provinceMiles/report?vehicle=${this.vehicleId}&startDate=${this.start}&endDate=${this.end}`).subscribe(result => {\n      this.exportData = result.Items;\n\n      for (let veh of this.exportData) {\n        let dataa = veh;\n        veh.miles = 0;\n        veh.newStatus = veh.tripStatus;\n\n        if (veh.recall === true) {\n          veh.newStatus = `${veh.tripStatus} (R)`;\n        } else {\n          if (veh.stlLink === true) {\n            veh.newStatus = \"settled\";\n          }\n        }\n\n        for (let element of dataa.tripPlanning) {\n          veh.miles += Number(element.miles);\n        }\n      }\n\n      this.generateCSV(type);\n    });\n  } // csv() {\n  //   if (this.stateCode !== null) {\n  //     this.exportData = this.allData\n  //     this.generateCSV();\n  //   }\n  //   else {\n  //     this.fetchFullExport()\n  //   }\n  // }\n\n\n  generateCSV(type = '') {\n    if (this.exportData.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.exportData.forEach(element => {\n        let canMiles = '';\n        let canState = '';\n        let stateArr = [];\n\n        if (type === 'CAN') {\n          stateArr = element.canStatesData;\n        } else if (type === 'US') {\n          stateArr = element.usStatesData;\n        }\n\n        stateArr.forEach((tripUSState, stateIndex) => {\n          if (element.provinceData && element.provinceData.length > 0) {\n            for (let i = 0; i < element.provinceData.length; i++) {\n              const element2 = element.provinceData[i];\n\n              for (let k = 0; k < element2.canProvince.length; k++) {\n                const element4 = element2.canProvince[k];\n                canState += `\"${element4.StCntry}\\n\\\"`;\n                canMiles += `\"${element4.Total}\\n\\\"`;\n              }\n\n              let obj = {};\n              obj[\"Vehicle\"] = element.vehicle;\n              obj[\"Trip#\"] = element.tripNo;\n              obj[\"Order#\"] = element.orderName.replace(/, /g, ' &');\n              obj[\"Date\"] = element.createdDate;\n\n              if (type === 'US') {\n                obj[\"Province(US)\"] = element2.usProvince[stateIndex].StCntry;\n                obj[\"US Province Miles\"] = element2.usProvince[stateIndex].Total;\n                obj[\"US Total Miles\"] = element.usMiles.toFixed(2);\n              } else {\n                obj[\"Province(Canada)\"] = element2.canProvince[stateIndex].StCntry;\n                obj[\"Canada Province Miles\"] = element2.canProvince[stateIndex].Total;\n                obj[\"Canada Total Miles\"] = element.canMiles.toFixed(2);\n              }\n\n              obj[\"Trip Miles\"] = element.miles;\n              obj[\"Trip Status\"] = element.newStatus;\n              dataObject.push(obj);\n            }\n          }\n        });\n      });\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += ' \\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += ' \\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n\n        if (type === 'US') {\n          link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}US-ProvinceMiles-Report.csv`);\n        } else {\n          link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}CAN-ProvinceMiles-Report.csv`);\n        }\n\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nProvinceMilesComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: CountryStateCityService\n}, {\n  type: HereMapService\n}, {\n  type: DomSanitizer\n}, {\n  type: NgbModal\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HttpClient\n}];\n\nProvinceMilesComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nProvinceMilesComponent = __decorate([Component({\n  selector: 'app-province-miles',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ProvinceMilesComponent);\nexport { ProvinceMilesComponent };","map":null,"metadata":{},"sourceType":"module"}