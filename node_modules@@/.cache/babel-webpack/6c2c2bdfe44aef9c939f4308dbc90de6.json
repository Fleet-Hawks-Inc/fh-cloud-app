{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./orders-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./orders-list.component.css\";\nimport { Component, Input, ViewChild } from \"@angular/core\";\nimport { ApiService } from \"../../../../services/api.service\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { ToastrService } from \"ngx-toastr\";\nimport Constants from \"../../../fleet/constants\";\nimport { environment } from \"src/environments/environment\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport * as moment from \"moment\";\nimport { ListService } from \"src/app/services/list.service\";\nimport { DashboardUtilityService } from \"src/app/services/dashboard-utility.service\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\nimport { Router } from \"@angular/router\";\nlet OrdersListComponent = class OrdersListComponent {\n  constructor(apiService, toastr, modalService, spinner, listService, dashboardUtilityService, router) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.modalService = modalService;\n    this.spinner = spinner;\n    this.listService = listService;\n    this.dashboardUtilityService = dashboardUtilityService;\n    this.router = router;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.noOrdersMsg = Constants.NO_RECORDS_FOUND;\n    this.orders = [];\n    this.confirmOrders = [];\n    this.dispatchOrders = [];\n    this.deliveredOrders = [];\n    this.tonuOrders = [];\n    this.cancelledOrders = [];\n    this.invoicedOrders = [];\n    this.partiallyOrders = [];\n    this.isSearch = false;\n    this.lastEvaluatedKey = \"\";\n    this.orderFiltr = {\n      searchValue: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      category: null,\n      start: \"\",\n      end: \"\"\n    };\n    this.customerValue = \"\";\n    this.totalRecords = 10;\n    this.pageLength = 10;\n    this.serviceUrl = \"\";\n    this.activeTab = \"all\";\n    this.allordersCount = 0;\n    this.customersObjects = {};\n    this.ordersNext = false;\n    this.ordersPrev = true;\n    this.ordersDraw = 0;\n    this.ordersPrevEvauatedKeys = [\"\"];\n    this.ordersStartPoint = 1;\n    this.ordersEndPoint = this.pageLength;\n    this.isConfirm = false;\n    this.categoryFilter = [{\n      name: \"Order Number\",\n      value: \"orderNumber\"\n    }, {\n      name: \"Customer\",\n      value: \"customer\"\n    }, {\n      name: \"Order Type\",\n      value: \"orderType\"\n    }, {\n      name: \"Location\",\n      value: \"location\"\n    }, {\n      name: \"Order Status\",\n      value: \"orderStatus\"\n    }, {\n      name: \"Customer Confirmation\",\n      value: \"cusConfirmation\"\n    }, {\n      name: \"Customer PO\",\n      value: \"cusPO\"\n    }];\n    this.statusData = [{\n      name: \"Attached\",\n      value: \"attached\"\n    }, {\n      name: \"Created\",\n      value: \"created\"\n    }, {\n      name: \"Confirmed\",\n      value: \"confirmed\"\n    }, {\n      name: \"Dispatched\",\n      value: \"dispatched\"\n    }, {\n      name: \"Cancelled Dispatch\",\n      value: \"cancelled\"\n    }, {\n      name: \"Delivered\",\n      value: \"delivered\"\n    }];\n    this.records = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.fetchedRecordsCount = 0;\n    this.lastFetched = {\n      draw: 0,\n      status: false\n    };\n    this.emailData = {\n      emails: [],\n      confirmEmail: false\n    };\n    this.confirmEmails = [];\n    this.carriersObject = [];\n    this.suggestions = [];\n    this.brokerage = {\n      orderNo: \"\",\n      orderID: \"\",\n      carrierID: null,\n      finalAmount: \"\",\n      miles: 0,\n      currency: \"\",\n      draw: 0,\n      index: 0,\n      type: \"\",\n      brokerageAmount: 0,\n      instructions: \"\",\n      today: moment().format(\"YYYY-MM-DD\")\n    };\n    this.logoSrc = \"assets/img/logo.png\";\n    this.orderData = {\n      additionalContact: null,\n      carrierData: {\n        address: \"\",\n        companyName: \"\",\n        phone: \"\",\n        email: \"\",\n        fax: \"\",\n        logo: \"\",\n        carrierID: \"\"\n      },\n      charges: {\n        accessorialDeductionInfo: {\n          accessorialDeduction: []\n        },\n        accessorialFeeInfo: {\n          accessorialFee: []\n        },\n        freightFee: {\n          amount: 0,\n          currency: \"\",\n          type: \"\"\n        },\n        fuelSurcharge: {\n          amount: 0,\n          currency: \"\",\n          type: \"\"\n        },\n        cusAddressID: \"\",\n        customerID: \"\"\n      },\n      data: [],\n      finalAmount: 0,\n      phone: \"\",\n      subTotal: 0,\n      taxesAmt: 0\n    };\n    this.carrierData = {\n      name: \"\",\n      email: \"\",\n      address: \"\",\n      phone: \"\"\n    };\n    this.brokerageDisabled = false;\n    this.brokerErr = \"\";\n    this.companyLogoSrc = \"\";\n    this.showModal = false;\n    this.loaded = false;\n    this.isLoad = false;\n    this.isLoadText = \"Load More...\";\n    this.detailUrl = [];\n    this.dataColumns = [{\n      field: 'orderNumber',\n      header: 'Order#',\n      type: \"text\"\n    }, {\n      field: 'orderMode',\n      header: 'Type',\n      type: \"text\"\n    }, {\n      field: 'createdDate',\n      header: 'Date',\n      type: \"text\"\n    }, {\n      field: 'customerName',\n      header: 'Customer',\n      type: 'text'\n    }, // { field: 'dateAndTime', header: ' Pickup Location', type: 'text' },\n    // { field: 'dateAndTime', header: 'Drop Off Location', type: 'text' },\n    {\n      field: 'shippersReceiversInfo.quantityUnit',\n      header: 'Commodity',\n      type: 'text'\n    }, {\n      field: 'orderMode , totalAmount',\n      header: 'Amount',\n      type: 'text'\n    }, {\n      field: 'invStatus',\n      header: 'Status',\n      type: 'text'\n    }, {\n      field: 'newStatus',\n      header: 'Order Status',\n      type: 'text'\n    }];\n    this.isOrderPriceEnabled = environment.isOrderPriceEnabled;\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.orderFiltr.searchValue = \"\", _this.orderFiltr.startDate = \"\", _this.orderFiltr.endDate = \"\", _this.orderFiltr.category = null, _this.isLoad = true;\n          _this.isLoadText = \"Loading\";\n\n          _this.initDataTable();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.setToggleOptions();\n\n      _this2.initDataTable();\n\n      _this2.isOrderPriceEnabled = localStorage.getItem(\"isOrderPriceEnabled\") ? JSON.parse(localStorage.getItem(\"isOrderPriceEnabled\")) : environment.isOrderPriceEnabled;\n      _this2.customersObjects = yield _this2.dashboardUtilityService.getCustomers(); // $(document).ready(() => {\n      //   setTimeout(() => {\n      //    $('#DataTables_Table_0_wrapper .dt-buttons').addClass('custom-dt-buttons').prependTo('.page-buttons');\n      //   }, 1800);\n      // });\n    })();\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  fetchTabData(tabType) {\n    this.activeTab = tabType;\n  }\n\n  allignOrders(orders) {\n    for (let i = 0; i < orders.length; i++) {\n      const element = orders[i];\n      this.orders.push(element);\n      element.canRecall = false;\n\n      if (element.orderStatus === \"delivered\") {\n        element.canRecall = true;\n      }\n\n      if (element.recptStat) {\n        element.canRecall = false;\n      }\n\n      element.newStatus = element.orderStatus;\n\n      if (element.recall) {\n        element.newStatus = `${element.orderStatus} (R)`;\n      }\n\n      if (element.orderStatus === \"confirmed\") {\n        this.confirmOrders.push(element);\n      } else if (element.orderStatus == \"dispatched\") {\n        this.dispatchOrders.push(element);\n      } else if (element.orderStatus == \"invoiced\") {\n        this.invoicedOrders.push(element);\n      } else if (element.orderStatus == \"partiallyPaid\") {\n        this.partiallyOrders.push(element);\n      } else if (element.orderStatus == \"cancelled\") {\n        this.cancelledOrders.push(element);\n      } else if (element.orderStatus == \"delivered\") {\n        this.deliveredOrders.push(element);\n      } else if (element.orderStatus == \"tonu\") {\n        element.orderStatus = element.orderStatus.toUpperCase();\n        this.tonuOrders.push(element);\n      }\n    }\n  }\n\n  initDataTable(refresh) {\n    if (refresh === true) {\n      this.lastEvaluatedKey = \"\";\n      this.orders = [];\n    }\n\n    this.spinner.show(); // this.orders = [];\n\n    if (this.lastEvaluatedKey !== \"end\") {\n      this.orderFiltr.searchValue = this.orderFiltr.searchValue.trim();\n      this.apiService.getData(\"orders/fetch/records/all?searchValue=\" + this.orderFiltr.searchValue + \"&startDate=\" + this.orderFiltr.start + \"&endDate=\" + this.orderFiltr.end + \"&category=\" + this.orderFiltr.category + \"&lastKey=\" + this.lastEvaluatedKey).subscribe(result => {\n        if (result.Items.length == 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n          this.records = false;\n        } else {\n          this.records = true;\n        }\n\n        result.Items.map(v => {\n          v.url = `/dispatch/orders/detail/${v.orderID}`;\n          this.detailUrl = v.url;\n          console.log('this.orders.url', this.detailUrl);\n        });\n        this.fetchedRecordsCount += result.Count;\n        this.getStartandEndVal(\"all\"); // this.orders.push(result['Items']);\n\n        this.allignOrders(result[`Items`]);\n        this.loaded = true;\n\n        if (this.orderFiltr.searchValue !== \"\" || this.orderFiltr.start !== \"\") {\n          this.ordersStartPoint = 1;\n          this.ordersEndPoint = this.totalRecords;\n        }\n\n        if (result[\"LastEvaluatedKey\"] !== undefined) {\n          let lastEvalKey = result[`LastEvaluatedKey`].orderSK.replace(/#/g, \"--\");\n          this.ordersNext = false; // for prev button\n\n          if (!this.ordersPrevEvauatedKeys.includes(lastEvalKey)) {\n            this.ordersPrevEvauatedKeys.push(lastEvalKey);\n          }\n\n          this.lastEvaluatedKey = lastEvalKey;\n        } else {\n          this.ordersNext = true;\n          this.lastEvaluatedKey = \"end\";\n          this.ordersEndPoint = this.totalRecords;\n        } // disable prev btn\n\n\n        if (this.ordersDraw == 0) {\n          this.ordersPrev = true;\n        } // disable next btn when no records at last\n\n\n        if (this.fetchedRecordsCount < this.totalRecords) {\n          this.ordersNext = false;\n        } else if (this.fetchedRecordsCount === this.totalRecords) {\n          this.ordersNext = true;\n        }\n\n        this.lastFetched = {\n          draw: this.ordersDraw,\n          status: this.ordersNext\n        };\n        this.isLoad = false;\n        this.spinner.hide();\n        this.isSearch = false;\n      }, err => {\n        this.spinner.hide();\n        this.isSearch = false;\n      });\n    }\n  }\n\n  filterOrders() {\n    // if (this.orderFiltr.category == null || this.orderFiltr.category == \"\") {\n    //    this.toastr.error(\"Please select category\");\n    //    return false;\n    //  }\n    if (this.orderFiltr.startDate === null) this.orderFiltr.startDate = \"\";\n    if (this.orderFiltr.endDate === null) this.orderFiltr.endDate = \"\";\n\n    if (this.orderFiltr.searchValue !== \"\" || this.orderFiltr.startDate !== \"\" || this.orderFiltr.endDate !== \"\" || this.orderFiltr.category !== null) {\n      if (this.orderFiltr.startDate != \"\" && this.orderFiltr.endDate == \"\") {\n        this.toastr.error(\"Please select both start and end dates.\");\n        return false;\n      } else if (this.orderFiltr.startDate == \"\" && this.orderFiltr.endDate != \"\") {\n        this.toastr.error(\"Please select both start and end dates.\");\n        return false;\n      } else if (this.orderFiltr.startDate > this.orderFiltr.endDate) {\n        this.toastr.error(\"Start Date should be less then end Date.\");\n        return false;\n      } else if (this.orderFiltr.category !== null && this.orderFiltr.searchValue == \"\") {\n        this.toastr.error(\"Please enter search value.\");\n        return false;\n      } else {\n        if (this.orderFiltr.category == \"location\") {\n          this.orderFiltr.searchValue = this.orderFiltr.searchValue.toLowerCase();\n        }\n\n        this.records = false;\n\n        if (this.orderFiltr.startDate !== \"\") {\n          this.orderFiltr.start = this.orderFiltr.startDate;\n        }\n\n        if (this.orderFiltr.endDate !== \"\") {\n          this.orderFiltr.end = this.orderFiltr.endDate;\n        }\n\n        this.ordersDraw = 0;\n        this.orders = [];\n        this.confirmOrders = [];\n        this.dispatchOrders = [];\n        this.deliveredOrders = [];\n        this.cancelledOrders = [];\n        this.invoicedOrders = [];\n        this.partiallyOrders = [];\n        this.tonuOrders = [];\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.activeTab = \"all\";\n        this.lastEvaluatedKey = \"\";\n        this.initDataTable();\n      }\n    }\n  }\n\n  resetFilter() {\n    if (this.orderFiltr.category !== \"\" || this.orderFiltr.category !== null || this.orderFiltr.startDate !== \"\" || this.orderFiltr.endDate !== \"\" || this.orderFiltr.searchValue !== \"\" || this.customerValue !== \"\") {\n      this.orderFiltr = {\n        searchValue: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        category: null,\n        start: \"\",\n        end: \"\"\n      };\n      this.customerValue = \"\";\n      $(\"#categorySelect\").text(\"Search by category\");\n      this.ordersDraw = 0;\n      this.records = false;\n      this.orders = [];\n      this.confirmOrders = [];\n      this.dispatchOrders = [];\n      this.deliveredOrders = [];\n      this.cancelledOrders = [];\n      this.invoicedOrders = [];\n      this.partiallyOrders = [];\n      this.tonuOrders = [];\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.lastEvaluatedKey = \"\";\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  deactivateOrder(eventData) {\n    if (confirm(\"Are you sure you want to delete?\") === true) {\n      this.apiService.deleteData(`orders/delete/${eventData.orderID}/${eventData.orderNumber}/${eventData.orderStatus}`).subscribe(result => {\n        this.orders = [];\n        this.confirmOrders = [];\n        this.dispatchOrders = [];\n        this.deliveredOrders = [];\n        this.cancelledOrders = [];\n        this.invoicedOrders = [];\n        this.partiallyOrders = [];\n        this.tonuOrders = [];\n        this.records = false;\n        this.ordersDraw = 0;\n        this.lastEvaluatedKey = \"\";\n        this.initDataTable();\n        this.toastr.success(\"Order deleted successfully!\");\n      });\n    }\n  }\n\n  getStartandEndVal(type) {\n    if (type == \"all\") {\n      this.ordersStartPoint = this.ordersDraw * this.pageLength + 1;\n      this.ordersEndPoint = this.ordersStartPoint + this.pageLength - 1;\n    }\n  }\n\n  setActiveDiv(type) {\n    this.activeTab = type;\n  }\n\n  categoryChange(event) {\n    if (event == \"customer\" || event == \"orderType\" || event == \"orderStatus\") {\n      this.orderFiltr.searchValue = null;\n    } else {\n      this.orderFiltr.searchValue = \"\";\n    }\n  }\n\n  changeStatus() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.isConfirm = true;\n\n      if (_this3.emailData.confirmEmail && _this3.emailData.emails.length === 0) {\n        _this3.toastr.error(\"Please enter at least one email\");\n\n        _this3.isConfirm = false;\n        return;\n      }\n\n      let newData = {\n        emails: [],\n        confirm: false,\n        customerID: _this3.newCustomerID\n      };\n\n      _this3.emailData.emails.forEach(elem => {\n        newData.emails.push(elem.label);\n      });\n\n      newData.confirm = _this3.emailData.confirmEmail;\n      let result = yield _this3.apiService.getData(`orders/update/orderStatus/${_this3.newOrderID}/${_this3.newOrderNumber}/confirmed?emailData=${encodeURIComponent(JSON.stringify(newData))}`).toPromise();\n\n      if (result) {\n        _this3.dataMessage = Constants.FETCHING_DATA;\n        _this3.orders[_this3.confirmIndex].newStatus = \"confirmed\";\n\n        _this3.confirmOrders.unshift(_this3.orders[_this3.confirmIndex]);\n\n        _this3.confirmRef.close();\n\n        _this3.isConfirm = false;\n      } else {\n        _this3.isConfirm = false;\n      }\n    })();\n  }\n\n  confirmEmail(order, i) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.emailData.emails = [];\n      let ngbModalOptions = {\n        keyboard: true,\n        windowClass: \"email--invoice\"\n      };\n      _this4.confirmRef = _this4.modalService.open(_this4.confirmEmailModal, ngbModalOptions);\n      _this4.newOrderID = order.orderID;\n      _this4.newOrderNumber = order.orderNumber;\n      _this4.newCustomerID = order.customerID;\n      _this4.confirmIndex = i;\n      let email = yield _this4.fetchCustomersByID(order.customerID);\n\n      if (email != undefined && email != \"\") {\n        _this4.emailData.emails = [..._this4.emailData.emails, {\n          label: email\n        }];\n      }\n    })();\n  }\n  /*\r\n   * Get all customers's IDs of names from api\r\n   */\n\n\n  fetchCustomersByID(id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this5.apiService.getData(`contacts/detail/${id}`).toPromise();\n\n      if (result.Items.length > 0) {\n        return result.Items[0].workEmail;\n      }\n    })();\n  }\n\n  conEmailChange(value) {\n    this.emailData.confirmEmail = value;\n  }\n\n  refreshData() {\n    this.orderFiltr = {\n      searchValue: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      category: null,\n      start: \"\",\n      end: \"\"\n    };\n    $(\"#categorySelect\").text(\"Search by category\");\n    this.records = false;\n    this.orders = [];\n    this.lastEvaluatedKey = \"\";\n    this.confirmOrders = [];\n    this.dispatchOrders = [];\n    this.deliveredOrders = [];\n    this.cancelledOrders = [];\n    this.invoicedOrders = [];\n    this.partiallyOrders = [];\n    this.tonuOrders = [];\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.initDataTable();\n  }\n\n  showBrokerageModal(order, draw, index, actionFrom) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.brokerage.orderID = order.orderID;\n      _this6.brokerage.orderNo = order.orderNumber;\n      _this6.brokerage.miles = order.milesInfo.totalMiles;\n      _this6.brokerage.finalAmount = order.finalAmount;\n      _this6.brokerage.currency = order.charges.freightFee.currency;\n      _this6.brokerage.draw = draw;\n      _this6.brokerage.index = index;\n      _this6.brokerage.type = actionFrom;\n      yield _this6.fetchCarriers();\n      yield _this6.fetchOrderData();\n      $(\"#orderStatusModal\").modal(\"show\");\n    })();\n  }\n\n  fetchCarriers() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this7.apiService.getData(\"contacts/get/type/carrier\").toPromise();\n      let carrs = [];\n\n      for (let index = 0; index < result.length; index++) {\n        const element = result[index];\n\n        if (element.isDeleted === 0) {\n          carrs.push(element);\n        }\n      }\n\n      _this7.carriersObject = carrs.reduce((a, b) => {\n        return a[b[\"contactID\"]] = b[\"companyName\"], a;\n      }, {});\n    })();\n  }\n\n  fetchOrderData() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this8.apiService.getData(`orders/invoice/${_this8.brokerage.orderID}`).toPromise();\n      _this8.orderData = result[0];\n\n      if (_this8.orderData.carrierData.logo != \"\") {\n        _this8.companyLogoSrc = `${_this8.Asseturl}/${_this8.orderData.carrierData.carrierID}/${_this8.orderData.carrierData.logo}`;\n      }\n    })();\n  }\n\n  submitClick() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this9.brokerage.carrierID === null || _this9.brokerage.brokerageAmount <= 0) {\n        _this9.brokerErr = \"Please fill the required fields\";\n        return false;\n      } else if (Number(_this9.brokerage.brokerageAmount) > Number(_this9.brokerage.finalAmount)) {\n        _this9.brokerErr = \"Brokerage amount should not be greater than order total.\";\n        return false;\n      } else {\n        _this9.brokerErr = \"\";\n      }\n\n      _this9.showModal = true;\n      _this9.brokerageDisabled = true;\n      yield _this9.fetchCarrierDetails();\n      let data = {\n        carrierData: _this9.carrierData,\n        brokerage: _this9.brokerage,\n        orderData: _this9.orderData,\n        showModal: _this9.showModal,\n        companyLogo: _this9.companyLogoSrc\n      };\n\n      _this9.listService.triggerBrokeragePdf(data);\n\n      yield _this9.updateBrokerageStatus();\n      $(\"#orderStatusModal\").modal(\"hide\");\n      _this9.brokerageDisabled = false;\n    })();\n  }\n\n  fetchCarrierDetails() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this10.apiService.getData(`contacts/detail/${_this10.brokerage.carrierID}`).toPromise();\n      result = result.Items[0];\n      _this10.carrierData.name = result.cName;\n      _this10.carrierData.email = result.workEmail;\n      _this10.carrierData.phone = result.workPhone;\n\n      if (result.adrs[0].manual) {\n        if (result.adrs[0].add1 !== \"\") {\n          _this10.carrierData.address = `${result.adrs[0].add1} ${result.adrs[0].add2} ${result.adrs[0].ctyName}, ${result.adrs[0].sName}, ${result.adrs[0].cName}`;\n        }\n      } else {\n        _this10.carrierData.address = result.adrs[0].userLoc;\n      }\n    })();\n  }\n\n  updateBrokerageStatus() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      let data = {\n        orderID: _this11.brokerage.orderID,\n        orderNo: _this11.brokerage.orderNo,\n        brokerageAmount: _this11.brokerage.brokerageAmount,\n        instructions: _this11.brokerage.instructions,\n        type: \"update\",\n        carrierID: _this11.brokerage.carrierID\n      };\n\n      _this11.apiService.postData(\"orders/update/brokerage\", data).subscribe(result => {\n        if (result) {\n          if (_this11.brokerage.type === \"all\") {\n            _this11.orders[_this11.brokerage.index].newStatus = \"brokerage\";\n            _this11.orders[_this11.brokerage.index].orderStatus = \"brokerage\";\n          } else if (_this11.brokerage.type === \"section\") {\n            _this11.confirmOrders[_this11.brokerage.index].newStatus = \"brokerage\";\n            _this11.confirmOrders[_this11.brokerage.index].orderStatus = \"brokerage\";\n          }\n\n          _this11.toastr.success(\"Order updated successfully!\");\n        }\n      });\n    })();\n  }\n\n  updateCreatedStatus(order, draw, index) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      if (confirm(\"Are you sure you want to cancel the brokerage and mark the order as created?\") === true) {\n        let data = {\n          orderID: order.orderID,\n          orderNo: order.orderNo,\n          brokerageAmount: 0,\n          instructions: \"\",\n          carrierID: null,\n          type: \"cancel\"\n        };\n\n        _this12.apiService.postData(\"orders/update/brokerage\", data).subscribe(result => {\n          if (result) {\n            _this12.orders[index].newStatus = \"created\";\n            _this12.orders[index].orderStatus = \"created\";\n\n            _this12.toastr.success(\"Order updated successfully!\");\n          }\n        });\n      }\n    })();\n  }\n\n  closePanel(op) {\n    console.log('op--', op); // console.log('url--',url)\n    // alert();\n\n    op.hide();\n    this.router.navigate(['/dispatch', 'trips', 'add-trip']);\n  }\n\n  openPanel(op, event) {\n    console.log('op--111', op); // alert();\n\n    op.show(event);\n  }\n  /**\r\n  * Clears the table filters\r\n  * @param table Table\r\n  */\n\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nOrdersListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: NgbModal\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ListService\n}, {\n  type: DashboardUtilityService\n}, {\n  type: Router\n}];\n\nOrdersListComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  overlaypanel: [{\n    type: ViewChild,\n    args: ['op']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  confirmEmailModal: [{\n    type: ViewChild,\n    args: [\"confirmEmailModal\", {\n      static: true\n    }]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nOrdersListComponent = __decorate([Component({\n  selector: \"app-orders-list\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OrdersListComponent);\nexport { OrdersListComponent };","map":null,"metadata":{},"sourceType":"module"}