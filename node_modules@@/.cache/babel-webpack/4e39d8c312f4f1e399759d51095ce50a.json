{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./new-address-book.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./new-address-book.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ApiService, HereMapService, ListService } from 'src/app/services';\nimport { from, Subject, throwError } from 'rxjs';\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { environment } from 'src/environments/environment';\nimport * as _ from 'lodash';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet NewAddressBookComponent = class NewAddressBookComponent {\n  constructor(HereMap, toastr, modalService, apiService, listService, countryStateCity) {\n    this.HereMap = HereMap;\n    this.toastr = toastr;\n    this.modalService = modalService;\n    this.apiService = apiService;\n    this.listService = listService;\n    this.countryStateCity = countryStateCity;\n    this.Asseturl = this.apiService.AssetUrl;\n    this.defaultProfilePath = 'assets/img/driver/driver.png';\n    this.environment = environment.isFeatureEnabled;\n    this.modalTitle = 'Add ';\n    this.imageText = 'Add Picture';\n    this.profilePath = 'assets/img/driver/driver.png';\n    this.uploadedPhotos = [];\n    this.closeResult = '';\n    this.searchTerm = new Subject();\n    this.paymentOptions = [{\n      name: \"Pay Per Mile\",\n      value: \"ppm\"\n    }, {\n      name: \"Percentage\",\n      value: \"pp\"\n    }, {\n      name: \"Pay Per Hour\",\n      value: \"pph\"\n    }, {\n      name: \"Pay Per Delivery\",\n      value: \"ppd\"\n    }, {\n      name: \"Pay Flat Rate\",\n      value: \"pfr\"\n    }];\n    this.mapPayment = {\n      ppm: \"Pay Per Mile\",\n      pp: \"Percentage\",\n      pph: \"Pay Per Hour\",\n      ppd: \"Pay Per Delivery\",\n      pfr: \"Pay Flat Rate\"\n    };\n    this.payPerMile = {\n      pType: \"ppm\",\n      loadedMiles: null,\n      currency: null,\n      emptyMiles: null,\n      emptyMilesTeam: null,\n      loadedMilesTeam: null,\n      default: false\n    };\n    this.payPerHour = {\n      pType: \"pph\",\n      rate: null,\n      currency: null,\n      waitingPay: null,\n      waitingHourAfter: null,\n      default: false\n    };\n    this.payPercentage = {\n      pType: \"pp\",\n      loadPayPercentage: null,\n      loadPayPercentageOf: null,\n      default: false\n    };\n    this.payPerDelivery = {\n      pType: \"ppd\",\n      deliveryRate: null,\n      currency: null,\n      default: false\n    };\n    this.payFlatRate = {\n      pType: \"pfr\",\n      flatRate: null,\n      currency: null,\n      default: false\n    };\n    this.units = [];\n    this.filterVal = {\n      cName: ''\n    };\n    this.similarVal = {\n      cName: ''\n    };\n    this.updateButton = false;\n    this.suggestions = [];\n    this.actualSuggestions = [];\n    this.customers = [];\n    this.brokers = [];\n    this.vendors = [];\n    this.carriers = [];\n    this.shippers = [];\n    this.receivers = [];\n    this.staffs = [];\n    this.fcCompanies = [];\n    this.owners = [];\n    this.allData = [];\n    this.similarSuggestions = [];\n    this.additionalDisabled = false;\n    this.unitDisabled = false;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.newArr = [];\n    this.isBroker = false;\n    this.bType = false;\n    this.unitData = {\n      cName: '',\n      dba: '',\n      workPhone: '',\n      workEmail: '',\n      eTypes: [],\n      adrs: [{\n        careOption: '',\n        aType: 'Billing Address',\n        cName: '',\n        sName: '',\n        ctyName: null,\n        zip: '',\n        add1: '',\n        add2: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        userLoc: '',\n        manual: false,\n        cCode: null,\n        sCode: null,\n        houseNo: '',\n        street: '',\n        states: [],\n        cities: [],\n        isSuggest: false\n      }],\n      addlCnt: [{\n        flName: '',\n        fName: '',\n        lName: '',\n        phone: '',\n        des: '',\n        email: '',\n        fax: ''\n      }],\n      data: []\n    };\n    this.unitTypes = [{\n      value: 'broker',\n      label: 'broker',\n      disabled: false\n    }, {\n      value: 'carrier',\n      label: 'carrier',\n      disabled: false\n    }, {\n      value: 'shipper',\n      label: 'shipper',\n      disabled: false\n    }, {\n      value: 'receiver',\n      label: 'receiver',\n      disabled: false\n    }, {\n      value: 'customer',\n      label: 'customer',\n      disabled: false\n    }, {\n      value: 'fc',\n      label: 'factoring company',\n      disabled: false\n    }, {\n      value: 'owner_operator',\n      label: 'owner operator',\n      disabled: false\n    }, {\n      value: 'vendor',\n      label: 'vendor',\n      disabled: false\n    }];\n    this.errors = {};\n    this.errorClass = false;\n    this.errorClassMsg = 'Password and Confirm Password must match and can not be empty.';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.Error = '';\n    this.isSearched = false;\n    this.countries = [];\n    this.states = [];\n    this.cities = [];\n    this.selectedItems = [];\n    this.lastKey = '';\n    this.updatedKey = '';\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.getSuggestions = _.debounce(function (value) {\n      if (value != '') {\n        value = value.toLowerCase();\n        this.apiService.getData(`address-book/suggestion/${value}`).subscribe(result => {\n          this.suggestions = _.uniqBy(result.Items, 'cName');\n        });\n      }\n    }, 800); //For Similar Company Name Suggestions\n\n    this.getSimilarNamesSuggestions = _.debounce(function (value) {\n      if (value != '') {\n        value = value.toLowerCase();\n        this.apiService.getData(`address-book/similar/cName/suggestion/${value}`).subscribe(result => {\n          this.actualSuggestions = _.uniqBy(result.Items, 'cName');\n          this.similarSuggestions = _.uniqBy(result.Items, 'cName');\n        });\n      }\n    }, 800);\n  }\n\n  ngOnInit() {\n    this.searchLocation(); // this.fetchCountries();\n\n    this.modalSubscription = this.listService.addressList.subscribe(res => {\n      if (res === 'list') {\n        let ngbModalOptions = {\n          backdrop: 'static',\n          keyboard: false,\n          windowClass: 'units-list__main'\n        };\n        this.modalService.dismissAll();\n        const allUnitModel = this.modalService.open(this.allUnitModal, ngbModalOptions);\n        allUnitModel.result.then(data => {\n          this.units = [];\n          this.customers = [];\n          this.brokers = [];\n          this.vendors = [];\n          this.receivers = [];\n          this.shippers = [];\n          this.owners = [];\n          this.fcCompanies = [];\n          this.carriers = [];\n        }, reason => {\n          this.units = [];\n          this.customers = [];\n          this.brokers = [];\n          this.vendors = [];\n          this.receivers = [];\n          this.shippers = [];\n          this.owners = [];\n          this.fcCompanies = [];\n          this.carriers = [];\n        });\n        this.lastKey = '';\n        this.fetchUnits();\n      } else if (res === 'form') {\n        this.bType = false;\n        this.unitTypes = [{\n          value: 'broker',\n          label: 'broker',\n          disabled: false\n        }, {\n          value: 'carrier',\n          label: 'carrier',\n          disabled: false\n        }, {\n          value: 'shipper',\n          label: 'shipper',\n          disabled: false\n        }, {\n          value: 'receiver',\n          label: 'receiver',\n          disabled: false\n        }, {\n          value: 'customer',\n          label: 'customer',\n          disabled: false\n        }, {\n          value: 'fc',\n          label: 'factoring company',\n          disabled: false\n        }, {\n          value: 'owner_operator',\n          label: 'owner operator',\n          disabled: false\n        }, {\n          value: 'vendor',\n          label: 'vendor',\n          disabled: false\n        }];\n        this.updateButton = false;\n        let ngbModalOptions = {\n          backdrop: 'static',\n          keyboard: false,\n          windowClass: 'units-form__main'\n        };\n        this.modalService.dismissAll();\n        const modalRef = this.modalService.open(this.newUnitModal, ngbModalOptions);\n        this.imageText = 'Add Picture';\n        modalRef.result.then(data => {\n          this.emptyEntry();\n        }, reason => {\n          this.emptyEntry();\n        });\n      } else {\n        this.modalService.dismissAll();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.modalSubscription.unsubscribe();\n  }\n\n  resetPaymentOption() {\n    this.payPerMile = {\n      pType: \"ppm\",\n      loadedMiles: null,\n      currency: null,\n      emptyMiles: null,\n      emptyMilesTeam: null,\n      loadedMilesTeam: null,\n      default: false\n    };\n    this.payPerHour = {\n      pType: \"pph\",\n      rate: null,\n      currency: null,\n      waitingPay: null,\n      waitingHourAfter: null,\n      default: false\n    };\n    this.payPercentage = {\n      pType: \"pp\",\n      loadPayPercentage: null,\n      loadPayPercentageOf: null,\n      default: false\n    };\n    this.payPerDelivery = {\n      pType: \"ppd\",\n      deliveryRate: null,\n      currency: null,\n      default: false\n    };\n    this.payFlatRate = {\n      pType: \"pfr\",\n      flatRate: null,\n      currency: null,\n      default: false\n    };\n  }\n  /*\r\n   * Get all countries from api\r\n   */\n\n\n  fetchCountries() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.countries = yield _this.countryStateCity.GetAllCountries();\n    })();\n  }\n\n  getStates(countryCode, type, index = '', data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let states = yield _this2.countryStateCity.GetStatesByCountryCode([countryCode]);\n      let countryName = yield _this2.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n\n      if (type === 'unit') {\n        _this2.unitData.adrs[index].cName = countryName;\n        _this2.unitData.adrs[index].states = states;\n      } else {\n        data.adrs[index].cName = countryName;\n        data.adrs[index].states = states;\n      }\n    })();\n  }\n\n  getCities(stateCode, type = '', index = '', data) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let countryCode = '';\n\n      if (type == 'unit') {\n        countryCode = _this3.unitData.adrs[index].cCode;\n      } else {\n        countryCode = data.adrs[index].cCode;\n      }\n\n      let stateResult = yield _this3.countryStateCity.GetStateNameFromCode(stateCode, countryCode);\n      let cities = yield _this3.countryStateCity.GetCitiesByStateCodes(countryCode, stateCode);\n\n      if (type === 'unit') {\n        _this3.unitData.adrs[index].sName = stateResult;\n        _this3.unitData.adrs[index].cities = cities;\n      } else {\n        data.adrs[index].sName = stateResult;\n        data.adrs[index].cities = cities;\n      }\n    })();\n  }\n\n  setSearchValues(searchValue) {\n    this.filterVal.cName = searchValue;\n    this.suggestions = [];\n  }\n\n  setSimilarValue(similarValue) {\n    this.similarVal.cName = similarValue;\n    this.actualSuggestions = [];\n  }\n\n  searchFilter() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.filterVal.cName != '') {\n        _this4.isSearched = true;\n        $('#addressbook-content .tab-pane').removeClass('active show');\n        $('#all').addClass('active show');\n        $('#addressbook-tabs .nav-link').removeClass('active');\n        $('#addressbook-tabs #all-tab').addClass('active');\n\n        _this4.setActiveDiv('all');\n\n        _this4.filterVal.cName = _this4.filterVal.cName.toLowerCase().trim();\n        _this4.suggestions = [];\n        _this4.units = [];\n        _this4.dataMessage = Constants.FETCHING_DATA;\n        _this4.lastKey = '';\n\n        _this4.fetchUnits();\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  setActiveDiv(item) {\n    if (item === 'all') {\n      this.units = this.allData;\n    } else if (item === 'broker') {\n      this.brokers = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('broker')) {\n          this.brokers.push(element);\n        }\n      });\n      if (this.brokers.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'carrier') {\n      this.carriers = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('carrier')) {\n          this.carriers.push(element);\n        }\n      });\n      if (this.carriers.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'shipper') {\n      this.shippers = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('shipper')) {\n          this.shippers.push(element);\n        }\n      });\n      if (this.carriers.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'receiver') {\n      this.receivers = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('receiver')) {\n          this.receivers.push(element);\n        }\n      });\n      if (this.receivers.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'customer') {\n      this.customers = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('customer')) {\n          this.customers.push(element);\n        }\n      });\n      if (this.customers.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'fc') {\n      this.fcCompanies = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('fc')) {\n          this.fcCompanies.push(element);\n        }\n      });\n      if (this.fcCompanies.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'vendor') {\n      this.vendors = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('vendor')) {\n          this.vendors.push(element);\n        }\n      });\n      if (this.vendors.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    } else if (item === 'op') {\n      this.owners = [];\n      this.units.forEach(element => {\n        if (element.eTypes.includes('owner_operator')) {\n          this.owners.push(element);\n        }\n      });\n      if (this.owners.length === 0) this.dataMessage = Constants.NO_RECORDS_FOUND;\n    }\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    this.updateButton = false;\n    this.unitData = {\n      cName: '',\n      dba: '',\n      workPhone: '',\n      workEmail: '',\n      eTypes: [],\n      adrs: [{\n        careOption: '',\n        aType: 'Billing Address',\n        cName: '',\n        sName: '',\n        ctyName: null,\n        zip: '',\n        add1: '',\n        add2: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        userLoc: '',\n        manual: false,\n        cCode: null,\n        sCode: null,\n        houseNo: '',\n        street: '',\n        states: [],\n        cities: [],\n        isSuggest: false\n      }],\n      addlCnt: [{\n        flName: '',\n        fName: '',\n        lName: '',\n        phone: '',\n        des: '',\n        email: '',\n        fax: ''\n      }],\n      data: []\n    };\n  }\n\n  searchLocation() {\n    this.searchTerm.pipe(map(e => {\n      $('.map-search__results').hide();\n      $('div').removeClass('show-search__result');\n      $(e.target).closest('div').addClass('show-search__result');\n      return e.target.value;\n    }), debounceTime(400), distinctUntilChanged(), switchMap(term => {\n      return this.HereMap.searchEntries(term);\n    }), catchError(e => {\n      return throwError(e);\n    })).subscribe(res => {\n      if (res) {\n        this.searchResults = res;\n      }\n    });\n  }\n\n  addAdditionalContact(data) {\n    if (data.addlCnt.length < 3) {\n      this.additionalDisabled = false;\n      let newObj = {\n        flName: '',\n        fName: '',\n        lName: '',\n        des: '',\n        phone: '',\n        email: '',\n        fax: ''\n      };\n      data.addlCnt.push(newObj);\n\n      if (data.addlCnt.length == 3) {\n        this.additionalDisabled = true;\n      }\n    } else {\n      this.additionalDisabled = true;\n      return false;\n    }\n  }\n\n  userAddress(unit, data, i, item) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      data.adrs[i].userLoc = item.address;\n      let result = yield _this5.getAddressDetail(item.place_id);\n\n      if (unit === 'unit') {\n        if (result != undefined) {\n          data.adrs[i].geoCords.lat = result.position.lat;\n          data.adrs[i].geoCords.lng = result.position.lng;\n          data.adrs[i].cName = result.address.CountryFullName;\n          data.adrs[i].sName = result.address.StateName;\n          data.adrs[i].ctyName = result.address.City;\n          data.adrs[i].cCode = result.address.Country;\n          data.adrs[i].sCode = result.address.State;\n          data.adrs[i].zip = result.address.Zip;\n          data.adrs[i].street = result.address.StreetAddress;\n          data.adrs[i].isSuggest = true;\n        }\n      } else {\n        if (result != undefined) {\n          data.adrs[i].geoCords.lat = result.position.lat;\n          data.adrs[i].geoCords.lng = result.position.lng;\n          data.adrs[i].cName = result.address.CountryFullName;\n          data.adrs[i].cCode = result.address.Country;\n          data.adrs[i].sCode = result.address.State;\n          data.adrs[i].sName = result.address.StateName;\n          data.adrs[i].ctyName = result.address.City;\n          data.adrs[i].zip = result.address.Zip;\n          data.adrs[i].add = result.address.StreetAddress;\n          data.adrs[i].isSuggest = true;\n        }\n      }\n\n      $('div').removeClass('show-search__result');\n    })();\n  }\n\n  getAddressDetail(id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this6.apiService.getData(`pcMiles/detail/${id}`).toPromise();\n      return result;\n    })();\n  }\n\n  delAdditionalContact(index) {\n    this.unitData.addlCnt.splice(index, 1);\n\n    if (this.unitData.addlCnt.length < 3) {\n      this.additionalDisabled = false;\n    } else {\n      this.additionalDisabled = true;\n    }\n  }\n\n  unitChange(types) {\n    this.unitData.eTypes.forEach(element => {\n      if (element === 'broker') {\n        if (!this.newArr.includes('broker')) {\n          let data = {\n            brokerData: {\n              type: 'company',\n              dot: '',\n              fn: '',\n              ln: '',\n              acc: '',\n              ein: '',\n              mc: ''\n            }\n          };\n          this.newArr.push('broker');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'carrier') {\n        if (!this.newArr.includes('carrier')) {\n          this.resetPaymentOption();\n          let data = {\n            carrierData: {\n              csa: false,\n              ctpat: false,\n              pip: false,\n              bond: false,\n              mc: '',\n              dot: '',\n              fast: '',\n              fastExp: null,\n              ccc: '',\n              scac: '',\n              cvor: '',\n              lTax: '',\n              fTax: '',\n              pType: 'ppm',\n              ppd: this.payPerDelivery,\n              pph: this.payPerHour,\n              ppm: this.payPerMile,\n              pp: this.payPercentage,\n              pfr: this.payFlatRate,\n              // pRate: '',\n              // pRCurr: null,\n              // pPnt: '',\n              // perType: '',\n              // lm: '',\n              // lmCur: null,\n              // em: '',\n              // emCur: null,\n              // dr: '',\n              // drCur: null,\n              aTax: false,\n              wsib: false,\n              wsibAcc: '',\n              wsibExp: null,\n              wcb: false,\n              wcbAcc: '',\n              wcbExp: null,\n              banks: [{\n                bName: '',\n                acc: '',\n                rNo: '',\n                trnNo: '',\n                insNo: '',\n                adrs: [{\n                  aType: 'branch',\n                  cName: '',\n                  sName: '',\n                  ctyName: null,\n                  zip: '',\n                  add1: '',\n                  add2: '',\n                  geoCords: {\n                    lat: '',\n                    lng: ''\n                  },\n                  userLoc: '',\n                  manual: false,\n                  cCode: null,\n                  sCode: null,\n                  houseNo: '',\n                  street: '',\n                  states: [],\n                  cities: []\n                }]\n              }]\n            }\n          };\n          this.newArr.push('carrier');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'shipper') {\n        if (!this.newArr.includes('shipper')) {\n          let data = {\n            shipperData: {\n              dot: '',\n              mc: ''\n            }\n          };\n          this.newArr.push('shipper');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'receiver') {\n        if (!this.newArr.includes('receiver')) {\n          let data = {\n            receiverData: {\n              dot: '',\n              mc: ''\n            }\n          };\n          this.newArr.push('receiver');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'customer') {\n        if (!this.newArr.includes('customer')) {\n          let data = {\n            customerData: {\n              ein: '',\n              acc: '',\n              dot: '',\n              mc: '',\n              fast: '',\n              fastExp: null,\n              csa: false,\n              ctpat: false,\n              pip: false\n            }\n          };\n          this.newArr.push('customer');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'fc') {\n        if (!this.newArr.includes('fc')) {\n          let data = {\n            fcData: {\n              acc: '',\n              fcRate: '',\n              fcUnit: null\n            }\n          };\n          this.newArr.push('fc');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'owner_operator') {\n        if (!this.newArr.includes('owner_operator')) {\n          this.resetPaymentOption();\n          let data = {\n            opData: {\n              csa: false,\n              fast: '',\n              fastExp: null,\n              sin: '',\n              pType: 'ppm',\n              ppd: this.payPerDelivery,\n              pph: this.payPerHour,\n              ppm: this.payPerMile,\n              pp: this.payPercentage,\n              pfr: this.payFlatRate,\n              // pRate: '',\n              // pRCur: null,\n              // pPnt: '',\n              // perType: '',\n              // lm: '',\n              // lmCur: null,\n              // em: '',\n              // emCur: null,\n              // dr: '',\n              // drCur: null,\n              wsib: false,\n              wsibAcc: '',\n              wsibExp: null,\n              wcb: false,\n              wcbAcc: '',\n              wcbExp: null\n            }\n          };\n          this.newArr.push('owner_operator');\n          this.unitData.data.push(data);\n        }\n      } else if (element === 'vendor') {\n        if (!this.newArr.includes('vendor')) {\n          let data = {\n            vendorData: {\n              acc: ''\n            }\n          };\n          this.newArr.push('vendor');\n          this.unitData.data.push(data);\n        }\n      }\n    });\n    let difference = this.newArr.filter(x => !this.unitData.eTypes.includes(x));\n    difference.forEach(elem => {\n      if (elem === 'broker') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.brokerData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('broker');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'carrier') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.carrierData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('carrier');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'shipper') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.shipperData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('shipper');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'receiver') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.receiverData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('receiver');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'customer') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.customerData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('customer');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'fc') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.fcData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('fc');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'vendor') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.vendorData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('vendor');\n        this.newArr.splice(index, 1);\n      } else if (elem === 'owner_operator') {\n        for (let index = 0; index < this.unitData.data.length; index++) {\n          const element = this.unitData.data[index];\n\n          if (element.opData) {\n            this.unitData.data.splice(index, 1);\n          }\n        }\n\n        let index = this.newArr.indexOf('owner_operator');\n        this.newArr.splice(index, 1);\n      }\n    });\n  }\n\n  brokerType(value) {\n    this.unitData.data.forEach(elem => {\n      if (elem.brokerData) {\n        if (value == 'company') {\n          elem.brokerData.fn = '';\n          elem.brokerData.ln = '';\n          this.bType = false;\n          this.isBroker = false;\n        } else {\n          this.bType = true;\n          this.isBroker = true;\n        }\n\n        elem.brokerData.type = value;\n      }\n    });\n  }\n\n  manAddress(data = '', type, event, i) {\n    if (event.target.checked) {\n      $(event.target).closest('.address-item').addClass('open');\n    } else {\n      $(event.target).closest('.address-item').removeClass('open');\n    }\n\n    if (type === 'unit') {\n      this.unitData.adrs[i].userLoc = '';\n      this.unitData.adrs[i].cCode = null;\n      this.unitData.adrs[i].cName = '';\n      this.unitData.adrs[i].sCode = null;\n      this.unitData.adrs[i].sName = '';\n      this.unitData.adrs[i].ctyName = null;\n      this.unitData.adrs[i].zip = '';\n      this.unitData.adrs[i].add1 = '';\n      this.unitData.adrs[i].add2 = '';\n\n      if (this.unitData.adrs[i].geoCords != undefined) {\n        this.unitData.adrs[i].geoCords.lat = '';\n        this.unitData.adrs[i].geoCords.lng = '';\n      }\n    } else {\n      data.adrs[i].userLoc = '';\n      data.adrs[i].cCode = null;\n      data.adrs[i].cName = '';\n      data.adrs[i].sCode = null;\n      data.adrs[i].sName = '';\n      data.adrs[i].ctyName = null;\n      data.adrs[i].zip = '';\n      data.adrs[i].add1 = '';\n      data.adrs[i].add2 = '';\n\n      if (data.adrs[i].geoCords != undefined) {\n        data.adrs[i].geoCords.lat = '';\n        data.adrs[i].geoCords.lng = '';\n      }\n    }\n  }\n\n  addAddress(data) {\n    this.searchResults = [];\n    data.adrs.push({\n      aType: null,\n      cName: '',\n      sName: '',\n      ctyName: '',\n      zip: '',\n      add1: '',\n      add2: '',\n      geoCords: {\n        lat: '',\n        lng: ''\n      },\n      userLoc: '',\n      manual: false,\n      cCode: '',\n      sCode: '',\n      houseNo: '',\n      street: ''\n    });\n  }\n\n  removeAddress(index) {\n    if (confirm(\"This address might be associated with order(s) and those will be affected. Do you want to delete it? If you want to update the address you can edit it.\") === true) {\n      this.unitData.adrs.splice(index, 1);\n    }\n  }\n\n  carrierWSIB(value) {\n    if (value !== true) {\n      this.unitData.data.forEach(elem => {\n        if (elem.carrierData) {\n          delete elem.carrierData.wsibAcc;\n          delete elem.carrierData.wsibExp;\n        }\n      });\n    }\n  }\n\n  carrierWCB(value) {\n    if (value !== true) {\n      this.unitData.data.forEach(elem => {\n        if (elem.carrierData) {\n          delete elem.carrierData.wcbAcc;\n          delete elem.carrierData.wcbExp;\n        }\n      });\n    }\n  } // uploadDriverImg(event): void {\n  //   if (event.target.files[0]) {\n  //     const file = event.target.files[0];\n  //     const reader = new FileReader();\n  //     reader.onload = e => this.profilePath = reader.result;\n  //     reader.readAsDataURL(file);\n  //     this.uploadedPhotos.push(file)\n  //     if(this.uploadedPhotos.length > 0) {\n  //       this.imageText = 'Change Photo';\n  //     }\n  //   }\n  // }\n\n\n  clearBankLocation(data, i, bankIndex) {\n    data.adrs[bankIndex].userLoc = '';\n    $('div').removeClass('show-search__result');\n  }\n\n  clearAddress(index) {\n    this.unitData.adrs[index].add1 = '';\n    this.unitData.adrs[index].add2 = '';\n    this.unitData.adrs[index].ctyName = null;\n    this.unitData.adrs[index].cName = '';\n    this.unitData.adrs[index].sName = '';\n    this.unitData.adrs[index].userLoc = '';\n    this.unitData.adrs[index].zip = '';\n    this.unitData.adrs[index].cCode = null;\n    this.unitData.adrs[index].sCode = null;\n    this.unitData.adrs[index].geoCords.lat = '';\n    this.unitData.adrs[index].geoCords.lng = '';\n    this.unitData.adrs[index].houseNo = '';\n    this.unitData.adrs[index].street = '';\n  }\n\n  updateCurrency(value) {\n    this.unitData.data.forEach(elem => {\n      if (elem.opData) {\n        elem.opData.lmCur = value;\n        elem.opData.pRCurr = value;\n        elem.opData.emCur = value;\n        elem.opData.drCur = value;\n      } else if (elem.carrierData) {\n        elem.carrierData.lmCur = value;\n        elem.carrierData.pRCurr = value;\n        elem.carrierData.emCur = value;\n        elem.carrierData.drCur = value;\n      }\n    });\n  }\n\n  checkCarrierBank(newUnitData) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      newUnitData.data.forEach(element => {\n        if (element.carrierData) {\n          element.carrierData.banks.forEach(elem => {\n            elem.adrs.forEach( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator(function* (res) {\n                delete res.states;\n                delete res.cities;\n\n                if (res.manual === true) {\n                  let data = {\n                    address1: res.add1,\n                    address2: res.add2,\n                    cityName: res.ctyName,\n                    stateName: res.sName,\n                    countryName: res.cName,\n                    zipCode: res.zip\n                  };\n                  let result = yield _this7.newGeoCode(data);\n\n                  if (result != undefined || result != null) {\n                    res.geoCords = result;\n                  }\n                }\n              });\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n          });\n        }\n      });\n    })();\n  }\n\n  addEntry() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const isValid = _this8.validatePopUp();\n\n      if (isValid) {\n        _this8.hideErrors();\n\n        _this8.unitDisabled = true;\n\n        for (let i = 0; i < _this8.unitData.adrs.length; i++) {\n          const element = _this8.unitData.adrs[i];\n\n          if (element.manual === true) {\n            let data = {\n              address1: element.add1,\n              address2: element.add2,\n              cityName: element.ctyName,\n              stateName: element.sName,\n              countryName: element.cName,\n              zipCode: element.zip\n            };\n            $('#addressErr' + i).css('display', 'none');\n            let result = yield _this8.newGeoCode(data);\n\n            if (result == null) {\n              $('#addressErr' + i).css('display', 'block');\n              _this8.unitDisabled = false;\n              return false;\n            }\n\n            if (result != undefined || result != null) {\n              element.geoCords = result;\n            }\n          } else {\n            $('#addressErr' + i).css('display', 'none');\n\n            if (element.isSuggest != true && element.userLoc != '') {\n              $('#addressErr' + i).css('display', 'block');\n              _this8.unitDisabled = false;\n              return;\n            }\n          }\n\n          delete element.states;\n          delete element.cities;\n        }\n\n        yield _this8.checkCarrierBank(_this8.unitData);\n\n        for (let j = 0; j < _this8.unitData.addlCnt.length; j++) {\n          const element = _this8.unitData.addlCnt[j];\n          element.flName = element.fName + ' ' + element.lName;\n        }\n\n        if (_this8.unitData.data.length > 0) {\n          for (let element of _this8.unitData.data) {\n            if (element.carrierData || element.opData) {\n              const el = element.carrierData ? element.carrierData : element.opData;\n              el.ppd.default = false;\n              el.pph.default = false;\n              el.ppm.default = false;\n              el.pp.default = false;\n              el.pfr.default = false;\n\n              switch (el.pType) {\n                case \"ppd\":\n                  el.ppd.default = true;\n                  break;\n\n                case \"pph\":\n                  el.pph.default = true;\n                  break;\n\n                case \"pp\":\n                  el.pp.default = true;\n                  break;\n\n                case \"ppm\":\n                  el.ppm.default = true;\n                  break;\n\n                case \"pfr\":\n                  el.pfr.default = true;\n                  break;\n              }\n\n              el.paymentOption = [el.pp, el.ppd, el.pph, el.ppm, el.pfr];\n              delete el.pType;\n              delete el.pp;\n              delete el.ppd;\n              delete el.pph;\n              delete el.ppm;\n              delete el.pfr;\n              if (element.carrierData) element.carrierData = el;\n              if (element.opData) element.opData = el;\n            }\n          }\n        } // create form data instance\n\n\n        const formData = new FormData();\n        formData.append('data', JSON.stringify(_this8.unitData));\n\n        _this8.apiService.postData('address-book', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            _this8.unitDisabled = false;\n            from(err.error).pipe(map(val => {\n              val.message = val.message.replace(/\".*\"/, 'This Field');\n              _this8.errors[val.context.key] = val.message;\n            })).subscribe({\n              complete: () => {\n                _this8.throwErrors();\n\n                _this8.hasError = true;\n                _this8.Error = 'Please see the errors';\n              },\n              error: () => {\n                _this8.unitDisabled = false;\n              },\n              next: () => {}\n            });\n          },\n          next: res => {\n            // this.response = res;\n            _this8.hasSuccess = true;\n            _this8.unitDisabled = false;\n            _this8.dataMessage = Constants.FETCHING_DATA;\n            _this8.lastKey = '';\n\n            _this8.emptyTabs();\n\n            _this8.showMainModal();\n\n            _this8.listService.fetchContactsByIDs();\n\n            if (_this8.unitData.eTypes.includes('owner_operator')) {\n              _this8.listService.fetchOwnerOperators();\n            } else if (_this8.unitData.eTypes.includes('shipper')) {\n              _this8.listService.fetchShippers();\n            } else if (_this8.unitData.eTypes.includes('receiver')) {\n              _this8.listService.fetchReceivers();\n            } else if (_this8.unitData.eTypes.includes('vendor')) {\n              _this8.listService.fetchVendors();\n            } else if (_this8.unitData.eTypes.includes('customer')) {\n              _this8.listService.fetchCustomers();\n            }\n\n            _this8.toastr.success('Entry added successfully');\n          }\n        });\n      }\n    })();\n  }\n\n  validatePopUp() {\n    const found = this.similarSuggestions.some(a => a.cName.toLowerCase() === this.unitData.cName.toLowerCase());\n\n    if (found) {\n      if (confirm('Company name is already exists ! Are you sure want to continue?') === true) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  showMainModal() {\n    if (localStorage.getItem('isOpen') != 'true') {\n      this.listService.triggerModal('list');\n    } else {\n      this.listService.triggerModal('');\n      localStorage.setItem('isOpen', 'false');\n    }\n  }\n\n  deactivate(id) {\n    var _this9 = this;\n\n    if (confirm(\"Are you sure you want to delete?\") === true) {\n      this.apiService.deleteData(`address-book/delete/CONT/${id}`).subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (result) {\n          _this9.lastKey = '';\n          _this9.dataMessage = Constants.FETCHING_DATA;\n          _this9.units = [];\n          _this9.customers = [];\n          _this9.brokers = [];\n          _this9.vendors = [];\n          _this9.receivers = [];\n          _this9.shippers = [];\n          _this9.owners = [];\n          _this9.fcCompanies = [];\n          _this9.carriers = [];\n\n          _this9.fetchUnits();\n\n          _this9.toastr.success('Entry deleted successfully');\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }\n\n  updateEntry() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const isValid = _this10.validatePopUp();\n\n      if (isValid) {\n        _this10.hasError = false;\n        _this10.hasSuccess = false;\n        _this10.unitDisabled = true;\n\n        _this10.hideErrors();\n\n        for (let i = 0; i < _this10.unitData.adrs.length; i++) {\n          const element = _this10.unitData.adrs[i];\n\n          if (element.manual === true) {\n            let data = {\n              address1: element.add1,\n              address2: element.add2,\n              cityName: element.ctyName,\n              stateName: element.sName,\n              countryName: element.cName,\n              zipCode: element.zip\n            };\n            $('#addressErr' + i).css('display', 'none');\n            let result = yield _this10.newGeoCode(data);\n\n            if (result == null) {\n              $('#addressErr' + i).css('display', 'block');\n              return false;\n            }\n\n            if (result != undefined || result != null) {\n              element.geoCords = result;\n            }\n          } else {\n            $('#addressErr' + i).css('display', 'none');\n\n            if (element.isSuggest != true && element.userLoc != '') {\n              $('#addressErr' + i).css('display', 'block');\n              return;\n            }\n          }\n\n          delete element.states;\n          delete element.cities;\n        }\n\n        for (let j = 0; j < _this10.unitData.addlCnt.length; j++) {\n          const element = _this10.unitData.addlCnt[j];\n          element.flName = element.fName + ' ' + element.lName;\n        } // create form data instance\n\n\n        const formData = new FormData(); //append photos if any\n\n        for (let i = 0; i < _this10.uploadedPhotos.length; i++) {\n          formData.append('uploadedPhotos', _this10.uploadedPhotos[i]);\n        } //append other fields\n\n\n        if (_this10.unitData.data.length > 0) {\n          for (let element of _this10.unitData.data) {\n            if (element.carrierData || element.opData) {\n              const el = element.carrierData ? element.carrierData : element.opData;\n              if (el.ppd) el.ppd.default = false;\n              if (el.pph) el.pph.default = false;\n              if (el.ppm) el.ppm.default = false;\n              if (el.pp) el.pp.default = false;\n              if (el.pfr) el.pfr.default = false;\n\n              switch (el.pType) {\n                case \"ppd\":\n                  el.ppd.default = true;\n                  break;\n\n                case \"pph\":\n                  el.pph.default = true;\n                  break;\n\n                case \"pp\":\n                  el.pp.default = true;\n                  break;\n\n                case \"ppm\":\n                  el.ppm.default = true;\n                  break;\n\n                case \"pfr\":\n                  el.pfr.default = true;\n                  break;\n              }\n\n              el.paymentOption = [el.pp, el.ppd, el.pph, el.ppm, el.pfr];\n              if (el.pType) delete el.pType;\n              if (el.pp) delete el.pp;\n              if (el.ppd) delete el.ppd;\n              if (el.pph) delete el.pph;\n              if (el.ppm) delete el.ppm;\n              if (el.pfr) delete el.pfr;\n              if (element.carrierData) element.carrierData = el;\n              if (element.opData) element.opData = el;\n            }\n          }\n        }\n\n        formData.append('data', JSON.stringify(_this10.unitData));\n\n        _this10.apiService.putData('address-book', formData, true).subscribe({\n          complete: () => {},\n          error: err => {\n            _this10.unitDisabled = false;\n            from(err.error).pipe(map(val => {\n              val.message = val.message.replace(/\".*\"/, 'This Field');\n              _this10.errors[val.context.key] = val.message;\n            })).subscribe({\n              complete: () => {\n                _this10.throwErrors();\n\n                _this10.hasError = true;\n                _this10.unitDisabled = false;\n                _this10.Error = 'Please see the errors';\n              },\n              error: () => {\n                _this10.unitDisabled = false;\n              },\n              next: () => {}\n            });\n          },\n          next: res => {\n            _this10.hasSuccess = true;\n            _this10.unitDisabled = false;\n            _this10.dataMessage = Constants.FETCHING_DATA;\n\n            _this10.emptyTabs();\n\n            _this10.listService.fetchContactsByIDs();\n\n            if (_this10.unitData.eTypes.includes('owner_operator')) {\n              _this10.listService.fetchOwnerOperators();\n            } else if (_this10.unitData.eTypes.includes('shipper')) {\n              _this10.listService.fetchShippers();\n            } else if (_this10.unitData.eTypes.includes('receiver')) {\n              _this10.listService.fetchReceivers();\n            } else if (_this10.unitData.eTypes.includes('vendor')) {\n              _this10.listService.fetchVendors();\n            } else if (_this10.unitData.eTypes.includes('customer')) {\n              _this10.listService.fetchCustomers();\n            }\n\n            _this10.listService.triggerModal('list');\n\n            _this10.toastr.success('Entry updated successfully');\n          }\n        });\n      }\n    })();\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v == 'CognitoPassword') {\n        this.errorClass = true;\n        this.errorClassMsg = this.errors[v];\n      } else {\n        if (v == 'cName' || v == 'email') {\n          $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n        }\n      }\n    });\n  }\n\n  fetchUnits() {\n    this.dataMessage = Constants.FETCHING_DATA;\n\n    if (this.lastKey !== 'end') {\n      this.apiService.getData(`address-book/fetch/records?lastKey=${this.lastKey}&updatedKey=${this.updatedKey}&companyName=` + this.filterVal.cName).subscribe(res => {\n        if (res.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        res.forEach(element => {\n          console.log('el', element);\n          this.units.push(element);\n\n          if (element.eTypes.includes('customer')) {\n            this.customers.push(element);\n          } else if (element.eTypes.includes('broker')) {\n            this.brokers.push(element);\n          } else if (element.eTypes.includes('carrier')) {\n            this.carriers.push(element);\n          } else if (element.eTypes.includes('shipper')) {\n            this.shippers.push(element);\n          } else if (element.eTypes.includes('receiver')) {\n            this.receivers.push(element);\n          } else if (element.eTypes.includes('fc')) {\n            this.fcCompanies.push(element);\n          } else if (element.eTypes.includes('vendor')) {\n            this.vendors.push(element);\n          } else if (element.eTypes.includes('owner_operator')) {\n            this.owners.push(element);\n          }\n        });\n\n        if (this.units.length > 0) {\n          if (this.units[this.units.length - 1].contactSK != undefined) {\n            this.lastKey = this.units[this.units.length - 1].contactSK.replace(/#/g, '--');\n            this.updatedKey = this.units[this.units.length - 1].updatedSK.replace(/#/g, '--');\n          } else {\n            this.lastKey = 'end';\n          }\n\n          this.allData = this.units;\n        }\n\n        this.isSearched = false;\n      });\n    }\n  }\n\n  newGeoCode(data) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this11.apiService.getData(`pcMiles/geocoding/${encodeURIComponent(JSON.stringify(data))}`).toPromise();\n\n      if (result.items != undefined && result.items.length > 0) {\n        return result.items[0].position;\n      }\n    })();\n  }\n\n  resetFilter() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this12.filterVal.cName != '') {\n        $('#addressbook-content .tab-pane').removeClass('active show');\n        $('#all').addClass('active show');\n        $('#addressbook-tabs .nav-link').removeClass('active');\n        $('#addressbook-tabs #all-tab').addClass('active');\n\n        _this12.setActiveDiv('all');\n\n        _this12.customers = [];\n        _this12.filterVal.cName = '';\n        _this12.suggestions = [];\n        _this12.dataMessage = Constants.FETCHING_DATA;\n        _this12.lastKey = '';\n        _this12.units = [];\n\n        _this12.fetchUnits();\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  editUser(item) {\n    this.listService.triggerModal('form');\n    this.updateButton = true;\n    this.newEditUnit(item);\n  }\n\n  newEditUnit(item) {\n    this.apiService.getData(`address-book/detail/${item.contactID}`).subscribe(res => {\n      res = res.Items[0];\n      this.unitData.eTypes = res.eTypes;\n      this.unitTypes.filter(item => {\n        if (this.unitData.eTypes.includes(item.value)) {\n          let index = this.unitTypes.indexOf(item);\n          this.unitTypes[index].disabled = true;\n        }\n      });\n      this.newArr = res.eTypes;\n      this.unitData.cName = res.cName;\n      this.unitData.dba = res.dba;\n      this.unitData.workEmail = res.workEmail;\n      this.unitData.workPhone = res.workPhone;\n      this.unitData.adrs = res.adrs;\n\n      for (let index = 0; index < this.unitData.adrs.length; index++) {\n        const element = this.unitData.adrs[index];\n\n        if (element.manual) {\n          this.getStates(element.cCode, 'unit', index, '');\n          this.getCities(element.sCode, 'unit', index, '');\n          element.isSuggest = false;\n        } else {\n          element.isSuggest = true;\n        }\n      }\n\n      this.unitData.addlCnt = res.addlCnt;\n      this.unitData.data = res.data;\n\n      for (const data of this.unitData.data) {\n        if (data.carrierData) {\n          let newData = data.carrierData;\n\n          for (const element of data.carrierData.paymentOption) {\n            if (element.default) {\n              newData.pType = element.pType;\n            }\n\n            if (element.pType == \"ppm\") {\n              newData.ppm = element;\n            }\n\n            if (element.pType == \"pph\") {\n              newData.pph = element;\n            }\n\n            if (element.pType == \"pp\") {\n              newData.pp = element;\n            }\n\n            if (element.pType == \"ppd\") {\n              newData.ppd = element;\n            }\n\n            if (element.pType == \"pfr\") {\n              newData.pfr = element;\n            }\n          }\n        }\n\n        if (data.opData) {\n          let newData = data.opData;\n\n          for (const element of data.opData.paymentOption) {\n            if (element.default) {\n              newData.pType = element.pType;\n            }\n\n            if (element.pType == \"ppm\") {\n              newData.ppm = element;\n            }\n\n            if (element.pType == \"pph\") {\n              newData.pph = element;\n            }\n\n            if (element.pType == \"pp\") {\n              newData.pp = element;\n            }\n\n            if (element.pType == \"ppd\") {\n              newData.ppd = element;\n            }\n\n            if (element.pType == \"pfr\") {\n              newData.pfr = element;\n            }\n          }\n        }\n      } //to show profile image\n\n\n      if (res.profileImg !== '' && res.profileImg !== undefined) {\n        this.profilePath = `${this.Asseturl}/${res.carrierID}/${res.profileImg}`;\n        this.imageText = 'Update Picture';\n      } else {\n        this.profilePath = this.defaultProfilePath;\n        this.imageText = 'Add Picture';\n      }\n\n      this.unitData[`contactID`] = res.contactID;\n      this.unitData[`createdDate`] = res.createdDate;\n      this.unitData[`createdTime`] = res.createdTime;\n    });\n  }\n\n  showPhoto() {\n    let ngbModalOptions = {\n      backdrop: 'static',\n      keyboard: false,\n      windowClass: 'photo__main'\n    };\n    this.modalService.open(this.showPhotoModal, ngbModalOptions);\n  }\n\n  openDetail(targetModal, item) {\n    this.emptyEntry();\n    this.newEditUnit(item); // this.modalService.dismissAll();\n\n    let ngbModalOptions = {\n      backdrop: 'static',\n      keyboard: false,\n      windowClass: 'units-detail__main',\n      backdropClass: 'light-backdrop'\n    };\n    this.modalService.open(targetModal, ngbModalOptions);\n  }\n\n  onModalScrollDown() {\n    this.fetchUnits();\n  }\n\n  emptyTabs() {\n    this.units = [];\n    this.customers = [];\n    this.brokers = [];\n    this.vendors = [];\n    this.carriers = [];\n    this.shippers = [];\n    this.receivers = [];\n    this.fcCompanies = [];\n    this.owners = [];\n    this.allData = [];\n  }\n\n  emptyEntry() {\n    this.newArr = [];\n    this.similarVal = {\n      cName: ''\n    };\n    this.unitData = {\n      cName: '',\n      dba: '',\n      workPhone: '',\n      workEmail: '',\n      eTypes: [],\n      adrs: [{\n        careOption: '',\n        aType: null,\n        cName: '',\n        sName: '',\n        ctyName: null,\n        zip: '',\n        add1: '',\n        add2: '',\n        geoCords: {\n          lat: '',\n          lng: ''\n        },\n        userLoc: '',\n        manual: false,\n        cCode: null,\n        sCode: null,\n        houseNo: '',\n        street: '',\n        states: [],\n        cities: [],\n        isSuggest: false\n      }],\n      addlCnt: [{\n        flName: '',\n        fName: '',\n        lName: '',\n        phone: '',\n        des: '',\n        email: '',\n        fax: ''\n      }],\n      data: []\n    };\n  }\n\n};\n\nNewAddressBookComponent.ctorParameters = () => [{\n  type: HereMapService\n}, {\n  type: ToastrService\n}, {\n  type: NgbModal\n}, {\n  type: ApiService\n}, {\n  type: ListService\n}, {\n  type: CountryStateCityService\n}];\n\nNewAddressBookComponent.propDecorators = {\n  allUnitModal: [{\n    type: ViewChild,\n    args: ['allUnitModal', {\n      static: true\n    }]\n  }],\n  newUnitModal: [{\n    type: ViewChild,\n    args: ['newUnitModal', {\n      static: true\n    }]\n  }],\n  unitDetailModal: [{\n    type: ViewChild,\n    args: ['unitDetailModal', {\n      static: true\n    }]\n  }],\n  showPhotoModal: [{\n    type: ViewChild,\n    args: ['showPhotoModal', {\n      static: true\n    }]\n  }]\n};\nNewAddressBookComponent = __decorate([Component({\n  selector: 'app-new-address-book',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], NewAddressBookComponent);\nexport { NewAddressBookComponent };","map":null,"metadata":{},"sourceType":"module"}