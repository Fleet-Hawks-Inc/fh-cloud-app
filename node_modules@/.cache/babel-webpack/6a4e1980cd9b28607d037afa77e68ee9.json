{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./brokerage-pdf.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./brokerage-pdf.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { ApiService, ListService } from \"src/app/services\";\nimport * as html2pdf from \"html2pdf.js\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { Auth } from \"aws-amplify\";\nlet BrokeragePdfComponent = class BrokeragePdfComponent {\n  constructor(listService, modalService, toastr, apiService) {\n    var _this = this;\n\n    this.listService = listService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.apiService = apiService;\n    this.brokerage = {\n      orderNo: \"\",\n      orderID: \"\",\n      carrierID: null,\n      finalAmount: \"\",\n      miles: 0,\n      currency: \"\",\n      draw: 0,\n      index: 0,\n      type: \"\",\n      brokerageAmount: 0,\n      instructions: \"\",\n      today: \"\"\n    };\n    this.logoSrc = \"assets/img/logo.png\";\n    this.orderData = {\n      additionalContact: null,\n      carrierData: {\n        address: \"\",\n        companyName: \"\",\n        phone: \"\",\n        email: \"\",\n        fax: \"\",\n        logo: \"\",\n        carrierID: \"\"\n      },\n      charges: {\n        accessorialDeductionInfo: {\n          accessorialDeduction: []\n        },\n        accessorialFeeInfo: {\n          accessorialFee: []\n        },\n        freightFee: {\n          amount: 0,\n          currency: \"\",\n          type: \"\"\n        },\n        fuelSurcharge: {\n          amount: 0,\n          currency: \"\",\n          type: \"\"\n        },\n        cusAddressID: \"\",\n        customerID: \"\"\n      },\n      data: [],\n      finalAmount: 0,\n      phone: \"\",\n      subTotal: 0,\n      taxesAmt: 0,\n      orderNumber: \"\"\n    };\n    this.carrierData = {\n      name: \"\",\n      email: \"\",\n      address: \"\",\n      phone: \"\"\n    };\n    this.companyLogo = \"\";\n    this.brokEmail = {\n      subject: \"\",\n      emails: [],\n      sendCopy: false,\n      carrierEmail: \"\"\n    };\n    this.brokEmails = [];\n    this.isEmail = false;\n    this.orderID = \"\";\n    this.type = \"\";\n    this.getCurrentUser = /*#__PURE__*/_asyncToGenerator(function* () {\n      let currentUser = (yield Auth.currentSession()).getIdToken().payload;\n      _this.brokEmail.carrierEmail = currentUser.email;\n    });\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    this.subscription = this.listService.brokeragePdfList.subscribe( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (res) {\n        if (res.showModal && res.length != 0) {\n          res.showModal = false;\n          _this2.brokerage = res.brokerage;\n          _this2.orderData = res.orderData;\n          _this2.carrierData = res.carrierData;\n          _this2.companyLogoSrc = res.orderData.carrierData.termsInfo.logo;\n          _this2.carrierTerms = res.orderData.carrierData.termsInfo.carrierTerms;\n          _this2.tagLine = res.orderData.carrierData.termsInfo.tagLine;\n          _this2.companyLogo = res.companyLogo;\n          _this2.type = res.type ? res.type : \"list\";\n          _this2.brokEmail.carrierEmail = res.carrierEmail ? res.carrierEmail : _this2.getCurrentUser();\n          _this2.orderID = res.orderID;\n          _this2.brokEmail.subject = `Brokerage Order#: ${_this2.orderData.orderNumber}`;\n          let ngbModalOptions = {\n            backdrop: \"static\",\n            keyboard: false,\n            windowClass: \"ordBrokeragePrev-prog__main\"\n          };\n          res.showModal = false;\n\n          _this2.modalService.open(_this2.modalContent, ngbModalOptions).result.then(result => {}, reason => {});\n        }\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n\n  generatePDF() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var data = document.getElementById(\"print_brokerage\");\n      setTimeout(() => {\n        html2pdf(data, {\n          margin: [0.5, 0, 0.5, 0],\n          pagebreak: {\n            mode: \"avoid-all\",\n            before: \"print_brokerage\"\n          },\n          filename: `Carrier Confirmation (${_this3.brokerage.orderNo})${new Date().getTime()}.pdf`,\n          image: {\n            type: \"jpeg\",\n            quality: 0.98\n          },\n          html2canvas: {\n            scale: 2,\n            logging: true,\n            dpi: 192,\n            letterRendering: true,\n            allowTaint: true,\n            useCORS: true\n          },\n          jsPDF: {\n            unit: \"in\",\n            format: \"a4\",\n            orientation: \"portrait\"\n          }\n        });\n      }, 0);\n    })();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  openEmailInv() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let ngbModalOptions = {\n        keyboard: false,\n        backdrop: \"static\",\n        windowClass: \"order-send__email\"\n      };\n\n      _this4.modalService.dismissAll();\n\n      _this4.emailCopyRef = _this4.modalService.open(_this4.emailBrokerageModal, ngbModalOptions);\n    })();\n  }\n\n  sendBrokEmail() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.isEmail = true;\n      let result = yield _this5.apiService.getData(`orders/emailBrokerage/${_this5.orderID}?data=${encodeURIComponent(JSON.stringify(_this5.brokEmail))}`).toPromise();\n      _this5.isEmail = false;\n\n      _this5.modalService.dismissAll();\n\n      if (result == null) {\n        _this5.brokEmail.emails = [];\n\n        _this5.toastr.success(\"Brokerage email send successfully!\");\n      }\n    })();\n  }\n\n  addEmails() {\n    this.brokEmail.emails = [];\n    let isFlag = true;\n\n    if (this.brokEmails.length === 0) {\n      this.toastr.error(\"Please enter at least one email\");\n      isFlag = false;\n      return;\n    }\n\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    this.brokEmails.forEach(elem => {\n      let result = re.test(String(elem.label).toLowerCase());\n\n      if (!result) {\n        this.toastr.error(\"Please enter valid email(s)\");\n        isFlag = false;\n        return;\n      } else {\n        if (!this.brokEmail.emails.includes(elem.label)) {\n          this.brokEmail.emails.push(elem.label);\n        }\n      }\n    });\n\n    if (this.brokEmail.subject == \"\") {\n      this.toastr.error(\"Please enter subject\");\n      isFlag = false;\n      return;\n    }\n\n    if (this.brokEmail.sendCopy) {\n      if (!this.brokEmail.emails.includes(this.brokEmail.carrierEmail)) {\n        this.brokEmail.emails.push(this.brokEmail.carrierEmail);\n      }\n    }\n\n    if (isFlag) {\n      this.sendBrokEmail();\n    }\n  }\n\n};\n\nBrokeragePdfComponent.ctorParameters = () => [{\n  type: ListService\n}, {\n  type: NgbModal\n}, {\n  type: ToastrService\n}, {\n  type: ApiService\n}];\n\nBrokeragePdfComponent.propDecorators = {\n  modalContent: [{\n    type: ViewChild,\n    args: [\"ordBrokeragePrev\", {\n      static: true\n    }]\n  }],\n  emailBrokerageModal: [{\n    type: ViewChild,\n    args: [\"emailBrokerageModal\", {\n      static: true\n    }]\n  }]\n};\nBrokeragePdfComponent = __decorate([Component({\n  selector: \"app-brokerage-pdf\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], BrokeragePdfComponent);\nexport { BrokeragePdfComponent };","map":null,"metadata":{},"sourceType":"module"}