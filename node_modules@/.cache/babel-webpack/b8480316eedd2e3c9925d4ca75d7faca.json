{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-sales-receipts.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-sales-receipts.component.css\";\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService, ApiService, ListService } from 'src/app/services';\nimport { Location } from '@angular/common';\nimport * as moment from 'moment';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nlet AddSalesReceiptsComponent = class AddSalesReceiptsComponent {\n  constructor(apiService, route, listService, httpClient, location, toaster, accountService) {\n    this.apiService = apiService;\n    this.route = route;\n    this.listService = listService;\n    this.httpClient = httpClient;\n    this.location = location;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.submitDisabled = false;\n    this.paymentData = {\n      txnDate: moment().format('YYYY-MM-DD'),\n      customerID: null,\n      payRef: '',\n      currency: 'CAD',\n      accountID: null,\n      payMode: null,\n      payModeNo: \"\",\n      payModeDate: null,\n      remarks: '',\n      totalAmt: 0,\n      invoiceIds: [],\n      invoiceData: [],\n      invoiceTotal: 0\n    };\n    this.editDisabled = false;\n    this.customers = [];\n    this.customerInvoices = [];\n    this.paymentModes = [{\n      value: \"cash\",\n      name: \"Cash\"\n    }, {\n      value: \"cheque\",\n      name: \"Cheque\"\n    }, {\n      value: \"eft\",\n      name: \"EFT\"\n    }, {\n      value: \"credit_card\",\n      name: \"Credit Card\"\n    }, {\n      value: \"debit_card\",\n      name: \"Debit Card\"\n    }, {\n      value: \"demand_draft\",\n      name: \"Demand Draft\"\n    }];\n    this.accounts = [];\n    this.response = '';\n    this.errors = {};\n    this.payModeLabel = \"\";\n    this.docs = [];\n    this.filesError = '';\n  }\n\n  ngOnInit() {\n    this.listService.fetchChartAccounts();\n    this.accounts = this.listService.accountsList;\n    this.listService.fetchCustomers();\n    let customerList = new Array();\n    this.getValidCustomers(customerList);\n    this.customers = customerList;\n  }\n\n  refreshAccount() {\n    this.listService.fetchChartAccounts();\n  }\n\n  getValidCustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  getCustomerInvoices(ID) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.customerInvoices = [];\n      _this.dataMessage = Constants.FETCHING_DATA;\n      let result = yield _this.accountService.getData(`sales-invoice/specific/${ID}`).toPromise();\n\n      if (result.length === 0) {\n        _this.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      if (result.length > 0) {\n        result.map(v => {\n          v.selected = false;\n          v.prevPaidAmount = Number(v.totalAmt) - Number(v.balance);\n          v.paidStatus = false;\n          v.fullPayment = false;\n          v.paidAmount = 0;\n          v.newStatus = v.status.replace(\"_\", \" \");\n        });\n        _this.customerInvoices = result;\n      }\n    })();\n  }\n\n  fetchAccounts() {\n    this.accountService.getData(`chartAc/fetch/list`).subscribe(res => {\n      this.accounts = res;\n    });\n  }\n\n  assignFullPayment(index, data) {\n    if (data.fullPayment) {\n      this.customerInvoices[index].paidAmount = data.balance;\n      this.customerInvoices[index].paidStatus = true;\n    } else {\n      this.customerInvoices[index].paidAmount = 0;\n      this.customerInvoices[index].paidStatus = false;\n    }\n\n    this.selectedCredits();\n  }\n\n  selectedCredits() {\n    this.paymentData.invoiceIds = [];\n    this.paymentData.invoiceData = [];\n\n    for (let i = 0; i < this.customerInvoices.length; i++) {\n      const element = this.customerInvoices[i];\n\n      if (element.selected) {\n        this.paymentData.totalAmt += Number(element.paidAmount);\n        let status = \"\";\n\n        if (Number(element.paidAmount) === Number(element.balance)) {\n          status = \"deducted\";\n        } else if (Number(element.paidAmount) > 0 && Number(element.paidAmount) < Number(element.balance)) {\n          status = \"partially_deducted\";\n        } else {\n          status = \"not_deducted\";\n        }\n\n        element.status = status;\n\n        if (!this.paymentData.invoiceIds.includes(element.saleID)) {\n          this.paymentData.invoiceIds.push(element.saleID);\n          let obj = {\n            saleID: element.saleID,\n            status: status,\n            paidAmount: element.paidAmount,\n            totalAmount: element.balance\n          };\n          this.paymentData.invoiceData.push(obj);\n        }\n      }\n    }\n\n    this.creditCalculation(); // this.calculateFinalTotal();\n  }\n\n  creditCalculation() {\n    this.paymentData.invoiceTotal = 0;\n\n    for (const element of this.customerInvoices) {\n      if (element.selected) {\n        this.paymentData.invoiceTotal += Number(element.paidAmount);\n        this.paymentData.invoiceData.map(v => {\n          if (element.saleID === v.saleID) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.balance) - Number(element.paidAmount);\n\n            if (Number(element.paidAmount) === Number(element.balance)) {\n              v.status = \"deducted\";\n            } else if (Number(element.paidAmount) < Number(element.balance)) {\n              v.status = \"partially_deducted\";\n            } else {\n              v.status = \"not_deducted\";\n            }\n          }\n        });\n      }\n    }\n  }\n\n  calculateFinalTotal() {\n    this.creditCalculation();\n  }\n\n  addReceipt() {\n    this.submitDisabled = true;\n\n    if (this.paymentData.invoiceData.length === 0) {\n      this.toaster.error('Please select at least one invoice');\n      this.submitDisabled = false;\n      return;\n    }\n\n    for (const elem of this.customerInvoices) {\n      if (elem.selected && elem.paidAmount === 0) {\n        this.toaster.error('Please add invoice amount');\n        this.submitDisabled = false;\n        return false;\n      }\n    }\n\n    ; // create form data instance\n\n    const formData = new FormData(); //append docs if any\n\n    for (let j = 0; j < this.docs.length; j++) {\n      formData.append(\"docs\", this.docs[j]);\n    } //append other fields\n\n\n    formData.append(\"data\", JSON.stringify(this.paymentData));\n    this.accountService.postData(`sales-receipts`, formData, true).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Receipt added successfully.');\n        this.cancel();\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  changePaymentMode(type) {\n    let label = \"\";\n\n    if (type == \"cash\") {\n      label = \"Cash\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"cheque\") {\n      label = \"Cheque\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"eft\") {\n      label = \"EFT\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"credit_card\") {\n      label = \"Credit Card\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"debit_card\") {\n      label = \"Debit Card\";\n      this.paymentData.payModeNo = null;\n    } else if (type == \"demand_draft\") {\n      label = \"Demand Draft\";\n      this.paymentData.payModeNo = null;\n    }\n\n    this.payModeLabel = label;\n    this.paymentData.payModeDate = null;\n  }\n\n  uploadDocs(documents) {\n    this.filesError = '';\n    let files = [...documents];\n    let filesSize = 0;\n\n    if (files.length > 5) {\n      this.toaster.error(\"Files count limit exceeded\");\n      this.filesError = \"Files should not be more than 5\";\n      return;\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      filesSize += files[i].size / 1024 / 1024;\n\n      if (filesSize > 10) {\n        this.toaster.error(\"Files size limit exceeded\");\n        this.filesError = 'Files size limit exceeded. Files size should be less than 10mb';\n        return;\n      } else {\n        let name = files[i].name.split(\".\");\n        let ext = name[name.length - 1].toLowerCase();\n\n        if (ext == \"doc\" || ext == \"docx\" || ext == \"pdf\" || ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\") {\n          this.docs.push(files[i]);\n        } else {\n          this.filesError = \"Only .doc, .docx, .pdf, .jpg, .jpeg and png files allowed.\";\n        }\n      }\n    }\n  }\n\n};\n\nAddSalesReceiptsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ListService\n}, {\n  type: HttpClient\n}, {\n  type: Location\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}];\n\nAddSalesReceiptsComponent = __decorate([Component({\n  selector: 'app-add-sales-receipts',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddSalesReceiptsComponent);\nexport { AddSalesReceiptsComponent };","map":null,"metadata":{},"sourceType":"module"}