{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./subscription-onboard.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./subscription-onboard.component.css\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { compare, numericAsync, pattern, prop, ReactiveFormConfig, required, RxFormBuilder } from '@rxweb/reactive-form-validators';\nimport { Auth } from 'aws-amplify';\nimport { ToastrService } from 'ngx-toastr';\nimport { ApiService } from 'src/app/services';\nlet SubscriptionOnboardComponent = class SubscriptionOnboardComponent {\n  /**\r\n   * Constructor\r\n   * @param apiService\r\n   * @param route\r\n   * @param formBuilder\r\n   * @param toaster\r\n   * @param router\r\n   */\n  constructor(apiService, route, formBuilder, toaster, router) {\n    this.apiService = apiService;\n    this.route = route;\n    this.formBuilder = formBuilder;\n    this.toaster = toaster;\n    this.router = router;\n    this.userNameExists = false;\n    this.otpSubmitDisabled = true;\n    this.showVerification = false;\n    this.subCustomerID = this.route.snapshot.params.id;\n    ReactiveFormConfig.set({\n      'validationMessage': {\n        \"required\": \"This field is required\",\n        \"email\": \"Email is invalid.\",\n        \"compare\": \"Passwords does not match.\",\n        \"password\": \"Input does not match the password requirements\"\n      }\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.userInfo = new UserInfo();\n      _this.verificationInfo = new VerificationInfo();\n      const response = yield _this.apiService.getData(`carriers/getSubCarrier/${_this.subCustomerID}`).toPromise();\n      _this.userInfo.email = response.email;\n      _this.userVerificationFormGroup = _this.formBuilder.formGroup(_this.verificationInfo);\n      _this.userInfoFormGroup = _this.formBuilder.formGroup(_this.userInfo);\n    })();\n  }\n\n  onFocusOutEvent(event) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.apiService.getData(`carriers/getSubCarrier/${_this2.subCustomerID}`).toPromise();\n\n      const response = _this2.apiService.postData(`carriers/checkUser`, {\n        userName: _this2.userInfo.username\n      }).subscribe(data => {\n        _this2.userNameExists = false;\n      }, error => {\n        if (error.error && error.error.errorMessage) {\n          _this2.userErrorMessage = error.error.errorMessage;\n        }\n\n        _this2.userNameExists = true;\n      });\n    })();\n  }\n\n  register() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = {\n        email: _this3.userInfo.email,\n        password: _this3.userInfo.password,\n        userName: _this3.userInfo.username\n      };\n      const response = yield _this3.apiService.postData('carriers/subRegister', data).subscribe(data => {\n        _this3.toaster.info('User Registered successfully!');\n\n        _this3.showVerification = true;\n      }, error => {\n        _this3.toaster.error('Unable register user.');\n      });\n    })();\n  }\n\n  confirmSignUp() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield Auth.confirmSignUp(_this4.userInfo.username, _this4.otpCode);\n\n        _this4.toaster.info(\"Thanks for confirming your email.\");\n\n        _this4.router.navigate(['/Login']);\n      } catch (error) {\n        if (error && error.message.includes('Current status is CONFIRMED')) {\n          _this4.toaster.info(\"Your email is already verified.\");\n\n          _this4.router.navigate(['/Login']);\n\n          return;\n        }\n\n        if (error && error.message) {\n          _this4.toaster.error(error.message);\n        } else {\n          _this4.toaster.error(\"There was error confirming user.\");\n        }\n      }\n    })();\n  } // Show password\n\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n\n  resendConfirmationCode() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield Auth.resendSignUp(_this5.userInfo.username);\n\n        _this5.toaster.info(\"Verification code sent to your email successfully.\");\n      } catch (error) {\n        if (error && error.message) {\n          _this5.toaster.error(error.message);\n        } else {\n          _this5.toaster.error(\"Error sending code.Please try again.\");\n        }\n      }\n    })();\n  }\n\n  onOtpChange(code) {\n    if (code.length === 6) {\n      this.otpSubmitDisabled = false;\n      this.otpCode = code;\n    } else {\n      this.otpSubmitDisabled = true;\n    }\n  }\n\n};\n\nSubscriptionOnboardComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: RxFormBuilder\n}, {\n  type: ToastrService\n}, {\n  type: Router\n}];\n\nSubscriptionOnboardComponent = __decorate([Component({\n  selector: 'app-subscription-onboard',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], SubscriptionOnboardComponent);\nexport { SubscriptionOnboardComponent };\n\nclass UserInfo {}\n\n__decorate([required(), pattern({\n  expression: {\n    'onlyAlpha': /^(?=[a-zA-Z0-9.]{6,20}$)(?!.*[.]{2})[^.].*[^.]$/\n  },\n  message: \"Username should be at-least 6 characters long and can be a combination of numbers, letters  and dot(.).\"\n})], UserInfo.prototype, \"username\", void 0);\n\n__decorate([required(), prop()], UserInfo.prototype, \"email\", void 0);\n\n__decorate([required(), prop(), pattern({\n  expression: {\n    'onlyAlpha': /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,15}$/\n  },\n  message: \"Password must be of length 8 or more with combination of uppercase, lowercase, numbers & special characters.\"\n})], UserInfo.prototype, \"password\", void 0);\n\n__decorate([required(), compare({\n  fieldName: 'password',\n  message: \"Password does not match.\"\n})], UserInfo.prototype, \"confirmPassword\", void 0);\n\nclass VerificationInfo {}\n\n__decorate([prop(), required({\n  message: \"Verification code cannot be blank.\"\n}), numericAsync({\n  message: \"Only numbers allowed.\",\n  allowDecimal: false\n})], VerificationInfo.prototype, \"verificationCode\", void 0);","map":null,"metadata":{},"sourceType":"module"}