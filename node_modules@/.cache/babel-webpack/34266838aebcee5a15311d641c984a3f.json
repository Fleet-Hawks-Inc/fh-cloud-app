{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./login.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./login.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService, ListService } from '../../services';\nimport { AuthService } from '../../services';\nimport { Role } from '../../models/objects';\nimport { Auth } from 'aws-amplify';\nimport { from } from 'rxjs';\nimport jwt_decode from \"jwt-decode\";\nimport { passwordStrength } from 'check-password-strength';\nimport { map } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { RouteManagementServiceService } from 'src/app/services/route-management-service.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { environment } from \"./../../../environments/environment\";\nlet LoginComponent = class LoginComponent {\n  constructor(apiService, router, authService, toaster, modalService, listService, routMgmtService) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.router = router;\n    this.authService = authService;\n    this.toaster = toaster;\n    this.modalService = modalService;\n    this.listService = listService;\n    this.routMgmtService = routMgmtService;\n    this.userName = null;\n    this.errors = {};\n    this.password = null;\n    this.response = '';\n    this.hasError = false;\n    this.Error = '';\n    this.showSigupCode = true;\n    this.signUpCode = '';\n    this.error = '';\n    this.referral = {\n      name: '',\n      company: '',\n      email: '',\n      phone: ''\n    };\n    this.submitDisabled = false;\n    this.submitCarrierDisabled = false;\n    this.passwordValidation = {\n      upperCase: false,\n      lowerCase: false,\n      number: false,\n      specialCharacters: false,\n      length: false\n    };\n    this.showLogin = false;\n    this.whiteListCarriers = environment.whiteListCarriers; //   LoginAction() {\n    //     this.hasError = false;\n    //     const data = JSON.stringify({\n    //       'userName': this.email,\n    //       'password': this.password\n    //     });\n    //     this.apiService.getJwt('auth', data).\n    //       subscribe({\n    //         complete: () => { },\n    //         error: (err) => {\n    //           this.hasError = true;\n    //           this.Error = err.error;\n    //         },\n    //         next: (res) => {\n    //           const user: User = {\n    //             id: '1',\n    //             username: 'admin',\n    //             firstName: 'Admin',\n    //             lastName: 'User',\n    //             role: Role.FleetManager\n    //           };\n    //           this.response = res;\n    //           localStorage.setItem('jwt', this.response.jwt);\n    //           localStorage.setItem('LoggedIn', 'true');\n    //           /************set the role from server **********/\n    //           localStorage.setItem('user', JSON.stringify(user));\n    //           this.router.navigate(['/Map-Dashboard']);\n    //         }\n    //       });\n    //   }\n\n    /** Cognito user action */\n\n    this.resendSignUpCode = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        yield Auth.resendSignUp(_this.userName);\n      } catch (err) {\n        _this.hasError = true;\n        _this.error = `Error occured while sending code ${err}`;\n        _this.showSigupCode = true;\n      }\n    });\n    /** Cognito user action */\n\n    this.loginAction1 = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.submitDisabled = true;\n\n      if (!_this.authService.isTokenExpired) {\n        _this.router.navigate(['/Map-Dashboard']);\n      }\n\n      if (_this.userName && _this.password) {\n        try {\n          _this.userName = _this.userName.trim();\n          let loginResponse = yield Auth.signIn(_this.userName, _this.password);\n\n          if (loginResponse) {\n            const isActivatedUser = (yield Auth.currentSession()).getIdToken().payload;\n            const jwt = (yield Auth.currentSession()).getIdToken().getJwtToken();\n            const at = (yield Auth.currentSession()).getAccessToken().getJwtToken();\n            var decodedToken = jwt_decode(jwt);\n            let allow = yield _this.apiService.checkIfUserActive();\n            yield _this.apiService.checkAccess();\n\n            if (!allow) {\n              _this.submitDisabled = false;\n              _this.hasError = true;\n              _this.Error = _this.userName + \" is not Approved. Please contact support@fleethawks.com | +1 (855)208 7575\";\n              Auth.signOut();\n              return;\n            } else {\n              // check if customer subscribes any plan and if check carrier exist in our whitelist category like DOT. if not then throw an error\n              let isAuthorize = false;\n\n              if (decodedToken.subCustomerID && decodedToken.subCustomerID === 'NA') {\n                if (_this.whiteListCarriers.includes(decodedToken.carrierID)) {\n                  isAuthorize = true;\n                } else {\n                  isAuthorize = false;\n                }\n              } else {\n                isAuthorize = true;\n              }\n\n              if (!isAuthorize) {\n                _this.submitDisabled = false;\n                Auth.signOut();\n                localStorage.clear();\n                _this.hasError = true;\n                _this.Error = 'No valid subscriptions found. Please subscribe one of the plans or contact support@fleethawks.com';\n              }\n\n              let carrierID = yield _this.apiService.getCarrierID();\n              localStorage.setItem('xfhCarrierId', carrierID);\n\n              if (isActivatedUser.userRoles != \"orgAdmin\") {\n                _this.router.navigate(['/Map-Dashboard']);\n\n                localStorage.setItem(\"subCompany\", 'no');\n              } else {\n                _this.apiService.getData(`carriers/${carrierID}`).subscribe(res => {\n                  if (res.Items.length > 0) {\n                    if ('isProfileComplete' in res.Items[0]) {\n                      if (res.Items[0].isProfileComplete) {\n                        if (res.Items[0].subCompIDs && res.Items[0].subCompIDs.length > 0) {\n                          _this.router.navigate(['/organizations']);\n\n                          localStorage.setItem(\"subCompany\", 'yes');\n                        } else {\n                          _this.router.navigate(['/Map-Dashboard']);\n\n                          localStorage.setItem(\"subCompany\", 'no');\n                        }\n                      } else {\n                        _this.router.navigate(['/onboard']);\n                      }\n\n                      localStorage.setItem(\"isProfileComplete\", res.Items[0].isProfileComplete);\n                    } else {\n                      if (res.Items[0].subCompIDs && res.Items[0].subCompIDs.length > 0) {\n                        _this.router.navigate(['/organizations']);\n\n                        localStorage.setItem(\"subCompany\", 'yes');\n                      } else {\n                        _this.router.navigate(['/Map-Dashboard']);\n\n                        localStorage.setItem(\"subCompany\", 'no');\n                      }\n                    }\n                  }\n                });\n              }\n            }\n\n            localStorage.setItem('congnitoAT', at);\n\n            if (decodedToken.userType == 'driver') {\n              _this.submitDisabled = false;\n              Auth.signOut();\n              localStorage.clear();\n              _this.hasError = true;\n              _this.Error = 'You are not authorized to perform this action';\n            } else {\n              _this.submitDisabled = false;\n              localStorage.setItem('currentLoggedUserName', _this.userName);\n\n              if (!isActivatedUser.carrierID) {\n                _this.hasError = true;\n                _this.Error = 'Unable to find carrier information';\n                localStorage.setItem('signOut', 'true'); //trigger flag\n              } else {\n                /**\r\n                 * For the Role Management\r\n                 * @type {{id: string; username: string; firstName: string; lastName: string; role: Role}}\r\n                 */\n                const user = {\n                  id: '1',\n                  username: 'admin',\n                  firstName: 'Admin',\n                  lastName: 'User',\n                  role: Role.FleetManager\n                };\n                localStorage.setItem('LoggedIn', 'true');\n                localStorage.setItem('signOut', 'false'); //trigger flag\n\n                localStorage.setItem('accessToken', jwt); //save token in session storage\n                // await this.router.navigate(['/Map-Dashboard']);\n\n                _this.listService.triggerModal('');\n\n                localStorage.setItem('user', JSON.stringify(user));\n              }\n            }\n          }\n        } catch (err) {\n          _this.submitDisabled = false;\n          _this.hasError = true;\n          _this.Error = err.message || 'Error during login';\n        }\n      } else {\n        _this.submitDisabled = false;\n        _this.hasError = true;\n        _this.Error = 'Username and password is required';\n      }\n\n      _this.routMgmtService.resetAllCache();\n    });\n    this.submitConfirmationCode = /*#__PURE__*/_asyncToGenerator(function* () {\n      if (_this.signUpCode !== '') {\n        yield Auth.verifyCurrentUserAttributeSubmit('email', _this.signUpCode);\n      } else {\n        _this.Error = 'Invalid Sigup Code';\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/Map-Dashboard']);\n    } else {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  } // Show password\n\n\n  toggleFieldTextType1() {\n    this.fieldTextType1 = !this.fieldTextType1;\n  }\n\n  togglecpwdfieldTextType() {\n    this.cpwdfieldTextType = !this.cpwdfieldTextType;\n  }\n\n  validatePassword(password) {\n    let passwordVerify = passwordStrength(password);\n\n    if (passwordVerify.contains.includes('lowercase')) {\n      this.passwordValidation.lowerCase = true;\n    } else {\n      this.passwordValidation.lowerCase = false;\n    }\n\n    if (passwordVerify.contains.includes('uppercase')) {\n      this.passwordValidation.upperCase = true;\n    } else {\n      this.passwordValidation.upperCase = false;\n    }\n\n    if (passwordVerify.contains.includes('symbol')) {\n      this.passwordValidation.specialCharacters = true;\n    } else {\n      this.passwordValidation.specialCharacters = false;\n    }\n\n    if (passwordVerify.contains.includes('number')) {\n      this.passwordValidation.number = true;\n    } else {\n      this.passwordValidation.number = false;\n    }\n\n    if (passwordVerify.length >= 8) {\n      this.passwordValidation.length = true;\n    } else {\n      this.passwordValidation.length = false;\n    }\n\n    if (password.includes('.') || password.includes('-')) {\n      this.passwordValidation.specialCharacters = true;\n    }\n  }\n\n  onAddCarrier() {\n    this.submitCarrierDisabled = true;\n    const data = {\n      entityType: 'carrier',\n      firstName: this.firstName,\n      lastName: this.lastName,\n      userName: this.newUserName,\n      password: this.newPassword,\n      phone: this.phone,\n      email: this.newEmail,\n      fax: this.fax,\n      findingWay: this.findingWay\n    };\n\n    if (this.findingWay == \"Referral\") {\n      data.referral = this.referral;\n    }\n\n    try {\n      this.apiService.postData('carriers/onBoard', data).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            // val.message = val.message.replace(/\".*\"/, 'This Field');\n            this.errors[val.context.key] = val.message;\n          })).subscribe({\n            complete: () => {\n              this.throwErrors();\n              this.submitCarrierDisabled = false;\n            },\n            error: () => {},\n            next: () => {\n              this.submitCarrierDisabled = false;\n            }\n          });\n        },\n        next: res => {\n          $('#signUpMessage').modal('show');\n          this.cancel();\n          this.submitCarrierDisabled = false;\n          this.firstName = null;\n          this.lastName = null;\n          this.newUserName = null;\n          this.newPassword = null;\n          this.phone = null;\n          this.fax = null;\n          this.newEmail = null;\n          this.findingWay = null;\n          this.confirmPassword = null;\n        }\n      });\n    } catch (error) {\n      this.errors[error.context.key] = error.message;\n    }\n  }\n\n  cancel() {\n    $('#userSignUp').modal('hide');\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v === 'userName' || v === 'email' || v === 'carrierName') {\n        $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n      }\n\n      if (v === 'cognito') {\n        this.toaster.error(this.errors[v]);\n      }\n    });\n  }\n\n  openLogin() {\n    this.showLogin = true;\n  }\n\n};\n\nLoginComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: AuthService\n}, {\n  type: ToastrService\n}, {\n  type: NgbModal\n}, {\n  type: ListService\n}, {\n  type: RouteManagementServiceService\n}];\n\nLoginComponent.propDecorators = {\n  SignInModal: [{\n    type: ViewChild,\n    args: [\"SignInModal\", {\n      static: true\n    }]\n  }]\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module"}