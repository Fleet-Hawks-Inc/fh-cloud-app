{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./route-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./route-detail.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../services';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { HereMapService } from '../../../../services/here-map.service';\nlet RouteDetailComponent = class RouteDetailComponent {\n  constructor(apiService, router, toastr, spinner, route, hereMap) {\n    this.apiService = apiService;\n    this.router = router;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.route = route;\n    this.hereMap = hereMap;\n    this.pageTitle = \"Route Detail\";\n    this.routeID = '';\n    this.routeNo = '';\n    this.routeName = '';\n    this.notes = '';\n    this.stopInformation = [];\n    this.assetName = '-';\n    this.driverName = '-';\n    this.coDriverName = '-';\n    this.VehicleName = '-';\n    this.recurringType = '-';\n    this.miles = '-';\n    this.sourceAddress = '';\n    this.sourceCountryName = '';\n    this.sourceStateName = '';\n    this.sourceCityName = '';\n    this.sourceZipcode = '';\n    this.destinationAddress = '';\n    this.destinationCountryName = '';\n    this.destinationStateName = '';\n    this.destinationCityName = '';\n    this.destinationZipcode = '';\n    this.newCoords = [];\n    this.stopNumber = [];\n    this.recurringDate = '';\n    this.modalData = '';\n    this.sourceNotes = '';\n    this.destinationNotes = '';\n  }\n\n  ngOnInit() {\n    this.routeID = this.route.snapshot.params['routeID'];\n    this.fetchRoute();\n  }\n\n  fetchRoute() {\n    var _this = this;\n\n    this.apiService.getData('routes/' + this.routeID).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        result = result.Items[0];\n        _this.routeNo = result.routeNo;\n        _this.routeName = result.routeName;\n        _this.notes = result.notes;\n        _this.miles = result.miles;\n\n        if (result.stops != undefined) {\n          _this.stopInformation = result.stops;\n          _this.sourceNotes = result.stops[0].notes;\n\n          for (let k = 0; k < result.stops.length; k++) {\n            _this.stopNumber.push(k);\n          }\n\n          if (result.stops.length > 1) {\n            _this.destinationNotes = result.stops[result.stops.length - 1].notes;\n\n            _this.getCoords(result.stops);\n          }\n        }\n\n        if (result.recurring.route) {\n          if (result.recurring.type != undefined && result.recurring.type !== '') {\n            _this.recurringType = result.recurring.type;\n          }\n\n          if (result.recurring.date != undefined && result.recurring.date !== '') {\n            _this.recurringDate = result.recurring.date;\n          }\n        }\n\n        if (result.sourceInfo.address != '' && result.sourceInfo.address != undefined) {\n          _this.sourceAddress = result.sourceInfo.address;\n          _this.sourceCountryName = result.sourceInfo.country;\n          _this.sourceStateName = result.sourceInfo.state;\n          _this.sourceCityName = result.sourceInfo.city;\n          _this.sourceZipcode = result.sourceInfo.zipCode;\n        }\n\n        if (result.destInfo.address != '' && result.destInfo.address != undefined) {\n          _this.destinationAddress = result.destInfo.address;\n          _this.destinationCountryName = result.destInfo.country;\n          _this.destinationStateName = result.destInfo.state;\n          _this.destinationCityName = result.destInfo.city;\n          _this.destinationZipcode = result.destInfo.zipCode;\n        }\n\n        if (result.assetID != '' && result.assetID != undefined) {\n          _this.fetchAssets(result.assetID);\n        }\n\n        if (result.vehicleID != '' && result.vehicleID != undefined) {\n          _this.fetchVehicle(result.vehicleID);\n        }\n\n        if (result.driverID != '' && result.driverID != undefined) {\n          _this.fetchDriver(result.driverID, 'driver');\n        }\n\n        if (result.coDriverID != '' && result.coDriverID != undefined) {\n          _this.fetchDriver(result.coDriverID, 'codriver');\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  fetchAssets(assetID) {\n    this.apiService.getData('assets/' + assetID).subscribe(result => {\n      if (result.Items.length > 0) {\n        this.assetName = result.Items[0].assetIdentification;\n      }\n    });\n  }\n\n  fetchVehicle(vehicleID) {\n    this.apiService.getData('vehicles/' + vehicleID).subscribe(result => {\n      if (result.Items.length > 0) {\n        this.VehicleName = result.Items[0].vehicleIdentification;\n      }\n    });\n  }\n\n  fetchDriver(driverID, type) {\n    this.apiService.getData('drivers/' + driverID).subscribe(result => {\n      if (result.Items.length > 0) {\n        if (type == 'driver') {\n          this.driverName = result.Items[0].firstName + ' ' + result.Items[0].lastName;\n        } else {\n          this.coDriverName = result.Items[0].firstName + ' ' + result.Items[0].lastName;\n        }\n      }\n    });\n  }\n\n  mapShow() {\n    this.hereMap.mapSetAPI();\n    this.hereMap.mapInit();\n  }\n  /**\r\n   * pass trips coords to show on the map\r\n   * @param data\r\n   */\n\n\n  getCoords(data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.mapShow();\n\n      _this2.newCoords = [];\n\n      for (let i = 0; i < data.length; i++) {\n        const element = data[i];\n\n        _this2.newCoords.push(`${element.lat},${element.lng}`);\n      }\n\n      _this2.hereMap.calculateRoute(_this2.newCoords);\n    })();\n  }\n\n  openDetailModal(data) {\n    this.modalData = data;\n    $('#routeNotes').modal('show');\n  }\n\n};\n\nRouteDetailComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ActivatedRoute\n}, {\n  type: HereMapService\n}];\n\nRouteDetailComponent = __decorate([Component({\n  selector: 'app-route-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], RouteDetailComponent);\nexport { RouteDetailComponent };","map":null,"metadata":{},"sourceType":"module"}