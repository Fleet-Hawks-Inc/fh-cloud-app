{"ast":null,"code":"var _asyncToGenerator = require(\"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\n/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/web/pdf_viewer\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/web/pdf_viewer\"] = factory();else root[\"pdfjs-dist/web/pdf_viewer\"] = root.pdfjsViewer = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __w_pdfjs_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __w_pdfjs_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __w_pdfjs_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__w_pdfjs_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __w_pdfjs_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __w_pdfjs_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __w_pdfjs_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __w_pdfjs_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __w_pdfjs_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __w_pdfjs_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __w_pdfjs_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __w_pdfjs_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __w_pdfjs_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __w_pdfjs_require__(__w_pdfjs_require__.s = 0);\n      /******/\n    }([\n      /* 0 */\n\n      /***/\n\n      /* 1 */\n\n      /***/\n\n      /* 2 */\n\n      /***/\n\n      /* 3 */\n\n      /***/\n\n      /* 4 */\n\n      /***/\n\n      /* 5 */\n\n      /***/\n\n      /* 6 */\n\n      /***/\n\n      /* 7 */\n\n      /***/\n\n      /* 8 */\n\n      /***/\n\n      /* 9 */\n\n      /***/\n\n      /* 10 */\n\n      /***/\n\n      /* 11 */\n\n      /***/\n\n      /* 12 */\n\n      /***/\n\n      /* 13 */\n\n      /***/\n\n      /* 14 */\n\n      /***/\n\n      /* 15 */\n\n      /***/\n\n      /* 16 */\n\n      /***/\n\n      /* 17 */\n\n      /***/\n\n      /******/\n    function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      Object.defineProperty(exports, \"AnnotationLayerBuilder\", {\n        enumerable: true,\n        get: function () {\n          return _annotation_layer_builder.AnnotationLayerBuilder;\n        }\n      });\n      Object.defineProperty(exports, \"DefaultAnnotationLayerFactory\", {\n        enumerable: true,\n        get: function () {\n          return _annotation_layer_builder.DefaultAnnotationLayerFactory;\n        }\n      });\n      Object.defineProperty(exports, \"DefaultTextLayerFactory\", {\n        enumerable: true,\n        get: function () {\n          return _text_layer_builder.DefaultTextLayerFactory;\n        }\n      });\n      Object.defineProperty(exports, \"TextLayerBuilder\", {\n        enumerable: true,\n        get: function () {\n          return _text_layer_builder.TextLayerBuilder;\n        }\n      });\n      Object.defineProperty(exports, \"EventBus\", {\n        enumerable: true,\n        get: function () {\n          return _ui_utils.EventBus;\n        }\n      });\n      Object.defineProperty(exports, \"NullL10n\", {\n        enumerable: true,\n        get: function () {\n          return _ui_utils.NullL10n;\n        }\n      });\n      Object.defineProperty(exports, \"ProgressBar\", {\n        enumerable: true,\n        get: function () {\n          return _ui_utils.ProgressBar;\n        }\n      });\n      Object.defineProperty(exports, \"PDFLinkService\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_link_service.PDFLinkService;\n        }\n      });\n      Object.defineProperty(exports, \"SimpleLinkService\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_link_service.SimpleLinkService;\n        }\n      });\n      Object.defineProperty(exports, \"DownloadManager\", {\n        enumerable: true,\n        get: function () {\n          return _download_manager.DownloadManager;\n        }\n      });\n      Object.defineProperty(exports, \"GenericL10n\", {\n        enumerable: true,\n        get: function () {\n          return _genericl10n.GenericL10n;\n        }\n      });\n      Object.defineProperty(exports, \"PDFFindController\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_find_controller.PDFFindController;\n        }\n      });\n      Object.defineProperty(exports, \"PDFHistory\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_history.PDFHistory;\n        }\n      });\n      Object.defineProperty(exports, \"PDFPageView\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_page_view.PDFPageView;\n        }\n      });\n      Object.defineProperty(exports, \"PDFSinglePageViewer\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_single_page_viewer.PDFSinglePageViewer;\n        }\n      });\n      Object.defineProperty(exports, \"PDFViewer\", {\n        enumerable: true,\n        get: function () {\n          return _pdf_viewer.PDFViewer;\n        }\n      });\n\n      var _annotation_layer_builder = __w_pdfjs_require__(1);\n\n      var _text_layer_builder = __w_pdfjs_require__(5);\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      var _pdf_link_service = __w_pdfjs_require__(4);\n\n      var _download_manager = __w_pdfjs_require__(6);\n\n      var _genericl10n = __w_pdfjs_require__(8);\n\n      var _pdf_find_controller = __w_pdfjs_require__(10);\n\n      var _pdf_history = __w_pdfjs_require__(12);\n\n      var _pdf_page_view = __w_pdfjs_require__(13);\n\n      var _pdf_single_page_viewer = __w_pdfjs_require__(15);\n\n      var _pdf_viewer = __w_pdfjs_require__(17);\n\n      const pdfjsVersion = '2.5.207';\n      const pdfjsBuild = '0974d605';\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.DefaultAnnotationLayerFactory = exports.AnnotationLayerBuilder = void 0;\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      var _pdf_link_service = __w_pdfjs_require__(4);\n\n      class AnnotationLayerBuilder {\n        constructor({\n          pageDiv,\n          pdfPage,\n          linkService,\n          downloadManager,\n          imageResourcesPath = \"\",\n          renderInteractiveForms = false,\n          l10n = _ui_utils.NullL10n\n        }) {\n          this.pageDiv = pageDiv;\n          this.pdfPage = pdfPage;\n          this.linkService = linkService;\n          this.downloadManager = downloadManager;\n          this.imageResourcesPath = imageResourcesPath;\n          this.renderInteractiveForms = renderInteractiveForms;\n          this.l10n = l10n;\n          this.div = null;\n          this._cancelled = false;\n        }\n\n        render(viewport, intent = \"display\") {\n          this.pdfPage.getAnnotations({\n            intent\n          }).then(annotations => {\n            if (this._cancelled) {\n              return;\n            }\n\n            const parameters = {\n              viewport: viewport.clone({\n                dontFlip: true\n              }),\n              div: this.div,\n              annotations,\n              page: this.pdfPage,\n              imageResourcesPath: this.imageResourcesPath,\n              renderInteractiveForms: this.renderInteractiveForms,\n              linkService: this.linkService,\n              downloadManager: this.downloadManager\n            };\n\n            if (this.div) {\n              _pdfjsLib.AnnotationLayer.update(parameters);\n            } else {\n              if (annotations.length === 0) {\n                return;\n              }\n\n              this.div = document.createElement(\"div\");\n              this.div.className = \"annotationLayer\";\n              this.pageDiv.appendChild(this.div);\n              parameters.div = this.div;\n\n              _pdfjsLib.AnnotationLayer.render(parameters);\n\n              this.l10n.translate(this.div);\n            }\n          });\n        }\n\n        cancel() {\n          this._cancelled = true;\n        }\n\n        hide() {\n          if (!this.div) {\n            return;\n          }\n\n          this.div.setAttribute(\"hidden\", \"true\");\n        }\n\n      }\n\n      exports.AnnotationLayerBuilder = AnnotationLayerBuilder;\n\n      class DefaultAnnotationLayerFactory {\n        createAnnotationLayerBuilder(pageDiv, pdfPage, imageResourcesPath = \"\", renderInteractiveForms = false, l10n = _ui_utils.NullL10n) {\n          return new AnnotationLayerBuilder({\n            pageDiv,\n            pdfPage,\n            imageResourcesPath,\n            renderInteractiveForms,\n            linkService: new _pdf_link_service.SimpleLinkService(),\n            l10n\n          });\n        }\n\n      }\n\n      exports.DefaultAnnotationLayerFactory = DefaultAnnotationLayerFactory;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      let pdfjsLib;\n\n      if (typeof window !== \"undefined\" && window[\"pdfjs-dist/build/pdf\"]) {\n        pdfjsLib = window[\"pdfjs-dist/build/pdf\"];\n      } else {\n        pdfjsLib = require(\"../build/pdf.js\");\n      }\n\n      module.exports = pdfjsLib;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.isValidRotation = isValidRotation;\n      exports.isValidScrollMode = isValidScrollMode;\n      exports.isValidSpreadMode = isValidSpreadMode;\n      exports.isPortraitOrientation = isPortraitOrientation;\n      exports.clamp = clamp;\n      exports.getPDFFileNameFromURL = getPDFFileNameFromURL;\n      exports.noContextMenuHandler = noContextMenuHandler;\n      exports.parseQueryString = parseQueryString;\n      exports.backtrackBeforeAllVisibleElements = backtrackBeforeAllVisibleElements;\n      exports.getVisibleElements = getVisibleElements;\n      exports.roundToDivide = roundToDivide;\n      exports.getPageSizeInches = getPageSizeInches;\n      exports.approximateFraction = approximateFraction;\n      exports.getOutputScale = getOutputScale;\n      exports.scrollIntoView = scrollIntoView;\n      exports.watchScroll = watchScroll;\n      exports.binarySearchFirstItem = binarySearchFirstItem;\n      exports.normalizeWheelEventDelta = normalizeWheelEventDelta;\n      exports.waitOnEventOrTimeout = waitOnEventOrTimeout;\n      exports.moveToEndOfArray = moveToEndOfArray;\n      exports.WaitOnType = exports.animationStarted = exports.ProgressBar = exports.EventBus = exports.NullL10n = exports.SpreadMode = exports.ScrollMode = exports.TextLayerMode = exports.RendererType = exports.PresentationModeState = exports.VERTICAL_PADDING = exports.SCROLLBAR_PADDING = exports.MAX_AUTO_SCALE = exports.UNKNOWN_SCALE = exports.MAX_SCALE = exports.MIN_SCALE = exports.DEFAULT_SCALE = exports.DEFAULT_SCALE_VALUE = exports.CSS_UNITS = exports.AutoPrintRegExp = void 0;\n      const CSS_UNITS = 96.0 / 72.0;\n      exports.CSS_UNITS = CSS_UNITS;\n      const DEFAULT_SCALE_VALUE = \"auto\";\n      exports.DEFAULT_SCALE_VALUE = DEFAULT_SCALE_VALUE;\n      const DEFAULT_SCALE = 1.0;\n      exports.DEFAULT_SCALE = DEFAULT_SCALE;\n      const MIN_SCALE = 0.1;\n      exports.MIN_SCALE = MIN_SCALE;\n      const MAX_SCALE = 10.0;\n      exports.MAX_SCALE = MAX_SCALE;\n      const UNKNOWN_SCALE = 0;\n      exports.UNKNOWN_SCALE = UNKNOWN_SCALE;\n      const MAX_AUTO_SCALE = 1.25;\n      exports.MAX_AUTO_SCALE = MAX_AUTO_SCALE;\n      const SCROLLBAR_PADDING = 40;\n      exports.SCROLLBAR_PADDING = SCROLLBAR_PADDING;\n      const VERTICAL_PADDING = 5;\n      exports.VERTICAL_PADDING = VERTICAL_PADDING;\n      const PresentationModeState = {\n        UNKNOWN: 0,\n        NORMAL: 1,\n        CHANGING: 2,\n        FULLSCREEN: 3\n      };\n      exports.PresentationModeState = PresentationModeState;\n      const RendererType = {\n        CANVAS: \"canvas\",\n        SVG: \"svg\"\n      };\n      exports.RendererType = RendererType;\n      const TextLayerMode = {\n        DISABLE: 0,\n        ENABLE: 1,\n        ENABLE_ENHANCE: 2\n      };\n      exports.TextLayerMode = TextLayerMode;\n      const ScrollMode = {\n        UNKNOWN: -1,\n        VERTICAL: 0,\n        HORIZONTAL: 1,\n        WRAPPED: 2\n      };\n      exports.ScrollMode = ScrollMode;\n      const SpreadMode = {\n        UNKNOWN: -1,\n        NONE: 0,\n        ODD: 1,\n        EVEN: 2\n      };\n      exports.SpreadMode = SpreadMode;\n      const AutoPrintRegExp = /\\bprint\\s*\\(/;\n      exports.AutoPrintRegExp = AutoPrintRegExp;\n\n      function formatL10nValue(text, args) {\n        if (!args) {\n          return text;\n        }\n\n        return text.replace(/\\{\\{\\s*(\\w+)\\s*\\}\\}/g, (all, name) => {\n          return name in args ? args[name] : \"{{\" + name + \"}}\";\n        });\n      }\n\n      const NullL10n = {\n        getLanguage() {\n          return _asyncToGenerator(function* () {\n            return \"en-us\";\n          })();\n        },\n\n        getDirection() {\n          return _asyncToGenerator(function* () {\n            return \"ltr\";\n          })();\n        },\n\n        get(property, args, fallback) {\n          return _asyncToGenerator(function* () {\n            return formatL10nValue(fallback, args);\n          })();\n        },\n\n        translate(element) {\n          return _asyncToGenerator(function* () {})();\n        }\n\n      };\n      exports.NullL10n = NullL10n;\n\n      function getOutputScale(ctx) {\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        const backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n        const pixelRatio = devicePixelRatio / backingStoreRatio;\n        return {\n          sx: pixelRatio,\n          sy: pixelRatio,\n          scaled: pixelRatio !== 1\n        };\n      }\n\n      function scrollIntoView(element, spot, skipOverflowHiddenElements = false) {\n        let parent = element.offsetParent;\n\n        if (!parent) {\n          console.error(\"offsetParent is not set -- cannot scroll\");\n          return;\n        }\n\n        let offsetY = element.offsetTop + element.clientTop;\n        let offsetX = element.offsetLeft + element.clientLeft;\n\n        while (parent.clientHeight === parent.scrollHeight && parent.clientWidth === parent.scrollWidth || skipOverflowHiddenElements && getComputedStyle(parent).overflow === \"hidden\") {\n          if (parent.dataset._scaleY) {\n            offsetY /= parent.dataset._scaleY;\n            offsetX /= parent.dataset._scaleX;\n          }\n\n          offsetY += parent.offsetTop;\n          offsetX += parent.offsetLeft;\n          parent = parent.offsetParent;\n\n          if (!parent) {\n            return;\n          }\n        }\n\n        if (spot) {\n          if (spot.top !== undefined) {\n            offsetY += spot.top;\n          }\n\n          if (spot.left !== undefined) {\n            offsetX += spot.left;\n            parent.scrollLeft = offsetX;\n          }\n        }\n\n        parent.scrollTop = offsetY;\n      }\n\n      function watchScroll(viewAreaElement, callback) {\n        const debounceScroll = function (evt) {\n          if (rAF) {\n            return;\n          }\n\n          rAF = window.requestAnimationFrame(function viewAreaElementScrolled() {\n            rAF = null;\n            const currentX = viewAreaElement.scrollLeft;\n            const lastX = state.lastX;\n\n            if (currentX !== lastX) {\n              state.right = currentX > lastX;\n            }\n\n            state.lastX = currentX;\n            const currentY = viewAreaElement.scrollTop;\n            const lastY = state.lastY;\n\n            if (currentY !== lastY) {\n              state.down = currentY > lastY;\n            }\n\n            state.lastY = currentY;\n            callback(state);\n          });\n        };\n\n        const state = {\n          right: true,\n          down: true,\n          lastX: viewAreaElement.scrollLeft,\n          lastY: viewAreaElement.scrollTop,\n          _eventHandler: debounceScroll\n        };\n        let rAF = null;\n        viewAreaElement.addEventListener(\"scroll\", debounceScroll, true);\n        return state;\n      }\n\n      function parseQueryString(query) {\n        const parts = query.split(\"&\");\n        const params = Object.create(null);\n\n        for (let i = 0, ii = parts.length; i < ii; ++i) {\n          const param = parts[i].split(\"=\");\n          const key = param[0].toLowerCase();\n          const value = param.length > 1 ? param[1] : null;\n          params[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n\n        return params;\n      }\n\n      function binarySearchFirstItem(items, condition) {\n        let minIndex = 0;\n        let maxIndex = items.length - 1;\n\n        if (maxIndex < 0 || !condition(items[maxIndex])) {\n          return items.length;\n        }\n\n        if (condition(items[minIndex])) {\n          return minIndex;\n        }\n\n        while (minIndex < maxIndex) {\n          const currentIndex = minIndex + maxIndex >> 1;\n          const currentItem = items[currentIndex];\n\n          if (condition(currentItem)) {\n            maxIndex = currentIndex;\n          } else {\n            minIndex = currentIndex + 1;\n          }\n        }\n\n        return minIndex;\n      }\n\n      function approximateFraction(x) {\n        if (Math.floor(x) === x) {\n          return [x, 1];\n        }\n\n        const xinv = 1 / x;\n        const limit = 8;\n\n        if (xinv > limit) {\n          return [1, limit];\n        } else if (Math.floor(xinv) === xinv) {\n          return [1, xinv];\n        }\n\n        const x_ = x > 1 ? xinv : x;\n        let a = 0,\n            b = 1,\n            c = 1,\n            d = 1;\n\n        while (true) {\n          const p = a + c,\n                q = b + d;\n\n          if (q > limit) {\n            break;\n          }\n\n          if (x_ <= p / q) {\n            c = p;\n            d = q;\n          } else {\n            a = p;\n            b = q;\n          }\n        }\n\n        let result;\n\n        if (x_ - a / b < c / d - x_) {\n          result = x_ === x ? [a, b] : [b, a];\n        } else {\n          result = x_ === x ? [c, d] : [d, c];\n        }\n\n        return result;\n      }\n\n      function roundToDivide(x, div) {\n        const r = x % div;\n        return r === 0 ? x : Math.round(x - r + div);\n      }\n\n      function getPageSizeInches({\n        view,\n        userUnit,\n        rotate\n      }) {\n        const [x1, y1, x2, y2] = view;\n        const changeOrientation = rotate % 180 !== 0;\n        const width = (x2 - x1) / 72 * userUnit;\n        const height = (y2 - y1) / 72 * userUnit;\n        return {\n          width: changeOrientation ? height : width,\n          height: changeOrientation ? width : height\n        };\n      }\n\n      function backtrackBeforeAllVisibleElements(index, views, top) {\n        if (index < 2) {\n          return index;\n        }\n\n        let elt = views[index].div;\n        let pageTop = elt.offsetTop + elt.clientTop;\n\n        if (pageTop >= top) {\n          elt = views[index - 1].div;\n          pageTop = elt.offsetTop + elt.clientTop;\n        }\n\n        for (let i = index - 2; i >= 0; --i) {\n          elt = views[i].div;\n\n          if (elt.offsetTop + elt.clientTop + elt.clientHeight <= pageTop) {\n            break;\n          }\n\n          index = i;\n        }\n\n        return index;\n      }\n\n      function getVisibleElements(scrollEl, views, sortByVisibility = false, horizontal = false) {\n        const top = scrollEl.scrollTop,\n              bottom = top + scrollEl.clientHeight;\n        const left = scrollEl.scrollLeft,\n              right = left + scrollEl.clientWidth;\n\n        function isElementBottomAfterViewTop(view) {\n          const element = view.div;\n          const elementBottom = element.offsetTop + element.clientTop + element.clientHeight;\n          return elementBottom > top;\n        }\n\n        function isElementRightAfterViewLeft(view) {\n          const element = view.div;\n          const elementRight = element.offsetLeft + element.clientLeft + element.clientWidth;\n          return elementRight > left;\n        }\n\n        const visible = [],\n              numViews = views.length;\n        let firstVisibleElementInd = numViews === 0 ? 0 : binarySearchFirstItem(views, horizontal ? isElementRightAfterViewLeft : isElementBottomAfterViewTop);\n\n        if (firstVisibleElementInd > 0 && firstVisibleElementInd < numViews && !horizontal) {\n          firstVisibleElementInd = backtrackBeforeAllVisibleElements(firstVisibleElementInd, views, top);\n        }\n\n        let lastEdge = horizontal ? right : -1;\n\n        for (let i = firstVisibleElementInd; i < numViews; i++) {\n          const view = views[i],\n                element = view.div;\n          const currentWidth = element.offsetLeft + element.clientLeft;\n          const currentHeight = element.offsetTop + element.clientTop;\n          const viewWidth = element.clientWidth,\n                viewHeight = element.clientHeight;\n          const viewRight = currentWidth + viewWidth;\n          const viewBottom = currentHeight + viewHeight;\n\n          if (lastEdge === -1) {\n            if (viewBottom >= bottom) {\n              lastEdge = viewBottom;\n            }\n          } else if ((horizontal ? currentWidth : currentHeight) > lastEdge) {\n            break;\n          }\n\n          if (viewBottom <= top || currentHeight >= bottom || viewRight <= left || currentWidth >= right) {\n            continue;\n          }\n\n          const hiddenHeight = Math.max(0, top - currentHeight) + Math.max(0, viewBottom - bottom);\n          const hiddenWidth = Math.max(0, left - currentWidth) + Math.max(0, viewRight - right);\n          const percent = (viewHeight - hiddenHeight) * (viewWidth - hiddenWidth) * 100 / viewHeight / viewWidth | 0;\n          visible.push({\n            id: view.id,\n            x: currentWidth,\n            y: currentHeight,\n            view,\n            percent\n          });\n        }\n\n        const first = visible[0],\n              last = visible[visible.length - 1];\n\n        if (sortByVisibility) {\n          visible.sort(function (a, b) {\n            const pc = a.percent - b.percent;\n\n            if (Math.abs(pc) > 0.001) {\n              return -pc;\n            }\n\n            return a.id - b.id;\n          });\n        }\n\n        return {\n          first,\n          last,\n          views: visible\n        };\n      }\n\n      function noContextMenuHandler(evt) {\n        evt.preventDefault();\n      }\n\n      function isDataSchema(url) {\n        let i = 0;\n        const ii = url.length;\n\n        while (i < ii && url[i].trim() === \"\") {\n          i++;\n        }\n\n        return url.substring(i, i + 5).toLowerCase() === \"data:\";\n      }\n\n      function getPDFFileNameFromURL(url, defaultFilename = \"document.pdf\") {\n        if (typeof url !== \"string\") {\n          return defaultFilename;\n        }\n\n        if (isDataSchema(url)) {\n          console.warn(\"getPDFFileNameFromURL: \" + 'ignoring \"data:\" URL for performance reasons.');\n          return defaultFilename;\n        }\n\n        const reURI = /^(?:(?:[^:]+:)?\\/\\/[^\\/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n        const reFilename = /[^\\/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n        const splitURI = reURI.exec(url);\n        let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n        if (suggestedFilename) {\n          suggestedFilename = suggestedFilename[0];\n\n          if (suggestedFilename.includes(\"%\")) {\n            try {\n              suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n            } catch (ex) {}\n          }\n        }\n\n        return suggestedFilename || defaultFilename;\n      }\n\n      function normalizeWheelEventDelta(evt) {\n        let delta = Math.sqrt(evt.deltaX * evt.deltaX + evt.deltaY * evt.deltaY);\n        const angle = Math.atan2(evt.deltaY, evt.deltaX);\n\n        if (-0.25 * Math.PI < angle && angle < 0.75 * Math.PI) {\n          delta = -delta;\n        }\n\n        const MOUSE_DOM_DELTA_PIXEL_MODE = 0;\n        const MOUSE_DOM_DELTA_LINE_MODE = 1;\n        const MOUSE_PIXELS_PER_LINE = 30;\n        const MOUSE_LINES_PER_PAGE = 30;\n\n        if (evt.deltaMode === MOUSE_DOM_DELTA_PIXEL_MODE) {\n          delta /= MOUSE_PIXELS_PER_LINE * MOUSE_LINES_PER_PAGE;\n        } else if (evt.deltaMode === MOUSE_DOM_DELTA_LINE_MODE) {\n          delta /= MOUSE_LINES_PER_PAGE;\n        }\n\n        return delta;\n      }\n\n      function isValidRotation(angle) {\n        return Number.isInteger(angle) && angle % 90 === 0;\n      }\n\n      function isValidScrollMode(mode) {\n        return Number.isInteger(mode) && Object.values(ScrollMode).includes(mode) && mode !== ScrollMode.UNKNOWN;\n      }\n\n      function isValidSpreadMode(mode) {\n        return Number.isInteger(mode) && Object.values(SpreadMode).includes(mode) && mode !== SpreadMode.UNKNOWN;\n      }\n\n      function isPortraitOrientation(size) {\n        return size.width <= size.height;\n      }\n\n      const WaitOnType = {\n        EVENT: \"event\",\n        TIMEOUT: \"timeout\"\n      };\n      exports.WaitOnType = WaitOnType;\n\n      function waitOnEventOrTimeout({\n        target,\n        name,\n        delay = 0\n      }) {\n        return new Promise(function (resolve, reject) {\n          if (typeof target !== \"object\" || !(name && typeof name === \"string\") || !(Number.isInteger(delay) && delay >= 0)) {\n            throw new Error(\"waitOnEventOrTimeout - invalid parameters.\");\n          }\n\n          function handler(type) {\n            if (target instanceof EventBus) {\n              target._off(name, eventHandler);\n            } else {\n              target.removeEventListener(name, eventHandler);\n            }\n\n            if (timeout) {\n              clearTimeout(timeout);\n            }\n\n            resolve(type);\n          }\n\n          const eventHandler = handler.bind(null, WaitOnType.EVENT);\n\n          if (target instanceof EventBus) {\n            target._on(name, eventHandler);\n          } else {\n            target.addEventListener(name, eventHandler);\n          }\n\n          const timeoutHandler = handler.bind(null, WaitOnType.TIMEOUT);\n          const timeout = setTimeout(timeoutHandler, delay);\n        });\n      }\n\n      const animationStarted = new Promise(function (resolve) {\n        window.requestAnimationFrame(resolve);\n      });\n      exports.animationStarted = animationStarted;\n\n      function dispatchDOMEvent(eventName, args = null) {\n        throw new Error(\"Not implemented: dispatchDOMEvent\");\n      }\n\n      class EventBus {\n        constructor(options) {\n          this._listeners = Object.create(null);\n        }\n\n        on(eventName, listener) {\n          this._on(eventName, listener, {\n            external: true\n          });\n        }\n\n        off(eventName, listener) {\n          this._off(eventName, listener, {\n            external: true\n          });\n        }\n\n        dispatch(eventName) {\n          const eventListeners = this._listeners[eventName];\n\n          if (!eventListeners || eventListeners.length === 0) {\n            return;\n          }\n\n          const args = Array.prototype.slice.call(arguments, 1);\n          let externalListeners;\n          eventListeners.slice(0).forEach(function ({\n            listener,\n            external\n          }) {\n            if (external) {\n              if (!externalListeners) {\n                externalListeners = [];\n              }\n\n              externalListeners.push(listener);\n              return;\n            }\n\n            listener.apply(null, args);\n          });\n\n          if (externalListeners) {\n            externalListeners.forEach(function (listener) {\n              listener.apply(null, args);\n            });\n            externalListeners = null;\n          }\n        }\n\n        _on(eventName, listener, options = null) {\n          let eventListeners = this._listeners[eventName];\n\n          if (!eventListeners) {\n            this._listeners[eventName] = eventListeners = [];\n          }\n\n          eventListeners.push({\n            listener,\n            external: (options && options.external) === true\n          });\n        }\n\n        _off(eventName, listener, options = null) {\n          const eventListeners = this._listeners[eventName];\n\n          if (!eventListeners) {\n            return;\n          }\n\n          for (let i = 0, ii = eventListeners.length; i < ii; i++) {\n            if (eventListeners[i].listener === listener) {\n              eventListeners.splice(i, 1);\n              return;\n            }\n          }\n        }\n\n      }\n\n      exports.EventBus = EventBus;\n\n      function clamp(v, min, max) {\n        return Math.min(Math.max(v, min), max);\n      }\n\n      class ProgressBar {\n        constructor(id, {\n          height,\n          width,\n          units\n        } = {}) {\n          this.visible = true;\n          this.div = document.querySelector(id + \" .progress\");\n          this.bar = this.div.parentNode;\n          this.height = height || 100;\n          this.width = width || 100;\n          this.units = units || \"%\";\n          this.div.style.height = this.height + this.units;\n          this.percent = 0;\n        }\n\n        _updateBar() {\n          if (this._indeterminate) {\n            this.div.classList.add(\"indeterminate\");\n            this.div.style.width = this.width + this.units;\n            return;\n          }\n\n          this.div.classList.remove(\"indeterminate\");\n          const progressSize = this.width * this._percent / 100;\n          this.div.style.width = progressSize + this.units;\n        }\n\n        get percent() {\n          return this._percent;\n        }\n\n        set percent(val) {\n          this._indeterminate = isNaN(val);\n          this._percent = clamp(val, 0, 100);\n\n          this._updateBar();\n        }\n\n        setWidth(viewer) {\n          if (!viewer) {\n            return;\n          }\n\n          const container = viewer.parentNode;\n          const scrollbarWidth = container.offsetWidth - viewer.offsetWidth;\n\n          if (scrollbarWidth > 0) {\n            this.bar.style.width = `calc(100% - ${scrollbarWidth}px)`;\n          }\n        }\n\n        hide() {\n          if (!this.visible) {\n            return;\n          }\n\n          this.visible = false;\n          this.bar.classList.add(\"hidden\");\n          document.body.classList.remove(\"loadingInProgress\");\n        }\n\n        show() {\n          if (this.visible) {\n            return;\n          }\n\n          this.visible = true;\n          document.body.classList.add(\"loadingInProgress\");\n          this.bar.classList.remove(\"hidden\");\n        }\n\n      }\n\n      exports.ProgressBar = ProgressBar;\n\n      function moveToEndOfArray(arr, condition) {\n        const moved = [],\n              len = arr.length;\n        let write = 0;\n\n        for (let read = 0; read < len; ++read) {\n          if (condition(arr[read])) {\n            moved.push(arr[read]);\n          } else {\n            arr[write] = arr[read];\n            ++write;\n          }\n        }\n\n        for (let read = 0; write < len; ++read, ++write) {\n          arr[write] = moved[read];\n        }\n      }\n      /***/\n\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.SimpleLinkService = exports.PDFLinkService = void 0;\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      class PDFLinkService {\n        constructor({\n          eventBus,\n          externalLinkTarget = null,\n          externalLinkRel = null,\n          externalLinkEnabled = true,\n          ignoreDestinationZoom = false\n        } = {}) {\n          this.eventBus = eventBus;\n          this.externalLinkTarget = externalLinkTarget;\n          this.externalLinkRel = externalLinkRel;\n          this.externalLinkEnabled = externalLinkEnabled;\n          this._ignoreDestinationZoom = ignoreDestinationZoom;\n          this.baseUrl = null;\n          this.pdfDocument = null;\n          this.pdfViewer = null;\n          this.pdfHistory = null;\n          this._pagesRefCache = null;\n        }\n\n        setDocument(pdfDocument, baseUrl = null) {\n          this.baseUrl = baseUrl;\n          this.pdfDocument = pdfDocument;\n          this._pagesRefCache = Object.create(null);\n        }\n\n        setViewer(pdfViewer) {\n          this.pdfViewer = pdfViewer;\n        }\n\n        setHistory(pdfHistory) {\n          this.pdfHistory = pdfHistory;\n        }\n\n        get pagesCount() {\n          return this.pdfDocument ? this.pdfDocument.numPages : 0;\n        }\n\n        get page() {\n          return this.pdfViewer.currentPageNumber;\n        }\n\n        set page(value) {\n          this.pdfViewer.currentPageNumber = value;\n        }\n\n        get rotation() {\n          return this.pdfViewer.pagesRotation;\n        }\n\n        set rotation(value) {\n          this.pdfViewer.pagesRotation = value;\n        }\n\n        navigateTo(dest) {\n          const goToDestination = ({\n            namedDest,\n            explicitDest\n          }) => {\n            const destRef = explicitDest[0];\n            let pageNumber;\n\n            if (destRef instanceof Object) {\n              pageNumber = this._cachedPageNumber(destRef);\n\n              if (pageNumber === null) {\n                this.pdfDocument.getPageIndex(destRef).then(pageIndex => {\n                  this.cachePageRef(pageIndex + 1, destRef);\n                  goToDestination({\n                    namedDest,\n                    explicitDest\n                  });\n                }).catch(() => {\n                  console.error(`PDFLinkService.navigateTo: \"${destRef}\" is not ` + `a valid page reference, for dest=\"${dest}\".`);\n                });\n                return;\n              }\n            } else if (Number.isInteger(destRef)) {\n              pageNumber = destRef + 1;\n            } else {\n              console.error(`PDFLinkService.navigateTo: \"${destRef}\" is not ` + `a valid destination reference, for dest=\"${dest}\".`);\n              return;\n            }\n\n            if (!pageNumber || pageNumber < 1 || pageNumber > this.pagesCount) {\n              console.error(`PDFLinkService.navigateTo: \"${pageNumber}\" is not ` + `a valid page number, for dest=\"${dest}\".`);\n              return;\n            }\n\n            if (this.pdfHistory) {\n              this.pdfHistory.pushCurrentPosition();\n              this.pdfHistory.push({\n                namedDest,\n                explicitDest,\n                pageNumber\n              });\n            }\n\n            this.pdfViewer.scrollPageIntoView({\n              pageNumber,\n              destArray: explicitDest,\n              ignoreDestinationZoom: this._ignoreDestinationZoom\n            });\n          };\n\n          new Promise((resolve, reject) => {\n            if (typeof dest === \"string\") {\n              this.pdfDocument.getDestination(dest).then(destArray => {\n                resolve({\n                  namedDest: dest,\n                  explicitDest: destArray\n                });\n              });\n              return;\n            }\n\n            resolve({\n              namedDest: \"\",\n              explicitDest: dest\n            });\n          }).then(data => {\n            if (!Array.isArray(data.explicitDest)) {\n              console.error(`PDFLinkService.navigateTo: \"${data.explicitDest}\" is` + ` not a valid destination array, for dest=\"${dest}\".`);\n              return;\n            }\n\n            goToDestination(data);\n          });\n        }\n\n        getDestinationHash(dest) {\n          if (typeof dest === \"string\") {\n            return this.getAnchorUrl(\"#\" + escape(dest));\n          }\n\n          if (Array.isArray(dest)) {\n            const str = JSON.stringify(dest);\n            return this.getAnchorUrl(\"#\" + escape(str));\n          }\n\n          return this.getAnchorUrl(\"\");\n        }\n\n        getAnchorUrl(anchor) {\n          return (this.baseUrl || \"\") + anchor;\n        }\n\n        setHash(hash) {\n          let pageNumber, dest;\n\n          if (hash.includes(\"=\")) {\n            const params = (0, _ui_utils.parseQueryString)(hash);\n\n            if (\"search\" in params) {\n              this.eventBus.dispatch(\"findfromurlhash\", {\n                source: this,\n                query: params.search.replace(/\"/g, \"\"),\n                phraseSearch: params.phrase === \"true\"\n              });\n            }\n\n            if (\"page\" in params) {\n              pageNumber = params.page | 0 || 1;\n            }\n\n            if (\"zoom\" in params) {\n              const zoomArgs = params.zoom.split(\",\");\n              const zoomArg = zoomArgs[0];\n              const zoomArgNumber = parseFloat(zoomArg);\n\n              if (!zoomArg.includes(\"Fit\")) {\n                dest = [null, {\n                  name: \"XYZ\"\n                }, zoomArgs.length > 1 ? zoomArgs[1] | 0 : null, zoomArgs.length > 2 ? zoomArgs[2] | 0 : null, zoomArgNumber ? zoomArgNumber / 100 : zoomArg];\n              } else {\n                if (zoomArg === \"Fit\" || zoomArg === \"FitB\") {\n                  dest = [null, {\n                    name: zoomArg\n                  }];\n                } else if (zoomArg === \"FitH\" || zoomArg === \"FitBH\" || zoomArg === \"FitV\" || zoomArg === \"FitBV\") {\n                  dest = [null, {\n                    name: zoomArg\n                  }, zoomArgs.length > 1 ? zoomArgs[1] | 0 : null];\n                } else if (zoomArg === \"FitR\") {\n                  if (zoomArgs.length !== 5) {\n                    console.error('PDFLinkService.setHash: Not enough parameters for \"FitR\".');\n                  } else {\n                    dest = [null, {\n                      name: zoomArg\n                    }, zoomArgs[1] | 0, zoomArgs[2] | 0, zoomArgs[3] | 0, zoomArgs[4] | 0];\n                  }\n                } else {\n                  console.error(`PDFLinkService.setHash: \"${zoomArg}\" is not ` + \"a valid zoom value.\");\n                }\n              }\n            }\n\n            if (dest) {\n              this.pdfViewer.scrollPageIntoView({\n                pageNumber: pageNumber || this.page,\n                destArray: dest,\n                allowNegativeOffset: true\n              });\n            } else if (pageNumber) {\n              this.page = pageNumber;\n            }\n\n            if (\"pagemode\" in params) {\n              this.eventBus.dispatch(\"pagemode\", {\n                source: this,\n                mode: params.pagemode\n              });\n            }\n\n            if (\"nameddest\" in params) {\n              this.navigateTo(params.nameddest);\n            }\n          } else {\n            dest = unescape(hash);\n\n            try {\n              dest = JSON.parse(dest);\n\n              if (!Array.isArray(dest)) {\n                dest = dest.toString();\n              }\n            } catch (ex) {}\n\n            if (typeof dest === \"string\" || isValidExplicitDestination(dest)) {\n              this.navigateTo(dest);\n              return;\n            }\n\n            console.error(`PDFLinkService.setHash: \"${unescape(hash)}\" is not ` + \"a valid destination.\");\n          }\n        }\n\n        executeNamedAction(action) {\n          switch (action) {\n            case \"GoBack\":\n              if (this.pdfHistory) {\n                this.pdfHistory.back();\n              }\n\n              break;\n\n            case \"GoForward\":\n              if (this.pdfHistory) {\n                this.pdfHistory.forward();\n              }\n\n              break;\n\n            case \"NextPage\":\n              if (this.page < this.pagesCount) {\n                this.page++;\n              }\n\n              break;\n\n            case \"PrevPage\":\n              if (this.page > 1) {\n                this.page--;\n              }\n\n              break;\n\n            case \"LastPage\":\n              this.page = this.pagesCount;\n              break;\n\n            case \"FirstPage\":\n              this.page = 1;\n              break;\n\n            default:\n              break;\n          }\n\n          this.eventBus.dispatch(\"namedaction\", {\n            source: this,\n            action\n          });\n        }\n\n        cachePageRef(pageNum, pageRef) {\n          if (!pageRef) {\n            return;\n          }\n\n          const refStr = pageRef.gen === 0 ? `${pageRef.num}R` : `${pageRef.num}R${pageRef.gen}`;\n          this._pagesRefCache[refStr] = pageNum;\n        }\n\n        _cachedPageNumber(pageRef) {\n          const refStr = pageRef.gen === 0 ? `${pageRef.num}R` : `${pageRef.num}R${pageRef.gen}`;\n          return this._pagesRefCache && this._pagesRefCache[refStr] || null;\n        }\n\n        isPageVisible(pageNumber) {\n          return this.pdfViewer.isPageVisible(pageNumber);\n        }\n\n      }\n\n      exports.PDFLinkService = PDFLinkService;\n\n      function isValidExplicitDestination(dest) {\n        if (!Array.isArray(dest)) {\n          return false;\n        }\n\n        const destLength = dest.length;\n\n        if (destLength < 2) {\n          return false;\n        }\n\n        const page = dest[0];\n\n        if (!(typeof page === \"object\" && Number.isInteger(page.num) && Number.isInteger(page.gen)) && !(Number.isInteger(page) && page >= 0)) {\n          return false;\n        }\n\n        const zoom = dest[1];\n\n        if (!(typeof zoom === \"object\" && typeof zoom.name === \"string\")) {\n          return false;\n        }\n\n        let allowNull = true;\n\n        switch (zoom.name) {\n          case \"XYZ\":\n            if (destLength !== 5) {\n              return false;\n            }\n\n            break;\n\n          case \"Fit\":\n          case \"FitB\":\n            return destLength === 2;\n\n          case \"FitH\":\n          case \"FitBH\":\n          case \"FitV\":\n          case \"FitBV\":\n            if (destLength !== 3) {\n              return false;\n            }\n\n            break;\n\n          case \"FitR\":\n            if (destLength !== 6) {\n              return false;\n            }\n\n            allowNull = false;\n            break;\n\n          default:\n            return false;\n        }\n\n        for (let i = 2; i < destLength; i++) {\n          const param = dest[i];\n\n          if (!(typeof param === \"number\" || allowNull && param === null)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      class SimpleLinkService {\n        constructor() {\n          this.externalLinkTarget = null;\n          this.externalLinkRel = null;\n          this.externalLinkEnabled = true;\n          this._ignoreDestinationZoom = false;\n        }\n\n        get pagesCount() {\n          return 0;\n        }\n\n        get page() {\n          return 0;\n        }\n\n        set page(value) {}\n\n        get rotation() {\n          return 0;\n        }\n\n        set rotation(value) {}\n\n        navigateTo(dest) {}\n\n        getDestinationHash(dest) {\n          return \"#\";\n        }\n\n        getAnchorUrl(hash) {\n          return \"#\";\n        }\n\n        setHash(hash) {}\n\n        executeNamedAction(action) {}\n\n        cachePageRef(pageNum, pageRef) {}\n\n        isPageVisible(pageNumber) {\n          return true;\n        }\n\n      }\n\n      exports.SimpleLinkService = SimpleLinkService;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.DefaultTextLayerFactory = exports.TextLayerBuilder = void 0;\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      const EXPAND_DIVS_TIMEOUT = 300;\n\n      class TextLayerBuilder {\n        constructor({\n          textLayerDiv,\n          eventBus,\n          pageIndex,\n          viewport,\n          findController = null,\n          enhanceTextSelection = false\n        }) {\n          this.textLayerDiv = textLayerDiv;\n          this.eventBus = eventBus;\n          this.textContent = null;\n          this.textContentItemsStr = [];\n          this.textContentStream = null;\n          this.renderingDone = false;\n          this.pageIdx = pageIndex;\n          this.pageNumber = this.pageIdx + 1;\n          this.matches = [];\n          this.viewport = viewport;\n          this.textDivs = [];\n          this.findController = findController;\n          this.textLayerRenderTask = null;\n          this.enhanceTextSelection = enhanceTextSelection;\n          this._onUpdateTextLayerMatches = null;\n\n          this._bindMouse();\n        }\n\n        _finishRendering() {\n          this.renderingDone = true;\n\n          if (!this.enhanceTextSelection) {\n            const endOfContent = document.createElement(\"div\");\n            endOfContent.className = \"endOfContent\";\n            this.textLayerDiv.appendChild(endOfContent);\n          }\n\n          this.eventBus.dispatch(\"textlayerrendered\", {\n            source: this,\n            pageNumber: this.pageNumber,\n            numTextDivs: this.textDivs.length\n          });\n        }\n\n        render(timeout = 0) {\n          if (!(this.textContent || this.textContentStream) || this.renderingDone) {\n            return;\n          }\n\n          this.cancel();\n          this.textDivs = [];\n          const textLayerFrag = document.createDocumentFragment();\n          this.textLayerRenderTask = (0, _pdfjsLib.renderTextLayer)({\n            textContent: this.textContent,\n            textContentStream: this.textContentStream,\n            container: textLayerFrag,\n            viewport: this.viewport,\n            textDivs: this.textDivs,\n            textContentItemsStr: this.textContentItemsStr,\n            timeout,\n            enhanceTextSelection: this.enhanceTextSelection\n          });\n          this.textLayerRenderTask.promise.then(() => {\n            this.textLayerDiv.appendChild(textLayerFrag);\n\n            this._finishRendering();\n\n            this._updateMatches();\n          }, function (reason) {});\n\n          if (!this._onUpdateTextLayerMatches) {\n            this._onUpdateTextLayerMatches = evt => {\n              if (evt.pageIndex === this.pageIdx || evt.pageIndex === -1) {\n                this._updateMatches();\n              }\n            };\n\n            this.eventBus._on(\"updatetextlayermatches\", this._onUpdateTextLayerMatches);\n          }\n        }\n\n        cancel() {\n          if (this.textLayerRenderTask) {\n            this.textLayerRenderTask.cancel();\n            this.textLayerRenderTask = null;\n          }\n\n          if (this._onUpdateTextLayerMatches) {\n            this.eventBus._off(\"updatetextlayermatches\", this._onUpdateTextLayerMatches);\n\n            this._onUpdateTextLayerMatches = null;\n          }\n        }\n\n        setTextContentStream(readableStream) {\n          this.cancel();\n          this.textContentStream = readableStream;\n        }\n\n        setTextContent(textContent) {\n          this.cancel();\n          this.textContent = textContent;\n        }\n\n        _convertMatches(matches, matchesLength) {\n          if (!matches) {\n            return [];\n          }\n\n          const {\n            findController,\n            textContentItemsStr\n          } = this;\n          let i = 0,\n              iIndex = 0;\n          const end = textContentItemsStr.length - 1;\n          const queryLen = findController.state.query.length;\n          const result = [];\n\n          for (let m = 0, mm = matches.length; m < mm; m++) {\n            let matchIdx = matches[m];\n\n            while (i !== end && matchIdx >= iIndex + textContentItemsStr[i].length) {\n              iIndex += textContentItemsStr[i].length;\n              i++;\n            }\n\n            if (i === textContentItemsStr.length) {\n              console.error(\"Could not find a matching mapping\");\n            }\n\n            const match = {\n              begin: {\n                divIdx: i,\n                offset: matchIdx - iIndex\n              }\n            };\n\n            if (matchesLength) {\n              matchIdx += matchesLength[m];\n            } else {\n              matchIdx += queryLen;\n            }\n\n            while (i !== end && matchIdx > iIndex + textContentItemsStr[i].length) {\n              iIndex += textContentItemsStr[i].length;\n              i++;\n            }\n\n            match.end = {\n              divIdx: i,\n              offset: matchIdx - iIndex\n            };\n            result.push(match);\n          }\n\n          return result;\n        }\n\n        _renderMatches(matches) {\n          if (matches.length === 0) {\n            return;\n          }\n\n          const {\n            findController,\n            pageIdx,\n            textContentItemsStr,\n            textDivs\n          } = this;\n          const isSelectedPage = pageIdx === findController.selected.pageIdx;\n          const selectedMatchIdx = findController.selected.matchIdx;\n          const highlightAll = findController.state.highlightAll;\n          let prevEnd = null;\n          const infinity = {\n            divIdx: -1,\n            offset: undefined\n          };\n\n          function beginText(begin, className) {\n            const divIdx = begin.divIdx;\n            textDivs[divIdx].textContent = \"\";\n            appendTextToDiv(divIdx, 0, begin.offset, className);\n          }\n\n          function appendTextToDiv(divIdx, fromOffset, toOffset, className) {\n            const div = textDivs[divIdx];\n            const content = textContentItemsStr[divIdx].substring(fromOffset, toOffset);\n            const node = document.createTextNode(content);\n\n            if (className) {\n              const span = document.createElement(\"span\");\n              span.className = className;\n              span.appendChild(node);\n              div.appendChild(span);\n              return;\n            }\n\n            div.appendChild(node);\n          }\n\n          let i0 = selectedMatchIdx,\n              i1 = i0 + 1;\n\n          if (highlightAll) {\n            i0 = 0;\n            i1 = matches.length;\n          } else if (!isSelectedPage) {\n            return;\n          }\n\n          for (let i = i0; i < i1; i++) {\n            const match = matches[i];\n            const begin = match.begin;\n            const end = match.end;\n            const isSelected = isSelectedPage && i === selectedMatchIdx;\n            const highlightSuffix = isSelected ? \" selected\" : \"\";\n\n            if (isSelected) {\n              findController.scrollMatchIntoView({\n                element: textDivs[begin.divIdx],\n                pageIndex: pageIdx,\n                matchIndex: selectedMatchIdx\n              });\n            }\n\n            if (!prevEnd || begin.divIdx !== prevEnd.divIdx) {\n              if (prevEnd !== null) {\n                appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);\n              }\n\n              beginText(begin);\n            } else {\n              appendTextToDiv(prevEnd.divIdx, prevEnd.offset, begin.offset);\n            }\n\n            if (begin.divIdx === end.divIdx) {\n              appendTextToDiv(begin.divIdx, begin.offset, end.offset, \"highlight\" + highlightSuffix);\n            } else {\n              appendTextToDiv(begin.divIdx, begin.offset, infinity.offset, \"highlight begin\" + highlightSuffix);\n\n              for (let n0 = begin.divIdx + 1, n1 = end.divIdx; n0 < n1; n0++) {\n                textDivs[n0].className = \"highlight middle\" + highlightSuffix;\n              }\n\n              beginText(end, \"highlight end\" + highlightSuffix);\n            }\n\n            prevEnd = end;\n          }\n\n          if (prevEnd) {\n            appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);\n          }\n        }\n\n        _updateMatches() {\n          if (!this.renderingDone) {\n            return;\n          }\n\n          const {\n            findController,\n            matches,\n            pageIdx,\n            textContentItemsStr,\n            textDivs\n          } = this;\n          let clearedUntilDivIdx = -1;\n\n          for (let i = 0, ii = matches.length; i < ii; i++) {\n            const match = matches[i];\n            const begin = Math.max(clearedUntilDivIdx, match.begin.divIdx);\n\n            for (let n = begin, end = match.end.divIdx; n <= end; n++) {\n              const div = textDivs[n];\n              div.textContent = textContentItemsStr[n];\n              div.className = \"\";\n            }\n\n            clearedUntilDivIdx = match.end.divIdx + 1;\n          }\n\n          if (!findController || !findController.highlightMatches) {\n            return;\n          }\n\n          const pageMatches = findController.pageMatches[pageIdx] || null;\n          const pageMatchesLength = findController.pageMatchesLength[pageIdx] || null;\n          this.matches = this._convertMatches(pageMatches, pageMatchesLength);\n\n          this._renderMatches(this.matches);\n        }\n\n        _bindMouse() {\n          const div = this.textLayerDiv;\n          let expandDivsTimer = null;\n          div.addEventListener(\"mousedown\", evt => {\n            if (this.enhanceTextSelection && this.textLayerRenderTask) {\n              this.textLayerRenderTask.expandTextDivs(true);\n\n              if (expandDivsTimer) {\n                clearTimeout(expandDivsTimer);\n                expandDivsTimer = null;\n              }\n\n              return;\n            }\n\n            const end = div.querySelector(\".endOfContent\");\n\n            if (!end) {\n              return;\n            }\n\n            let adjustTop = evt.target !== div;\n            adjustTop = adjustTop && window.getComputedStyle(end).getPropertyValue(\"-moz-user-select\") !== \"none\";\n\n            if (adjustTop) {\n              const divBounds = div.getBoundingClientRect();\n              const r = Math.max(0, (evt.pageY - divBounds.top) / divBounds.height);\n              end.style.top = (r * 100).toFixed(2) + \"%\";\n            }\n\n            end.classList.add(\"active\");\n          });\n          div.addEventListener(\"mouseup\", () => {\n            if (this.enhanceTextSelection && this.textLayerRenderTask) {\n              expandDivsTimer = setTimeout(() => {\n                if (this.textLayerRenderTask) {\n                  this.textLayerRenderTask.expandTextDivs(false);\n                }\n\n                expandDivsTimer = null;\n              }, EXPAND_DIVS_TIMEOUT);\n              return;\n            }\n\n            const end = div.querySelector(\".endOfContent\");\n\n            if (!end) {\n              return;\n            }\n\n            end.style.top = \"\";\n            end.classList.remove(\"active\");\n          });\n        }\n\n      }\n\n      exports.TextLayerBuilder = TextLayerBuilder;\n\n      class DefaultTextLayerFactory {\n        createTextLayerBuilder(textLayerDiv, pageIndex, viewport, enhanceTextSelection = false, eventBus) {\n          return new TextLayerBuilder({\n            textLayerDiv,\n            pageIndex,\n            viewport,\n            enhanceTextSelection,\n            eventBus\n          });\n        }\n\n      }\n\n      exports.DefaultTextLayerFactory = DefaultTextLayerFactory;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.DownloadManager = void 0;\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      var _viewer_compatibility = __w_pdfjs_require__(7);\n\n      ;\n      const DISABLE_CREATE_OBJECT_URL = _viewer_compatibility.viewerCompatibilityParams.disableCreateObjectURL || false;\n\n      function download(blobUrl, filename) {\n        const a = document.createElement(\"a\");\n\n        if (!a.click) {\n          throw new Error('DownloadManager: \"a.click()\" is not supported.');\n        }\n\n        a.href = blobUrl;\n        a.target = \"_parent\";\n\n        if (\"download\" in a) {\n          a.download = filename;\n        }\n\n        (document.body || document.documentElement).appendChild(a);\n        a.click();\n        a.remove();\n      }\n\n      class DownloadManager {\n        constructor({\n          disableCreateObjectURL = DISABLE_CREATE_OBJECT_URL\n        }) {\n          this.disableCreateObjectURL = disableCreateObjectURL;\n        }\n\n        downloadUrl(url, filename) {\n          if (!(0, _pdfjsLib.createValidAbsoluteUrl)(url, \"http://example.com\")) {\n            return;\n          }\n\n          download(url + \"#pdfjs.action=download\", filename);\n        }\n\n        downloadData(data, filename, contentType) {\n          if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(new Blob([data], {\n              type: contentType\n            }), filename);\n            return;\n          }\n\n          const blobUrl = (0, _pdfjsLib.createObjectURL)(data, contentType, this.disableCreateObjectURL);\n          download(blobUrl, filename);\n        }\n\n        download(blob, url, filename) {\n          if (navigator.msSaveBlob) {\n            if (!navigator.msSaveBlob(blob, filename)) {\n              this.downloadUrl(url, filename);\n            }\n\n            return;\n          }\n\n          if (this.disableCreateObjectURL) {\n            this.downloadUrl(url, filename);\n            return;\n          }\n\n          const blobUrl = URL.createObjectURL(blob);\n          download(blobUrl, filename);\n        }\n\n      }\n\n      exports.DownloadManager = DownloadManager;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.viewerCompatibilityParams = void 0;\n      const compatibilityParams = Object.create(null);\n      {\n        const userAgent = typeof navigator !== \"undefined\" && navigator.userAgent || \"\";\n        const platform = typeof navigator !== \"undefined\" && navigator.platform || \"\";\n        const maxTouchPoints = typeof navigator !== \"undefined\" && navigator.maxTouchPoints || 1;\n        const isAndroid = /Android/.test(userAgent);\n        const isIE = /Trident/.test(userAgent);\n        const isIOS = /\\b(iPad|iPhone|iPod)(?=;)/.test(userAgent) || platform === \"MacIntel\" && maxTouchPoints > 1;\n        const isIOSChrome = /CriOS/.test(userAgent);\n\n        (function checkOnBlobSupport() {\n          if (isIE || isIOSChrome) {\n            compatibilityParams.disableCreateObjectURL = true;\n          }\n        })();\n\n        (function checkCanvasSizeLimitation() {\n          if (isIOS || isAndroid) {\n            compatibilityParams.maxCanvasPixels = 5242880;\n          }\n        })();\n      }\n      const viewerCompatibilityParams = Object.freeze(compatibilityParams);\n      exports.viewerCompatibilityParams = viewerCompatibilityParams;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.GenericL10n = void 0;\n\n      __w_pdfjs_require__(9);\n\n      const webL10n = document.webL10n;\n\n      class GenericL10n {\n        constructor(lang) {\n          this._lang = lang;\n          this._ready = new Promise((resolve, reject) => {\n            webL10n.setLanguage(lang, () => {\n              resolve(webL10n);\n            });\n          });\n        }\n\n        getLanguage() {\n          var _this = this;\n\n          return _asyncToGenerator(function* () {\n            const l10n = yield _this._ready;\n            return l10n.getLanguage();\n          })();\n        }\n\n        getDirection() {\n          var _this2 = this;\n\n          return _asyncToGenerator(function* () {\n            const l10n = yield _this2._ready;\n            return l10n.getDirection();\n          })();\n        }\n\n        get(property, args, fallback) {\n          var _this3 = this;\n\n          return _asyncToGenerator(function* () {\n            const l10n = yield _this3._ready;\n            return l10n.get(property, args, fallback);\n          })();\n        }\n\n        translate(element) {\n          var _this4 = this;\n\n          return _asyncToGenerator(function* () {\n            const l10n = yield _this4._ready;\n            return l10n.translate(element);\n          })();\n        }\n\n      }\n\n      exports.GenericL10n = GenericL10n;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      document.webL10n = function (window, document, undefined) {\n        var gL10nData = {};\n        var gTextData = '';\n        var gTextProp = 'textContent';\n        var gLanguage = '';\n        var gMacros = {};\n        var gReadyState = 'loading';\n        var gAsyncResourceLoading = true;\n\n        function getL10nResourceLinks() {\n          return document.querySelectorAll('link[type=\"application/l10n\"]');\n        }\n\n        function getL10nDictionary() {\n          var script = document.querySelector('script[type=\"application/l10n\"]');\n          return script ? JSON.parse(script.innerHTML) : null;\n        }\n\n        function getTranslatableChildren(element) {\n          return element ? element.querySelectorAll('*[data-l10n-id]') : [];\n        }\n\n        function getL10nAttributes(element) {\n          if (!element) return {};\n          var l10nId = element.getAttribute('data-l10n-id');\n          var l10nArgs = element.getAttribute('data-l10n-args');\n          var args = {};\n\n          if (l10nArgs) {\n            try {\n              args = JSON.parse(l10nArgs);\n            } catch (e) {\n              console.warn('could not parse arguments for #' + l10nId);\n            }\n          }\n\n          return {\n            id: l10nId,\n            args: args\n          };\n        }\n\n        function xhrLoadText(url, onSuccess, onFailure) {\n          onSuccess = onSuccess || function _onSuccess(data) {};\n\n          onFailure = onFailure || function _onFailure() {};\n\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', url, gAsyncResourceLoading);\n\n          if (xhr.overrideMimeType) {\n            xhr.overrideMimeType('text/plain; charset=utf-8');\n          }\n\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n              if (xhr.status == 200 || xhr.status === 0) {\n                onSuccess(xhr.responseText);\n              } else {\n                onFailure();\n              }\n            }\n          };\n\n          xhr.onerror = onFailure;\n          xhr.ontimeout = onFailure;\n\n          try {\n            xhr.send(null);\n          } catch (e) {\n            onFailure();\n          }\n        }\n\n        function parseResource(href, lang, successCallback, failureCallback) {\n          var baseURL = href.replace(/[^\\/]*$/, '') || './';\n\n          function evalString(text) {\n            if (text.lastIndexOf('\\\\') < 0) return text;\n            return text.replace(/\\\\\\\\/g, '\\\\').replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\t/g, '\\t').replace(/\\\\b/g, '\\b').replace(/\\\\f/g, '\\f').replace(/\\\\{/g, '{').replace(/\\\\}/g, '}').replace(/\\\\\"/g, '\"').replace(/\\\\'/g, \"'\");\n          }\n\n          function parseProperties(text, parsedPropertiesCallback) {\n            var dictionary = {};\n            var reBlank = /^\\s*|\\s*$/;\n            var reComment = /^\\s*#|^\\s*$/;\n            var reSection = /^\\s*\\[(.*)\\]\\s*$/;\n            var reImport = /^\\s*@import\\s+url\\((.*)\\)\\s*$/i;\n            var reSplit = /^([^=\\s]*)\\s*=\\s*(.+)$/;\n\n            function parseRawLines(rawText, extendedSyntax, parsedRawLinesCallback) {\n              var entries = rawText.replace(reBlank, '').split(/[\\r\\n]+/);\n              var currentLang = '*';\n              var genericLang = lang.split('-', 1)[0];\n              var skipLang = false;\n              var match = '';\n\n              function nextEntry() {\n                while (true) {\n                  if (!entries.length) {\n                    parsedRawLinesCallback();\n                    return;\n                  }\n\n                  var line = entries.shift();\n                  if (reComment.test(line)) continue;\n\n                  if (extendedSyntax) {\n                    match = reSection.exec(line);\n\n                    if (match) {\n                      currentLang = match[1].toLowerCase();\n                      skipLang = currentLang !== '*' && currentLang !== lang && currentLang !== genericLang;\n                      continue;\n                    } else if (skipLang) {\n                      continue;\n                    }\n\n                    match = reImport.exec(line);\n\n                    if (match) {\n                      loadImport(baseURL + match[1], nextEntry);\n                      return;\n                    }\n                  }\n\n                  var tmp = line.match(reSplit);\n\n                  if (tmp && tmp.length == 3) {\n                    dictionary[tmp[1]] = evalString(tmp[2]);\n                  }\n                }\n              }\n\n              nextEntry();\n            }\n\n            function loadImport(url, callback) {\n              xhrLoadText(url, function (content) {\n                parseRawLines(content, false, callback);\n              }, function () {\n                console.warn(url + ' not found.');\n                callback();\n              });\n            }\n\n            parseRawLines(text, true, function () {\n              parsedPropertiesCallback(dictionary);\n            });\n          }\n\n          xhrLoadText(href, function (response) {\n            gTextData += response;\n            parseProperties(response, function (data) {\n              for (var key in data) {\n                var id,\n                    prop,\n                    index = key.lastIndexOf('.');\n\n                if (index > 0) {\n                  id = key.substring(0, index);\n                  prop = key.substring(index + 1);\n                } else {\n                  id = key;\n                  prop = gTextProp;\n                }\n\n                if (!gL10nData[id]) {\n                  gL10nData[id] = {};\n                }\n\n                gL10nData[id][prop] = data[key];\n              }\n\n              if (successCallback) {\n                successCallback();\n              }\n            });\n          }, failureCallback);\n        }\n\n        function loadLocale(lang, callback) {\n          if (lang) {\n            lang = lang.toLowerCase();\n          }\n\n          callback = callback || function _callback() {};\n\n          clear();\n          gLanguage = lang;\n          var langLinks = getL10nResourceLinks();\n          var langCount = langLinks.length;\n\n          if (langCount === 0) {\n            var dict = getL10nDictionary();\n\n            if (dict && dict.locales && dict.default_locale) {\n              console.log('using the embedded JSON directory, early way out');\n              gL10nData = dict.locales[lang];\n\n              if (!gL10nData) {\n                var defaultLocale = dict.default_locale.toLowerCase();\n\n                for (var anyCaseLang in dict.locales) {\n                  anyCaseLang = anyCaseLang.toLowerCase();\n\n                  if (anyCaseLang === lang) {\n                    gL10nData = dict.locales[lang];\n                    break;\n                  } else if (anyCaseLang === defaultLocale) {\n                    gL10nData = dict.locales[defaultLocale];\n                  }\n                }\n              }\n\n              callback();\n            } else {\n              console.log('no resource to load, early way out');\n            }\n\n            gReadyState = 'complete';\n            return;\n          }\n\n          var onResourceLoaded = null;\n          var gResourceCount = 0;\n\n          onResourceLoaded = function () {\n            gResourceCount++;\n\n            if (gResourceCount >= langCount) {\n              callback();\n              gReadyState = 'complete';\n            }\n          };\n\n          function L10nResourceLink(link) {\n            var href = link.href;\n\n            this.load = function (lang, callback) {\n              parseResource(href, lang, callback, function () {\n                console.warn(href + ' not found.');\n                console.warn('\"' + lang + '\" resource not found');\n                gLanguage = '';\n                callback();\n              });\n            };\n          }\n\n          for (var i = 0; i < langCount; i++) {\n            var resource = new L10nResourceLink(langLinks[i]);\n            resource.load(lang, onResourceLoaded);\n          }\n        }\n\n        function clear() {\n          gL10nData = {};\n          gTextData = '';\n          gLanguage = '';\n        }\n\n        function getPluralRules(lang) {\n          var locales2rules = {\n            'af': 3,\n            'ak': 4,\n            'am': 4,\n            'ar': 1,\n            'asa': 3,\n            'az': 0,\n            'be': 11,\n            'bem': 3,\n            'bez': 3,\n            'bg': 3,\n            'bh': 4,\n            'bm': 0,\n            'bn': 3,\n            'bo': 0,\n            'br': 20,\n            'brx': 3,\n            'bs': 11,\n            'ca': 3,\n            'cgg': 3,\n            'chr': 3,\n            'cs': 12,\n            'cy': 17,\n            'da': 3,\n            'de': 3,\n            'dv': 3,\n            'dz': 0,\n            'ee': 3,\n            'el': 3,\n            'en': 3,\n            'eo': 3,\n            'es': 3,\n            'et': 3,\n            'eu': 3,\n            'fa': 0,\n            'ff': 5,\n            'fi': 3,\n            'fil': 4,\n            'fo': 3,\n            'fr': 5,\n            'fur': 3,\n            'fy': 3,\n            'ga': 8,\n            'gd': 24,\n            'gl': 3,\n            'gsw': 3,\n            'gu': 3,\n            'guw': 4,\n            'gv': 23,\n            'ha': 3,\n            'haw': 3,\n            'he': 2,\n            'hi': 4,\n            'hr': 11,\n            'hu': 0,\n            'id': 0,\n            'ig': 0,\n            'ii': 0,\n            'is': 3,\n            'it': 3,\n            'iu': 7,\n            'ja': 0,\n            'jmc': 3,\n            'jv': 0,\n            'ka': 0,\n            'kab': 5,\n            'kaj': 3,\n            'kcg': 3,\n            'kde': 0,\n            'kea': 0,\n            'kk': 3,\n            'kl': 3,\n            'km': 0,\n            'kn': 0,\n            'ko': 0,\n            'ksb': 3,\n            'ksh': 21,\n            'ku': 3,\n            'kw': 7,\n            'lag': 18,\n            'lb': 3,\n            'lg': 3,\n            'ln': 4,\n            'lo': 0,\n            'lt': 10,\n            'lv': 6,\n            'mas': 3,\n            'mg': 4,\n            'mk': 16,\n            'ml': 3,\n            'mn': 3,\n            'mo': 9,\n            'mr': 3,\n            'ms': 0,\n            'mt': 15,\n            'my': 0,\n            'nah': 3,\n            'naq': 7,\n            'nb': 3,\n            'nd': 3,\n            'ne': 3,\n            'nl': 3,\n            'nn': 3,\n            'no': 3,\n            'nr': 3,\n            'nso': 4,\n            'ny': 3,\n            'nyn': 3,\n            'om': 3,\n            'or': 3,\n            'pa': 3,\n            'pap': 3,\n            'pl': 13,\n            'ps': 3,\n            'pt': 3,\n            'rm': 3,\n            'ro': 9,\n            'rof': 3,\n            'ru': 11,\n            'rwk': 3,\n            'sah': 0,\n            'saq': 3,\n            'se': 7,\n            'seh': 3,\n            'ses': 0,\n            'sg': 0,\n            'sh': 11,\n            'shi': 19,\n            'sk': 12,\n            'sl': 14,\n            'sma': 7,\n            'smi': 7,\n            'smj': 7,\n            'smn': 7,\n            'sms': 7,\n            'sn': 3,\n            'so': 3,\n            'sq': 3,\n            'sr': 11,\n            'ss': 3,\n            'ssy': 3,\n            'st': 3,\n            'sv': 3,\n            'sw': 3,\n            'syr': 3,\n            'ta': 3,\n            'te': 3,\n            'teo': 3,\n            'th': 0,\n            'ti': 4,\n            'tig': 3,\n            'tk': 3,\n            'tl': 4,\n            'tn': 3,\n            'to': 0,\n            'tr': 0,\n            'ts': 3,\n            'tzm': 22,\n            'uk': 11,\n            'ur': 3,\n            've': 3,\n            'vi': 0,\n            'vun': 3,\n            'wa': 4,\n            'wae': 3,\n            'wo': 0,\n            'xh': 3,\n            'xog': 3,\n            'yo': 0,\n            'zh': 0,\n            'zu': 3\n          };\n\n          function isIn(n, list) {\n            return list.indexOf(n) !== -1;\n          }\n\n          function isBetween(n, start, end) {\n            return start <= n && n <= end;\n          }\n\n          var pluralRules = {\n            '0': function (n) {\n              return 'other';\n            },\n            '1': function (n) {\n              if (isBetween(n % 100, 3, 10)) return 'few';\n              if (n === 0) return 'zero';\n              if (isBetween(n % 100, 11, 99)) return 'many';\n              if (n == 2) return 'two';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '2': function (n) {\n              if (n !== 0 && n % 10 === 0) return 'many';\n              if (n == 2) return 'two';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '3': function (n) {\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '4': function (n) {\n              if (isBetween(n, 0, 1)) return 'one';\n              return 'other';\n            },\n            '5': function (n) {\n              if (isBetween(n, 0, 2) && n != 2) return 'one';\n              return 'other';\n            },\n            '6': function (n) {\n              if (n === 0) return 'zero';\n              if (n % 10 == 1 && n % 100 != 11) return 'one';\n              return 'other';\n            },\n            '7': function (n) {\n              if (n == 2) return 'two';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '8': function (n) {\n              if (isBetween(n, 3, 6)) return 'few';\n              if (isBetween(n, 7, 10)) return 'many';\n              if (n == 2) return 'two';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '9': function (n) {\n              if (n === 0 || n != 1 && isBetween(n % 100, 1, 19)) return 'few';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '10': function (n) {\n              if (isBetween(n % 10, 2, 9) && !isBetween(n % 100, 11, 19)) return 'few';\n              if (n % 10 == 1 && !isBetween(n % 100, 11, 19)) return 'one';\n              return 'other';\n            },\n            '11': function (n) {\n              if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) return 'few';\n              if (n % 10 === 0 || isBetween(n % 10, 5, 9) || isBetween(n % 100, 11, 14)) return 'many';\n              if (n % 10 == 1 && n % 100 != 11) return 'one';\n              return 'other';\n            },\n            '12': function (n) {\n              if (isBetween(n, 2, 4)) return 'few';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '13': function (n) {\n              if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) return 'few';\n              if (n != 1 && isBetween(n % 10, 0, 1) || isBetween(n % 10, 5, 9) || isBetween(n % 100, 12, 14)) return 'many';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '14': function (n) {\n              if (isBetween(n % 100, 3, 4)) return 'few';\n              if (n % 100 == 2) return 'two';\n              if (n % 100 == 1) return 'one';\n              return 'other';\n            },\n            '15': function (n) {\n              if (n === 0 || isBetween(n % 100, 2, 10)) return 'few';\n              if (isBetween(n % 100, 11, 19)) return 'many';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '16': function (n) {\n              if (n % 10 == 1 && n != 11) return 'one';\n              return 'other';\n            },\n            '17': function (n) {\n              if (n == 3) return 'few';\n              if (n === 0) return 'zero';\n              if (n == 6) return 'many';\n              if (n == 2) return 'two';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '18': function (n) {\n              if (n === 0) return 'zero';\n              if (isBetween(n, 0, 2) && n !== 0 && n != 2) return 'one';\n              return 'other';\n            },\n            '19': function (n) {\n              if (isBetween(n, 2, 10)) return 'few';\n              if (isBetween(n, 0, 1)) return 'one';\n              return 'other';\n            },\n            '20': function (n) {\n              if ((isBetween(n % 10, 3, 4) || n % 10 == 9) && !(isBetween(n % 100, 10, 19) || isBetween(n % 100, 70, 79) || isBetween(n % 100, 90, 99))) return 'few';\n              if (n % 1000000 === 0 && n !== 0) return 'many';\n              if (n % 10 == 2 && !isIn(n % 100, [12, 72, 92])) return 'two';\n              if (n % 10 == 1 && !isIn(n % 100, [11, 71, 91])) return 'one';\n              return 'other';\n            },\n            '21': function (n) {\n              if (n === 0) return 'zero';\n              if (n == 1) return 'one';\n              return 'other';\n            },\n            '22': function (n) {\n              if (isBetween(n, 0, 1) || isBetween(n, 11, 99)) return 'one';\n              return 'other';\n            },\n            '23': function (n) {\n              if (isBetween(n % 10, 1, 2) || n % 20 === 0) return 'one';\n              return 'other';\n            },\n            '24': function (n) {\n              if (isBetween(n, 3, 10) || isBetween(n, 13, 19)) return 'few';\n              if (isIn(n, [2, 12])) return 'two';\n              if (isIn(n, [1, 11])) return 'one';\n              return 'other';\n            }\n          };\n          var index = locales2rules[lang.replace(/-.*$/, '')];\n\n          if (!(index in pluralRules)) {\n            console.warn('plural form unknown for [' + lang + ']');\n            return function () {\n              return 'other';\n            };\n          }\n\n          return pluralRules[index];\n        }\n\n        gMacros.plural = function (str, param, key, prop) {\n          var n = parseFloat(param);\n          if (isNaN(n)) return str;\n          if (prop != gTextProp) return str;\n\n          if (!gMacros._pluralRules) {\n            gMacros._pluralRules = getPluralRules(gLanguage);\n          }\n\n          var index = '[' + gMacros._pluralRules(n) + ']';\n\n          if (n === 0 && key + '[zero]' in gL10nData) {\n            str = gL10nData[key + '[zero]'][prop];\n          } else if (n == 1 && key + '[one]' in gL10nData) {\n            str = gL10nData[key + '[one]'][prop];\n          } else if (n == 2 && key + '[two]' in gL10nData) {\n            str = gL10nData[key + '[two]'][prop];\n          } else if (key + index in gL10nData) {\n            str = gL10nData[key + index][prop];\n          } else if (key + '[other]' in gL10nData) {\n            str = gL10nData[key + '[other]'][prop];\n          }\n\n          return str;\n        };\n\n        function getL10nData(key, args, fallback) {\n          var data = gL10nData[key];\n\n          if (!data) {\n            console.warn('#' + key + ' is undefined.');\n\n            if (!fallback) {\n              return null;\n            }\n\n            data = fallback;\n          }\n\n          var rv = {};\n\n          for (var prop in data) {\n            var str = data[prop];\n            str = substIndexes(str, args, key, prop);\n            str = substArguments(str, args, key);\n            rv[prop] = str;\n          }\n\n          return rv;\n        }\n\n        function substIndexes(str, args, key, prop) {\n          var reIndex = /\\{\\[\\s*([a-zA-Z]+)\\(([a-zA-Z]+)\\)\\s*\\]\\}/;\n          var reMatch = reIndex.exec(str);\n          if (!reMatch || !reMatch.length) return str;\n          var macroName = reMatch[1];\n          var paramName = reMatch[2];\n          var param;\n\n          if (args && paramName in args) {\n            param = args[paramName];\n          } else if (paramName in gL10nData) {\n            param = gL10nData[paramName];\n          }\n\n          if (macroName in gMacros) {\n            var macro = gMacros[macroName];\n            str = macro(str, param, key, prop);\n          }\n\n          return str;\n        }\n\n        function substArguments(str, args, key) {\n          var reArgs = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n          return str.replace(reArgs, function (matched_text, arg) {\n            if (args && arg in args) {\n              return args[arg];\n            }\n\n            if (arg in gL10nData) {\n              return gL10nData[arg];\n            }\n\n            console.log('argument {{' + arg + '}} for #' + key + ' is undefined.');\n            return matched_text;\n          });\n        }\n\n        function translateElement(element) {\n          var l10n = getL10nAttributes(element);\n          if (!l10n.id) return;\n          var data = getL10nData(l10n.id, l10n.args);\n\n          if (!data) {\n            console.warn('#' + l10n.id + ' is undefined.');\n            return;\n          }\n\n          if (data[gTextProp]) {\n            if (getChildElementCount(element) === 0) {\n              element[gTextProp] = data[gTextProp];\n            } else {\n              var children = element.childNodes;\n              var found = false;\n\n              for (var i = 0, l = children.length; i < l; i++) {\n                if (children[i].nodeType === 3 && /\\S/.test(children[i].nodeValue)) {\n                  if (found) {\n                    children[i].nodeValue = '';\n                  } else {\n                    children[i].nodeValue = data[gTextProp];\n                    found = true;\n                  }\n                }\n              }\n\n              if (!found) {\n                var textNode = document.createTextNode(data[gTextProp]);\n                element.insertBefore(textNode, element.firstChild);\n              }\n            }\n\n            delete data[gTextProp];\n          }\n\n          for (var k in data) {\n            element[k] = data[k];\n          }\n        }\n\n        function getChildElementCount(element) {\n          if (element.children) {\n            return element.children.length;\n          }\n\n          if (typeof element.childElementCount !== 'undefined') {\n            return element.childElementCount;\n          }\n\n          var count = 0;\n\n          for (var i = 0; i < element.childNodes.length; i++) {\n            count += element.nodeType === 1 ? 1 : 0;\n          }\n\n          return count;\n        }\n\n        function translateFragment(element) {\n          element = element || document.documentElement;\n          var children = getTranslatableChildren(element);\n          var elementCount = children.length;\n\n          for (var i = 0; i < elementCount; i++) {\n            translateElement(children[i]);\n          }\n\n          translateElement(element);\n        }\n\n        return {\n          get: function (key, args, fallbackString) {\n            var index = key.lastIndexOf('.');\n            var prop = gTextProp;\n\n            if (index > 0) {\n              prop = key.substring(index + 1);\n              key = key.substring(0, index);\n            }\n\n            var fallback;\n\n            if (fallbackString) {\n              fallback = {};\n              fallback[prop] = fallbackString;\n            }\n\n            var data = getL10nData(key, args, fallback);\n\n            if (data && prop in data) {\n              return data[prop];\n            }\n\n            return '{{' + key + '}}';\n          },\n          getData: function () {\n            return gL10nData;\n          },\n          getText: function () {\n            return gTextData;\n          },\n          getLanguage: function () {\n            return gLanguage;\n          },\n          setLanguage: function (lang, callback) {\n            loadLocale(lang, function () {\n              if (callback) callback();\n            });\n          },\n          getDirection: function () {\n            var rtlList = ['ar', 'he', 'fa', 'ps', 'ur'];\n            var shortCode = gLanguage.split('-', 1)[0];\n            return rtlList.indexOf(shortCode) >= 0 ? 'rtl' : 'ltr';\n          },\n          translate: translateFragment,\n          getReadyState: function () {\n            return gReadyState;\n          },\n          ready: function (callback) {\n            if (!callback) {\n              return;\n            } else if (gReadyState == 'complete' || gReadyState == 'interactive') {\n              window.setTimeout(function () {\n                callback();\n              });\n            } else if (document.addEventListener) {\n              document.addEventListener('localized', function once() {\n                document.removeEventListener('localized', once);\n                callback();\n              });\n            }\n          }\n        };\n      }(window, document);\n      /***/\n\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.PDFFindController = exports.FindState = void 0;\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      var _pdf_find_utils = __w_pdfjs_require__(11);\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      const FindState = {\n        FOUND: 0,\n        NOT_FOUND: 1,\n        WRAPPED: 2,\n        PENDING: 3\n      };\n      exports.FindState = FindState;\n      const FIND_TIMEOUT = 250;\n      const MATCH_SCROLL_OFFSET_TOP = -50;\n      const MATCH_SCROLL_OFFSET_LEFT = -400;\n      const CHARACTERS_TO_NORMALIZE = {\n        \"\\u2018\": \"'\",\n        \"\\u2019\": \"'\",\n        \"\\u201A\": \"'\",\n        \"\\u201B\": \"'\",\n        \"\\u201C\": '\"',\n        \"\\u201D\": '\"',\n        \"\\u201E\": '\"',\n        \"\\u201F\": '\"',\n        \"\\u00BC\": \"1/4\",\n        \"\\u00BD\": \"1/2\",\n        \"\\u00BE\": \"3/4\"\n      };\n      let normalizationRegex = null;\n\n      function normalize(text) {\n        if (!normalizationRegex) {\n          const replace = Object.keys(CHARACTERS_TO_NORMALIZE).join(\"\");\n          normalizationRegex = new RegExp(`[${replace}]`, \"g\");\n        }\n\n        return text.replace(normalizationRegex, function (ch) {\n          return CHARACTERS_TO_NORMALIZE[ch];\n        });\n      }\n\n      class PDFFindController {\n        constructor({\n          linkService,\n          eventBus\n        }) {\n          this._linkService = linkService;\n          this._eventBus = eventBus;\n\n          this._reset();\n\n          eventBus._on(\"findbarclose\", this._onFindBarClose.bind(this));\n        }\n\n        get highlightMatches() {\n          return this._highlightMatches;\n        }\n\n        get pageMatches() {\n          return this._pageMatches;\n        }\n\n        get pageMatchesLength() {\n          return this._pageMatchesLength;\n        }\n\n        get selected() {\n          return this._selected;\n        }\n\n        get state() {\n          return this._state;\n        }\n\n        setDocument(pdfDocument) {\n          if (this._pdfDocument) {\n            this._reset();\n          }\n\n          if (!pdfDocument) {\n            return;\n          }\n\n          this._pdfDocument = pdfDocument;\n\n          this._firstPageCapability.resolve();\n        }\n\n        executeCommand(cmd, state) {\n          if (!state) {\n            return;\n          }\n\n          const pdfDocument = this._pdfDocument;\n\n          if (this._state === null || this._shouldDirtyMatch(cmd, state)) {\n            this._dirtyMatch = true;\n          }\n\n          this._state = state;\n\n          if (cmd !== \"findhighlightallchange\") {\n            this._updateUIState(FindState.PENDING);\n          }\n\n          this._firstPageCapability.promise.then(() => {\n            if (!this._pdfDocument || pdfDocument && this._pdfDocument !== pdfDocument) {\n              return;\n            }\n\n            this._extractText();\n\n            const findbarClosed = !this._highlightMatches;\n            const pendingTimeout = !!this._findTimeout;\n\n            if (this._findTimeout) {\n              clearTimeout(this._findTimeout);\n              this._findTimeout = null;\n            }\n\n            if (cmd === \"find\") {\n              this._findTimeout = setTimeout(() => {\n                this._nextMatch();\n\n                this._findTimeout = null;\n              }, FIND_TIMEOUT);\n            } else if (this._dirtyMatch) {\n              this._nextMatch();\n            } else if (cmd === \"findagain\") {\n              this._nextMatch();\n\n              if (findbarClosed && this._state.highlightAll) {\n                this._updateAllPages();\n              }\n            } else if (cmd === \"findhighlightallchange\") {\n              if (pendingTimeout) {\n                this._nextMatch();\n              } else {\n                this._highlightMatches = true;\n              }\n\n              this._updateAllPages();\n            } else {\n              this._nextMatch();\n            }\n          });\n        }\n\n        scrollMatchIntoView({\n          element = null,\n          pageIndex = -1,\n          matchIndex = -1\n        }) {\n          if (!this._scrollMatches || !element) {\n            return;\n          } else if (matchIndex === -1 || matchIndex !== this._selected.matchIdx) {\n            return;\n          } else if (pageIndex === -1 || pageIndex !== this._selected.pageIdx) {\n            return;\n          }\n\n          this._scrollMatches = false;\n          const spot = {\n            top: MATCH_SCROLL_OFFSET_TOP,\n            left: MATCH_SCROLL_OFFSET_LEFT\n          };\n          (0, _ui_utils.scrollIntoView)(element, spot, true);\n        }\n\n        _reset() {\n          this._highlightMatches = false;\n          this._scrollMatches = false;\n          this._pdfDocument = null;\n          this._pageMatches = [];\n          this._pageMatchesLength = [];\n          this._state = null;\n          this._selected = {\n            pageIdx: -1,\n            matchIdx: -1\n          };\n          this._offset = {\n            pageIdx: null,\n            matchIdx: null,\n            wrapped: false\n          };\n          this._extractTextPromises = [];\n          this._pageContents = [];\n          this._matchesCountTotal = 0;\n          this._pagesToSearch = null;\n          this._pendingFindMatches = Object.create(null);\n          this._resumePageIdx = null;\n          this._dirtyMatch = false;\n          clearTimeout(this._findTimeout);\n          this._findTimeout = null;\n          this._firstPageCapability = (0, _pdfjsLib.createPromiseCapability)();\n        }\n\n        get _query() {\n          if (this._state.query !== this._rawQuery) {\n            this._rawQuery = this._state.query;\n            this._normalizedQuery = normalize(this._state.query);\n          }\n\n          return this._normalizedQuery;\n        }\n\n        _shouldDirtyMatch(cmd, state) {\n          if (state.query !== this._state.query) {\n            return true;\n          }\n\n          switch (cmd) {\n            case \"findagain\":\n              const pageNumber = this._selected.pageIdx + 1;\n              const linkService = this._linkService;\n\n              if (pageNumber >= 1 && pageNumber <= linkService.pagesCount && pageNumber !== linkService.page && !linkService.isPageVisible(pageNumber)) {\n                return true;\n              }\n\n              return false;\n\n            case \"findhighlightallchange\":\n              return false;\n          }\n\n          return true;\n        }\n\n        _prepareMatches(matchesWithLength, matches, matchesLength) {\n          function isSubTerm(currentIndex) {\n            const currentElem = matchesWithLength[currentIndex];\n            const nextElem = matchesWithLength[currentIndex + 1];\n\n            if (currentIndex < matchesWithLength.length - 1 && currentElem.match === nextElem.match) {\n              currentElem.skipped = true;\n              return true;\n            }\n\n            for (let i = currentIndex - 1; i >= 0; i--) {\n              const prevElem = matchesWithLength[i];\n\n              if (prevElem.skipped) {\n                continue;\n              }\n\n              if (prevElem.match + prevElem.matchLength < currentElem.match) {\n                break;\n              }\n\n              if (prevElem.match + prevElem.matchLength >= currentElem.match + currentElem.matchLength) {\n                currentElem.skipped = true;\n                return true;\n              }\n            }\n\n            return false;\n          }\n\n          matchesWithLength.sort(function (a, b) {\n            return a.match === b.match ? a.matchLength - b.matchLength : a.match - b.match;\n          });\n\n          for (let i = 0, len = matchesWithLength.length; i < len; i++) {\n            if (isSubTerm(i)) {\n              continue;\n            }\n\n            matches.push(matchesWithLength[i].match);\n            matchesLength.push(matchesWithLength[i].matchLength);\n          }\n        }\n\n        _isEntireWord(content, startIdx, length) {\n          if (startIdx > 0) {\n            const first = content.charCodeAt(startIdx);\n            const limit = content.charCodeAt(startIdx - 1);\n\n            if ((0, _pdf_find_utils.getCharacterType)(first) === (0, _pdf_find_utils.getCharacterType)(limit)) {\n              return false;\n            }\n          }\n\n          const endIdx = startIdx + length - 1;\n\n          if (endIdx < content.length - 1) {\n            const last = content.charCodeAt(endIdx);\n            const limit = content.charCodeAt(endIdx + 1);\n\n            if ((0, _pdf_find_utils.getCharacterType)(last) === (0, _pdf_find_utils.getCharacterType)(limit)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        _calculatePhraseMatch(query, pageIndex, pageContent, entireWord) {\n          const matches = [];\n          const queryLen = query.length;\n          let matchIdx = -queryLen;\n\n          while (true) {\n            matchIdx = pageContent.indexOf(query, matchIdx + queryLen);\n\n            if (matchIdx === -1) {\n              break;\n            }\n\n            if (entireWord && !this._isEntireWord(pageContent, matchIdx, queryLen)) {\n              continue;\n            }\n\n            matches.push(matchIdx);\n          }\n\n          this._pageMatches[pageIndex] = matches;\n        }\n\n        _calculateWordMatch(query, pageIndex, pageContent, entireWord) {\n          const matchesWithLength = [];\n          const queryArray = query.match(/\\S+/g);\n\n          for (let i = 0, len = queryArray.length; i < len; i++) {\n            const subquery = queryArray[i];\n            const subqueryLen = subquery.length;\n            let matchIdx = -subqueryLen;\n\n            while (true) {\n              matchIdx = pageContent.indexOf(subquery, matchIdx + subqueryLen);\n\n              if (matchIdx === -1) {\n                break;\n              }\n\n              if (entireWord && !this._isEntireWord(pageContent, matchIdx, subqueryLen)) {\n                continue;\n              }\n\n              matchesWithLength.push({\n                match: matchIdx,\n                matchLength: subqueryLen,\n                skipped: false\n              });\n            }\n          }\n\n          this._pageMatchesLength[pageIndex] = [];\n          this._pageMatches[pageIndex] = [];\n\n          this._prepareMatches(matchesWithLength, this._pageMatches[pageIndex], this._pageMatchesLength[pageIndex]);\n        }\n\n        _calculateMatch(pageIndex) {\n          let pageContent = this._pageContents[pageIndex];\n          let query = this._query;\n          const {\n            caseSensitive,\n            entireWord,\n            phraseSearch\n          } = this._state;\n\n          if (query.length === 0) {\n            return;\n          }\n\n          if (!caseSensitive) {\n            pageContent = pageContent.toLowerCase();\n            query = query.toLowerCase();\n          }\n\n          if (phraseSearch) {\n            this._calculatePhraseMatch(query, pageIndex, pageContent, entireWord);\n          } else {\n            this._calculateWordMatch(query, pageIndex, pageContent, entireWord);\n          }\n\n          if (this._state.highlightAll) {\n            this._updatePage(pageIndex);\n          }\n\n          if (this._resumePageIdx === pageIndex) {\n            this._resumePageIdx = null;\n\n            this._nextPageMatch();\n          }\n\n          const pageMatchesCount = this._pageMatches[pageIndex].length;\n\n          if (pageMatchesCount > 0) {\n            this._matchesCountTotal += pageMatchesCount;\n\n            this._updateUIResultsCount();\n          }\n        }\n\n        _extractText() {\n          if (this._extractTextPromises.length > 0) {\n            return;\n          }\n\n          let promise = Promise.resolve();\n\n          for (let i = 0, ii = this._linkService.pagesCount; i < ii; i++) {\n            const extractTextCapability = (0, _pdfjsLib.createPromiseCapability)();\n            this._extractTextPromises[i] = extractTextCapability.promise;\n            promise = promise.then(() => {\n              return this._pdfDocument.getPage(i + 1).then(pdfPage => {\n                return pdfPage.getTextContent({\n                  normalizeWhitespace: true\n                });\n              }).then(textContent => {\n                const textItems = textContent.items;\n                const strBuf = [];\n\n                for (let j = 0, jj = textItems.length; j < jj; j++) {\n                  strBuf.push(textItems[j].str);\n                }\n\n                this._pageContents[i] = normalize(strBuf.join(\"\"));\n                extractTextCapability.resolve(i);\n              }, reason => {\n                console.error(`Unable to get text content for page ${i + 1}`, reason);\n                this._pageContents[i] = \"\";\n                extractTextCapability.resolve(i);\n              });\n            });\n          }\n        }\n\n        _updatePage(index) {\n          if (this._scrollMatches && this._selected.pageIdx === index) {\n            this._linkService.page = index + 1;\n          }\n\n          this._eventBus.dispatch(\"updatetextlayermatches\", {\n            source: this,\n            pageIndex: index\n          });\n        }\n\n        _updateAllPages() {\n          this._eventBus.dispatch(\"updatetextlayermatches\", {\n            source: this,\n            pageIndex: -1\n          });\n        }\n\n        _nextMatch() {\n          const previous = this._state.findPrevious;\n          const currentPageIndex = this._linkService.page - 1;\n          const numPages = this._linkService.pagesCount;\n          this._highlightMatches = true;\n\n          if (this._dirtyMatch) {\n            this._dirtyMatch = false;\n            this._selected.pageIdx = this._selected.matchIdx = -1;\n            this._offset.pageIdx = currentPageIndex;\n            this._offset.matchIdx = null;\n            this._offset.wrapped = false;\n            this._resumePageIdx = null;\n            this._pageMatches.length = 0;\n            this._pageMatchesLength.length = 0;\n            this._matchesCountTotal = 0;\n\n            this._updateAllPages();\n\n            for (let i = 0; i < numPages; i++) {\n              if (this._pendingFindMatches[i] === true) {\n                continue;\n              }\n\n              this._pendingFindMatches[i] = true;\n\n              this._extractTextPromises[i].then(pageIdx => {\n                delete this._pendingFindMatches[pageIdx];\n\n                this._calculateMatch(pageIdx);\n              });\n            }\n          }\n\n          if (this._query === \"\") {\n            this._updateUIState(FindState.FOUND);\n\n            return;\n          }\n\n          if (this._resumePageIdx) {\n            return;\n          }\n\n          const offset = this._offset;\n          this._pagesToSearch = numPages;\n\n          if (offset.matchIdx !== null) {\n            const numPageMatches = this._pageMatches[offset.pageIdx].length;\n\n            if (!previous && offset.matchIdx + 1 < numPageMatches || previous && offset.matchIdx > 0) {\n              offset.matchIdx = previous ? offset.matchIdx - 1 : offset.matchIdx + 1;\n\n              this._updateMatch(true);\n\n              return;\n            }\n\n            this._advanceOffsetPage(previous);\n          }\n\n          this._nextPageMatch();\n        }\n\n        _matchesReady(matches) {\n          const offset = this._offset;\n          const numMatches = matches.length;\n          const previous = this._state.findPrevious;\n\n          if (numMatches) {\n            offset.matchIdx = previous ? numMatches - 1 : 0;\n\n            this._updateMatch(true);\n\n            return true;\n          }\n\n          this._advanceOffsetPage(previous);\n\n          if (offset.wrapped) {\n            offset.matchIdx = null;\n\n            if (this._pagesToSearch < 0) {\n              this._updateMatch(false);\n\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        _nextPageMatch() {\n          if (this._resumePageIdx !== null) {\n            console.error(\"There can only be one pending page.\");\n          }\n\n          let matches = null;\n\n          do {\n            const pageIdx = this._offset.pageIdx;\n            matches = this._pageMatches[pageIdx];\n\n            if (!matches) {\n              this._resumePageIdx = pageIdx;\n              break;\n            }\n          } while (!this._matchesReady(matches));\n        }\n\n        _advanceOffsetPage(previous) {\n          const offset = this._offset;\n          const numPages = this._linkService.pagesCount;\n          offset.pageIdx = previous ? offset.pageIdx - 1 : offset.pageIdx + 1;\n          offset.matchIdx = null;\n          this._pagesToSearch--;\n\n          if (offset.pageIdx >= numPages || offset.pageIdx < 0) {\n            offset.pageIdx = previous ? numPages - 1 : 0;\n            offset.wrapped = true;\n          }\n        }\n\n        _updateMatch(found = false) {\n          let state = FindState.NOT_FOUND;\n          const wrapped = this._offset.wrapped;\n          this._offset.wrapped = false;\n\n          if (found) {\n            const previousPage = this._selected.pageIdx;\n            this._selected.pageIdx = this._offset.pageIdx;\n            this._selected.matchIdx = this._offset.matchIdx;\n            state = wrapped ? FindState.WRAPPED : FindState.FOUND;\n\n            if (previousPage !== -1 && previousPage !== this._selected.pageIdx) {\n              this._updatePage(previousPage);\n            }\n          }\n\n          this._updateUIState(state, this._state.findPrevious);\n\n          if (this._selected.pageIdx !== -1) {\n            this._scrollMatches = true;\n\n            this._updatePage(this._selected.pageIdx);\n          }\n        }\n\n        _onFindBarClose(evt) {\n          const pdfDocument = this._pdfDocument;\n\n          this._firstPageCapability.promise.then(() => {\n            if (!this._pdfDocument || pdfDocument && this._pdfDocument !== pdfDocument) {\n              return;\n            }\n\n            if (this._findTimeout) {\n              clearTimeout(this._findTimeout);\n              this._findTimeout = null;\n            }\n\n            if (this._resumePageIdx) {\n              this._resumePageIdx = null;\n              this._dirtyMatch = true;\n            }\n\n            this._updateUIState(FindState.FOUND);\n\n            this._highlightMatches = false;\n\n            this._updateAllPages();\n          });\n        }\n\n        _requestMatchesCount() {\n          const {\n            pageIdx,\n            matchIdx\n          } = this._selected;\n          let current = 0,\n              total = this._matchesCountTotal;\n\n          if (matchIdx !== -1) {\n            for (let i = 0; i < pageIdx; i++) {\n              current += this._pageMatches[i] && this._pageMatches[i].length || 0;\n            }\n\n            current += matchIdx + 1;\n          }\n\n          if (current < 1 || current > total) {\n            current = total = 0;\n          }\n\n          return {\n            current,\n            total\n          };\n        }\n\n        _updateUIResultsCount() {\n          this._eventBus.dispatch(\"updatefindmatchescount\", {\n            source: this,\n            matchesCount: this._requestMatchesCount()\n          });\n        }\n\n        _updateUIState(state, previous) {\n          this._eventBus.dispatch(\"updatefindcontrolstate\", {\n            source: this,\n            state,\n            previous,\n            matchesCount: this._requestMatchesCount()\n          });\n        }\n\n      }\n\n      exports.PDFFindController = PDFFindController;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.getCharacterType = getCharacterType;\n      exports.CharacterType = void 0;\n      const CharacterType = {\n        SPACE: 0,\n        ALPHA_LETTER: 1,\n        PUNCT: 2,\n        HAN_LETTER: 3,\n        KATAKANA_LETTER: 4,\n        HIRAGANA_LETTER: 5,\n        HALFWIDTH_KATAKANA_LETTER: 6,\n        THAI_LETTER: 7\n      };\n      exports.CharacterType = CharacterType;\n\n      function isAlphabeticalScript(charCode) {\n        return charCode < 0x2e80;\n      }\n\n      function isAscii(charCode) {\n        return (charCode & 0xff80) === 0;\n      }\n\n      function isAsciiAlpha(charCode) {\n        return charCode >= 0x61 && charCode <= 0x7a || charCode >= 0x41 && charCode <= 0x5a;\n      }\n\n      function isAsciiDigit(charCode) {\n        return charCode >= 0x30 && charCode <= 0x39;\n      }\n\n      function isAsciiSpace(charCode) {\n        return charCode === 0x20 || charCode === 0x09 || charCode === 0x0d || charCode === 0x0a;\n      }\n\n      function isHan(charCode) {\n        return charCode >= 0x3400 && charCode <= 0x9fff || charCode >= 0xf900 && charCode <= 0xfaff;\n      }\n\n      function isKatakana(charCode) {\n        return charCode >= 0x30a0 && charCode <= 0x30ff;\n      }\n\n      function isHiragana(charCode) {\n        return charCode >= 0x3040 && charCode <= 0x309f;\n      }\n\n      function isHalfwidthKatakana(charCode) {\n        return charCode >= 0xff60 && charCode <= 0xff9f;\n      }\n\n      function isThai(charCode) {\n        return (charCode & 0xff80) === 0x0e00;\n      }\n\n      function getCharacterType(charCode) {\n        if (isAlphabeticalScript(charCode)) {\n          if (isAscii(charCode)) {\n            if (isAsciiSpace(charCode)) {\n              return CharacterType.SPACE;\n            } else if (isAsciiAlpha(charCode) || isAsciiDigit(charCode) || charCode === 0x5f) {\n              return CharacterType.ALPHA_LETTER;\n            }\n\n            return CharacterType.PUNCT;\n          } else if (isThai(charCode)) {\n            return CharacterType.THAI_LETTER;\n          } else if (charCode === 0xa0) {\n            return CharacterType.SPACE;\n          }\n\n          return CharacterType.ALPHA_LETTER;\n        }\n\n        if (isHan(charCode)) {\n          return CharacterType.HAN_LETTER;\n        } else if (isKatakana(charCode)) {\n          return CharacterType.KATAKANA_LETTER;\n        } else if (isHiragana(charCode)) {\n          return CharacterType.HIRAGANA_LETTER;\n        } else if (isHalfwidthKatakana(charCode)) {\n          return CharacterType.HALFWIDTH_KATAKANA_LETTER;\n        }\n\n        return CharacterType.ALPHA_LETTER;\n      }\n      /***/\n\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.isDestHashesEqual = isDestHashesEqual;\n      exports.isDestArraysEqual = isDestArraysEqual;\n      exports.PDFHistory = void 0;\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      const HASH_CHANGE_TIMEOUT = 1000;\n      const POSITION_UPDATED_THRESHOLD = 50;\n      const UPDATE_VIEWAREA_TIMEOUT = 1000;\n\n      function getCurrentHash() {\n        return document.location.hash;\n      }\n\n      class PDFHistory {\n        constructor({\n          linkService,\n          eventBus\n        }) {\n          this.linkService = linkService;\n          this.eventBus = eventBus;\n          this._initialized = false;\n          this._fingerprint = \"\";\n          this.reset();\n          this._boundEvents = null;\n          this._isViewerInPresentationMode = false;\n\n          this.eventBus._on(\"presentationmodechanged\", evt => {\n            this._isViewerInPresentationMode = evt.active || evt.switchInProgress;\n          });\n\n          this.eventBus._on(\"pagesinit\", () => {\n            this._isPagesLoaded = false;\n\n            const onPagesLoaded = evt => {\n              this.eventBus._off(\"pagesloaded\", onPagesLoaded);\n\n              this._isPagesLoaded = !!evt.pagesCount;\n            };\n\n            this.eventBus._on(\"pagesloaded\", onPagesLoaded);\n          });\n        }\n\n        initialize({\n          fingerprint,\n          resetHistory = false,\n          updateUrl = false\n        }) {\n          if (!fingerprint || typeof fingerprint !== \"string\") {\n            console.error('PDFHistory.initialize: The \"fingerprint\" must be a non-empty string.');\n            return;\n          }\n\n          if (this._initialized) {\n            this.reset();\n          }\n\n          const reInitialized = this._fingerprint !== \"\" && this._fingerprint !== fingerprint;\n          this._fingerprint = fingerprint;\n          this._updateUrl = updateUrl === true;\n          this._initialized = true;\n\n          this._bindEvents();\n\n          const state = window.history.state;\n          this._popStateInProgress = false;\n          this._blockHashChange = 0;\n          this._currentHash = getCurrentHash();\n          this._numPositionUpdates = 0;\n          this._uid = this._maxUid = 0;\n          this._destination = null;\n          this._position = null;\n\n          if (!this._isValidState(state, true) || resetHistory) {\n            const {\n              hash,\n              page,\n              rotation\n            } = this._parseCurrentHash(true);\n\n            if (!hash || reInitialized || resetHistory) {\n              this._pushOrReplaceState(null, true);\n\n              return;\n            }\n\n            this._pushOrReplaceState({\n              hash,\n              page,\n              rotation\n            }, true);\n\n            return;\n          }\n\n          const destination = state.destination;\n\n          this._updateInternalState(destination, state.uid, true);\n\n          if (this._uid > this._maxUid) {\n            this._maxUid = this._uid;\n          }\n\n          if (destination.rotation !== undefined) {\n            this._initialRotation = destination.rotation;\n          }\n\n          if (destination.dest) {\n            this._initialBookmark = JSON.stringify(destination.dest);\n            this._destination.page = null;\n          } else if (destination.hash) {\n            this._initialBookmark = destination.hash;\n          } else if (destination.page) {\n            this._initialBookmark = `page=${destination.page}`;\n          }\n        }\n\n        reset() {\n          if (this._initialized) {\n            this._pageHide();\n\n            this._initialized = false;\n\n            this._unbindEvents();\n          }\n\n          if (this._updateViewareaTimeout) {\n            clearTimeout(this._updateViewareaTimeout);\n            this._updateViewareaTimeout = null;\n          }\n\n          this._initialBookmark = null;\n          this._initialRotation = null;\n        }\n\n        push({\n          namedDest = null,\n          explicitDest,\n          pageNumber\n        }) {\n          if (!this._initialized) {\n            return;\n          }\n\n          if (namedDest && typeof namedDest !== \"string\") {\n            console.error(\"PDFHistory.push: \" + `\"${namedDest}\" is not a valid namedDest parameter.`);\n            return;\n          } else if (!Array.isArray(explicitDest)) {\n            console.error(\"PDFHistory.push: \" + `\"${explicitDest}\" is not a valid explicitDest parameter.`);\n            return;\n          } else if (!(Number.isInteger(pageNumber) && pageNumber > 0 && pageNumber <= this.linkService.pagesCount)) {\n            if (pageNumber !== null || this._destination) {\n              console.error(\"PDFHistory.push: \" + `\"${pageNumber}\" is not a valid pageNumber parameter.`);\n              return;\n            }\n          }\n\n          const hash = namedDest || JSON.stringify(explicitDest);\n\n          if (!hash) {\n            return;\n          }\n\n          let forceReplace = false;\n\n          if (this._destination && (isDestHashesEqual(this._destination.hash, hash) || isDestArraysEqual(this._destination.dest, explicitDest))) {\n            if (this._destination.page) {\n              return;\n            }\n\n            forceReplace = true;\n          }\n\n          if (this._popStateInProgress && !forceReplace) {\n            return;\n          }\n\n          this._pushOrReplaceState({\n            dest: explicitDest,\n            hash,\n            page: pageNumber,\n            rotation: this.linkService.rotation\n          }, forceReplace);\n\n          if (!this._popStateInProgress) {\n            this._popStateInProgress = true;\n            Promise.resolve().then(() => {\n              this._popStateInProgress = false;\n            });\n          }\n        }\n\n        pushCurrentPosition() {\n          if (!this._initialized || this._popStateInProgress) {\n            return;\n          }\n\n          this._tryPushCurrentPosition();\n        }\n\n        back() {\n          if (!this._initialized || this._popStateInProgress) {\n            return;\n          }\n\n          const state = window.history.state;\n\n          if (this._isValidState(state) && state.uid > 0) {\n            window.history.back();\n          }\n        }\n\n        forward() {\n          if (!this._initialized || this._popStateInProgress) {\n            return;\n          }\n\n          const state = window.history.state;\n\n          if (this._isValidState(state) && state.uid < this._maxUid) {\n            window.history.forward();\n          }\n        }\n\n        get popStateInProgress() {\n          return this._initialized && (this._popStateInProgress || this._blockHashChange > 0);\n        }\n\n        get initialBookmark() {\n          return this._initialized ? this._initialBookmark : null;\n        }\n\n        get initialRotation() {\n          return this._initialized ? this._initialRotation : null;\n        }\n\n        _pushOrReplaceState(destination, forceReplace = false) {\n          const shouldReplace = forceReplace || !this._destination;\n          const newState = {\n            fingerprint: this._fingerprint,\n            uid: shouldReplace ? this._uid : this._uid + 1,\n            destination\n          };\n\n          this._updateInternalState(destination, newState.uid);\n\n          let newUrl;\n\n          if (this._updateUrl && destination && destination.hash) {\n            const baseUrl = document.location.href.split(\"#\")[0];\n\n            if (!baseUrl.startsWith(\"file://\")) {\n              newUrl = `${baseUrl}#${destination.hash}`;\n            }\n          }\n\n          if (shouldReplace) {\n            window.history.replaceState(newState, \"\", newUrl);\n          } else {\n            this._maxUid = this._uid;\n            window.history.pushState(newState, \"\", newUrl);\n          }\n        }\n\n        _tryPushCurrentPosition(temporary = false) {\n          if (!this._position) {\n            return;\n          }\n\n          let position = this._position;\n\n          if (temporary) {\n            position = Object.assign(Object.create(null), this._position);\n            position.temporary = true;\n          }\n\n          if (!this._destination) {\n            this._pushOrReplaceState(position);\n\n            return;\n          }\n\n          if (this._destination.temporary) {\n            this._pushOrReplaceState(position, true);\n\n            return;\n          }\n\n          if (this._destination.hash === position.hash) {\n            return;\n          }\n\n          if (!this._destination.page && (POSITION_UPDATED_THRESHOLD <= 0 || this._numPositionUpdates <= POSITION_UPDATED_THRESHOLD)) {\n            return;\n          }\n\n          let forceReplace = false;\n\n          if (this._destination.page >= position.first && this._destination.page <= position.page) {\n            if (this._destination.dest || !this._destination.first) {\n              return;\n            }\n\n            forceReplace = true;\n          }\n\n          this._pushOrReplaceState(position, forceReplace);\n        }\n\n        _isValidState(state, checkReload = false) {\n          if (!state) {\n            return false;\n          }\n\n          if (state.fingerprint !== this._fingerprint) {\n            if (checkReload) {\n              if (typeof state.fingerprint !== \"string\" || state.fingerprint.length !== this._fingerprint.length) {\n                return false;\n              }\n\n              const [perfEntry] = performance.getEntriesByType(\"navigation\");\n\n              if (!perfEntry || perfEntry.type !== \"reload\") {\n                return false;\n              }\n            } else {\n              return false;\n            }\n          }\n\n          if (!Number.isInteger(state.uid) || state.uid < 0) {\n            return false;\n          }\n\n          if (state.destination === null || typeof state.destination !== \"object\") {\n            return false;\n          }\n\n          return true;\n        }\n\n        _updateInternalState(destination, uid, removeTemporary = false) {\n          if (this._updateViewareaTimeout) {\n            clearTimeout(this._updateViewareaTimeout);\n            this._updateViewareaTimeout = null;\n          }\n\n          if (removeTemporary && destination && destination.temporary) {\n            delete destination.temporary;\n          }\n\n          this._destination = destination;\n          this._uid = uid;\n          this._numPositionUpdates = 0;\n        }\n\n        _parseCurrentHash(checkNameddest = false) {\n          const hash = unescape(getCurrentHash()).substring(1);\n          const params = (0, _ui_utils.parseQueryString)(hash);\n          const nameddest = params.nameddest || \"\";\n          let page = params.page | 0;\n\n          if (!(Number.isInteger(page) && page > 0 && page <= this.linkService.pagesCount) || checkNameddest && nameddest.length > 0) {\n            page = null;\n          }\n\n          return {\n            hash,\n            page,\n            rotation: this.linkService.rotation\n          };\n        }\n\n        _updateViewarea({\n          location\n        }) {\n          if (this._updateViewareaTimeout) {\n            clearTimeout(this._updateViewareaTimeout);\n            this._updateViewareaTimeout = null;\n          }\n\n          this._position = {\n            hash: this._isViewerInPresentationMode ? `page=${location.pageNumber}` : location.pdfOpenParams.substring(1),\n            page: this.linkService.page,\n            first: location.pageNumber,\n            rotation: location.rotation\n          };\n\n          if (this._popStateInProgress) {\n            return;\n          }\n\n          if (POSITION_UPDATED_THRESHOLD > 0 && this._isPagesLoaded && this._destination && !this._destination.page) {\n            this._numPositionUpdates++;\n          }\n\n          if (UPDATE_VIEWAREA_TIMEOUT > 0) {\n            this._updateViewareaTimeout = setTimeout(() => {\n              if (!this._popStateInProgress) {\n                this._tryPushCurrentPosition(true);\n              }\n\n              this._updateViewareaTimeout = null;\n            }, UPDATE_VIEWAREA_TIMEOUT);\n          }\n        }\n\n        _popState({\n          state\n        }) {\n          const newHash = getCurrentHash(),\n                hashChanged = this._currentHash !== newHash;\n          this._currentHash = newHash;\n\n          if (!state) {\n            this._uid++;\n\n            const {\n              hash,\n              page,\n              rotation\n            } = this._parseCurrentHash();\n\n            this._pushOrReplaceState({\n              hash,\n              page,\n              rotation\n            }, true);\n\n            return;\n          }\n\n          if (!this._isValidState(state)) {\n            return;\n          }\n\n          this._popStateInProgress = true;\n\n          if (hashChanged) {\n            this._blockHashChange++;\n            (0, _ui_utils.waitOnEventOrTimeout)({\n              target: window,\n              name: \"hashchange\",\n              delay: HASH_CHANGE_TIMEOUT\n            }).then(() => {\n              this._blockHashChange--;\n            });\n          }\n\n          const destination = state.destination;\n\n          this._updateInternalState(destination, state.uid, true);\n\n          if (this._uid > this._maxUid) {\n            this._maxUid = this._uid;\n          }\n\n          if ((0, _ui_utils.isValidRotation)(destination.rotation)) {\n            this.linkService.rotation = destination.rotation;\n          }\n\n          if (destination.dest) {\n            this.linkService.navigateTo(destination.dest);\n          } else if (destination.hash) {\n            this.linkService.setHash(destination.hash);\n          } else if (destination.page) {\n            this.linkService.page = destination.page;\n          }\n\n          Promise.resolve().then(() => {\n            this._popStateInProgress = false;\n          });\n        }\n\n        _pageHide() {\n          if (!this._destination || this._destination.temporary) {\n            this._tryPushCurrentPosition();\n          }\n        }\n\n        _bindEvents() {\n          if (this._boundEvents) {\n            return;\n          }\n\n          this._boundEvents = {\n            updateViewarea: this._updateViewarea.bind(this),\n            popState: this._popState.bind(this),\n            pageHide: this._pageHide.bind(this)\n          };\n\n          this.eventBus._on(\"updateviewarea\", this._boundEvents.updateViewarea);\n\n          window.addEventListener(\"popstate\", this._boundEvents.popState);\n          window.addEventListener(\"pagehide\", this._boundEvents.pageHide);\n        }\n\n        _unbindEvents() {\n          if (!this._boundEvents) {\n            return;\n          }\n\n          this.eventBus._off(\"updateviewarea\", this._boundEvents.updateViewarea);\n\n          window.removeEventListener(\"popstate\", this._boundEvents.popState);\n          window.removeEventListener(\"pagehide\", this._boundEvents.pageHide);\n          this._boundEvents = null;\n        }\n\n      }\n\n      exports.PDFHistory = PDFHistory;\n\n      function isDestHashesEqual(destHash, pushHash) {\n        if (typeof destHash !== \"string\" || typeof pushHash !== \"string\") {\n          return false;\n        }\n\n        if (destHash === pushHash) {\n          return true;\n        }\n\n        const {\n          nameddest\n        } = (0, _ui_utils.parseQueryString)(destHash);\n\n        if (nameddest === pushHash) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function isDestArraysEqual(firstDest, secondDest) {\n        function isEntryEqual(first, second) {\n          if (typeof first !== typeof second) {\n            return false;\n          }\n\n          if (Array.isArray(first) || Array.isArray(second)) {\n            return false;\n          }\n\n          if (first !== null && typeof first === \"object\" && second !== null) {\n            if (Object.keys(first).length !== Object.keys(second).length) {\n              return false;\n            }\n\n            for (const key in first) {\n              if (!isEntryEqual(first[key], second[key])) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n\n          return first === second || Number.isNaN(first) && Number.isNaN(second);\n        }\n\n        if (!(Array.isArray(firstDest) && Array.isArray(secondDest))) {\n          return false;\n        }\n\n        if (firstDest.length !== secondDest.length) {\n          return false;\n        }\n\n        for (let i = 0, ii = firstDest.length; i < ii; i++) {\n          if (!isEntryEqual(firstDest[i], secondDest[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n      /***/\n\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.PDFPageView = void 0;\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      var _pdf_rendering_queue = __w_pdfjs_require__(14);\n\n      var _viewer_compatibility = __w_pdfjs_require__(7);\n\n      const MAX_CANVAS_PIXELS = _viewer_compatibility.viewerCompatibilityParams.maxCanvasPixels || 16777216;\n\n      class PDFPageView {\n        constructor(options) {\n          const container = options.container;\n          const defaultViewport = options.defaultViewport;\n          this.id = options.id;\n          this.renderingId = \"page\" + this.id;\n          this.pdfPage = null;\n          this.pageLabel = null;\n          this.rotation = 0;\n          this.scale = options.scale || _ui_utils.DEFAULT_SCALE;\n          this.viewport = defaultViewport;\n          this.pdfPageRotate = defaultViewport.rotation;\n          this.hasRestrictedScaling = false;\n          this.textLayerMode = Number.isInteger(options.textLayerMode) ? options.textLayerMode : _ui_utils.TextLayerMode.ENABLE;\n          this.imageResourcesPath = options.imageResourcesPath || \"\";\n          this.renderInteractiveForms = options.renderInteractiveForms || false;\n          this.useOnlyCssZoom = options.useOnlyCssZoom || false;\n          this.maxCanvasPixels = options.maxCanvasPixels || MAX_CANVAS_PIXELS;\n          this.eventBus = options.eventBus;\n          this.renderingQueue = options.renderingQueue;\n          this.textLayerFactory = options.textLayerFactory;\n          this.annotationLayerFactory = options.annotationLayerFactory;\n          this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;\n          this.enableWebGL = options.enableWebGL || false;\n          this.l10n = options.l10n || _ui_utils.NullL10n;\n          this.paintTask = null;\n          this.paintedViewportMap = new WeakMap();\n          this.renderingState = _pdf_rendering_queue.RenderingStates.INITIAL;\n          this.resume = null;\n          this.error = null;\n          this.annotationLayer = null;\n          this.textLayer = null;\n          this.zoomLayer = null;\n          const div = document.createElement(\"div\");\n          div.className = \"page\";\n          div.style.width = Math.floor(this.viewport.width) + \"px\";\n          div.style.height = Math.floor(this.viewport.height) + \"px\";\n          div.setAttribute(\"data-page-number\", this.id);\n          this.div = div;\n          container.appendChild(div);\n        }\n\n        setPdfPage(pdfPage) {\n          this.pdfPage = pdfPage;\n          this.pdfPageRotate = pdfPage.rotate;\n          const totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n          this.viewport = pdfPage.getViewport({\n            scale: this.scale * _ui_utils.CSS_UNITS,\n            rotation: totalRotation\n          });\n          this.stats = pdfPage.stats;\n          this.reset();\n        }\n\n        destroy() {\n          this.reset();\n\n          if (this.pdfPage) {\n            this.pdfPage.cleanup();\n          }\n        }\n\n        _resetZoomLayer(removeFromDOM = false) {\n          if (!this.zoomLayer) {\n            return;\n          }\n\n          const zoomLayerCanvas = this.zoomLayer.firstChild;\n          this.paintedViewportMap.delete(zoomLayerCanvas);\n          zoomLayerCanvas.width = 0;\n          zoomLayerCanvas.height = 0;\n\n          if (removeFromDOM) {\n            this.zoomLayer.remove();\n          }\n\n          this.zoomLayer = null;\n        }\n\n        reset(keepZoomLayer = false, keepAnnotations = false) {\n          this.cancelRendering(keepAnnotations);\n          this.renderingState = _pdf_rendering_queue.RenderingStates.INITIAL;\n          const div = this.div;\n          div.style.width = Math.floor(this.viewport.width) + \"px\";\n          div.style.height = Math.floor(this.viewport.height) + \"px\";\n          const childNodes = div.childNodes;\n          const currentZoomLayerNode = keepZoomLayer && this.zoomLayer || null;\n          const currentAnnotationNode = keepAnnotations && this.annotationLayer && this.annotationLayer.div || null;\n\n          for (let i = childNodes.length - 1; i >= 0; i--) {\n            const node = childNodes[i];\n\n            if (currentZoomLayerNode === node || currentAnnotationNode === node) {\n              continue;\n            }\n\n            div.removeChild(node);\n          }\n\n          div.removeAttribute(\"data-loaded\");\n\n          if (currentAnnotationNode) {\n            this.annotationLayer.hide();\n          } else if (this.annotationLayer) {\n            this.annotationLayer.cancel();\n            this.annotationLayer = null;\n          }\n\n          if (!currentZoomLayerNode) {\n            if (this.canvas) {\n              this.paintedViewportMap.delete(this.canvas);\n              this.canvas.width = 0;\n              this.canvas.height = 0;\n              delete this.canvas;\n            }\n\n            this._resetZoomLayer();\n          }\n\n          if (this.svg) {\n            this.paintedViewportMap.delete(this.svg);\n            delete this.svg;\n          }\n\n          this.loadingIconDiv = document.createElement(\"div\");\n          this.loadingIconDiv.className = \"loadingIcon\";\n          div.appendChild(this.loadingIconDiv);\n        }\n\n        update(scale, rotation) {\n          this.scale = scale || this.scale;\n\n          if (typeof rotation !== \"undefined\") {\n            this.rotation = rotation;\n          }\n\n          const totalRotation = (this.rotation + this.pdfPageRotate) % 360;\n          this.viewport = this.viewport.clone({\n            scale: this.scale * _ui_utils.CSS_UNITS,\n            rotation: totalRotation\n          });\n\n          if (this.svg) {\n            this.cssTransform(this.svg, true);\n            this.eventBus.dispatch(\"pagerendered\", {\n              source: this,\n              pageNumber: this.id,\n              cssTransform: true,\n              timestamp: performance.now()\n            });\n            return;\n          }\n\n          let isScalingRestricted = false;\n\n          if (this.canvas && this.maxCanvasPixels > 0) {\n            const outputScale = this.outputScale;\n\n            if ((Math.floor(this.viewport.width) * outputScale.sx | 0) * (Math.floor(this.viewport.height) * outputScale.sy | 0) > this.maxCanvasPixels) {\n              isScalingRestricted = true;\n            }\n          }\n\n          if (this.canvas) {\n            if (this.useOnlyCssZoom || this.hasRestrictedScaling && isScalingRestricted) {\n              this.cssTransform(this.canvas, true);\n              this.eventBus.dispatch(\"pagerendered\", {\n                source: this,\n                pageNumber: this.id,\n                cssTransform: true,\n                timestamp: performance.now()\n              });\n              return;\n            }\n\n            if (!this.zoomLayer && !this.canvas.hasAttribute(\"hidden\")) {\n              this.zoomLayer = this.canvas.parentNode;\n              this.zoomLayer.style.position = \"absolute\";\n            }\n          }\n\n          if (this.zoomLayer) {\n            this.cssTransform(this.zoomLayer.firstChild);\n          }\n\n          this.reset(true, true);\n        }\n\n        cancelRendering(keepAnnotations = false) {\n          if (this.paintTask) {\n            this.paintTask.cancel();\n            this.paintTask = null;\n          }\n\n          this.resume = null;\n\n          if (this.textLayer) {\n            this.textLayer.cancel();\n            this.textLayer = null;\n          }\n\n          if (!keepAnnotations && this.annotationLayer) {\n            this.annotationLayer.cancel();\n            this.annotationLayer = null;\n          }\n        }\n\n        cssTransform(target, redrawAnnotations = false) {\n          const width = this.viewport.width;\n          const height = this.viewport.height;\n          const div = this.div;\n          target.style.width = target.parentNode.style.width = div.style.width = Math.floor(width) + \"px\";\n          target.style.height = target.parentNode.style.height = div.style.height = Math.floor(height) + \"px\";\n          const relativeRotation = this.viewport.rotation - this.paintedViewportMap.get(target).rotation;\n          const absRotation = Math.abs(relativeRotation);\n          let scaleX = 1,\n              scaleY = 1;\n\n          if (absRotation === 90 || absRotation === 270) {\n            scaleX = height / width;\n            scaleY = width / height;\n          }\n\n          const cssTransform = \"rotate(\" + relativeRotation + \"deg) \" + \"scale(\" + scaleX + \",\" + scaleY + \")\";\n          target.style.transform = cssTransform;\n\n          if (this.textLayer) {\n            const textLayerViewport = this.textLayer.viewport;\n            const textRelativeRotation = this.viewport.rotation - textLayerViewport.rotation;\n            const textAbsRotation = Math.abs(textRelativeRotation);\n            let scale = width / textLayerViewport.width;\n\n            if (textAbsRotation === 90 || textAbsRotation === 270) {\n              scale = width / textLayerViewport.height;\n            }\n\n            const textLayerDiv = this.textLayer.textLayerDiv;\n            let transX, transY;\n\n            switch (textAbsRotation) {\n              case 0:\n                transX = transY = 0;\n                break;\n\n              case 90:\n                transX = 0;\n                transY = \"-\" + textLayerDiv.style.height;\n                break;\n\n              case 180:\n                transX = \"-\" + textLayerDiv.style.width;\n                transY = \"-\" + textLayerDiv.style.height;\n                break;\n\n              case 270:\n                transX = \"-\" + textLayerDiv.style.width;\n                transY = 0;\n                break;\n\n              default:\n                console.error(\"Bad rotation value.\");\n                break;\n            }\n\n            textLayerDiv.style.transform = \"rotate(\" + textAbsRotation + \"deg) \" + \"scale(\" + scale + \", \" + scale + \") \" + \"translate(\" + transX + \", \" + transY + \")\";\n            textLayerDiv.style.transformOrigin = \"0% 0%\";\n          }\n\n          if (redrawAnnotations && this.annotationLayer) {\n            this.annotationLayer.render(this.viewport, \"display\");\n          }\n        }\n\n        get width() {\n          return this.viewport.width;\n        }\n\n        get height() {\n          return this.viewport.height;\n        }\n\n        getPagePoint(x, y) {\n          return this.viewport.convertToPdfPoint(x, y);\n        }\n\n        draw() {\n          var _this5 = this;\n\n          if (this.renderingState !== _pdf_rendering_queue.RenderingStates.INITIAL) {\n            console.error(\"Must be in new state before drawing\");\n            this.reset();\n          }\n\n          const {\n            div,\n            pdfPage\n          } = this;\n\n          if (!pdfPage) {\n            this.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;\n\n            if (this.loadingIconDiv) {\n              div.removeChild(this.loadingIconDiv);\n              delete this.loadingIconDiv;\n            }\n\n            return Promise.reject(new Error(\"pdfPage is not loaded\"));\n          }\n\n          this.renderingState = _pdf_rendering_queue.RenderingStates.RUNNING;\n          const canvasWrapper = document.createElement(\"div\");\n          canvasWrapper.style.width = div.style.width;\n          canvasWrapper.style.height = div.style.height;\n          canvasWrapper.classList.add(\"canvasWrapper\");\n\n          if (this.annotationLayer && this.annotationLayer.div) {\n            div.insertBefore(canvasWrapper, this.annotationLayer.div);\n          } else {\n            div.appendChild(canvasWrapper);\n          }\n\n          let textLayer = null;\n\n          if (this.textLayerMode !== _ui_utils.TextLayerMode.DISABLE && this.textLayerFactory) {\n            const textLayerDiv = document.createElement(\"div\");\n            textLayerDiv.className = \"textLayer\";\n            textLayerDiv.style.width = canvasWrapper.style.width;\n            textLayerDiv.style.height = canvasWrapper.style.height;\n\n            if (this.annotationLayer && this.annotationLayer.div) {\n              div.insertBefore(textLayerDiv, this.annotationLayer.div);\n            } else {\n              div.appendChild(textLayerDiv);\n            }\n\n            textLayer = this.textLayerFactory.createTextLayerBuilder(textLayerDiv, this.id - 1, this.viewport, this.textLayerMode === _ui_utils.TextLayerMode.ENABLE_ENHANCE, this.eventBus);\n          }\n\n          this.textLayer = textLayer;\n          let renderContinueCallback = null;\n\n          if (this.renderingQueue) {\n            renderContinueCallback = cont => {\n              if (!this.renderingQueue.isHighestPriority(this)) {\n                this.renderingState = _pdf_rendering_queue.RenderingStates.PAUSED;\n\n                this.resume = () => {\n                  this.renderingState = _pdf_rendering_queue.RenderingStates.RUNNING;\n                  cont();\n                };\n\n                return;\n              }\n\n              cont();\n            };\n          }\n\n          const finishPaintTask = /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator(function* (error) {\n              if (paintTask === _this5.paintTask) {\n                _this5.paintTask = null;\n              }\n\n              if (error instanceof _pdfjsLib.RenderingCancelledException) {\n                _this5.error = null;\n                return;\n              }\n\n              _this5.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;\n\n              if (_this5.loadingIconDiv) {\n                div.removeChild(_this5.loadingIconDiv);\n                delete _this5.loadingIconDiv;\n              }\n\n              _this5._resetZoomLayer(true);\n\n              _this5.error = error;\n              _this5.stats = pdfPage.stats;\n\n              _this5.eventBus.dispatch(\"pagerendered\", {\n                source: _this5,\n                pageNumber: _this5.id,\n                cssTransform: false,\n                timestamp: performance.now()\n              });\n\n              if (error) {\n                throw error;\n              }\n            });\n\n            return function finishPaintTask(_x) {\n              return _ref.apply(this, arguments);\n            };\n          }();\n\n          const paintTask = this.renderer === _ui_utils.RendererType.SVG ? this.paintOnSvg(canvasWrapper) : this.paintOnCanvas(canvasWrapper);\n          paintTask.onRenderContinue = renderContinueCallback;\n          this.paintTask = paintTask;\n          const resultPromise = paintTask.promise.then(function () {\n            return finishPaintTask(null).then(function () {\n              if (textLayer) {\n                const readableStream = pdfPage.streamTextContent({\n                  normalizeWhitespace: true\n                });\n                textLayer.setTextContentStream(readableStream);\n                textLayer.render();\n              }\n            });\n          }, function (reason) {\n            return finishPaintTask(reason);\n          });\n\n          if (this.annotationLayerFactory) {\n            if (!this.annotationLayer) {\n              this.annotationLayer = this.annotationLayerFactory.createAnnotationLayerBuilder(div, pdfPage, this.imageResourcesPath, this.renderInteractiveForms, this.l10n);\n            }\n\n            this.annotationLayer.render(this.viewport, \"display\");\n          }\n\n          div.setAttribute(\"data-loaded\", true);\n          this.eventBus.dispatch(\"pagerender\", {\n            source: this,\n            pageNumber: this.id\n          });\n          return resultPromise;\n        }\n\n        paintOnCanvas(canvasWrapper) {\n          const renderCapability = (0, _pdfjsLib.createPromiseCapability)();\n          const result = {\n            promise: renderCapability.promise,\n\n            onRenderContinue(cont) {\n              cont();\n            },\n\n            cancel() {\n              renderTask.cancel();\n            }\n\n          };\n          const viewport = this.viewport;\n          const canvas = document.createElement(\"canvas\");\n          this.l10n.get(\"page_canvas\", {\n            page: this.id\n          }, \"Page {{page}}\").then(msg => {\n            canvas.setAttribute(\"aria-label\", msg);\n          });\n          canvas.setAttribute(\"hidden\", \"hidden\");\n          let isCanvasHidden = true;\n\n          const showCanvas = function () {\n            if (isCanvasHidden) {\n              canvas.removeAttribute(\"hidden\");\n              isCanvasHidden = false;\n            }\n          };\n\n          canvasWrapper.appendChild(canvas);\n          this.canvas = canvas;\n          canvas.mozOpaque = true;\n          const ctx = canvas.getContext(\"2d\", {\n            alpha: false\n          });\n          const outputScale = (0, _ui_utils.getOutputScale)(ctx);\n          this.outputScale = outputScale;\n\n          if (this.useOnlyCssZoom) {\n            const actualSizeViewport = viewport.clone({\n              scale: _ui_utils.CSS_UNITS\n            });\n            outputScale.sx *= actualSizeViewport.width / viewport.width;\n            outputScale.sy *= actualSizeViewport.height / viewport.height;\n            outputScale.scaled = true;\n          }\n\n          if (this.maxCanvasPixels > 0) {\n            const pixelsInViewport = viewport.width * viewport.height;\n            const maxScale = Math.sqrt(this.maxCanvasPixels / pixelsInViewport);\n\n            if (outputScale.sx > maxScale || outputScale.sy > maxScale) {\n              outputScale.sx = maxScale;\n              outputScale.sy = maxScale;\n              outputScale.scaled = true;\n              this.hasRestrictedScaling = true;\n            } else {\n              this.hasRestrictedScaling = false;\n            }\n          }\n\n          const sfx = (0, _ui_utils.approximateFraction)(outputScale.sx);\n          const sfy = (0, _ui_utils.approximateFraction)(outputScale.sy);\n          canvas.width = (0, _ui_utils.roundToDivide)(viewport.width * outputScale.sx, sfx[0]);\n          canvas.height = (0, _ui_utils.roundToDivide)(viewport.height * outputScale.sy, sfy[0]);\n          canvas.style.width = (0, _ui_utils.roundToDivide)(viewport.width, sfx[1]) + \"px\";\n          canvas.style.height = (0, _ui_utils.roundToDivide)(viewport.height, sfy[1]) + \"px\";\n          this.paintedViewportMap.set(canvas, viewport);\n          const transform = !outputScale.scaled ? null : [outputScale.sx, 0, 0, outputScale.sy, 0, 0];\n          const renderContext = {\n            canvasContext: ctx,\n            transform,\n            viewport: this.viewport,\n            enableWebGL: this.enableWebGL,\n            renderInteractiveForms: this.renderInteractiveForms\n          };\n          const renderTask = this.pdfPage.render(renderContext);\n\n          renderTask.onContinue = function (cont) {\n            showCanvas();\n\n            if (result.onRenderContinue) {\n              result.onRenderContinue(cont);\n            } else {\n              cont();\n            }\n          };\n\n          renderTask.promise.then(function () {\n            showCanvas();\n            renderCapability.resolve(undefined);\n          }, function (error) {\n            showCanvas();\n            renderCapability.reject(error);\n          });\n          return result;\n        }\n\n        paintOnSvg(wrapper) {\n          let cancelled = false;\n\n          const ensureNotCancelled = () => {\n            if (cancelled) {\n              throw new _pdfjsLib.RenderingCancelledException(`Rendering cancelled, page ${this.id}`, \"svg\");\n            }\n          };\n\n          const pdfPage = this.pdfPage;\n          const actualSizeViewport = this.viewport.clone({\n            scale: _ui_utils.CSS_UNITS\n          });\n          const promise = pdfPage.getOperatorList().then(opList => {\n            ensureNotCancelled();\n            const svgGfx = new _pdfjsLib.SVGGraphics(pdfPage.commonObjs, pdfPage.objs);\n            return svgGfx.getSVG(opList, actualSizeViewport).then(svg => {\n              ensureNotCancelled();\n              this.svg = svg;\n              this.paintedViewportMap.set(svg, actualSizeViewport);\n              svg.style.width = wrapper.style.width;\n              svg.style.height = wrapper.style.height;\n              this.renderingState = _pdf_rendering_queue.RenderingStates.FINISHED;\n              wrapper.appendChild(svg);\n            });\n          });\n          return {\n            promise,\n\n            onRenderContinue(cont) {\n              cont();\n            },\n\n            cancel() {\n              cancelled = true;\n            }\n\n          };\n        }\n\n        setPageLabel(label) {\n          this.pageLabel = typeof label === \"string\" ? label : null;\n\n          if (this.pageLabel !== null) {\n            this.div.setAttribute(\"data-page-label\", this.pageLabel);\n          } else {\n            this.div.removeAttribute(\"data-page-label\");\n          }\n        }\n\n      }\n\n      exports.PDFPageView = PDFPageView;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.PDFRenderingQueue = exports.RenderingStates = void 0;\n      const CLEANUP_TIMEOUT = 30000;\n      const RenderingStates = {\n        INITIAL: 0,\n        RUNNING: 1,\n        PAUSED: 2,\n        FINISHED: 3\n      };\n      exports.RenderingStates = RenderingStates;\n\n      class PDFRenderingQueue {\n        constructor() {\n          this.pdfViewer = null;\n          this.pdfThumbnailViewer = null;\n          this.onIdle = null;\n          this.highestPriorityPage = null;\n          this.idleTimeout = null;\n          this.printing = false;\n          this.isThumbnailViewEnabled = false;\n        }\n\n        setViewer(pdfViewer) {\n          this.pdfViewer = pdfViewer;\n        }\n\n        setThumbnailViewer(pdfThumbnailViewer) {\n          this.pdfThumbnailViewer = pdfThumbnailViewer;\n        }\n\n        isHighestPriority(view) {\n          return this.highestPriorityPage === view.renderingId;\n        }\n\n        renderHighestPriority(currentlyVisiblePages) {\n          if (this.idleTimeout) {\n            clearTimeout(this.idleTimeout);\n            this.idleTimeout = null;\n          }\n\n          if (this.pdfViewer.forceRendering(currentlyVisiblePages)) {\n            return;\n          }\n\n          if (this.pdfThumbnailViewer && this.isThumbnailViewEnabled) {\n            if (this.pdfThumbnailViewer.forceRendering()) {\n              return;\n            }\n          }\n\n          if (this.printing) {\n            return;\n          }\n\n          if (this.onIdle) {\n            this.idleTimeout = setTimeout(this.onIdle.bind(this), CLEANUP_TIMEOUT);\n          }\n        }\n\n        getHighestPriority(visible, views, scrolledDown) {\n          const visibleViews = visible.views;\n          const numVisible = visibleViews.length;\n\n          if (numVisible === 0) {\n            return null;\n          }\n\n          for (let i = 0; i < numVisible; ++i) {\n            const view = visibleViews[i].view;\n\n            if (!this.isViewFinished(view)) {\n              return view;\n            }\n          }\n\n          if (scrolledDown) {\n            const nextPageIndex = visible.last.id;\n\n            if (views[nextPageIndex] && !this.isViewFinished(views[nextPageIndex])) {\n              return views[nextPageIndex];\n            }\n          } else {\n            const previousPageIndex = visible.first.id - 2;\n\n            if (views[previousPageIndex] && !this.isViewFinished(views[previousPageIndex])) {\n              return views[previousPageIndex];\n            }\n          }\n\n          return null;\n        }\n\n        isViewFinished(view) {\n          return view.renderingState === RenderingStates.FINISHED;\n        }\n\n        renderView(view) {\n          switch (view.renderingState) {\n            case RenderingStates.FINISHED:\n              return false;\n\n            case RenderingStates.PAUSED:\n              this.highestPriorityPage = view.renderingId;\n              view.resume();\n              break;\n\n            case RenderingStates.RUNNING:\n              this.highestPriorityPage = view.renderingId;\n              break;\n\n            case RenderingStates.INITIAL:\n              this.highestPriorityPage = view.renderingId;\n              view.draw().finally(() => {\n                this.renderHighestPriority();\n              }).catch(reason => {\n                console.error(`renderView: \"${reason}\"`);\n              });\n              break;\n          }\n\n          return true;\n        }\n\n      }\n\n      exports.PDFRenderingQueue = PDFRenderingQueue;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.PDFSinglePageViewer = void 0;\n\n      var _base_viewer = __w_pdfjs_require__(16);\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      class PDFSinglePageViewer extends _base_viewer.BaseViewer {\n        constructor(options) {\n          super(options);\n\n          this.eventBus._on(\"pagesinit\", evt => {\n            this._ensurePageViewVisible();\n          });\n        }\n\n        get _viewerElement() {\n          return (0, _pdfjsLib.shadow)(this, \"_viewerElement\", this._shadowViewer);\n        }\n\n        _resetView() {\n          super._resetView();\n\n          this._previousPageNumber = 1;\n          this._shadowViewer = document.createDocumentFragment();\n          this._updateScrollDown = null;\n        }\n\n        _ensurePageViewVisible() {\n          const pageView = this._pages[this._currentPageNumber - 1];\n          const previousPageView = this._pages[this._previousPageNumber - 1];\n          const viewerNodes = this.viewer.childNodes;\n\n          switch (viewerNodes.length) {\n            case 0:\n              this.viewer.appendChild(pageView.div);\n              break;\n\n            case 1:\n              if (viewerNodes[0] !== previousPageView.div) {\n                throw new Error(\"_ensurePageViewVisible: Unexpected previously visible page.\");\n              }\n\n              if (pageView === previousPageView) {\n                break;\n              }\n\n              this._shadowViewer.appendChild(previousPageView.div);\n\n              this.viewer.appendChild(pageView.div);\n              this.container.scrollTop = 0;\n              break;\n\n            default:\n              throw new Error(\"_ensurePageViewVisible: Only one page should be visible at a time.\");\n          }\n\n          this._previousPageNumber = this._currentPageNumber;\n        }\n\n        _scrollUpdate() {\n          if (this._updateScrollDown) {\n            this._updateScrollDown();\n          }\n\n          super._scrollUpdate();\n        }\n\n        _scrollIntoView({\n          pageDiv,\n          pageSpot = null,\n          pageNumber = null\n        }) {\n          if (pageNumber) {\n            this._setCurrentPageNumber(pageNumber);\n          }\n\n          const scrolledDown = this._currentPageNumber >= this._previousPageNumber;\n\n          this._ensurePageViewVisible();\n\n          this.update();\n\n          super._scrollIntoView({\n            pageDiv,\n            pageSpot,\n            pageNumber\n          });\n\n          this._updateScrollDown = () => {\n            this.scroll.down = scrolledDown;\n            this._updateScrollDown = null;\n          };\n        }\n\n        _getVisiblePages() {\n          return this._getCurrentVisiblePage();\n        }\n\n        _updateHelper(visiblePages) {}\n\n        get _isScrollModeHorizontal() {\n          return (0, _pdfjsLib.shadow)(this, \"_isScrollModeHorizontal\", false);\n        }\n\n        _updateScrollMode() {}\n\n        _updateSpreadMode() {}\n\n      }\n\n      exports.PDFSinglePageViewer = PDFSinglePageViewer;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.BaseViewer = void 0;\n\n      var _ui_utils = __w_pdfjs_require__(3);\n\n      var _pdf_rendering_queue = __w_pdfjs_require__(14);\n\n      var _annotation_layer_builder = __w_pdfjs_require__(1);\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      var _pdf_page_view = __w_pdfjs_require__(13);\n\n      var _pdf_link_service = __w_pdfjs_require__(4);\n\n      var _text_layer_builder = __w_pdfjs_require__(5);\n\n      const DEFAULT_CACHE_SIZE = 10;\n\n      function PDFPageViewBuffer(size) {\n        const data = [];\n\n        this.push = function (view) {\n          const i = data.indexOf(view);\n\n          if (i >= 0) {\n            data.splice(i, 1);\n          }\n\n          data.push(view);\n\n          if (data.length > size) {\n            data.shift().destroy();\n          }\n        };\n\n        this.resize = function (newSize, pagesToKeep) {\n          size = newSize;\n\n          if (pagesToKeep) {\n            const pageIdsToKeep = new Set();\n\n            for (let i = 0, iMax = pagesToKeep.length; i < iMax; ++i) {\n              pageIdsToKeep.add(pagesToKeep[i].id);\n            }\n\n            (0, _ui_utils.moveToEndOfArray)(data, function (page) {\n              return pageIdsToKeep.has(page.id);\n            });\n          }\n\n          while (data.length > size) {\n            data.shift().destroy();\n          }\n        };\n      }\n\n      function isSameScale(oldScale, newScale) {\n        if (newScale === oldScale) {\n          return true;\n        }\n\n        if (Math.abs(newScale - oldScale) < 1e-15) {\n          return true;\n        }\n\n        return false;\n      }\n\n      class BaseViewer {\n        constructor(options) {\n          if (this.constructor === BaseViewer) {\n            throw new Error(\"Cannot initialize BaseViewer.\");\n          }\n\n          this._name = this.constructor.name;\n          this.container = options.container;\n          this.viewer = options.viewer || options.container.firstElementChild;\n          this.eventBus = options.eventBus;\n          this.linkService = options.linkService || new _pdf_link_service.SimpleLinkService();\n          this.downloadManager = options.downloadManager || null;\n          this.findController = options.findController || null;\n          this.removePageBorders = options.removePageBorders || false;\n          this.textLayerMode = Number.isInteger(options.textLayerMode) ? options.textLayerMode : _ui_utils.TextLayerMode.ENABLE;\n          this.imageResourcesPath = options.imageResourcesPath || \"\";\n          this.renderInteractiveForms = options.renderInteractiveForms || false;\n          this.enablePrintAutoRotate = options.enablePrintAutoRotate || false;\n          this.renderer = options.renderer || _ui_utils.RendererType.CANVAS;\n          this.enableWebGL = options.enableWebGL || false;\n          this.useOnlyCssZoom = options.useOnlyCssZoom || false;\n          this.maxCanvasPixels = options.maxCanvasPixels;\n          this.l10n = options.l10n || _ui_utils.NullL10n;\n          this.defaultRenderingQueue = !options.renderingQueue;\n\n          if (this.defaultRenderingQueue) {\n            this.renderingQueue = new _pdf_rendering_queue.PDFRenderingQueue();\n            this.renderingQueue.setViewer(this);\n          } else {\n            this.renderingQueue = options.renderingQueue;\n          }\n\n          this.scroll = (0, _ui_utils.watchScroll)(this.container, this._scrollUpdate.bind(this));\n          this.presentationModeState = _ui_utils.PresentationModeState.UNKNOWN;\n          this._onBeforeDraw = this._onAfterDraw = null;\n\n          this._resetView();\n\n          if (this.removePageBorders) {\n            this.viewer.classList.add(\"removePageBorders\");\n          }\n\n          Promise.resolve().then(() => {\n            this.eventBus.dispatch(\"baseviewerinit\", {\n              source: this\n            });\n          });\n        }\n\n        get pagesCount() {\n          return this._pages.length;\n        }\n\n        getPageView(index) {\n          return this._pages[index];\n        }\n\n        get pageViewsReady() {\n          if (!this._pagesCapability.settled) {\n            return false;\n          }\n\n          return this._pages.every(function (pageView) {\n            return pageView && pageView.pdfPage;\n          });\n        }\n\n        get currentPageNumber() {\n          return this._currentPageNumber;\n        }\n\n        set currentPageNumber(val) {\n          if (!Number.isInteger(val)) {\n            throw new Error(\"Invalid page number.\");\n          }\n\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          if (!this._setCurrentPageNumber(val, true)) {\n            console.error(`${this._name}.currentPageNumber: \"${val}\" is not a valid page.`);\n          }\n        }\n\n        _setCurrentPageNumber(val, resetCurrentPageView = false) {\n          if (this._currentPageNumber === val) {\n            if (resetCurrentPageView) {\n              this._resetCurrentPageView();\n            }\n\n            return true;\n          }\n\n          if (!(0 < val && val <= this.pagesCount)) {\n            return false;\n          }\n\n          this._currentPageNumber = val;\n          this.eventBus.dispatch(\"pagechanging\", {\n            source: this,\n            pageNumber: val,\n            pageLabel: this._pageLabels && this._pageLabels[val - 1]\n          });\n\n          if (resetCurrentPageView) {\n            this._resetCurrentPageView();\n          }\n\n          return true;\n        }\n\n        get currentPageLabel() {\n          return this._pageLabels && this._pageLabels[this._currentPageNumber - 1];\n        }\n\n        set currentPageLabel(val) {\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          let page = val | 0;\n\n          if (this._pageLabels) {\n            const i = this._pageLabels.indexOf(val);\n\n            if (i >= 0) {\n              page = i + 1;\n            }\n          }\n\n          if (!this._setCurrentPageNumber(page, true)) {\n            console.error(`${this._name}.currentPageLabel: \"${val}\" is not a valid page.`);\n          }\n        }\n\n        get currentScale() {\n          return this._currentScale !== _ui_utils.UNKNOWN_SCALE ? this._currentScale : _ui_utils.DEFAULT_SCALE;\n        }\n\n        set currentScale(val) {\n          if (isNaN(val)) {\n            throw new Error(\"Invalid numeric scale.\");\n          }\n\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          this._setScale(val, false);\n        }\n\n        get currentScaleValue() {\n          return this._currentScaleValue;\n        }\n\n        set currentScaleValue(val) {\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          this._setScale(val, false);\n        }\n\n        get pagesRotation() {\n          return this._pagesRotation;\n        }\n\n        set pagesRotation(rotation) {\n          if (!(0, _ui_utils.isValidRotation)(rotation)) {\n            throw new Error(\"Invalid pages rotation angle.\");\n          }\n\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          if (this._pagesRotation === rotation) {\n            return;\n          }\n\n          this._pagesRotation = rotation;\n          const pageNumber = this._currentPageNumber;\n\n          for (let i = 0, ii = this._pages.length; i < ii; i++) {\n            const pageView = this._pages[i];\n            pageView.update(pageView.scale, rotation);\n          }\n\n          if (this._currentScaleValue) {\n            this._setScale(this._currentScaleValue, true);\n          }\n\n          this.eventBus.dispatch(\"rotationchanging\", {\n            source: this,\n            pagesRotation: rotation,\n            pageNumber\n          });\n\n          if (this.defaultRenderingQueue) {\n            this.update();\n          }\n        }\n\n        get firstPagePromise() {\n          return this.pdfDocument ? this._firstPageCapability.promise : null;\n        }\n\n        get onePageRendered() {\n          return this.pdfDocument ? this._onePageRenderedCapability.promise : null;\n        }\n\n        get pagesPromise() {\n          return this.pdfDocument ? this._pagesCapability.promise : null;\n        }\n\n        get _viewerElement() {\n          throw new Error(\"Not implemented: _viewerElement\");\n        }\n\n        _onePageRenderedOrForceFetch() {\n          if (!this.container.offsetParent || this._getVisiblePages().views.length === 0) {\n            return Promise.resolve();\n          }\n\n          return this._onePageRenderedCapability.promise;\n        }\n\n        setDocument(pdfDocument) {\n          if (this.pdfDocument) {\n            this._cancelRendering();\n\n            this._resetView();\n\n            if (this.findController) {\n              this.findController.setDocument(null);\n            }\n          }\n\n          this.pdfDocument = pdfDocument;\n\n          if (!pdfDocument) {\n            return;\n          }\n\n          const pagesCount = pdfDocument.numPages;\n          const firstPagePromise = pdfDocument.getPage(1);\n\n          this._pagesCapability.promise.then(() => {\n            this.eventBus.dispatch(\"pagesloaded\", {\n              source: this,\n              pagesCount\n            });\n          });\n\n          this._onBeforeDraw = evt => {\n            const pageView = this._pages[evt.pageNumber - 1];\n\n            if (!pageView) {\n              return;\n            }\n\n            this._buffer.push(pageView);\n          };\n\n          this.eventBus._on(\"pagerender\", this._onBeforeDraw);\n\n          this._onAfterDraw = evt => {\n            if (evt.cssTransform || this._onePageRenderedCapability.settled) {\n              return;\n            }\n\n            this._onePageRenderedCapability.resolve();\n\n            this.eventBus._off(\"pagerendered\", this._onAfterDraw);\n\n            this._onAfterDraw = null;\n          };\n\n          this.eventBus._on(\"pagerendered\", this._onAfterDraw);\n\n          firstPagePromise.then(firstPdfPage => {\n            this._firstPageCapability.resolve(firstPdfPage);\n\n            const scale = this.currentScale;\n            const viewport = firstPdfPage.getViewport({\n              scale: scale * _ui_utils.CSS_UNITS\n            });\n            const textLayerFactory = this.textLayerMode !== _ui_utils.TextLayerMode.DISABLE ? this : null;\n\n            for (let pageNum = 1; pageNum <= pagesCount; ++pageNum) {\n              const pageView = new _pdf_page_view.PDFPageView({\n                container: this._viewerElement,\n                eventBus: this.eventBus,\n                id: pageNum,\n                scale,\n                defaultViewport: viewport.clone(),\n                renderingQueue: this.renderingQueue,\n                textLayerFactory,\n                textLayerMode: this.textLayerMode,\n                annotationLayerFactory: this,\n                imageResourcesPath: this.imageResourcesPath,\n                renderInteractiveForms: this.renderInteractiveForms,\n                renderer: this.renderer,\n                enableWebGL: this.enableWebGL,\n                useOnlyCssZoom: this.useOnlyCssZoom,\n                maxCanvasPixels: this.maxCanvasPixels,\n                l10n: this.l10n\n              });\n\n              this._pages.push(pageView);\n            }\n\n            const firstPageView = this._pages[0];\n\n            if (firstPageView) {\n              firstPageView.setPdfPage(firstPdfPage);\n              this.linkService.cachePageRef(1, firstPdfPage.ref);\n            }\n\n            if (this._spreadMode !== _ui_utils.SpreadMode.NONE) {\n              this._updateSpreadMode();\n            }\n\n            this._onePageRenderedOrForceFetch().then(() => {\n              if (this.findController) {\n                this.findController.setDocument(pdfDocument);\n              }\n\n              if (pdfDocument.loadingParams.disableAutoFetch || pagesCount > 7500) {\n                this._pagesCapability.resolve();\n\n                return;\n              }\n\n              let getPagesLeft = pagesCount - 1;\n\n              if (getPagesLeft <= 0) {\n                this._pagesCapability.resolve();\n\n                return;\n              }\n\n              for (let pageNum = 2; pageNum <= pagesCount; ++pageNum) {\n                pdfDocument.getPage(pageNum).then(pdfPage => {\n                  const pageView = this._pages[pageNum - 1];\n\n                  if (!pageView.pdfPage) {\n                    pageView.setPdfPage(pdfPage);\n                  }\n\n                  this.linkService.cachePageRef(pageNum, pdfPage.ref);\n\n                  if (--getPagesLeft === 0) {\n                    this._pagesCapability.resolve();\n                  }\n                }, reason => {\n                  console.error(`Unable to get page ${pageNum} to initialize viewer`, reason);\n\n                  if (--getPagesLeft === 0) {\n                    this._pagesCapability.resolve();\n                  }\n                });\n              }\n            });\n\n            this.eventBus.dispatch(\"pagesinit\", {\n              source: this\n            });\n\n            if (this.defaultRenderingQueue) {\n              this.update();\n            }\n          }).catch(reason => {\n            console.error(\"Unable to initialize viewer\", reason);\n          });\n        }\n\n        setPageLabels(labels) {\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          if (!labels) {\n            this._pageLabels = null;\n          } else if (!(Array.isArray(labels) && this.pdfDocument.numPages === labels.length)) {\n            this._pageLabels = null;\n            console.error(`${this._name}.setPageLabels: Invalid page labels.`);\n          } else {\n            this._pageLabels = labels;\n          }\n\n          for (let i = 0, ii = this._pages.length; i < ii; i++) {\n            const pageView = this._pages[i];\n            const label = this._pageLabels && this._pageLabels[i];\n            pageView.setPageLabel(label);\n          }\n        }\n\n        _resetView() {\n          this._pages = [];\n          this._currentPageNumber = 1;\n          this._currentScale = _ui_utils.UNKNOWN_SCALE;\n          this._currentScaleValue = null;\n          this._pageLabels = null;\n          this._buffer = new PDFPageViewBuffer(DEFAULT_CACHE_SIZE);\n          this._location = null;\n          this._pagesRotation = 0;\n          this._pagesRequests = new WeakMap();\n          this._firstPageCapability = (0, _pdfjsLib.createPromiseCapability)();\n          this._onePageRenderedCapability = (0, _pdfjsLib.createPromiseCapability)();\n          this._pagesCapability = (0, _pdfjsLib.createPromiseCapability)();\n          this._scrollMode = _ui_utils.ScrollMode.VERTICAL;\n          this._spreadMode = _ui_utils.SpreadMode.NONE;\n\n          if (this._onBeforeDraw) {\n            this.eventBus._off(\"pagerender\", this._onBeforeDraw);\n\n            this._onBeforeDraw = null;\n          }\n\n          if (this._onAfterDraw) {\n            this.eventBus._off(\"pagerendered\", this._onAfterDraw);\n\n            this._onAfterDraw = null;\n          }\n\n          this.viewer.textContent = \"\";\n\n          this._updateScrollMode();\n        }\n\n        _scrollUpdate() {\n          if (this.pagesCount === 0) {\n            return;\n          }\n\n          this.update();\n        }\n\n        _scrollIntoView({\n          pageDiv,\n          pageSpot = null,\n          pageNumber = null\n        }) {\n          (0, _ui_utils.scrollIntoView)(pageDiv, pageSpot);\n        }\n\n        _setScaleUpdatePages(newScale, newValue, noScroll = false, preset = false) {\n          this._currentScaleValue = newValue.toString();\n\n          if (isSameScale(this._currentScale, newScale)) {\n            if (preset) {\n              this.eventBus.dispatch(\"scalechanging\", {\n                source: this,\n                scale: newScale,\n                presetValue: newValue\n              });\n            }\n\n            return;\n          }\n\n          for (let i = 0, ii = this._pages.length; i < ii; i++) {\n            this._pages[i].update(newScale);\n          }\n\n          this._currentScale = newScale;\n\n          if (!noScroll) {\n            let page = this._currentPageNumber,\n                dest;\n\n            if (this._location && !(this.isInPresentationMode || this.isChangingPresentationMode)) {\n              page = this._location.pageNumber;\n              dest = [null, {\n                name: \"XYZ\"\n              }, this._location.left, this._location.top, null];\n            }\n\n            this.scrollPageIntoView({\n              pageNumber: page,\n              destArray: dest,\n              allowNegativeOffset: true\n            });\n          }\n\n          this.eventBus.dispatch(\"scalechanging\", {\n            source: this,\n            scale: newScale,\n            presetValue: preset ? newValue : undefined\n          });\n\n          if (this.defaultRenderingQueue) {\n            this.update();\n          }\n        }\n\n        _setScale(value, noScroll = false) {\n          let scale = parseFloat(value);\n\n          if (scale > 0) {\n            this._setScaleUpdatePages(scale, value, noScroll, false);\n          } else {\n            const currentPage = this._pages[this._currentPageNumber - 1];\n\n            if (!currentPage) {\n              return;\n            }\n\n            const noPadding = this.isInPresentationMode || this.removePageBorders;\n            let hPadding = noPadding ? 0 : _ui_utils.SCROLLBAR_PADDING;\n            let vPadding = noPadding ? 0 : _ui_utils.VERTICAL_PADDING;\n\n            if (!noPadding && this._isScrollModeHorizontal) {\n              [hPadding, vPadding] = [vPadding, hPadding];\n            }\n\n            const pageWidthScale = (this.container.clientWidth - hPadding) / currentPage.width * currentPage.scale;\n            const pageHeightScale = (this.container.clientHeight - vPadding) / currentPage.height * currentPage.scale;\n\n            switch (value) {\n              case \"page-actual\":\n                scale = 1;\n                break;\n\n              case \"page-width\":\n                scale = pageWidthScale;\n                break;\n\n              case \"page-height\":\n                scale = pageHeightScale;\n                break;\n\n              case \"page-fit\":\n                scale = Math.min(pageWidthScale, pageHeightScale);\n                break;\n\n              case \"auto\":\n                const horizontalScale = (0, _ui_utils.isPortraitOrientation)(currentPage) ? pageWidthScale : Math.min(pageHeightScale, pageWidthScale);\n                scale = Math.min(_ui_utils.MAX_AUTO_SCALE, horizontalScale);\n                break;\n\n              default:\n                console.error(`${this._name}._setScale: \"${value}\" is an unknown zoom value.`);\n                return;\n            }\n\n            this._setScaleUpdatePages(scale, value, noScroll, true);\n          }\n        }\n\n        _resetCurrentPageView() {\n          if (this.isInPresentationMode) {\n            this._setScale(this._currentScaleValue, true);\n          }\n\n          const pageView = this._pages[this._currentPageNumber - 1];\n\n          this._scrollIntoView({\n            pageDiv: pageView.div\n          });\n        }\n\n        scrollPageIntoView({\n          pageNumber,\n          destArray = null,\n          allowNegativeOffset = false,\n          ignoreDestinationZoom = false\n        }) {\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          const pageView = Number.isInteger(pageNumber) && this._pages[pageNumber - 1];\n\n          if (!pageView) {\n            console.error(`${this._name}.scrollPageIntoView: ` + `\"${pageNumber}\" is not a valid pageNumber parameter.`);\n            return;\n          }\n\n          if (this.isInPresentationMode || !destArray) {\n            this._setCurrentPageNumber(pageNumber, true);\n\n            return;\n          }\n\n          let x = 0,\n              y = 0;\n          let width = 0,\n              height = 0,\n              widthScale,\n              heightScale;\n          const changeOrientation = pageView.rotation % 180 !== 0;\n          const pageWidth = (changeOrientation ? pageView.height : pageView.width) / pageView.scale / _ui_utils.CSS_UNITS;\n          const pageHeight = (changeOrientation ? pageView.width : pageView.height) / pageView.scale / _ui_utils.CSS_UNITS;\n          let scale = 0;\n\n          switch (destArray[1].name) {\n            case \"XYZ\":\n              x = destArray[2];\n              y = destArray[3];\n              scale = destArray[4];\n              x = x !== null ? x : 0;\n              y = y !== null ? y : pageHeight;\n              break;\n\n            case \"Fit\":\n            case \"FitB\":\n              scale = \"page-fit\";\n              break;\n\n            case \"FitH\":\n            case \"FitBH\":\n              y = destArray[2];\n              scale = \"page-width\";\n\n              if (y === null && this._location) {\n                x = this._location.left;\n                y = this._location.top;\n              }\n\n              break;\n\n            case \"FitV\":\n            case \"FitBV\":\n              x = destArray[2];\n              width = pageWidth;\n              height = pageHeight;\n              scale = \"page-height\";\n              break;\n\n            case \"FitR\":\n              x = destArray[2];\n              y = destArray[3];\n              width = destArray[4] - x;\n              height = destArray[5] - y;\n              const hPadding = this.removePageBorders ? 0 : _ui_utils.SCROLLBAR_PADDING;\n              const vPadding = this.removePageBorders ? 0 : _ui_utils.VERTICAL_PADDING;\n              widthScale = (this.container.clientWidth - hPadding) / width / _ui_utils.CSS_UNITS;\n              heightScale = (this.container.clientHeight - vPadding) / height / _ui_utils.CSS_UNITS;\n              scale = Math.min(Math.abs(widthScale), Math.abs(heightScale));\n              break;\n\n            default:\n              console.error(`${this._name}.scrollPageIntoView: ` + `\"${destArray[1].name}\" is not a valid destination type.`);\n              return;\n          }\n\n          if (!ignoreDestinationZoom) {\n            if (scale && scale !== this._currentScale) {\n              this.currentScaleValue = scale;\n            } else if (this._currentScale === _ui_utils.UNKNOWN_SCALE) {\n              this.currentScaleValue = _ui_utils.DEFAULT_SCALE_VALUE;\n            }\n          }\n\n          if (scale === \"page-fit\" && !destArray[4]) {\n            this._scrollIntoView({\n              pageDiv: pageView.div,\n              pageNumber\n            });\n\n            return;\n          }\n\n          const boundingRect = [pageView.viewport.convertToViewportPoint(x, y), pageView.viewport.convertToViewportPoint(x + width, y + height)];\n          let left = Math.min(boundingRect[0][0], boundingRect[1][0]);\n          let top = Math.min(boundingRect[0][1], boundingRect[1][1]);\n\n          if (!allowNegativeOffset) {\n            left = Math.max(left, 0);\n            top = Math.max(top, 0);\n          }\n\n          this._scrollIntoView({\n            pageDiv: pageView.div,\n            pageSpot: {\n              left,\n              top\n            },\n            pageNumber\n          });\n        }\n\n        _updateLocation(firstPage) {\n          const currentScale = this._currentScale;\n          const currentScaleValue = this._currentScaleValue;\n          const normalizedScaleValue = parseFloat(currentScaleValue) === currentScale ? Math.round(currentScale * 10000) / 100 : currentScaleValue;\n          const pageNumber = firstPage.id;\n          let pdfOpenParams = \"#page=\" + pageNumber;\n          pdfOpenParams += \"&zoom=\" + normalizedScaleValue;\n          const currentPageView = this._pages[pageNumber - 1];\n          const container = this.container;\n          const topLeft = currentPageView.getPagePoint(container.scrollLeft - firstPage.x, container.scrollTop - firstPage.y);\n          const intLeft = Math.round(topLeft[0]);\n          const intTop = Math.round(topLeft[1]);\n          pdfOpenParams += \",\" + intLeft + \",\" + intTop;\n          this._location = {\n            pageNumber,\n            scale: normalizedScaleValue,\n            top: intTop,\n            left: intLeft,\n            rotation: this._pagesRotation,\n            pdfOpenParams\n          };\n        }\n\n        _updateHelper(visiblePages) {\n          throw new Error(\"Not implemented: _updateHelper\");\n        }\n\n        update() {\n          const visible = this._getVisiblePages();\n\n          const visiblePages = visible.views,\n                numVisiblePages = visiblePages.length;\n\n          if (numVisiblePages === 0) {\n            return;\n          }\n\n          const newCacheSize = Math.max(DEFAULT_CACHE_SIZE, 2 * numVisiblePages + 1);\n\n          this._buffer.resize(newCacheSize, visiblePages);\n\n          this.renderingQueue.renderHighestPriority(visible);\n\n          this._updateHelper(visiblePages);\n\n          this._updateLocation(visible.first);\n\n          this.eventBus.dispatch(\"updateviewarea\", {\n            source: this,\n            location: this._location\n          });\n        }\n\n        containsElement(element) {\n          return this.container.contains(element);\n        }\n\n        focus() {\n          this.container.focus();\n        }\n\n        get _isScrollModeHorizontal() {\n          return this.isInPresentationMode ? false : this._scrollMode === _ui_utils.ScrollMode.HORIZONTAL;\n        }\n\n        get isInPresentationMode() {\n          return this.presentationModeState === _ui_utils.PresentationModeState.FULLSCREEN;\n        }\n\n        get isChangingPresentationMode() {\n          return this.presentationModeState === _ui_utils.PresentationModeState.CHANGING;\n        }\n\n        get isHorizontalScrollbarEnabled() {\n          return this.isInPresentationMode ? false : this.container.scrollWidth > this.container.clientWidth;\n        }\n\n        get isVerticalScrollbarEnabled() {\n          return this.isInPresentationMode ? false : this.container.scrollHeight > this.container.clientHeight;\n        }\n\n        _getCurrentVisiblePage() {\n          if (!this.pagesCount) {\n            return {\n              views: []\n            };\n          }\n\n          const pageView = this._pages[this._currentPageNumber - 1];\n          const element = pageView.div;\n          const view = {\n            id: pageView.id,\n            x: element.offsetLeft + element.clientLeft,\n            y: element.offsetTop + element.clientTop,\n            view: pageView\n          };\n          return {\n            first: view,\n            last: view,\n            views: [view]\n          };\n        }\n\n        _getVisiblePages() {\n          return (0, _ui_utils.getVisibleElements)(this.container, this._pages, true, this._isScrollModeHorizontal);\n        }\n\n        isPageVisible(pageNumber) {\n          if (!this.pdfDocument) {\n            return false;\n          }\n\n          if (pageNumber < 1 || pageNumber > this.pagesCount) {\n            console.error(`${this._name}.isPageVisible: \"${pageNumber}\" is out of bounds.`);\n            return false;\n          }\n\n          return this._getVisiblePages().views.some(function (view) {\n            return view.id === pageNumber;\n          });\n        }\n\n        cleanup() {\n          for (let i = 0, ii = this._pages.length; i < ii; i++) {\n            if (this._pages[i] && this._pages[i].renderingState !== _pdf_rendering_queue.RenderingStates.FINISHED) {\n              this._pages[i].reset();\n            }\n          }\n        }\n\n        _cancelRendering() {\n          for (let i = 0, ii = this._pages.length; i < ii; i++) {\n            if (this._pages[i]) {\n              this._pages[i].cancelRendering();\n            }\n          }\n        }\n\n        _ensurePdfPageLoaded(pageView) {\n          if (pageView.pdfPage) {\n            return Promise.resolve(pageView.pdfPage);\n          }\n\n          if (this._pagesRequests.has(pageView)) {\n            return this._pagesRequests.get(pageView);\n          }\n\n          const promise = this.pdfDocument.getPage(pageView.id).then(pdfPage => {\n            if (!pageView.pdfPage) {\n              pageView.setPdfPage(pdfPage);\n            }\n\n            this._pagesRequests.delete(pageView);\n\n            return pdfPage;\n          }).catch(reason => {\n            console.error(\"Unable to get page for page view\", reason);\n\n            this._pagesRequests.delete(pageView);\n          });\n\n          this._pagesRequests.set(pageView, promise);\n\n          return promise;\n        }\n\n        forceRendering(currentlyVisiblePages) {\n          const visiblePages = currentlyVisiblePages || this._getVisiblePages();\n\n          const scrollAhead = this._isScrollModeHorizontal ? this.scroll.right : this.scroll.down;\n          const pageView = this.renderingQueue.getHighestPriority(visiblePages, this._pages, scrollAhead);\n\n          if (pageView) {\n            this._ensurePdfPageLoaded(pageView).then(() => {\n              this.renderingQueue.renderView(pageView);\n            });\n\n            return true;\n          }\n\n          return false;\n        }\n\n        createTextLayerBuilder(textLayerDiv, pageIndex, viewport, enhanceTextSelection = false, eventBus) {\n          return new _text_layer_builder.TextLayerBuilder({\n            textLayerDiv,\n            eventBus,\n            pageIndex,\n            viewport,\n            findController: this.isInPresentationMode ? null : this.findController,\n            enhanceTextSelection: this.isInPresentationMode ? false : enhanceTextSelection\n          });\n        }\n\n        createAnnotationLayerBuilder(pageDiv, pdfPage, imageResourcesPath = \"\", renderInteractiveForms = false, l10n = _ui_utils.NullL10n) {\n          return new _annotation_layer_builder.AnnotationLayerBuilder({\n            pageDiv,\n            pdfPage,\n            imageResourcesPath,\n            renderInteractiveForms,\n            linkService: this.linkService,\n            downloadManager: this.downloadManager,\n            l10n\n          });\n        }\n\n        get hasEqualPageSizes() {\n          const firstPageView = this._pages[0];\n\n          for (let i = 1, ii = this._pages.length; i < ii; ++i) {\n            const pageView = this._pages[i];\n\n            if (pageView.width !== firstPageView.width || pageView.height !== firstPageView.height) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        getPagesOverview() {\n          const pagesOverview = this._pages.map(function (pageView) {\n            const viewport = pageView.pdfPage.getViewport({\n              scale: 1\n            });\n            return {\n              width: viewport.width,\n              height: viewport.height,\n              rotation: viewport.rotation\n            };\n          });\n\n          if (!this.enablePrintAutoRotate) {\n            return pagesOverview;\n          }\n\n          const isFirstPagePortrait = (0, _ui_utils.isPortraitOrientation)(pagesOverview[0]);\n          return pagesOverview.map(function (size) {\n            if (isFirstPagePortrait === (0, _ui_utils.isPortraitOrientation)(size)) {\n              return size;\n            }\n\n            return {\n              width: size.height,\n              height: size.width,\n              rotation: (size.rotation + 90) % 360\n            };\n          });\n        }\n\n        get scrollMode() {\n          return this._scrollMode;\n        }\n\n        set scrollMode(mode) {\n          if (this._scrollMode === mode) {\n            return;\n          }\n\n          if (!(0, _ui_utils.isValidScrollMode)(mode)) {\n            throw new Error(`Invalid scroll mode: ${mode}`);\n          }\n\n          this._scrollMode = mode;\n          this.eventBus.dispatch(\"scrollmodechanged\", {\n            source: this,\n            mode\n          });\n\n          this._updateScrollMode(this._currentPageNumber);\n        }\n\n        _updateScrollMode(pageNumber = null) {\n          const scrollMode = this._scrollMode,\n                viewer = this.viewer;\n          viewer.classList.toggle(\"scrollHorizontal\", scrollMode === _ui_utils.ScrollMode.HORIZONTAL);\n          viewer.classList.toggle(\"scrollWrapped\", scrollMode === _ui_utils.ScrollMode.WRAPPED);\n\n          if (!this.pdfDocument || !pageNumber) {\n            return;\n          }\n\n          if (this._currentScaleValue && isNaN(this._currentScaleValue)) {\n            this._setScale(this._currentScaleValue, true);\n          }\n\n          this._setCurrentPageNumber(pageNumber, true);\n\n          this.update();\n        }\n\n        get spreadMode() {\n          return this._spreadMode;\n        }\n\n        set spreadMode(mode) {\n          if (this._spreadMode === mode) {\n            return;\n          }\n\n          if (!(0, _ui_utils.isValidSpreadMode)(mode)) {\n            throw new Error(`Invalid spread mode: ${mode}`);\n          }\n\n          this._spreadMode = mode;\n          this.eventBus.dispatch(\"spreadmodechanged\", {\n            source: this,\n            mode\n          });\n\n          this._updateSpreadMode(this._currentPageNumber);\n        }\n\n        _updateSpreadMode(pageNumber = null) {\n          if (!this.pdfDocument) {\n            return;\n          }\n\n          const viewer = this.viewer,\n                pages = this._pages;\n          viewer.textContent = \"\";\n\n          if (this._spreadMode === _ui_utils.SpreadMode.NONE) {\n            for (let i = 0, iMax = pages.length; i < iMax; ++i) {\n              viewer.appendChild(pages[i].div);\n            }\n          } else {\n            const parity = this._spreadMode - 1;\n            let spread = null;\n\n            for (let i = 0, iMax = pages.length; i < iMax; ++i) {\n              if (spread === null) {\n                spread = document.createElement(\"div\");\n                spread.className = \"spread\";\n                viewer.appendChild(spread);\n              } else if (i % 2 === parity) {\n                spread = spread.cloneNode(false);\n                viewer.appendChild(spread);\n              }\n\n              spread.appendChild(pages[i].div);\n            }\n          }\n\n          if (!pageNumber) {\n            return;\n          }\n\n          this._setCurrentPageNumber(pageNumber, true);\n\n          this.update();\n        }\n\n      }\n\n      exports.BaseViewer = BaseViewer;\n      /***/\n    }, function (module, exports, __w_pdfjs_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.PDFViewer = void 0;\n\n      var _base_viewer = __w_pdfjs_require__(16);\n\n      var _pdfjsLib = __w_pdfjs_require__(2);\n\n      class PDFViewer extends _base_viewer.BaseViewer {\n        get _viewerElement() {\n          return (0, _pdfjsLib.shadow)(this, \"_viewerElement\", this.viewer);\n        }\n\n        _scrollIntoView({\n          pageDiv,\n          pageSpot = null,\n          pageNumber = null\n        }) {\n          if (!pageSpot && !this.isInPresentationMode) {\n            const left = pageDiv.offsetLeft + pageDiv.clientLeft;\n            const right = left + pageDiv.clientWidth;\n            const {\n              scrollLeft,\n              clientWidth\n            } = this.container;\n\n            if (this._isScrollModeHorizontal || left < scrollLeft || right > scrollLeft + clientWidth) {\n              pageSpot = {\n                left: 0,\n                top: 0\n              };\n            }\n          }\n\n          super._scrollIntoView({\n            pageDiv,\n            pageSpot,\n            pageNumber\n          });\n        }\n\n        _getVisiblePages() {\n          if (this.isInPresentationMode) {\n            return this._getCurrentVisiblePage();\n          }\n\n          return super._getVisiblePages();\n        }\n\n        _updateHelper(visiblePages) {\n          if (this.isInPresentationMode) {\n            return;\n          }\n\n          let currentId = this._currentPageNumber;\n          let stillFullyVisible = false;\n\n          for (const page of visiblePages) {\n            if (page.percent < 100) {\n              break;\n            }\n\n            if (page.id === currentId) {\n              stillFullyVisible = true;\n              break;\n            }\n          }\n\n          if (!stillFullyVisible) {\n            currentId = visiblePages[0].id;\n          }\n\n          this._setCurrentPageNumber(currentId);\n        }\n\n      }\n\n      exports.PDFViewer = PDFViewer;\n      /***/\n    }])\n  );\n}); //# sourceMappingURL=pdf_viewer.js.map","map":null,"metadata":{},"sourceType":"script"}