{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./driver-data.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./driver-data.component.css\";\nimport { Component, ViewChild, Input } from \"@angular/core\";\nimport { ApiService } from 'src/app/services';\nimport { Router } from \"@angular/router\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { HereMapService } from \"src/app/services/here-map.service\";\nimport { HttpClient } from \"@angular/common/http\";\nimport Constants from 'src/app/pages/fleet/constants';\nimport { environment } from 'src/environments/environment';\nimport * as _ from \"lodash\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\nlet DriverDataComponent = class DriverDataComponent {\n  constructor(apiService, router, hereMap, httpClient, spinner, toastr, countryStateCity) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.router = router;\n    this.hereMap = hereMap;\n    this.httpClient = httpClient;\n    this.spinner = spinner;\n    this.toastr = toastr;\n    this.countryStateCity = countryStateCity;\n    this.environment = environment.isFeatureEnabled;\n    this.documentsTypesObects = {};\n    this.title = \"Driver List\";\n    this.mapView = false;\n    this.listView = true;\n    this.visible = true;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.drivers = [];\n    this.loaded = false;\n    this.statesObject = {};\n    this.countriesObject = {};\n    this.citiesObject = {};\n    this.vehiclesObject = {};\n    this.groupssObject = {};\n    this.driverID = \"\";\n    this.driverName = \"\";\n    this.dutyStatus = \"\";\n    this.driverType = null;\n    this.suggestedDrivers = [];\n    this.totalRecords = 10;\n    this.pageLength = 10;\n    this.lastEvaluatedKey = \"\";\n    this.hideShow = {\n      name: true,\n      dutyStatus: true,\n      location: true,\n      currCycle: true,\n      currVehicle: false,\n      assets: false,\n      contact: false,\n      dl: true,\n      document: false,\n      status: true,\n      groupID: true,\n      citizenship: false,\n      address: false,\n      paymentType: false,\n      sin: false,\n      contractStart: false,\n      homeTerminal: false,\n      fastNumber: false,\n      email: true,\n      phone: true,\n      driverType: true,\n      startDate: true,\n      licenceExpiry: true,\n      licStateName: true\n    };\n    this.driverNext = false;\n    this.driverPrev = true;\n    this.driverDraw = 0;\n    this.driverPrevEvauatedKeys = [\"\"];\n    this.driverStartPoint = 1;\n    this.driverEndPoint = this.pageLength;\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.isSearch = false;\n    this.get = _.get;\n    this.dataColumns = [{\n      field: 'firstName',\n      header: 'Name',\n      type: \"text\"\n    }, {\n      field: 'email',\n      header: 'Email',\n      type: \"text\"\n    }, {\n      field: 'phone',\n      header: 'Phone',\n      type: \"text\"\n    }, {\n      field: 'employeeContractorId',\n      header: 'Employee ID',\n      type: \"text\"\n    }, {\n      field: 'userName',\n      header: 'User Name',\n      type: \"text\"\n    }, {\n      field: 'driverType',\n      header: 'Driver Type',\n      type: \"text\"\n    }, {\n      field: 'startDate',\n      header: 'Start Date',\n      type: \"text\"\n    }, {\n      field: 'CDL_Number',\n      header: 'CDL#',\n      type: \"text\"\n    }, {\n      field: 'licenceExpiry',\n      header: 'Licence Expiry',\n      type: \"text\"\n    }, {\n      field: 'licStateName',\n      header: 'Licence Province',\n      type: \"text\"\n    }];\n    this.getSuggestions = _.debounce(function (value) {\n      value = value.toLowerCase();\n\n      if (value != \"\") {\n        this.loadMsg = Constants.LOAD_DATA;\n        this.apiService.getData(`drivers/get/suggestions/${value}`).subscribe(result => {\n          if (result.length === 0) {\n            this.loadMsg = Constants.NO_LOAD_FOUND;\n          }\n\n          if (result.length > 0) {\n            result.map(v => {\n              if (v.middleName != undefined && v.middleName != '') {\n                v.fullName = `${v.firstName} ${v.middleName} ${v.lastName}`;\n              } else {\n                v.fullName = `${v.firstName} ${v.lastName}`;\n              }\n\n              return v;\n            });\n            this.suggestedDrivers = result;\n          }\n        });\n      } else {\n        this.suggestedDrivers = [];\n      }\n    }, 800);\n\n    this.checkboxCount = () => {\n      this.driverCheckCount = 0;\n      this.drivers.forEach(item => {\n        if (item.checked) {\n          this.selectedDriverID = item.driverID;\n          this.driverCheckCount = this.driverCheckCount + 1;\n        }\n      });\n    };\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.initDataTable();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.fetchAllDocumentsTypes();\n\n      yield _this2.initDataTable();\n\n      _this2.fetchAllVehiclesIDs();\n\n      _this2.fetchAllGrorups();\n\n      _this2.setdriverTypeOption();\n\n      _this2.setToggleOptions();\n\n      $(document).ready(() => {\n        setTimeout(() => {\n          $(\"#DataTables_Table_0_wrapper .dt-buttons\").addClass(\"custom-dt-buttons\").prependTo(\".page-buttons\");\n        }, 1800);\n      });\n    })();\n  }\n\n  fetchAllDocumentsTypes() {\n    this.httpClient.get(`assets/travelDocumentType.json`).subscribe(data => {\n      this.allDocumentsTypes = data;\n      this.documentsTypesObects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  jsTree() {\n    $(\".treeCheckbox\").jstree({\n      core: {\n        themes: {\n          responsive: false\n        }\n      },\n      types: {\n        default: {\n          icon: \"fas fa-folder\"\n        },\n        file: {\n          icon: \"fas fa-file\"\n        }\n      },\n      plugins: [\"types\", \"checkbox\"]\n    });\n  }\n\n  export() {\n    $(\".buttons-excel\").trigger(\"click\");\n  }\n\n  setDriver(driverID) {\n    if (driverID != undefined && driverID != '') {\n      this.driverID = driverID;\n    }\n\n    this.loadMsg = Constants.NO_LOAD_DATA;\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  setdriverTypeOption() {\n    this.driverTypeOption = [{\n      \"value\": \"contractor\",\n      \"name\": \"Contractor\"\n    }, {\n      \"name\": \"Employee\",\n      \"value\": \"employee\"\n    }, {\n      \"name\": \"All\",\n      \"value\": \"null\"\n    }];\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  fetchAllGrorups() {\n    this.apiService.getData(\"groups/get/list\").subscribe(result => {\n      this.groupssObject = result;\n    });\n  }\n\n  fetchAllCitiesIDs() {\n    this.apiService.getData(\"cities/get/list\").subscribe(result => {\n      this.citiesObject = result;\n    });\n  }\n\n  fetchAllVehiclesIDs() {\n    this.apiService.getData(\"vehicles/get/list\").subscribe(result => {\n      this.vehiclesObject = result;\n    });\n  }\n\n  mapShow() {\n    this.mapView = true;\n    this.listView = false;\n    setTimeout(() => {\n      this.jsTree();\n      this.hereMap.mapInit();\n    }, 200);\n  }\n\n  valuechange() {\n    this.visible = !this.visible;\n  }\n\n  initDataTable() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.lastEvaluatedKey !== 'end') {\n        _this3.apiService.getData(`drivers/fetch/records?driver=${_this3.driverID}&dutyStatus=${_this3.dutyStatus}&lastKey=${_this3.lastEvaluatedKey}&type=${_this3.driverType}`).subscribe(result => {\n          result.data.map(v => {\n            v.url = `/reports/fleet/drivers/driver-report/${v.driverID}`;\n          });\n\n          if (result.data.length === 0) {\n            _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          if (result.nextPage !== undefined) {\n            _this3.lastEvaluatedKey = encodeURIComponent(result.nextPage);\n          } else {\n            _this3.lastEvaluatedKey = 'end';\n          }\n\n          _this3.drivers = _this3.drivers.concat(result.data);\n          _this3.loaded = true;\n          _this3.isSearch = false;\n        });\n      }\n    })();\n  }\n\n  fetchAddress(drivers) {\n    var _this4 = this;\n\n    for (let d = 0; d < drivers.length; d++) {\n      drivers.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (e) {\n          e.citizenship = yield _this4.countryStateCity.GetSpecificCountryNameByCode(e.citizenship);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n\n      if (drivers[d].address !== undefined) {\n        drivers[d].address.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (a) {\n            if (a.manual) {\n              a.countryName = yield _this4.countryStateCity.GetSpecificCountryNameByCode(a.countryCode);\n              a.stateName = yield _this4.countryStateCity.GetStateNameFromCode(a.stateCode, a.countryCode);\n            }\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n    }\n  }\n\n  searchFilter() {\n    if (this.driverID !== \"\" || this.dutyStatus !== \"\" || this.driverType !== null) {\n      this.isSearch = true;\n      this.drivers = [];\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.lastEvaluatedKey = '';\n      this.suggestedDrivers = [];\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  resetFilter() {\n    if (this.driverID !== '' || this.dutyStatus !== '' || this.driverType !== null) {\n      this.isSearch = true;\n      this.driverID = '';\n      this.dutyStatus = '';\n      this.driverName = null;\n      this.driverType = null;\n      this.drivers = [];\n      this.loaded = false;\n      this.lastEvaluatedKey = '';\n      this.suggestedDrivers = null;\n      this.initDataTable();\n    } else {\n      return false;\n    }\n  }\n\n  clearInput() {\n    this.suggestedDrivers = null;\n  }\n\n  refreshData() {\n    this.drivers = [];\n    this.driverID = '';\n    this.dutyStatus = '';\n    this.driverName = '';\n    this.driverType = null;\n    this.lastEvaluatedKey = '';\n    this.loaded = false;\n    this.initDataTable();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  clearSuggestions() {\n    this.driverName = null;\n  }\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nDriverDataComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: HereMapService\n}, {\n  type: HttpClient\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ToastrService\n}, {\n  type: CountryStateCityService\n}];\n\nDriverDataComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nDriverDataComponent = __decorate([Component({\n  selector: 'app-driver-data',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DriverDataComponent);\nexport { DriverDataComponent };","map":null,"metadata":{},"sourceType":"module"}