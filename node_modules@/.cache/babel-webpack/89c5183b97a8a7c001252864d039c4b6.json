{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./payment-report.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./payment-report.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { AccountService, ApiService } from 'src/app/services';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport * as html2pdf from \"html2pdf.js\";\nimport { DashboardUtilityService } from 'src/app/services';\nimport { ToastrService } from 'ngx-toastr';\nlet PaymentReportComponent = class PaymentReportComponent {\n  constructor(accountService, modalService, dashboardUtilityService, apiService, toastr) {\n    this.accountService = accountService;\n    this.modalService = modalService;\n    this.dashboardUtilityService = dashboardUtilityService;\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.allPayments = [];\n    this.allExportData = [];\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.lastAdvanceSK = '';\n    this.lastDriverSK = '';\n    this.lastEmployeeSK = '';\n    this.lastExpenceSK = '';\n    this.searching = false;\n    this.exporting = false;\n    this.printing = false;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.filter = {\n      startDate: null,\n      endDate: null,\n      type: null,\n      mode: null,\n      payModeNo: null,\n      receiver: null,\n      searchType: null,\n      receiverType: null,\n      searchValue: null\n    };\n    this.searchBy = [{\n      name: 'Cheque Number',\n      value: \"chequeNo\"\n    }, {\n      name: \"Receiver\",\n      value: \"receiver\"\n    }];\n    this.receivers = [{\n      name: \"Driver\",\n      value: \"driver\"\n    }, {\n      name: \"Owner Operator\",\n      value: \"ownerOperator\"\n    }, {\n      name: \"Vendor\",\n      value: \"vendor\"\n    }, {\n      name: \"Employee\",\n      value: \"employee\"\n    }, {\n      name: \"Carrier\",\n      value: \"carrier\"\n    }];\n    this.paymentType = [{\n      name: \"Employee Payment\",\n      type: \"epp\"\n    }, {\n      name: \"Expense Payment\",\n      type: \"exp\"\n    }, {\n      name: \"Advance Payment\",\n      type: \"advp\"\n    }, {\n      name: \"Driver Payment\",\n      type: \"drvp\"\n    }];\n    this.paymentMode = [{\n      name: \"Cash\",\n      type: \"cash\"\n    }, {\n      name: \"Cheque\",\n      type: \"cheque\"\n    }, {\n      name: \"Credit Card\",\n      type: \"credit_card\"\n    }];\n    this.driverLoaded = false;\n    this.employeeLoaded = false;\n    this.expenseLoaded = false;\n    this.advanceLoaded = false;\n    this.driversObject = {};\n    this.carriersObject = {};\n    this.ownerOpObject = {};\n    this.employees = {};\n    this.vendors = {};\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.init();\n      _this.driversObject = yield _this.dashboardUtilityService.getDrivers();\n      _this.carriersObject = yield _this.dashboardUtilityService.getContactsCarriers();\n      _this.ownerOpObject = yield _this.dashboardUtilityService.getOwnerOperators();\n      _this.employees = yield _this.dashboardUtilityService.getEmployees();\n      _this.vendors = yield _this.dashboardUtilityService.getVendors();\n    })();\n  }\n\n  init() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.allPayments = [];\n      yield _this2.fetchAdvancePayments();\n      yield _this2.fetchDriverPayments();\n      yield _this2.fetchEmployeePayments();\n      yield _this2.fetchExpencePayments();\n    })();\n  }\n\n  unitTypeChange() {\n    this.filter.searchValue = null;\n  }\n\n  fetchAdvancePayments(refresh) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh == true) {\n        _this3.lastAdvanceSK = \"\";\n      }\n\n      if (_this3.lastAdvanceSK !== \"end\") {\n        const result = yield _this3.accountService.getData(`advance/report/paging?startPay=${_this3.filter.startDate}&endPay=${_this3.filter.endDate}&paymentMode=${_this3.filter.mode}&payModeNo=${_this3.filter.payModeNo}&paymentTo=${_this3.filter.receiverType}&entityID=${_this3.filter.searchValue}&lastKey=${_this3.lastAdvanceSK}`).toPromise();\n\n        if (result && result.length === 0) {\n          _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result && result.length > 0) {\n          if (result[result.length - 1].sk !== undefined) {\n            _this3.lastAdvanceSK = encodeURIComponent(result[result.length - 1].sk);\n            _this3.advanceLoaded = true;\n          } else {\n            _this3.lastAdvanceSK = \"end\";\n          }\n\n          result.map(v => {\n            v.url = `/accounts/payments/advance-payments/detail/${v.paymentID}`;\n          });\n          _this3.allPayments = _this3.allPayments.concat(result);\n        }\n      }\n    })();\n  }\n\n  fetchDriverPayments(refresh) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh == true) {\n        _this4.lastDriverSK = \"\";\n      }\n\n      if (_this4.lastAdvanceSK !== \"end\") {\n        const result = yield _this4.accountService.getData(`driver-payments/report/paging?startPay=${_this4.filter.startDate}&endPay=${_this4.filter.endDate}&paymentMode=${_this4.filter.mode}&payModeNo=${_this4.filter.payModeNo}&paymentTo=${_this4.filter.receiverType}&entityID=${_this4.filter.searchValue}&lastKey=${_this4.lastDriverSK}`).toPromise();\n\n        if (result && result.length === 0) {\n          _this4.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result && result.length > 0) {\n          if (result[result.length - 1].sk !== undefined) {\n            _this4.lastDriverSK = encodeURIComponent(result[result.length - 1].sk);\n            _this4.driverLoaded = true;\n          } else {\n            _this4.lastDriverSK = \"end\";\n          }\n\n          result.map(v => {\n            v.url = `/accounts/payments/driver-payments/detail/${v.paymentID}`;\n          });\n          _this4.allPayments = _this4.allPayments.concat(result);\n        }\n      }\n    })();\n  }\n\n  fetchEmployeePayments(refresh) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh == true) {\n        _this5.lastEmployeeSK = \"\";\n      }\n\n      if (_this5.lastEmployeeSK !== \"end\") {\n        const result = yield _this5.accountService.getData(`employee-payments/report/paging?startPay=${_this5.filter.startDate}&endPay=${_this5.filter.endDate}&paymentMode=${_this5.filter.mode}&payModeNo=${_this5.filter.payModeNo}&paymentTo=${_this5.filter.receiverType}&entityID=${_this5.filter.searchValue}&lastKey=${_this5.lastEmployeeSK}`).toPromise();\n\n        if (result && result.length === 0) {\n          _this5.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result && result.length > 0) {\n          if (result[result.length - 1].sk !== undefined) {\n            _this5.lastEmployeeSK = encodeURIComponent(result[result.length - 1].sk);\n            _this5.employeeLoaded = true;\n          } else {\n            _this5.lastEmployeeSK = \"end\";\n          }\n\n          result.map(v => {\n            v.url = `/accounts/payments/employee-payments/detail/${v.paymentID}`;\n          });\n          _this5.allPayments = _this5.allPayments.concat(result);\n        }\n      }\n    })();\n  }\n\n  fetchExpencePayments(refresh) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh == true) {\n        _this6.lastExpenceSK = \"\";\n      }\n\n      if (_this6.lastExpenceSK !== \"end\") {\n        const result = yield _this6.accountService.getData(`expense-payments/report/paging?startPay=${_this6.filter.startDate}&endPay=${_this6.filter.endDate}&paymentMode=${_this6.filter.mode}&payModeNo=${_this6.filter.payModeNo}&paymentTo=${_this6.filter.receiverType}&entityID=${_this6.filter.searchValue}&lastKey=${_this6.lastExpenceSK}`).toPromise();\n\n        if (result && result.length === 0) {\n          _this6.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result && result.length > 0) {\n          if (result[result.length - 1].sk !== undefined) {\n            _this6.lastExpenceSK = encodeURIComponent(result[result.length - 1].sk);\n            _this6.expenseLoaded = true;\n          } else {\n            _this6.lastExpenceSK = \"end\";\n          }\n\n          result.map(v => {\n            v.url = `/accounts/payments/expense-payments/detail/${v.paymentID}`;\n          });\n          _this6.allPayments = _this6.allPayments.concat(result);\n        }\n      }\n    })();\n  }\n\n  resetVariables() {\n    this.lastEmployeeSK = '';\n    this.lastDriverSK = '';\n    this.lastAdvanceSK = '';\n    this.lastExpenceSK = '';\n    this.employeeLoaded = false;\n    this.expenseLoaded = false;\n    this.advanceLoaded = false;\n    this.driverLoaded = false;\n  }\n\n  searchFilter() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.allPayments = [];\n      _this7.searching = true;\n\n      _this7.resetVariables();\n\n      _this7.dataMessage = Constants.FETCHING_DATA;\n\n      if (_this7.filter.type) {\n        switch (_this7.filter.type) {\n          case \"epp\":\n            {\n              yield _this7.fetchEmployeePayments();\n              break;\n            }\n\n          case \"exp\":\n            {\n              yield _this7.fetchExpencePayments();\n              break;\n            }\n\n          case \"advp\":\n            {\n              yield _this7.fetchAdvancePayments();\n              break;\n            }\n\n          case \"drvp\":\n            {\n              yield _this7.fetchDriverPayments();\n              break;\n            }\n        }\n      } else {\n        yield _this7.init();\n      }\n\n      _this7.searching = false;\n    })();\n  }\n\n  resetFilter() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.resetVariables();\n\n      _this8.filter = {\n        startDate: null,\n        endDate: null,\n        mode: null,\n        type: null,\n        payModeNo: null,\n        receiver: null,\n        searchType: null,\n        receiverType: null,\n        searchValue: null\n      };\n      yield _this8.init();\n    })();\n  }\n\n  onScroll() {\n    // console.log(\"Expense\",this.expenseLoaded)\n    // console.log(\"Advance\",this.advanceLoaded)\n    // console.log(\"Driver\",this.driverLoaded)\n    // console.log(\"employee\",this.employeeLoaded)\n    if (this.expenseLoaded) this.fetchExpencePayments();\n    if (this.advanceLoaded) this.fetchAdvancePayments();\n    if (this.driverLoaded) this.fetchDriverPayments();\n    if (this.employeeLoaded) this.fetchEmployeePayments();\n    this.expenseLoaded = false;\n    this.advanceLoaded = false;\n    this.driverLoaded = false;\n    this.employeeLoaded = false;\n  }\n\n  showPDF() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      _this9.allExportData = [];\n      _this9.exporting = true;\n\n      if (_this9.filter.type) {\n        switch (_this9.filter.type) {\n          case \"epp\":\n            {\n              const employeeData = yield _this9.accountService.getData(`employee-payments/report/export?startPay=${_this9.filter.startDate}&endPay=${_this9.filter.endDate}&paymentMode=${_this9.filter.mode}&payModeNo=${_this9.filter.payModeNo}&paymentTo=${_this9.filter.receiverType}&entityID=${_this9.filter.searchValue}`).toPromise();\n              _this9.allExportData = _this9.allExportData.concat(employeeData);\n              break;\n            }\n\n          case \"exp\":\n            {\n              const expenseData = yield _this9.accountService.getData(`expense-payments/report/export?startPay=${_this9.filter.startDate}&endPay=${_this9.filter.endDate}&paymentMode=${_this9.filter.mode}&payModeNo=${_this9.filter.payModeNo}&paymentTo=${_this9.filter.receiverType}&entityID=${_this9.filter.searchValue}`).toPromise();\n              _this9.allExportData = _this9.allExportData.concat(expenseData);\n              break;\n            }\n\n          case \"advp\":\n            {\n              const advanceData = yield _this9.accountService.getData(`advance/report/export?startPay=${_this9.filter.startDate}&endPay=${_this9.filter.endDate}&paymentMode=${_this9.filter.mode}&payModeNo=${_this9.filter.payModeNo}&paymentTo=${_this9.filter.receiverType}&entityID=${_this9.filter.searchValue}`).toPromise();\n              _this9.allExportData = _this9.allExportData.concat(advanceData);\n              break;\n            }\n\n          case \"drvp\":\n            {\n              const driverData = yield _this9.accountService.getData(`driver-payments/report/export?startPay=${_this9.filter.startDate}&endPay=${_this9.filter.endDate}&paymentMode=${_this9.filter.mode}&payModeNo=${_this9.filter.payModeNo}&paymentTo=${_this9.filter.receiverType}&entityID=${_this9.filter.searchValue}`).toPromise();\n              _this9.allExportData = _this9.allExportData.concat(driverData);\n              break;\n            }\n        }\n      } else {\n        yield _this9.fetchAllPayment();\n      }\n\n      let ngbModalOptions = {\n        keyboard: true,\n        windowClass: \"preview\"\n      };\n\n      _this9.modalService.open(_this9.previewModal, ngbModalOptions);\n\n      _this9.exporting = false;\n    })();\n  }\n\n  generateRequiredCSV() {\n    if (this.allPayments.length > 0) {\n      let DataObject = [];\n      let CsvArray = [];\n      this.allPayments.forEach(element => {\n        let obj = {};\n        obj['Transaction Date'] = element.txnDate;\n        obj['Payment ID'] = element.paymentNo;\n        obj['Payment Mode'] = element.payMode;\n        obj['Cheque/ Cash No'] = element.payModeNo;\n        obj['Cheque/Cash Date'] = element.payModeDate;\n        obj['Type Of Payment'] = element.type + ' ' + ':' + ' ' + element.advType;\n        obj['Receiver'] = element.paymentTo + ' ' + ':' + ' ' + element.entityName;\n        obj['Currency'] = element.currency;\n        obj['Amount'] = element.amount;\n        DataObject.push(obj);\n      });\n      let headers = Object.keys(DataObject[0]).join(',');\n      headers += '\\n';\n      CsvArray.push(headers);\n      DataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += '\\n';\n        CsvArray.push(obj);\n      });\n      const blob = new Blob(CsvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `Required-Inventory-Report.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error('No Records found');\n    }\n  }\n\n  generatePDF() {\n    this.printing = true;\n    let data = document.getElementById(\"print_wrap\");\n    console.log(data);\n    html2pdf(data, {\n      margin: 0,\n      pagebreak: {\n        mode: \"avoid-all\"\n      },\n      filename: \"payment-report.pdf\",\n      image: {\n        type: \"jpeg\",\n        quality: 0.98\n      },\n      html2Canvas: {\n        dpi: 300,\n        letterRendering: true\n      },\n      jsPDF: {\n        unit: \"in\",\n        format: \"a4\",\n        orientation: \"landscape\"\n      }\n    });\n    this.printing = false;\n  }\n\n  fetchAllPayment() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const advanceData = yield _this10.accountService.getData(`advance/report/export?startPay=${_this10.filter.startDate}&endPay=${_this10.filter.endDate}&paymentMode=${_this10.filter.mode}&payModeNo=${_this10.filter.payModeNo}&paymentTo=${_this10.filter.receiverType}&entityID=${_this10.filter.searchValue}`).toPromise();\n      const driverData = yield _this10.accountService.getData(`driver-payments/report/export?startPay=${_this10.filter.startDate}&endPay=${_this10.filter.endDate}&paymentMode=${_this10.filter.mode}&payModeNo=${_this10.filter.payModeNo}&paymentTo=${_this10.filter.receiverType}&entityID=${_this10.filter.searchValue}`).toPromise();\n      const employeeData = yield _this10.accountService.getData(`employee-payments/report/export?startPay=${_this10.filter.startDate}&endPay=${_this10.filter.endDate}&paymentMode=${_this10.filter.mode}&payModeNo=${_this10.filter.payModeNo}&paymentTo=${_this10.filter.receiverType}&entityID=${_this10.filter.searchValue}`).toPromise();\n      const expenseData = yield _this10.accountService.getData(`expense-payments/report/export?startPay=${_this10.filter.startDate}&endPay=${_this10.filter.endDate}&paymentMode=${_this10.filter.mode}&payModeNo=${_this10.filter.payModeNo}&paymentTo=${_this10.filter.receiverType}&entityID=${_this10.filter.searchValue}`).toPromise();\n      _this10.allExportData = _this10.allExportData.concat(advanceData);\n      _this10.allExportData = _this10.allExportData.concat(driverData);\n      _this10.allExportData = _this10.allExportData.concat(employeeData);\n      _this10.allExportData = _this10.allExportData.concat(expenseData);\n    })();\n  }\n\n};\n\nPaymentReportComponent.ctorParameters = () => [{\n  type: AccountService\n}, {\n  type: NgbModal\n}, {\n  type: DashboardUtilityService\n}, {\n  type: ApiService\n}, {\n  type: ToastrService\n}];\n\nPaymentReportComponent.propDecorators = {\n  previewModal: [{\n    type: ViewChild,\n    args: [\"previewModal\", {\n      static: false\n    }]\n  }]\n};\nPaymentReportComponent = __decorate([Component({\n  selector: 'app-payment-report',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], PaymentReportComponent);\nexport { PaymentReportComponent };","map":null,"metadata":{},"sourceType":"module"}