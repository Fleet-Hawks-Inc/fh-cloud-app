{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-device.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-device.component.css\";\nimport { Component } from \"@angular/core\";\nimport { ApiService } from \"../../../../services/api.service\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { Location } from \"@angular/common\";\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nlet AddDeviceComponent = class AddDeviceComponent {\n  constructor(apiService, toastr, location, route, router) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.location = location;\n    this.route = route;\n    this.router = router;\n    this.errorMessage = \"\";\n    this.deviceIDText = \"Device ID (Serial#)\";\n    this.title = \"Add Device\";\n    this.device = {\n      deviceName: \"\",\n      deviceSerialNo: \"\",\n      fleetID: \"\",\n      deviceStatus: \"Active\",\n      description: \"\",\n      deviceType: null,\n      vehicleID: null,\n      assetID: null,\n      deviceID: \"\",\n      vehicle: {},\n      asset: {}\n    };\n    this.deviceVehicle = [{\n      value: \"Tracker\",\n      text: \"Solar Tracker\"\n    }, {\n      value: \"Tracker\",\n      text: \"Wired Tracker\"\n    }, {\n      value: \"DashCam\",\n      text: \"Dash Camera\"\n    }, {\n      value: \"ELD\",\n      text: \"ELD\"\n    }];\n    this.deviceAsset = [{\n      value: \"Tracker\",\n      text: \"Solar Tracker\"\n    }, {\n      value: \"Tracker\",\n      text: \"Wired Tracker\"\n    }];\n    this.devicesTypes = this.deviceVehicle;\n    this.deviceID = \"\";\n    this.vehicles = [];\n    this.assets = [];\n    this.attachedWith = \"Vehicle\";\n    this.editMode = false;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let deviceType = _this.route.snapshot.params[\"deviceType\"];\n      let deviceSerialNo = _this.route.snapshot.params[\"deviceSerialNo\"];\n\n      if (deviceType && deviceSerialNo) {\n        _this.editMode = true;\n        _this.deviceID = `${deviceType}/${deviceSerialNo}`;\n        _this.title = \"Edit Device\"; // this.deviceID=encodeURIComponent(this.deviceID);\n\n        _this.fetchDevices();\n      }\n\n      yield _this.deviceAttachedVehicle();\n    })();\n  }\n\n  deviceAttachedVehicle() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this2.editMode) {\n        _this2.devicesTypes = _this2.deviceVehicle;\n        _this2.attachedWith = \"Vehicle\";\n        yield _this2.fetchVehicles();\n      }\n    })();\n  }\n\n  deviceAttachedAsset() {\n    if (!this.editMode) {\n      this.devicesTypes = this.deviceAsset;\n      this.attachedWith = \"Asset\";\n      this.fetchAssets();\n    }\n  }\n\n  fetchAssets() {\n    this.device.vehicle = {};\n\n    try {\n      this.apiService.getData(\"assets/get/minor/details\").subscribe(result => {\n        this.assets = result.Items; // console.log(\"result\", result);\n        // this.assets\n        // if (result) {\n        //   for (let key in result) {\n        //     let obj = {\n        //       assetIdentification: result[key],\n        //       assetID: key\n        //     }\n        //     this.assets.push(obj)\n        //   }\n        // }\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  fetchDevices() {\n    var _this3 = this;\n\n    try {\n      this.apiService.getData(`devices/getDeviceBySerialNo/${this.deviceID}`).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          if (result) {\n            _this3.device = {\n              deviceName: result.deviceName,\n              deviceStatus: result.deviceStatus === true ? \"Active\" : \"Inactive\",\n              deviceSerialNo: result.deviceSerialNo.split(\"#\")[1],\n              description: result.description,\n              deviceType: result.deviceType,\n              deviceID: result.deviceID\n            };\n\n            if (result.assetID) {\n              _this3.device.assetID = result.assetID;\n              _this3.attachedWith = \"Asset\";\n              yield _this3.fetchAssets();\n            } else {\n              _this3.device.vehicleID = result.vehicleID;\n              _this3.attachedWith = \"Vehicle\";\n              yield _this3.fetchVehicles();\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  /**\r\n   * Fetch vehicles\r\n   */\n\n\n  fetchVehicles() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.device.asset = {};\n      const resultVehicles = [];\n\n      try {\n        const result = yield _this4.apiService.getData(\"vehicles\").toPromise();\n\n        if (result && result.Items) {\n          for (const item of result.Items) {\n            if (item.isDeleted === 0) {\n              let obj = {\n                vehicleIdentification: \"\",\n                vehicleID: \"\"\n              };\n              obj.vehicleIdentification = item.vehicleIdentification;\n              obj.vehicleID = item.vehicleID;\n              resultVehicles.push(obj);\n            }\n          }\n        }\n\n        _this4.vehicles = resultVehicles;\n      } catch (error) {\n        throw new Error(error);\n      }\n    })();\n  } // Fires when submit button is clicked\n\n\n  submit() {\n    if (this.device) {\n      if (this.device.vehicleID) {\n        this.vehicles.forEach(element => {\n          if (this.device.vehicleID == element.vehicleID) {\n            this.device.vehicle.vehicleIdentification = element.vehicleIdentification;\n            this.device.vehicle.vehicleID = element.vehicleID;\n            this.device.fleetID = element.vehicleIdentification;\n          }\n        });\n        this.device.asset = undefined;\n      } else if (this.device.assetID) {\n        this.assets.forEach(element => {\n          if (this.device.assetID == element.assetID) {\n            this.device.asset.assetIdentification = element.assetIdentification;\n            this.device.asset.assetID = element.assetID;\n            this.device.fleetID = element.assetIdentification;\n          }\n        });\n        this.device.vehicle = undefined;\n      }\n\n      this.device.deviceID = undefined;\n      this.device.assetID = undefined;\n      this.device.vehicleID = undefined;\n\n      try {\n        this.apiService.postData(\"devices\", this.device).subscribe({\n          complete: () => {},\n          error: err => {},\n          next: res => {\n            this.toastr.success(\"Device Created successfully\");\n            this.location.back();\n          }\n        });\n      } catch (error) {\n        console.error(error);\n        throw new Error(error);\n      }\n    }\n  } // fires when submit button is clicked\n\n\n  updateAndSubmit() {\n    if (this.device.deviceStatus === \"Active\") {\n      this.device.deviceStatus = true;\n    }\n\n    if (this.device.deviceStatus === \"Inactive\") {\n      this.device.deviceStatus = false;\n    }\n\n    this.device.vehicleID = undefined;\n    this.device.assetID = undefined;\n    this.device.vehicle = undefined;\n    this.device.asset = undefined;\n\n    try {\n      this.apiService.putData(\"devices\", this.device).subscribe({\n        complete: () => {},\n        error: err => {\n          from(err.error).pipe(map(val => {\n            val.message = val.message.replace(/\".*\"/, \"This Field\");\n          })).subscribe({\n            complete: () => {},\n            error: () => {},\n            next: () => {}\n          });\n        },\n        next: res => {\n          this.toastr.success(\"Device Updated successfully\");\n          this.router.navigate(['manage/devices/list']);\n        }\n      });\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  /**\r\n   * change title text depending on device type selected.\r\n   */\n\n\n  deviceTypeSelected(eventArgs) {\n    if (eventArgs && eventArgs.value === \"Tracker\") {\n      this.deviceIDText = \"IMEI#\";\n    } else {\n      this.deviceIDText = \"Device ID(Serial #)\";\n    }\n  }\n\n};\n\nAddDeviceComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: Location\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}];\n\nAddDeviceComponent = __decorate([Component({\n  selector: \"app-add-device\",\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddDeviceComponent);\nexport { AddDeviceComponent };","map":null,"metadata":{},"sourceType":"module"}