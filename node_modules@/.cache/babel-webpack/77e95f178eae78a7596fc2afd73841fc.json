{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./service-detail.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./service-detail.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ApiService, ListService } from '../../../../../services';\nimport { ActivatedRoute } from '@angular/router';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport Constants from '../../../constants';\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport * as html2pdf from \"html2pdf.js\";\nimport { CountryStateCityService } from \"src/app/services/country-state-city.service\";\nimport { RouteManagementServiceService } from 'src/app/services/route-management-service.service';\nlet ServiceDetailComponent = class ServiceDetailComponent {\n  constructor(spinner, apiService, route, domSanitizer, modalService, listService, countryStateCity, routerMgmtService) {\n    var _this = this;\n\n    this.spinner = spinner;\n    this.apiService = apiService;\n    this.route = route;\n    this.domSanitizer = domSanitizer;\n    this.modalService = modalService;\n    this.listService = listService;\n    this.countryStateCity = countryStateCity;\n    this.routerMgmtService = routerMgmtService;\n    this.logurl = this.apiService.AssetUrl;\n    this.noRecordMessage = Constants.NO_RECORDS_FOUND;\n    this.logsData = {\n      unitType: '-'\n    };\n    this.allServiceTasks = [];\n    this.allServiceParts = [];\n    this.vehiclesObject = {};\n    this.vendorsObject = {};\n    this.issuesObject = [];\n    this.assetsObject = {};\n    this.photos = [];\n    this.docs = [];\n    this.users = [];\n    this.carrier = {\n      carrierName: \"\",\n      phone: \"\",\n      email: \"\"\n    };\n    this.logImages = [];\n    this.logDocs = [];\n    this.showModal = false;\n    this.companyLogo = \"\";\n    this.companyName = \"\";\n    this.carrierAddress = {\n      address: \"\",\n      userLocation: \"\",\n      manual: \"\",\n      stateName: \"\",\n      countryName: \"\",\n      cityName: \"\",\n      zipCode: \"\"\n    };\n    this.showDetails = false;\n    this.vehicleVIN = '';\n    this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('');\n    this.getCurrentuser = /*#__PURE__*/_asyncToGenerator(function* () {\n      const carrierID = localStorage.getItem('xfhCarrierId');\n      let result = yield _this.apiService.getData(`carriers/detail/${carrierID}`).toPromise();\n      _this.companyName = result.companyName;\n      _this.companyLogo = result.logo;\n      _this.tagLine = result.tagLine;\n    });\n    this.sessionID = this.routerMgmtService.serviceLogSessionID;\n  }\n\n  ngOnInit() {\n    this.logID = this.route.snapshot.params['logID'];\n    this.fetchProgramByID();\n    this.getCurrentuser();\n    this.fetchAllVehiclesIDs();\n    this.fetchAllVendorsIDs(); // this.fetchAllIssuesIDs();\n\n    this.fetchAllAssetsIDs();\n    this.fetchUsers();\n    this.fetchCarrier();\n  }\n\n  fetchProgramByID() {\n    this.spinner.show(); // loader init\n\n    this.apiService.getData(`serviceLogs/${this.logID}`).subscribe({\n      complete: () => {},\n      error: () => {},\n      next: result => {\n        this.logsData = result.Items[0];\n        this.fetchSelectedIssues(this.logsData.selectedIssues);\n        result = result.Items[0];\n        this.vehicle = result.unitID;\n        this.assetID = result.unitID;\n        this.vendorID = result.vendorID;\n        this.completionDate = result.completionDate;\n        this.odometer = result.odometer;\n        this.reference = result.reference;\n        this.description = result.description;\n        this.startDate = result.timeCreated;\n        this.allServiceTasks = result.allServiceTasks.serviceTaskList;\n        this.allServiceParts = result.allServiceParts.servicePartsList;\n        this.taskSubTotal = result.allServiceTasks.subTotal;\n        this.taskDiscountAmount = result.allServiceTasks.discountAmount;\n        this.taskDiscountPercent = result.allServiceTasks.discountPercent;\n        this.taskTaxAmount = result.allServiceTasks.taxAmount;\n        this.taskTaxPercent = result.allServiceTasks.taxPercent;\n        this.taskTotal = result.allServiceTasks.total;\n        this.partsSubTotal = result.allServiceParts.subTotal;\n        this.partsQuantity = result.allServiceParts.totalQuantity;\n        this.partsDiscountAmount = result.allServiceParts.discountAmount;\n        this.partsDiscountPercent = result.allServiceParts.discountPercent;\n        this.partsTaxAmount = result.allServiceParts.taxAmount;\n        this.partsTaxPercent = result.allServiceParts.taxPercent;\n        this.partsTotal = result.allServiceParts.total;\n        this.currency = result.allServiceParts.currency; // this.logImages = result.uploadedPics;\n\n        if (result.uploadedPics !== undefined && result.uploadedPics.length > 0) {\n          result.uploadedPics.forEach(x => {\n            let obj = {};\n\n            if (x.name.split(\".\")[1] === \"jpg\" || x.name.split(\".\")[1] === \"png\" || x.name.split(\".\")[1] === \"jpeg\") {\n              obj = {\n                imgPath: `${x.path}`,\n                docPath: `${x.path}`,\n                name: x.name,\n                crossOrigin: 'anonymous'\n              };\n            } else {\n              obj = {\n                imgPath: \"assets/img/icon-pdf.png\",\n                docPath: `${x.path}`,\n                name: x.name,\n                crossOrigin: ''\n              };\n            }\n\n            this.logImages.push(obj);\n          });\n        }\n\n        this.logDocs = result.uploadDocument;\n        this.vehiclePlateNo = result.vehPlateNo;\n        this.vehicleVIN = result.vehicleVin;\n        this.assetPlateNo = result.assetPlateNo;\n        this.assetVin = result.assetVin;\n        this.subTotal = result.total.subTotal;\n        this.taxes = result.total.taxes;\n        this.finalTotal = result.total.finalTotal;\n        /*\r\n        if(result.uploadedPhotos !== undefined && result.uploadedPhotos.length > 0){\r\n          this.logImages = result.uploadedPhotos.map(x => ({\r\n            path: `${this.logurl}/${result.carrierID}/${x}`,\r\n            name: x,\r\n          }));\r\n        }\r\n                  if(result.uploadedDocs !== undefined && result.uploadedDocs.length > 0){\r\n          this.logDocs = result.uploadedDocs.map(x => ({path: `${this.logurl}/${result.carrierID}/${x}`, name: x}));\r\n        }\r\n        */\n\n        this.spinner.hide(); // loader init\n      }\n    });\n  }\n\n  fetchAllVehiclesIDs() {\n    this.apiService.getData('vehicles/get/list').subscribe(result => {\n      this.vehiclesObject = result;\n    });\n  }\n\n  fetchAllVendorsIDs() {\n    this.apiService.getData('contacts/get/list/vendor').subscribe(result => {\n      this.vendorsObject = result;\n    });\n  }\n\n  fetchSelectedIssues(issueIDs) {\n    if (issueIDs.length > 0) {\n      issueIDs = JSON.stringify(issueIDs);\n      this.apiService.getData('issues/fetch/selected?issueIds=' + issueIDs).subscribe(result => {\n        this.issuesObject = result;\n      });\n    }\n  }\n\n  fetchUsers() {\n    this.apiService.getData('common/users/get/list').subscribe(result => {\n      this.users = result;\n    });\n  }\n\n  fetchAllAssetsIDs() {\n    this.apiService.getData('assets/get/list').subscribe(result => {\n      this.assetsObject = result;\n    });\n  } // delete uploaded images and documents\n\n\n  delete(type, name, index) {\n    this.apiService.deleteData(`serviceLogs/uploadDelete/${this.logID}/${type}/${name}`).subscribe(result => {\n      if (type === 'image') {\n        this.logImages.splice(index, 1);\n      } else {\n        this.logDocs.splice(index, 1);\n      }\n    });\n  }\n\n  setPDFSrc(val) {\n    let pieces = val.split(/[\\s.]+/);\n    let ext = pieces[pieces.length - 1];\n    this.pdfSrc = '';\n\n    if (ext == 'doc' || ext == 'docx' || ext == 'xlsx') {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl('https://docs.google.com/viewer?url=' + val + '&embedded=true');\n    } else {\n      this.pdfSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(val);\n    }\n  }\n\n  openModal() {\n    let ngbModalOptions = {\n      keyboard: false,\n      backdrop: \"static\",\n      windowClass: \"log-order logs-model\"\n    };\n    this.logModalRef = this.modalService.open(this.logModal, ngbModalOptions);\n  }\n\n  downloadPdf() {\n    var data = document.getElementById(\"log_wrap\");\n    console.log('285');\n    html2pdf(data, {\n      margin: 0.5,\n      pagebreak: {\n        mode: 'avoid-all',\n        before: \"log_wrap\"\n      },\n      filename: \"serviceLog.pdf\",\n      image: {\n        type: \"jpeg\",\n        quality: 0.98\n      },\n      html2canvas: {\n        dpi: 192,\n        letterRendering: true,\n        allowTaint: true,\n        useCORS: true\n      },\n      jsPDF: {\n        unit: \"in\",\n        format: \"a4\",\n        orientation: \"portrait\"\n      }\n    });\n    console.log('299'); //this.logModalRef.close();\n  }\n\n  fetchCarrier() {\n    const carrierID = localStorage.getItem('xfhCarrierId');\n    this.apiService.getData(`carriers/${carrierID}`).subscribe(result => {\n      this.carrier = result.Items[0];\n      this.fetchAddress(this.carrier[`addressDetails`]);\n    });\n  }\n\n  fetchAddress(address) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      for (const adr of address) {\n        if (adr.addressType === \"yard\" && adr.defaultYard === true) {\n          if (adr.manual) {\n            adr.countryName = yield _this2.countryStateCity.GetSpecificCountryNameByCode(adr.countryCode);\n            adr.stateName = yield _this2.countryStateCity.GetStateNameFromCode(adr.stateCode, adr.countryCode);\n          }\n\n          _this2.carrierAddress = adr;\n          _this2.showDetails = true;\n          break;\n        }\n      }\n    })();\n  }\n\n};\n\nServiceDetailComponent.ctorParameters = () => [{\n  type: NgxSpinnerService\n}, {\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: DomSanitizer\n}, {\n  type: NgbModal\n}, {\n  type: ListService\n}, {\n  type: CountryStateCityService\n}, {\n  type: RouteManagementServiceService\n}];\n\nServiceDetailComponent.propDecorators = {\n  previewExpTransaction: [{\n    type: ViewChild,\n    args: [\"previewExpTransaction\", {\n      static: true\n    }]\n  }],\n  logModal: [{\n    type: ViewChild,\n    args: [\"logModal\", {\n      static: true\n    }]\n  }]\n};\nServiceDetailComponent = __decorate([Component({\n  selector: 'app-service-detail',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ServiceDetailComponent);\nexport { ServiceDetailComponent };","map":null,"metadata":{},"sourceType":"module"}