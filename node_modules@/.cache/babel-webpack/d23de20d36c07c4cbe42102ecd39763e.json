{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-sales-invoice.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-sales-invoice.component.css\";\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { AccountService, ApiService, ListService } from 'src/app/services';\nimport * as moment from 'moment';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nlet AddSalesInvoiceComponent = class AddSalesInvoiceComponent {\n  constructor(apiService, route, listService, httpClient, location, toaster, accountService) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.route = route;\n    this.listService = listService;\n    this.httpClient = httpClient;\n    this.location = location;\n    this.toaster = toaster;\n    this.accountService = accountService;\n    this.total = 0;\n    this.submitDisabled = false;\n    this.response = '';\n    this.errors = {};\n    this.creditIds = [];\n    this.creditData = [];\n    this.saleData = {\n      txnDate: moment().format('YYYY-MM-DD'),\n      currency: 'CAD',\n      customerID: null,\n      cusAddressID: '',\n      sOrderNo: '',\n      sRef: '',\n      dueDate: null,\n      paymentTerm: null,\n      salePerson: '',\n      sOrderDetails: [{\n        commodity: '',\n        desc: '',\n        qty: 0,\n        qtyUnit: null,\n        rate: 0,\n        rateUnit: null,\n        amount: 0,\n        accountID: null\n      }],\n      charges: {\n        remarks: \"\",\n        cName: \"Adjustments\",\n        cType: \"add\",\n        cAmount: 0,\n        accountID: null,\n        discount: 0,\n        discountUnit: '%',\n        taxes: [{\n          name: \"GST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }, {\n          name: \"PST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }, {\n          name: \"HST\",\n          tax: 0,\n          type: \"prcnt\",\n          amount: 0\n        }]\n      },\n      total: {\n        detailTotal: 0,\n        subTotal: 0,\n        taxes: 0,\n        feeTotal: 0,\n        finalTotal: 0,\n        customerCredit: 0,\n        discountAmount: 0\n      },\n      taxExempt: true,\n      stateTaxID: null,\n      remarks: \"\",\n      creditIds: [],\n      creditData: []\n    };\n    this.paymentTerms = [{\n      value: \"15\",\n      name: \"15 Days\"\n    }, {\n      value: \"30\",\n      name: \"30 Days\"\n    }, {\n      value: \"45\",\n      name: \"45 Days\"\n    }, {\n      value: \"dueReceipt\",\n      name: \"Due on receipt\"\n    }, {\n      value: \"dueEnd\",\n      name: \"Due end of the month\"\n    }, {\n      value: \"custom\",\n      name: \"Custom\"\n    }];\n    this.dataMessage = Constants.NO_RECORDS_FOUND;\n    this.salesOrder = [];\n    this.accounts = [];\n    this.customers = [];\n    this.stateTaxes = [];\n    this.customerCredits = [];\n    this.stlCreditsData = [];\n    this.pageTitle = 'Add';\n    this.getCurrentUser = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.saleData.salePerson = localStorage.getItem(\"currentUserName\");\n    });\n  }\n\n  ngOnInit() {\n    this.saleID = this.route.snapshot.params[`saleID`];\n\n    if (this.saleID) {\n      this.pageTitle = 'Edit';\n      this.fetchSaleInvoice();\n    } else {\n      this.pageTitle = 'Add';\n      this.fetchAccounts();\n    }\n\n    this.getCurrentUser();\n    this.fetchStateTaxes();\n    this.listService.fetchCustomers();\n    let customerList = new Array();\n    this.getValidCustomers(customerList);\n    this.customers = customerList;\n  }\n\n  getValidCustomers(customerList) {\n    let ids = [];\n    this.listService.customersList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.isDeleted === 0 && !ids.includes(element2.contactID)) {\n          customerList.push(element2);\n          ids.push(element2.contactID);\n        }\n      });\n    });\n  }\n\n  fetchCustomer() {\n    this.listService.fetchCustomers();\n  }\n\n  openModal(unit) {\n    this.listService.triggerModal(unit);\n    localStorage.setItem(\"isOpen\", \"true\");\n    this.listService.changeButton(false);\n  }\n\n  changeUnit(value, i) {\n    this.saleData.sOrderDetails[i].qtyUnit = value;\n    this.saleData.sOrderDetails[i].rateUnit = value;\n    this.calculateAmount(null);\n    this.calculateFinalTotal();\n  }\n\n  calculateAmount(i) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let total = 0;\n\n      if (i != null) {\n        let amount = _this2.saleData.sOrderDetails[i].qty * _this2.saleData.sOrderDetails[i].rate;\n        _this2.saleData.sOrderDetails[i].amount = parseFloat(amount.toFixed(2));\n      }\n\n      _this2.saleData.sOrderDetails.forEach(element => {\n        total += element.amount;\n      });\n\n      _this2.saleData.total.detailTotal = parseFloat(total);\n      _this2.saleData.total.finalTotal = _this2.saleData.total.detailTotal;\n\n      _this2.calculateFinalTotal();\n    })();\n  }\n\n  getCustomerOrders(ID) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.saleData.sOrderNo = '';\n      _this3.saleData.cusAddressID = '';\n      _this3.salesOrder = [];\n      _this3.saleData.sOrderDetails = [{\n        commodity: '',\n        desc: '',\n        qty: 0,\n        qtyUnit: null,\n        rate: 0,\n        rateUnit: null,\n        amount: 0,\n        accountID: null\n      }];\n\n      if (ID != undefined) {\n        yield _this3.getCustomerCredit(ID);\n        yield _this3.getOrders(ID);\n        yield _this3.calculateAmount(null);\n        yield _this3.calculateFinalTotal();\n      }\n    })();\n  }\n\n  getOrders(ID) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this4.accountService.getData(`sales-orders/specific/${ID}`).toPromise();\n\n      if (result.length > 0) {\n        _this4.salesOrder = result;\n      }\n    })();\n  }\n\n  getInvDueDate(e) {\n    if (e === '15') {\n      const test = moment().add(15, 'd');\n      const test1 = moment(test).format('YYYY-MM-DD');\n      this.saleData.dueDate = test1;\n    } else if (e === '30') {\n      const test = moment().add(30, 'd');\n      const test1 = moment(test).format('YYYY-MM-DD');\n      this.saleData.dueDate = test1;\n    } else if (e === '45') {\n      const test = moment().add(45, 'd');\n      const test1 = moment(test).format('YYYY-MM-DD');\n      this.saleData.dueDate = test1;\n    } else if (e === 'dueReceipt') {\n      this.saleData.dueDate = moment().format('YYYY-MM-DD');\n    } else if (e === 'dueEnd') {\n      this.saleData.dueDate = moment().endOf('month').format('YYYY-MM-DD');\n    } else {\n      this.saleData.dueDate = null;\n    }\n  }\n\n  assignFullPayment(index, data, type) {\n    if (data.fullPayment) {\n      if (type === 'unstl') {\n        this.customerCredits[index].paidAmount = data.balance.toFixed(2);\n        this.customerCredits[index].paidStatus = true;\n        this.customerCredits[index].selected = true;\n      } else {\n        this.stlCreditsData[index].paidAmount = data.balance.toFixed(2);\n        this.stlCreditsData[index].paidStatus = true;\n        this.stlCreditsData[index].selected = true;\n      }\n    } else {\n      if (type === 'unstl') {\n        this.customerCredits[index].paidAmount = 0;\n        this.customerCredits[index].paidStatus = false;\n      } else {\n        this.stlCreditsData[index].paidAmount = 0;\n        this.stlCreditsData[index].paidStatus = false;\n      }\n    }\n\n    this.selectedCredits(type);\n  }\n\n  changeCur() {\n    if (this.saleData.customerID != '') {\n      this.getCustomerCredit(this.saleData.customerID);\n    }\n  }\n\n  getCustomerCredit(ID) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.customerCredits = [];\n      _this5.dataMessage = Constants.FETCHING_DATA;\n      let result = yield _this5.accountService.getData(`customer-credits/specific/${ID}?currency=${_this5.saleData.currency}`).toPromise();\n\n      if (result.length === 0) {\n        _this5.dataMessage = Constants.NO_RECORDS_FOUND;\n      }\n\n      if (result.length > 0) {\n        result.map(v => {\n          v.prevPaidAmount = Number(v.totalAmt) - Number(v.balance);\n          v.paidStatus = false;\n          v.fullPayment = false;\n          v.paidAmount = 0;\n          v.newStatus = v.status.replace(\"_\", \" \");\n        });\n        _this5.customerCredits = result;\n      }\n    })();\n  }\n\n  getOrderDetail(ID) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let getSaleOrder = _this6.salesOrder.find(elem => elem.saleID === ID);\n\n      if (getSaleOrder && getSaleOrder != undefined) {\n        _this6.saleData.cusAddressID = getSaleOrder.cusInfo.addressID;\n        _this6.saleData.sOrderDetails = [...getSaleOrder.sOrderDetails];\n        yield _this6.calculateAmount(null);\n\n        _this6.calculateFinalTotal();\n      }\n    })();\n  }\n\n  fetchAccounts() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.accountService.getData(`chartAc/fetch/list`).subscribe(res => {\n        _this7.accounts = res;\n      });\n    })();\n  }\n\n  addDetails() {\n    let obj = {\n      commodity: '',\n      desc: '',\n      qty: 0,\n      qtyUnit: null,\n      rate: 0,\n      rateUnit: null,\n      amount: 0,\n      accountID: null\n    };\n    const lastAdded = this.saleData.sOrderDetails[this.saleData.sOrderDetails.length - 1];\n\n    if (lastAdded.commodity !== \"\" && lastAdded.qty !== \"\" && lastAdded.qtyUnit !== null && lastAdded.rate !== \"\" && lastAdded.rateUnit !== null && lastAdded.amount !== 0 && lastAdded.accountID !== null) {\n      this.saleData.sOrderDetails.push(obj);\n    }\n\n    this.calculateAmount(null);\n    this.calculateFinalTotal();\n  }\n\n  deleteDetail(d) {\n    this.total -= this.saleData.sOrderDetails[d].amount;\n    this.saleData.sOrderDetails.splice(d, 1);\n    this.calculateAmount(null);\n    this.calculateFinalTotal();\n  }\n\n  calculateFinalTotal() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.saleData.total.subTotal = Number(_this8.saleData.total.detailTotal) + Number(_this8.saleData.charges.cAmount);\n\n      _this8.allTax();\n\n      let discount;\n\n      if (_this8.saleData.charges.discountUnit != '' && _this8.saleData.charges.discountUnit != null) {\n        if (_this8.saleData.charges.discountUnit === '%') {\n          discount = _this8.saleData.total.subTotal * _this8.saleData.charges.discount / 100;\n        } else {\n          discount = _this8.saleData.charges.discount;\n        }\n      }\n\n      _this8.saleData.total.discountAmount = discount;\n      _this8.saleData.total.finalTotal = Number(_this8.saleData.total.subTotal) + Number(_this8.saleData.total.taxes) - Number(discount) - Number(_this8.saleData.total.customerCredit);\n    })();\n  }\n\n  accessorialFeeTotal() {\n    if (this.saleData.charges.cType === \"add\") {\n      this.saleData.total.feeTotal = Number(this.saleData.charges.cAmount);\n    } else if (this.saleData.charges.cType === \"ded\") {\n      this.saleData.total.feeTotal = -Number(this.saleData.charges.cAmount);\n    }\n\n    this.calculateFinalTotal();\n  }\n\n  taxcalculation(index) {\n    this.saleData.charges.taxes[index].amount = this.saleData.charges.taxes[index].tax * this.saleData.total.subTotal / 100;\n    this.taxTotal();\n  }\n\n  allTax() {\n    let countTax = 0;\n    this.saleData.charges.taxes.forEach(element => {\n      element.amount = element.tax * this.saleData.total.subTotal / 100;\n      countTax += element.amount;\n    });\n    this.saleData.total.taxes = countTax;\n  }\n\n  taxTotal() {\n    this.saleData.total.taxes = 0;\n    this.saleData.charges.taxes.forEach(element => {\n      this.saleData.total.taxes += Number(element.amount);\n    });\n    this.calculateFinalTotal();\n  }\n\n  fetchStateTaxes() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this9.apiService.getData(\"stateTaxes\").toPromise();\n      _this9.stateTaxes = result.Items;\n    })();\n  }\n\n  taxExempt() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      _this10.saleData.charges.taxes.map(v => {\n        v.tax = 0;\n      });\n\n      _this10.saleData.stateTaxID = null;\n\n      _this10.allTax();\n\n      _this10.taxTotal();\n\n      _this10.calculateFinalTotal();\n    })();\n  }\n\n  stateSelectChange() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      let selected = _this11.stateTaxes.find(o => o.stateTaxID == _this11.saleData.stateTaxID);\n\n      _this11.saleData.charges.taxes = [];\n      _this11.saleData.charges.taxes = [{\n        name: \"GST\",\n        tax: selected.GST ? selected.GST : 0,\n        type: '',\n        amount: 0\n      }, {\n        name: \"HST\",\n        tax: selected.HST ? selected.HST : 0,\n        type: '',\n        amount: 0\n      }, {\n        name: \"PST\",\n        tax: selected.PST ? selected.PST : 0,\n        type: '',\n        amount: 0\n      }];\n\n      _this11.calculateFinalTotal(); // this.tax =\n      //   (parseInt(selected.GST) ? selected.GST : 0) +\n      //   (parseInt(selected.HST) ? selected.HST : 0) +\n      //   (parseInt(selected.PST) ? selected.PST : 0);\n\n    })();\n  }\n\n  selectedCredits(type) {\n    if (type === 'unstl') {\n      for (const element of this.customerCredits) {\n        if (element.selected) {\n          if (!this.saleData.creditIds.includes(element.creditID)) {\n            let obj = {\n              creditID: element.creditID,\n              status: element.status,\n              paidAmount: element.status === \"not_deducted\" ? element.paidAmount : Number(element.totalAmt) - Number(element.balance),\n              totalAmount: element.status === \"not_deducted\" ? element.amount : element.balance,\n              pendingAmount: element.balance\n            };\n            this.creditIds = [...this.creditIds, element.creditID];\n            this.creditData = [...this.creditData, obj];\n          }\n        } else {\n          this.removeElements(element.creditID);\n        }\n      }\n    } else if (type === 'stl') {\n      for (const element of this.stlCreditsData) {\n        if (element.selected) {\n          if (!this.saleData.creditIds.includes(element.creditID)) {\n            let obj = {\n              creditID: element.creditID,\n              status: element.status,\n              paidAmount: element.status === \"deducted\" ? element.paidAmount : Number(element.paidAmount) - Number(element.balance),\n              totalAmount: element.status === \"deducted\" ? element.totalAmt : Number(element.paidAmount) - Number(element.balance),\n              pendingAmount: element.status === \"deducted\" ? element.totalAmt : Number(element.paidAmount) - Number(element.balance)\n            };\n            this.creditIds = [...this.creditIds, element.creditID];\n            this.creditData = [...this.creditData, obj];\n          }\n        } else {\n          this.removeElements(element.creditID);\n        }\n      }\n    }\n\n    console.log('this.creditData', this.creditData);\n    this.saleData.creditIds = this.creditIds;\n    this.saleData.creditData = this.creditData;\n    this.creditCalculation();\n    this.calculateFinalTotal();\n  }\n\n  removeElements(id) {\n    console.log('edit', id);\n    let index = this.creditIds.indexOf(id);\n    console.log('index', index);\n\n    if (index != -1) {\n      this.creditIds.splice(index, 1);\n    }\n\n    var index1 = this.creditData.findIndex(p => p.creditID == id);\n\n    if (index1 != -1) {\n      this.creditData.splice(index1, 1);\n    }\n  }\n\n  creditCalculation() {\n    this.saleData.total.customerCredit = 0;\n    let creditTotal = 0;\n\n    for (const element of this.customerCredits) {\n      if (element.selected) {\n        creditTotal += Number(element.paidAmount);\n        this.saleData.creditData.map(v => {\n          if (element.creditID === v.creditID) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.balance) - Number(element.paidAmount);\n\n            if (Number(element.paidAmount) === Number(element.balance)) {\n              v.status = \"deducted\";\n            } else if (Number(element.paidAmount) < Number(element.balance)) {\n              v.status = \"partially_deducted\";\n            } else {\n              v.status = \"not_deducted\";\n            }\n          }\n        });\n      }\n    }\n\n    for (const element of this.stlCreditsData) {\n      if (element.selected) {\n        creditTotal += Number(element.paidAmount);\n        this.saleData.creditData.map(v => {\n          if (element.creditID === v.creditID) {\n            v.paidAmount = Number(element.paidAmount);\n            v.pendingAmount = Number(element.totalAmt) - Number(element.balance);\n\n            if (Number(element.paidAmount) === Number(element.prevPaidAmount)) {\n              v.status = \"deducted\";\n            } else if (Number(element.paidAmount) < Number(element.prevPaidAmount)) {\n              v.status = \"partially_deducted\";\n            } else {\n              v.status = \"not_deducted\";\n            }\n          }\n        });\n      }\n    }\n\n    this.saleData.total.customerCredit = creditTotal;\n  }\n\n  changeTaxExempt() {\n    this.taxTotal();\n  }\n\n  checkEmailStat(type) {\n    if (type === \"yes\") {\n      this.saleData[\"sendEmail\"] = true;\n    } else {\n      this.saleData[\"sendEmail\"] = false;\n    }\n\n    this.addInvoice();\n  }\n\n  addInvoice() {\n    this.submitDisabled = true;\n\n    for (const elem of this.customerCredits) {\n      if (elem.selected && (elem.paidAmount === 0 || elem.paidAmount === '')) {\n        this.toaster.error('Please add credits amount');\n        this.submitDisabled = false;\n        return false;\n      }\n    }\n\n    ;\n    this.accountService.postData(`sales-invoice`, this.saleData).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Invoice added successfully.');\n        this.cancel();\n      }\n    });\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  }\n\n  fetchSaleInvoice() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this12.accountService.getData(`sales-invoice/detail/${_this12.saleID}`).toPromise();\n      result = result[0];\n      _this12.saleData['sInvNo'] = result.sInvNo;\n      _this12.saleData.txnDate = result.txnDate;\n      _this12.saleData.currency = result.currency;\n      _this12.saleData.customerID = result.customerID;\n      _this12.saleData.cusAddressID = result.cusAddressID;\n      _this12.saleData.sRef = result.sRef;\n      _this12.saleData.paymentTerm = result.paymentTerm;\n      _this12.saleData.dueDate = result.dueDate;\n      _this12.saleData.salePerson = result.salePerson;\n      _this12.saleData.creditData = result.creditData;\n      _this12.saleData.creditIds = result.creditIds;\n      _this12.creditIds = result.creditIds;\n      _this12.creditData = result.creditData;\n      _this12.saleData.charges = result.charges;\n      _this12.saleData.remarks = result.remarks;\n      yield _this12.fetchAccounts();\n      yield _this12.getCustomerOrders(result.customerID);\n      _this12.saleData.sOrderNo = result.sOrderNumber;\n      _this12.sOrderID = result.sOrderNo;\n      yield _this12.getOrderDetail(result.sOrderNo);\n\n      if (_this12.saleData.creditIds.length > 0) {\n        yield _this12.fetchStlCreditsData(_this12.saleData.creditIds);\n      }\n\n      _this12.saleData.sOrderDetails = result.sOrderDetails;\n      _this12.saleData.total = result.total;\n    })();\n  }\n\n  fetchStlCreditsData(creditIds) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      let ids = encodeURIComponent(JSON.stringify(creditIds));\n      let result = yield _this13.accountService.getData(`customer-credits/get/selected?entities=${ids}`).toPromise();\n\n      if (result && result.length > 0) {\n        let settledCredits = [];\n\n        if (_this13.saleData.creditData.length > 0) {\n          for (let i = 0; i < result.length; i++) {\n            const elem1 = result[i];\n\n            for (let index = 0; index < _this13.saleData.creditData.length; index++) {\n              const elem2 = _this13.saleData.creditData[index];\n\n              if (elem1.creditID === elem2.creditID) {\n                let obj = {\n                  cCrNo: elem1.cCrNo,\n                  creditID: elem1.creditID,\n                  currency: elem1.currency,\n                  status: elem1.status,\n                  txnDate: elem1.txnDate,\n                  sRef: elem1.crRef,\n                  fullPayment: elem1.status == 'deducted' ? true : false,\n                  prevPaidAmount: elem2.paidAmount,\n                  paidAmount: elem2.paidAmount,\n                  balance: elem2.pendingAmount,\n                  totalAmt: elem2.totalAmount,\n                  selected: true\n                };\n                settledCredits.push(obj);\n              }\n            }\n          }\n\n          _this13.stlCreditsData = settledCredits;\n        }\n      }\n    })();\n  }\n\n  updateInvoice() {\n    this.customerCredits.forEach(elem => {\n      if (elem.selected && (elem.paidAmount === 0 || elem.paidAmount === '')) {\n        this.toaster.error('Please add credits amount');\n        return;\n      }\n    });\n    this.submitDisabled = true;\n    this.saleData.sOrderNo = this.sOrderID;\n    console.log('this.saleData', this.saleData);\n    return;\n    this.accountService.putData(`sales-invoice/update/${this.saleID}`, this.saleData).subscribe({\n      complete: () => {},\n      error: err => {\n        this.submitDisabled = false;\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {// this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toaster.success('Invoice updated successfully.');\n        this.cancel();\n      }\n    });\n  }\n\n};\n\nAddSalesInvoiceComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: ListService\n}, {\n  type: HttpClient\n}, {\n  type: Location\n}, {\n  type: ToastrService\n}, {\n  type: AccountService\n}];\n\nAddSalesInvoiceComponent = __decorate([Component({\n  selector: 'app-add-sales-invoice',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddSalesInvoiceComponent);\nexport { AddSalesInvoiceComponent };","map":null,"metadata":{},"sourceType":"module"}