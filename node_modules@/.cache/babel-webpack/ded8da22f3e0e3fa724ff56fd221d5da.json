{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./activity.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./activity.component.css\";\nimport { Component, ViewChild, Input } from '@angular/core';\nimport { ApiService, HereMapService } from '../../../../../services';\nimport { ToastrService } from 'ngx-toastr';\nimport * as moment from 'moment';\nimport { ActivatedRoute } from \"@angular/router\";\nimport Constants from 'src/app/pages/fleet/constants';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { environment } from '../../../../../../environments/environment';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\nimport { NgSelectComponent } from '@ng-select/ng-select';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nlet ActivityComponent = class ActivityComponent {\n  constructor(apiService, httpClient, toastr, route, spinner, hereMap, _sanitizer, modalService) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.route = route;\n    this.spinner = spinner;\n    this.hereMap = hereMap;\n    this._sanitizer = _sanitizer;\n    this.modalService = modalService;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.allData = [];\n    this.states = [];\n    this.vehicleData = [];\n    this.startDate = '';\n    this.endDate = '';\n    this.start = null;\n    this.end = null;\n    this.lastItemSK = '';\n    this.datee = '';\n    this.loaded = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.exportData = [];\n    this.listView = true;\n    this.visible = true;\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.isSearch = false;\n    this.get = _.get;\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.dataColumns = [{\n      field: 'vehicle',\n      header: 'Vehicle',\n      type: \"text\"\n    }, {\n      field: 'tripNo',\n      header: 'Trip',\n      type: \"text\"\n    }, {\n      field: 'orderName',\n      header: 'Order',\n      type: \"text\"\n    }, {\n      field: 'assetName',\n      header: 'Assets',\n      type: \"text\"\n    }, {\n      field: 'driverName',\n      header: 'Drivers',\n      type: \"text\"\n    }, {\n      field: 'locType',\n      header: 'Location',\n      type: \"text\"\n    }, {\n      field: 'dateType',\n      header: 'Date',\n      type: \"text\"\n    }, {\n      field: 'usState',\n      header: 'Province(US)',\n      type: \"text\"\n    }, {\n      field: 'uMiles',\n      header: 'US Miles',\n      type: \"text\"\n    }, {\n      field: 'usiles',\n      header: 'US(Total)',\n      type: \"text\"\n    }, {\n      field: 'canState',\n      header: 'Province(Canada)',\n      type: \"text\"\n    }, {\n      field: 'caMiles',\n      header: 'Canada Miles',\n      type: \"text\"\n    }, {\n      field: 'cMiles',\n      header: 'Canada(Total)',\n      type: \"text\"\n    }, {\n      field: 'miles',\n      header: 'Total Miles',\n      type: \"text\"\n    }];\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.fetchVehicleListing();\n\n          _this.fetchVehicleName();\n        }\n\n        _this.loaded = false;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.end = moment().format(\"YYYY-MM-DD\");\n      _this2.start = moment().subtract(1, 'months').format('YYYY-MM-DD');\n      _this2.vehicleId = _this2.route.snapshot.params[`vehicleId`];\n\n      _this2.fetchVehicleListing();\n\n      _this2.fetchVehicleName();\n\n      _this2.setToggleOptions();\n    })();\n  }\n\n  fetchVehicleName() {\n    this.apiService.getData(`vehicles/fetch/detail/${this.vehicleId}`).subscribe(result => {\n      this.vehicleData = result.Items;\n      console.log('datatotal', this.vehicleData);\n    });\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  fetchVehicleListing() {\n    if (this.lastItemSK !== 'end') {\n      this.apiService.getData(`vehicles/fetch/TripData?vehicle=${this.vehicleId}&startDate=${this.start}&endDate=${this.end}&lastKey=${this.lastItemSK}&date=${this.datee}`).subscribe(result => {\n        this.allData = this.allData.concat(result.Items);\n\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.LastEvaluatedKey !== undefined) {\n          this.lastItemSK = encodeURIComponent(result.Items[result.Items.length - 1].tripSK);\n          this.datee = encodeURIComponent(result.Items[result.Items.length - 1].dateCreated);\n        } else {\n          this.lastItemSK = 'end';\n        }\n\n        this.loaded = true;\n\n        for (let veh of result.Items) {\n          let dataa = veh;\n          veh.miles = 0;\n\n          for (let element of dataa.tripPlanning) {\n            veh.miles += Number(element.miles);\n          }\n        }\n\n        if (result.Items.length === 0) {\n          this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n      });\n    }\n  }\n\n  fetchFullExport() {\n    this.apiService.getData(`vehicles/fetch/vehicelActivity/list?vehicle=${this.vehicleId}&startDate=${this.start}&endDate=${this.end}`).subscribe(result => {\n      this.exportData = result.Items;\n\n      for (let veh of this.exportData) {\n        let dataa = veh;\n        veh.miles = 0;\n\n        for (let element of dataa.tripPlanning) {\n          veh.miles += Number(element.miles);\n        }\n      }\n\n      this.generateCSV();\n    });\n  }\n\n  searchFilter() {\n    if (this.start != null && this.end != null) {\n      if (this.start != null && this.end == null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start == null && this.end != null) {\n        this.toastr.error('Please select both start and end dates.');\n        return false;\n      } else if (this.start > this.end) {\n        this.toastr.error('Start Date should be less then end date.');\n        return false;\n      } else {\n        this.lastItemSK = '';\n        this.allData = [];\n        this.dataMessage = Constants.FETCHING_DATA;\n        this.fetchVehicleListing();\n        this.fetchVehicleName();\n      }\n    } else {\n      return false;\n    }\n  }\n\n  refreshData() {\n    this.end = moment().format(\"YYYY-MM-DD\");\n    this.start = moment().subtract(1, 'months').format('YYYY-MM-DD');\n    this.allData = [];\n    this.lastItemSK = '';\n    this.loaded = false;\n    this.fetchVehicleListing();\n    this.fetchVehicleName();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  generateCSV() {\n    if (this.exportData.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.exportData.forEach(element => {\n        let location = '';\n        let date = '';\n        let usMiles = '';\n        let canMiles = '';\n        let usState = '';\n        let canState = '';\n\n        for (let i = 0; i < element.tripPlanning.length; i++) {\n          const element2 = element.tripPlanning[i];\n          date += `\"${element2.type} :-  ${element2.date}\\n\\\"`;\n          element2.location = element2.location.replace(/,/g, ' ');\n          location += `\"${element2.type} :-  ${element2.location}\\n\\\"`;\n        }\n\n        if (element.provinceData && element.provinceData.length > 0) {\n          for (let i = 0; i < element.provinceData.length; i++) {\n            const element2 = element.provinceData[i];\n\n            for (let j = 0; j < element2.usProvince.length; j++) {\n              const element3 = element2.usProvince[j];\n              usState += `\"${element3.StCntry}\\n\\\"`;\n              usMiles += `\"${element3.Total}\\n\\\"`;\n            }\n\n            for (let k = 0; k < element2.canProvince.length; k++) {\n              const element4 = element2.canProvince[k];\n              canState += `\"${element4.StCntry}\\n\\\"`;\n              canMiles += `\"${element4.Total}\\n\\\"`;\n            }\n          }\n        }\n\n        let obj = {};\n        obj[\"Vehicle\"] = element.vehicle.replace(/, /g, ' &');\n        obj[\"Trip#\"] = element.tripNo;\n        obj[\"Order#\"] = element.orderName.replace(/, /g, ' &');\n        obj[\"Assets\"] = element.assetName.replace(/, /g, ' &');\n        obj[\"Drivers\"] = element.driverName.replace(/, /g, ' &');\n        obj[\"location\"] = location;\n        obj[\"Date\"] = date;\n        obj[\"Province(US)\"] = usState;\n        obj[\"US Miles\"] = usMiles;\n        obj[\"US(Total)\"] = element.usMiles;\n        obj[\"Province(Canada)\"] = canState;\n        obj[\"Canada Miles\"] = canMiles;\n        obj[\"Canada(Total)\"] = element.canMiles;\n        obj[\"Total Miles\"] = element.miles;\n        dataObject.push(obj);\n        console.log('export', dataObject);\n      });\n      console.log('export2', dataObject);\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += ' \\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += ' \\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}vehicleActivity-Report.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nActivityComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}, {\n  type: DomSanitizer\n}, {\n  type: NgbModal\n}];\n\nActivityComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nActivityComponent = __decorate([Component({\n  selector: 'app-activity',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ActivityComponent);\nexport { ActivityComponent };","map":null,"metadata":{},"sourceType":"module"}