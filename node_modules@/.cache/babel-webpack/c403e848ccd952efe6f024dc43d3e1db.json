{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./serviceprogram.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./serviceprogram.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from 'src/app/services';\nimport Constants from 'src/app/pages/fleet/constants';\nimport * as moment from 'moment';\nimport { ToastrService } from \"ngx-toastr\";\nlet ServiceprogramComponent = class ServiceprogramComponent {\n  constructor(apiService, toastr) {\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.serviceProgramList = [];\n    this.searchVehicle = [];\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.lastItemSK = \"\";\n    this.loaded = false;\n    this.vehicles = {};\n    this.vehicle = null;\n    this.programName = null;\n    this.record = [];\n    this.disableSearch = false;\n    this.exportFull = [];\n  }\n\n  ngOnInit() {\n    this.fetchvehiclesList();\n    this.fetchServiceVehicleList();\n  }\n\n  fetchServiceVehicleList() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.lastItemSK !== 'end') {\n        const result = yield _this.apiService.getData(`servicePrograms/fetch/report?vehicle=${_this.vehicle}&programName=${_this.programName}&lastKey=${_this.lastItemSK}`).toPromise();\n        _this.dataMessage = Constants.FETCHING_DATA;\n\n        if (result.Items.length === 0) {\n          _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            _this.lastItemSK = encodeURIComponent(result.LastEvaluatedKey.sk);\n          } else {\n            _this.lastItemSK = 'end';\n          }\n\n          _this.serviceProgramList = _this.serviceProgramList.concat(result.Items);\n          _this.loaded = true;\n        }\n\n        _this.disableSearch = false;\n      }\n    })();\n  }\n\n  fetchvehiclesList() {\n    this.apiService.getData(\"vehicles/get/list\").subscribe(result => {\n      this.vehicles = result;\n    });\n  }\n\n  searchFilter() {\n    if (this.vehicle !== null || this.programName !== null) {\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.disableSearch = true;\n      this.serviceProgramList = [];\n      this.lastItemSK = '';\n      this.fetchServiceVehicleList();\n    } else {\n      return false;\n    }\n  }\n\n  onScroll() {\n    if (this.loaded) {\n      this.fetchServiceVehicleList();\n    }\n\n    this.loaded = false;\n  }\n\n  resetFilter() {\n    if (this.vehicle !== null || this.programName !== null || this.lastItemSK !== '') {\n      this.disableSearch = true;\n      this.vehicle = null;\n      this.programName = null;\n      this.lastItemSK = '';\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.serviceProgramList = [];\n      this.fetchServiceVehicleList();\n    } else {\n      return false;\n    }\n  }\n\n  fetchExportfullList() {\n    this.apiService.getData('servicePrograms/fetch/report/export').subscribe(result => {\n      this.exportFull = result;\n      this.generateCSV();\n    });\n  }\n\n  csv() {\n    if (this.vehicle !== null || this.programName !== null) {\n      this.exportFull = this.serviceProgramList;\n      this.generateCSV();\n    } else {\n      this.fetchExportfullList();\n    }\n  }\n\n  generateCSV() {\n    if (this.exportFull.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.exportFull.forEach(element => {\n        let obj = {};\n        let ab = '';\n        let allVehicles = [];\n\n        for (const el of element.vehicles) {\n          allVehicles.push(this.vehicles[el]);\n        }\n\n        if (allVehicles.length > 1) {\n          ab = '& ';\n        }\n\n        let veh = '';\n        obj[\"Vehicle\"] = allVehicles.join(\" & \");\n        obj[\"Service Program Name\"] = element.programName;\n        obj[\"Description\"] = element.description;\n        dataObject.push(obj);\n      });\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += '\\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += '\\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `${moment().format(\"YYYY-MM-DD:HH:m\")}Service-Program.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n};\n\nServiceprogramComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}];\n\nServiceprogramComponent = __decorate([Component({\n  selector: 'app-serviceprogram',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ServiceprogramComponent);\nexport { ServiceprogramComponent };","map":null,"metadata":{},"sourceType":"module"}