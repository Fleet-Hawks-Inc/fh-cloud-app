{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./driver-report.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./driver-report.component.css\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { ApiService, HereMapService } from 'src/app/services';\nimport { ToastrService } from 'ngx-toastr';\nimport Constants from 'src/app/pages/fleet/constants';\nimport * as _ from \"lodash\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\nimport * as moment from 'moment';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { environment } from 'src/environments/environment';\nlet DriverReportComponent = class DriverReportComponent {\n  constructor(apiService, toastr, route, spinner, hereMap) {\n    var _this = this;\n\n    this.apiService = apiService;\n    this.toastr = toastr;\n    this.route = route;\n    this.spinner = spinner;\n    this.hereMap = hereMap;\n    this.environment = environment.isFeatureEnabled;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n    this.exportData = [];\n    this.listView = true;\n    this.visible = true;\n    this.loadMsg = Constants.NO_LOAD_DATA;\n    this.isSearch = false;\n    this.get = _.get;\n    this.data = [];\n    this.driverIDs = \"\";\n    this.start = null;\n    this.end = null;\n    this.driver = [];\n    this.order = [];\n    this.datee = '';\n    this.lastEvaluatedKey = '';\n    this.driverID = \"\";\n    this.DrivN = [];\n    this.loaded = false;\n    this.dataColumns = [{\n      field: 'driverName',\n      header: 'Name',\n      type: \"text\"\n    }, {\n      field: 'tripNo',\n      header: 'Trip',\n      type: \"text\"\n    }, {\n      field: 'orderNumber',\n      header: 'Order',\n      type: \"text\"\n    }, {\n      field: 'locType',\n      header: 'Location',\n      type: \"text\"\n    }, {\n      field: 'dateType',\n      header: 'Date',\n      type: \"text\"\n    }, {\n      field: 'miles',\n      header: 'Total Miles',\n      type: \"text\"\n    }];\n\n    this.onScroll = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        if (_this.loaded) {\n          _this.fetchTrip();\n        }\n\n        _this.loaded = true;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.drivIDs = _this2.route.snapshot.params['drivIDs'];\n      _this2.end = moment().format(\"YYYY-MM-DD\");\n      _this2.start = moment().subtract(1, \"months\").format(\"YYYY-MM-DD\");\n\n      _this2.setToggleOptions();\n\n      yield _this2.fetchTrip();\n\n      _this2.fetchDriverName();\n    })();\n  }\n\n  fetchDriverName() {\n    this.apiService.getData(`drivers/fetch/driver/detail/${this.drivIDs}`).subscribe(result => {\n      this.DrivN = result.Items;\n    });\n  }\n\n  fetchTrip() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.lastEvaluatedKey !== 'end') {\n        _this3.apiService.getData(`common/trips/get/trip/data?driver=${_this3.drivIDs}&startDate=${_this3.start}&endDate=${_this3.end}&lastKey=${_this3.lastEvaluatedKey}&date=${_this3.datee}`).subscribe(result => {\n          // this.data = result.Items\n          if (result.Items.length === 0) {\n            _this3.dataMessage = Constants.NO_RECORDS_FOUND;\n          }\n\n          _this3.data = _this3.data.concat(result.Items);\n\n          for (let driv of _this3.data) {\n            let dataa = driv;\n            driv.miles = 0;\n\n            for (let element of dataa.tripPlanning) {\n              driv.miles += Number(element.miles);\n            }\n          }\n\n          if (result.LastEvaluatedKey !== undefined) {\n            _this3.lastEvaluatedKey = encodeURIComponent(result.Items[result.Items.length - 1].tripSK);\n            _this3.datee = encodeURIComponent(result.Items[result.Items.length - 1].dateCreated);\n          } else {\n            _this3.lastEvaluatedKey = 'end';\n          }\n\n          _this3.loaded = true;\n        });\n      }\n    })();\n  }\n\n  searchFilter() {\n    if (this.start !== null && this.end !== null) {\n      this.data = [];\n      this.lastEvaluatedKey = '';\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.fetchTrip();\n    } else {\n      return false;\n    }\n  }\n\n  refreshData() {\n    this.data = [];\n    this.lastEvaluatedKey = '';\n    this.loaded = false;\n    this.fetchTrip();\n    this.dataMessage = Constants.FETCHING_DATA;\n  }\n\n  setToggleOptions() {\n    this.selectedColumns = this.dataColumns;\n  }\n\n  get selectedColumns() {\n    return this._selectedColumns;\n  }\n\n  set selectedColumns(val) {\n    //restore original order\n    this._selectedColumns = this.dataColumns.filter(col => val.includes(col));\n  }\n\n  fetchFullExport() {\n    this.apiService.getData(`common/trips/fetch/driverActivity/list?driver=${this.drivIDs}&startDate=${this.start}&endDate=${this.end}`).subscribe(result => {\n      this.exportData = result.Items;\n\n      for (let driv of this.exportData) {\n        let dataa = driv;\n        driv.miles = 0;\n\n        for (let element of dataa.tripPlanning) {\n          driv.miles += Number(element.miles);\n        }\n      }\n\n      this.generateCSV();\n    });\n  }\n\n  generateCSV() {\n    if (this.exportData.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.exportData.forEach(element => {\n        let type = '';\n        let location = '';\n        let date = \"\";\n\n        for (let i = 0; i < element.tripPlanning.length; i++) {\n          const element2 = element.tripPlanning[i];\n          type += element2.type;\n          element2.location = element2.location.replace(/,/g, ' ');\n          location += element2.type + \":\" + element2.location;\n          date += `\"${element2.type} :-  ${element2.date}\\n\\\"`;\n\n          if (i < element.tripPlanning.length - 1) {\n            location += \" & \";\n          }\n        }\n\n        let obj = {};\n        obj[\"Name\"] = element.driverName.replace(/,/g, '&');\n        obj[\"Trip\"] = element.tripNo;\n        obj[\"Order\"] = element.orderNumber.replace(/,/g, '&');\n        obj[\"Location\"] = location;\n        obj[\"Date\"] = date;\n        obj[\"Total Miles\"] = element.miles;\n        dataObject.push(obj);\n      });\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += ' \\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += ' \\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `${moment().format(\"YYYY/MM/DD:HH:m\")}Driver-Activity-Report.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n  clear(table) {\n    table.clear();\n  }\n\n};\n\nDriverReportComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}];\n\nDriverReportComponent.propDecorators = {\n  table: [{\n    type: ViewChild,\n    args: ['dt']\n  }],\n  ngSelectComponent: [{\n    type: ViewChild,\n    args: [NgSelectComponent]\n  }],\n  selectedColumns: [{\n    type: Input\n  }]\n};\nDriverReportComponent = __decorate([Component({\n  selector: 'app-driver-report',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DriverReportComponent);\nexport { DriverReportComponent };","map":null,"metadata":{},"sourceType":"module"}