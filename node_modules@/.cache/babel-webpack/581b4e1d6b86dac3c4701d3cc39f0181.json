{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./overview.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./overview.component.css\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService } from 'src/app/services';\nimport Constants from 'src/app/pages/fleet/constants';\nimport { ToastrService } from 'ngx-toastr';\nimport { ListService } from 'src/app/services';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport * as _ from 'lodash';\nlet OverviewComponent = class OverviewComponent {\n  constructor(apiService, router, listService, toastr, spinner) {\n    this.apiService = apiService;\n    this.router = router;\n    this.listService = listService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.dataMessageReq = Constants.FETCHING_DATA;\n    this.items = [];\n    this.vendors = [];\n    this.warehouses = [];\n    this.allVendors = [];\n    this.allWarehouses = [];\n    this.allCompanies = [];\n    this.searchItems = [];\n    this.requiredItemName = '';\n    this.requiredCompanyName = '';\n    this.requiredPartNumber = null;\n    this.requiredItemID = null;\n    this.requiredVendorID = null;\n    this.requiredSuggestedItems = [];\n    this.requiredSuggestedVendors = [];\n    this.existingExportList = [];\n    this.requiredExportList = [];\n    this.suggestedVendors = [];\n    this.suggestedItems = [];\n    this.requiredItems = [];\n    this.itemID = '';\n    this.inventCount = {\n      total: ''\n    };\n    this.requiredInventoryData = {\n      totalRequired: ''\n    };\n    this.itemName = '';\n    this.currentTab = 'inv';\n    this.lastSK = '';\n    this.companyName = '';\n    this.lastItemSK = '';\n    this.allItems = [];\n    this.loaded = false;\n    this.category = null;\n    this.vendorID = null;\n    this.getItemSuggestions = _.debounce(function (value, type) {\n      if (value != '') {\n        value = value.toLowerCase();\n\n        if (type === 'inv') {\n          this.apiService.getData(`items/suggestion/${value}?type=inventory`).subscribe(result => {\n            this.suggestedItems = result;\n          });\n        } else {\n          this.apiService.getData(`items/suggestion/${value}?item=required`).subscribe(result => {\n            this.requiredSuggestedItems = result;\n          });\n        }\n      } else {\n        this.suggestedItems = [];\n        this.requiredSuggestedItems = [];\n      }\n    }, 800);\n    this.getPartNumberSuggestions = _.debounce(function (value) {\n      if (value != '') {\n        value = value.toLowerCase();\n        this.apiService.getData(`items/partNo/suggestion/${value}?item=required`).subscribe(result => {\n          this.requiredSuggestedPartNo = result;\n        });\n      } else {\n        this.requiredSuggestedPartNo = [];\n      }\n    }, 800);\n  }\n\n  ngOnInit() {\n    this.existingInventoryList();\n    this.fetchVendors();\n    this.listService.fetchVendors();\n    this.fetchExistingInventoryCount();\n    this.fetchRequiredInventoryCount();\n    this.requiredInventoryListReport();\n    this.fetchWarehouses();\n    this.allVendors = this.listService.vendorList;\n  }\n\n  fetchVendors() {\n    this.apiService.getData(`contacts/get/list/vendor`).subscribe(result => {\n      this.vendors = result;\n    });\n  }\n\n  fetchWarehouses() {\n    this.apiService.getData('items/get/list/warehouses').subscribe(result => {\n      this.warehouses = result;\n    });\n  } // For Existing Inventory\n\n\n  existingInventoryList(refresh) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this.lastItemSK = '';\n        _this.items = [];\n      }\n\n      if (_this.lastItemSK !== 'end') {\n        const result = yield _this.apiService.getData(`items/invent/list?name=${_this.itemName}&category=${_this.category}&vendorID=${_this.vendorID}&lastKey=${_this.lastItemSK}`).toPromise();\n\n        if (result.Items.length === 0) {\n          _this.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            _this.lastItemSK = encodeURIComponent(result.Items[result.Items.length - 1].warehouseSK);\n          } else {\n            _this.lastItemSK = 'end';\n          }\n\n          _this.items = _this.items.concat(result.Items);\n          _this.loaded = true;\n        }\n      }\n    })();\n  }\n\n  fetchExistingInventoryCount() {\n    this.apiService.getData('items/count/invent/list').subscribe(result => {\n      this.inventCount = result;\n    });\n  }\n\n  searchExistingInventory() {\n    if (this.itemName !== '' || this.vendorID !== null || this.category !== null) {\n      this.itemName = this.itemName.toLowerCase();\n      this.items = [];\n      this.lastItemSK = '';\n      this.dataMessage = Constants.FETCHING_DATA;\n      this.suggestedItems = [];\n      this.existingInventoryList();\n    } else {\n      return false;\n    }\n  }\n\n  resetExistingInventory() {\n    if (this.itemName !== '' || this.category !== null || this.vendorID !== '' || this.lastItemSK !== '') {\n      this.itemName = '';\n      this.category = null;\n      this.vendorID = null;\n      this.items = [];\n      this.lastItemSK = '';\n      this.suggestedItems = [];\n      this.existingInventoryList();\n    } else {\n      return false;\n    }\n  }\n\n  generateInventCSV() {\n    if (this.existingExportList.length > 0) {\n      let dataObject = [];\n      let csvArray = [];\n      this.existingExportList.forEach(element => {\n        let obj = {};\n        obj['Part No'] = element.partNumber;\n        obj['Item Name'] = element.itemName;\n        obj['Category'] = element.category;\n        obj['Vendors'] = this.vendors[element.warehouseVendorID];\n        obj['Quantity'] = element.quantity;\n        obj['Unit Cost'] = element.cost + ' ' + element.costUnitType;\n        obj['Warehouse Details'] = this.warehouses[element.warehouseID];\n        dataObject.push(obj);\n      });\n      let headers = Object.keys(dataObject[0]).join(',');\n      headers += '\\n';\n      csvArray.push(headers);\n      dataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += '\\n';\n        csvArray.push(obj);\n      });\n      const blob = new Blob(csvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `Inventory-Report.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error(\"No Records found\");\n    }\n  }\n\n  existingExport() {\n    this.apiService.getData(`items/get/existingInventory/export?type=itemName`).subscribe(result => {\n      this.existingExportList = result.Items;\n      this.generateInventCSV();\n    });\n  }\n\n  existingCSV() {\n    if (this.itemName !== '' || this.vendorID !== null || this.category !== null) {\n      this.existingExportList = this.items;\n      this.generateInventCSV();\n    } else {\n      this.existingExport();\n    }\n  } // For Required Inventory\n\n\n  requiredInventoryListReport(refresh) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this2.lastSK = '';\n        _this2.requiredItems = [];\n      }\n\n      if (_this2.lastSK !== 'end') {\n        const result = yield _this2.apiService.getData(`items/requiredInventory/invent/list?name=${_this2.requiredItemName}&vendorID=${_this2.requiredVendorID}&lastKey=${_this2.lastSK}`).toPromise();\n\n        if (result.Items.length === 0) {\n          _this2.dataMessageReq = Constants.NO_RECORDS_FOUND;\n        }\n\n        if (result.Items.length > 0) {\n          if (result.LastEvaluatedKey !== undefined) {\n            _this2.lastSK = encodeURIComponent(result.Items[result.Items.length - 1].warehouseSK);\n          } else {\n            _this2.lastSK = 'end';\n          }\n\n          _this2.requiredItems = _this2.requiredItems.concat(result.Items);\n          _this2.loaded = true;\n        }\n      }\n    })();\n  }\n\n  fetchRequiredInventoryCount() {\n    this.apiService.getData('items/count/requiredInventory/list').subscribe(result => {\n      this.requiredInventoryData = result;\n    });\n  }\n\n  searchRequiredFilter() {\n    if (this.requiredItemName !== '' || this.requiredVendorID !== null) {\n      this.itemName = this.itemName.toLowerCase();\n      this.requiredItems = [];\n      this.lastSK = '';\n      this.dataMessageReq = Constants.FETCHING_DATA;\n      this.suggestedItems = [];\n      this.requiredInventoryListReport();\n    } else {\n      return false;\n    }\n  }\n\n  resetRequiredFilter() {\n    if (this.requiredItemName !== '' || this.requiredVendorID !== null) {\n      this.requiredItemName = this.itemName.toLowerCase();\n      this.requiredItemName = '';\n      this.requiredVendorID = null;\n      this.requiredItems = [];\n      this.lastSK = '';\n      this.dataMessageReq = Constants.FETCHING_DATA;\n      this.suggestedItems = [];\n      this.requiredInventoryListReport();\n    } else {\n      return false;\n    }\n  }\n\n  generateRequiredCSV() {\n    if (this.requiredExportList.length > 0) {\n      let reqDataObject = [];\n      let reqCsvArray = [];\n      this.requiredExportList.forEach(element => {\n        let obj = {};\n        obj['Part No'] = element.partNumber;\n        obj['Item Name'] = element.itemName;\n        obj['Category'] = element.category;\n        obj['Vendors'] = this.vendors[element.warehouseVendorID];\n        obj['Quantity'] = element.quantity;\n        reqDataObject.push(obj);\n      });\n      let headers = Object.keys(reqDataObject[0]).join(',');\n      headers += '\\n';\n      reqCsvArray.push(headers);\n      reqDataObject.forEach(element => {\n        let obj = Object.values(element).join(',');\n        obj += '\\n';\n        reqCsvArray.push(obj);\n      });\n      const blob = new Blob(reqCsvArray, {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `Required-Inventory-Report.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    } else {\n      this.toastr.error('No Records found');\n    }\n  }\n\n  requiredExport() {\n    this.apiService.getData(`items/get/requiredInventory/export?type=requiredItemName`).subscribe(result => {\n      this.requiredExportList = result.Items;\n      this.generateRequiredCSV();\n    });\n  }\n\n  requiredCSV() {\n    if (this.requiredItemName !== '' || this.requiredVendorID !== null) {\n      this.requiredExportList = this.requiredItems;\n      this.generateRequiredCSV();\n    } else {\n      this.requiredExport();\n    }\n  } //Common For Both Existing and Required\n\n\n  onScroll() {\n    if (this.loaded) {\n      this.existingInventoryList();\n      this.requiredInventoryListReport();\n    }\n\n    this.loaded = false;\n  }\n\n  setItem(itemID, itemName, type) {\n    if (type == 'inv') {\n      this.itemName = itemName;\n      this.itemID = itemName;\n      this.suggestedItems = [];\n    } else {\n      this.requiredItemName = itemName;\n      this.requiredItemID = itemName;\n      this.requiredSuggestedItems = [];\n    }\n  }\n\n  tabChange(type) {\n    this.currentTab = type;\n  }\n\n};\n\nOverviewComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ListService\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}];\n\nOverviewComponent = __decorate([Component({\n  selector: 'app-overview',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], OverviewComponent);\nexport { OverviewComponent };","map":null,"metadata":{},"sourceType":"module"}