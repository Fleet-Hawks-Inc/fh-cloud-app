{"ast":null,"code":"import * as i1 from '@ngx-loading-bar/core';\nimport { LoadingBarModule } from '@ngx-loading-bar/core';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { HttpContextToken, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { tap, finalize } from 'rxjs/operators';\nconst NGX_LOADING_BAR_IGNORED = new HttpContextToken(() => false);\n\nclass LoadingBarInterceptor {\n  constructor(loader) {\n    this.loader = loader;\n  }\n\n  intercept(req, next) {\n    // https://github.com/angular/angular/issues/18155\n    if (req.headers.has('ignoreLoadingBar')) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        console.warn(`Using http headers ('ignoreLoadingBar') to ignore loading bar is deprecated. Use HttpContext instead: 'context: new HttpContext().set(NGX_LOADING_BAR_IGNORED, true)'`);\n      }\n\n      return next.handle(req.clone({\n        headers: req.headers.delete('ignoreLoadingBar')\n      }));\n    }\n\n    if (req.context.get(NGX_LOADING_BAR_IGNORED) === true) {\n      return next.handle(req);\n    }\n\n    let started = false;\n    const ref = this.loader.useRef('http');\n    return next.handle(req).pipe(tap(() => {\n      if (!started) {\n        ref.start();\n        started = true;\n      }\n    }), finalize(() => started && ref.complete()));\n  }\n\n}\n\nLoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) {\n  return new (t || LoadingBarInterceptor)(i0.ɵɵinject(i1.LoadingBarService));\n};\n\nLoadingBarInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LoadingBarInterceptor,\n  factory: LoadingBarInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingBarInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.LoadingBarService\n    }];\n  }, null);\n})();\n\nclass LoadingBarHttpClientModule {}\n\nLoadingBarHttpClientModule.ɵfac = function LoadingBarHttpClientModule_Factory(t) {\n  return new (t || LoadingBarHttpClientModule)();\n};\n\nLoadingBarHttpClientModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LoadingBarHttpClientModule,\n  imports: [HttpClientModule, LoadingBarModule],\n  exports: [HttpClientModule, LoadingBarModule]\n});\nLoadingBarHttpClientModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: LoadingBarInterceptor,\n    multi: true\n  }],\n  imports: [[HttpClientModule, LoadingBarModule], HttpClientModule, LoadingBarModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule, LoadingBarModule],\n      exports: [HttpClientModule, LoadingBarModule],\n      providers: [{\n        provide: HTTP_INTERCEPTORS,\n        useClass: LoadingBarInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LoadingBarHttpClientModule, NGX_LOADING_BAR_IGNORED }; //# sourceMappingURL=ngx-loading-bar-http-client.mjs.map","map":null,"metadata":{},"sourceType":"module"}