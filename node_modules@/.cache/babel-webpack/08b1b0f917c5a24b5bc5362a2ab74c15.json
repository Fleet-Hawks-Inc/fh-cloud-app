{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./add-service-program.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./add-service-program.component.css\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService, ListService } from '../../../../../services';\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { map } from \"rxjs/operators\";\nimport { from, Subject } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ModalService } from \"../../../../../services/modal.service\";\nlet AddServiceProgramComponent = class AddServiceProgramComponent {\n  constructor(apiService, router, toastr, route, spinner, listService, modalService, modalServiceOwn) {\n    this.apiService = apiService;\n    this.router = router;\n    this.toastr = toastr;\n    this.route = route;\n    this.spinner = spinner;\n    this.listService = listService;\n    this.modalService = modalService;\n    this.modalServiceOwn = modalServiceOwn;\n    this.takeUntil$ = new Subject();\n    this.isSubmitted = false;\n    this.vehicleModal = false;\n    this.programID = [];\n    this.taskData = [];\n    this.serviceData = {\n      programName: '',\n      description: '',\n      vehicles: [],\n      unselectedVehicles: [],\n      serviceScheduleDetails: [{\n        serviceTask: '',\n        repeatByTime: '',\n        repeatByTimeUnit: '',\n        repeatByOdometer: ''\n      }]\n    };\n    this.errors = {};\n    /********** Form Fields ***********/\n    // programName ='';\n    // repeatByTime = '';\n    // repeatByOdometer = '';\n    // description = '';\n\n    /******************/\n\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.submitDisabled = false;\n    this.Error = '';\n    this.Success = '';\n    this.selectedVehicles = [];\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.programID = _this.route.snapshot.params['programID'];\n\n      if (_this.programID) {\n        _this.pageTitle = 'Edit Service Program';\n        yield _this.fetchServiceByID();\n      } else {\n        _this.pageTitle = 'New Service Program';\n      } // this.fetchVehicles();\n\n\n      _this.listService.fetchTasks();\n\n      _this.listService.fetchVehicles();\n\n      $(document).ready(() => {\n        _this.form = $('#form_, #form1_').validate();\n      });\n      _this.taskData = _this.listService.tasksList;\n      let vehicleList = new Array();\n\n      _this.getValidVehicles(vehicleList);\n\n      _this.vehicles = vehicleList;\n      _this.programId = _this.route.snapshot.params['programId'];\n\n      _this.fetchServiceByID();\n    })();\n  }\n\n  getValidVehicles(vehicleList) {\n    let ids = [];\n    this.listService.vehicleList.forEach(element => {\n      element.forEach(element2 => {\n        if (element2.vehicleIdentification && element2.isDeleted === 1) {\n          if (this.selectedVehicles.includes(element2.vehicleID)) {\n            let index = this.selectedVehicles.indexOf(element2.vehicleID);\n            this.serviceData.vehicles.splice(index, 1);\n          }\n        }\n\n        if (element2.vehicleIdentification && element2.isDeleted === 0 && !ids.includes(element2.vehicleID)) {\n          vehicleList.push(element2);\n          ids.push(element2.vehicleID);\n        }\n      });\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  addDocument() {\n    this.serviceData.serviceScheduleDetails.push({\n      serviceTask: '',\n      repeatByTime: '',\n      repeatByTimeUnit: '',\n      repeatByOdometer: ''\n    });\n  }\n\n  addServiceProgram() {\n    this.submitDisabled = true;\n    this.hideErrors();\n    this.apiService.postData('servicePrograms', this.serviceData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.label] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.throwErrors();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = true;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toastr.success('Service added successfully');\n        this.router.navigateByUrl('/fleet/maintenance/service-program/list');\n      }\n    });\n  }\n\n  fetchVehicles() {\n    this.apiService.getData('vehicles').subscribe({\n      error: () => {},\n      next: result => {\n        this.vehicles = result.Items;\n      }\n    });\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      if (v === 'programName') {\n        $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n      }\n    }); // this.vehicleForm.showErrors(this.errors);\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  fetchServiceByID() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // this.spinner.show(); // loader init\n      let result = yield _this2.apiService.getData('servicePrograms/' + _this2.programID).toPromise(); // .subscribe((result: any) => {\n\n      result = result[0];\n      _this2.serviceData['programID'] = _this2.programID;\n      _this2.serviceData.programName = result.programName;\n      _this2.serviceData.description = result.description;\n      _this2.serviceData.vehicles = result.vehicles;\n      _this2.selectedVehicles = result.vehicles;\n      let newTasks = [];\n\n      for (var i = 0; i < result.serviceScheduleDetails.length; i++) {\n        newTasks.push({\n          serviceTask: result.serviceScheduleDetails[i].serviceTask,\n          repeatByTime: result.serviceScheduleDetails[i].repeatByTime,\n          repeatByTimeUnit: result.serviceScheduleDetails[i].repeatByTimeUnit,\n          repeatByOdometer: result.serviceScheduleDetails[i].repeatByOdometer\n        });\n      }\n\n      _this2.serviceData.serviceScheduleDetails = newTasks;\n\n      _this2.spinner.hide(); // hide loader\n\n    })();\n  }\n  /*\r\n   * Update Service Program\r\n  */\n\n\n  updateServiceProgram() {\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.submitDisabled = true;\n    this.apiService.putData(`servicePrograms/${this.programID}`, this.serviceData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          // We Can Use This Method\n          const key = val.message.match(/'([^']+)'/)[1];\n          val.message = val.message.replace(/'.*'/, 'This Field');\n          this.errors[key] = val.message;\n        })).subscribe({\n          complete: () => {\n            // this.throwErrors();\n            this.submitDisabled = false;\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.hasSuccess = true;\n        this.submitDisabled = false;\n        this.toastr.success('Service Updated Successfully');\n        this.router.navigateByUrl('/fleet/maintenance/service-program/list');\n      }\n    });\n  }\n\n  removeTasks(i) {\n    this.serviceData.serviceScheduleDetails.splice(i, 1);\n  }\n\n  vehicleChange(vehicle) {\n    if (this.selectedVehicles.includes(vehicle.value)) {\n      this.serviceData.unselectedVehicles.push(vehicle.value);\n    }\n  }\n\n  getTasks() {\n    this.listService.fetchTasks();\n  }\n\n  refreshVehicleData() {\n    this.listService.fetchVehicles();\n  }\n\n};\n\nAddServiceProgramComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: ListService\n}, {\n  type: NgbModal\n}, {\n  type: ModalService\n}];\n\nAddServiceProgramComponent.propDecorators = {\n  serviceProgramF: [{\n    type: ViewChild,\n    args: ['serviceProgramF']\n  }]\n};\nAddServiceProgramComponent = __decorate([Component({\n  selector: 'app-add-service-program',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddServiceProgramComponent);\nexport { AddServiceProgramComponent };","map":null,"metadata":{},"sourceType":"module"}