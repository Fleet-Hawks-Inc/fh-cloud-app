{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./event-list.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./event-list.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService, HereMapService } from '../../../../services';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { SafetyService } from 'src/app/services/safety.service';\nimport Constants from 'src/app/pages/fleet/constants';\nlet EventListComponent = class EventListComponent {\n  constructor(apiService, safetyService, router, toaster, spinner, hereMapService) {\n    this.apiService = apiService;\n    this.safetyService = safetyService;\n    this.router = router;\n    this.toaster = toaster;\n    this.spinner = spinner;\n    this.hereMapService = hereMapService;\n    this.events = [];\n    this.lastEvaluatedKey = '';\n    this.totalRecords = 20;\n    this.pageLength = 10;\n    this.vehicles = [];\n    this.vehicleID = '';\n    this.filter = {\n      vehicleID: null,\n      date: null\n    };\n    this.suggestions = [];\n    this.vehiclesObject = {};\n    this.driversObject = {};\n    this.drivers = [];\n    this.dataMessage = Constants.FETCHING_DATA;\n    this.status_values = [\"open\", \"investigating\", \"coaching\", \"closed\"];\n    this.lastItemSK = '';\n    const date = new Date();\n    this.birthDateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.birthDateMaxLimit = {\n      year: date.getFullYear(),\n      month: 12,\n      day: 31\n    };\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.fetchEvents();\n\n      _this.fetchVehicles();\n\n      _this.fetchAllVehiclesIDs();\n    })();\n  }\n\n  getLocation(location) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cords = location.split(',');\n\n        if (cords.length == 2) {\n          const params = {\n            lat: cords[0].trim(),\n            lng: cords[1].trim()\n          };\n          const location = yield _this2.hereMapService.revGeoCode(params);\n\n          if (location && location.items.length > 0) {\n            return location.items[0].title;\n          } else {\n            return 'NA';\n          }\n        } else {\n          return 'NA';\n        }\n      } catch (error) {\n        return 'NA';\n      }\n    })();\n  }\n\n  reverseGeoCode(cords) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      cords = `${cords.lng},${cords.lat}`;\n      let result = yield _this3.apiService.getData(`pcMiles/reverse/${cords}`).toPromise();\n    })();\n  }\n\n  fetchVehicles() {\n    this.apiService.getData('vehicles').subscribe(result => {\n      this.vehicles = result.Items;\n    });\n  }\n\n  searchEvents() {\n    var _this4 = this;\n\n    this.dataMessage = Constants.FETCHING_DATA;\n\n    if (this.filter.date == '') {\n      this.filter.date = 'null';\n    }\n\n    this.safetyService.getData(`critical-events/paging?vehicleID=${this.filter.vehicleID}&date=${this.filter.date}`).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        if (result.length == 0) {\n          _this4.dataMessage = Constants.NO_RECORDS_FOUND;\n        }\n\n        _this4.events = result;\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  fetchEvents(refresh) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (refresh === true) {\n        _this5.lastItemSK = '';\n        _this5.events = [];\n      }\n\n      if (_this5.lastItemSK !== 'end') {\n        _this5.safetyService.getData(`critical-events?lastKey=${_this5.lastItemSK}`).subscribe( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (result) {\n            if (result.length === 0) {\n              _this5.dataMessage = Constants.NO_RECORDS_FOUND;\n            }\n\n            result.map(v => {\n              v.url = `/safety/critical-events/event-details/${v.eventID}`;\n            });\n\n            if (result.length > 0) {\n              for (let index = 0; index < result.length; index++) {\n                const element = result[index];\n\n                _this5.events.push(element);\n              }\n\n              if (_this5.events[_this5.events.length - 1].sk !== undefined) {\n                _this5.lastItemSK = encodeURIComponent(_this5.events[_this5.events.length - 1].sk);\n              } else {\n                _this5.lastItemSK = 'end';\n              }\n            }\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  changeStatus(eventID, newValue, i) {\n    var _this6 = this;\n\n    let data = {\n      eventID: eventID,\n      status: newValue\n    };\n    this.safetyService.putData('critical-events', data).subscribe( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (res) {\n        if (res.status == false) {\n          _this6.events[i].status = res.oldStatus;\n\n          _this6.toaster.error('Please select valid status');\n        } else {\n          _this6.toaster.success('Status updated successfully');\n        }\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n\n  resetFilter() {\n    if (this.filter.date != '' || this.filter.vehicleID != '' || this.filter.vehicleID != null) {\n      this.lastItemSK = '';\n      this.events = [];\n      this.fetchEvents();\n      this.filter = {\n        vehicleID: null,\n        date: ''\n      };\n    } else {\n      return false;\n    }\n  }\n\n  fetchAllVehiclesIDs() {\n    this.apiService.getData('vehicles/get/list').subscribe(result => {\n      this.vehiclesObject = result;\n    });\n  }\n\n  convertTimeFormat(time) {\n    // Check correct time format and split into components\n    time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n    if (time.length > 1) {\n      // If time format correct\n      time = time.slice(1); // Remove full string match value\n\n      time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM\n\n      time[0] = +time[0] % 12 || 12; // Adjust hours\n    }\n\n    return time.join(''); // return adjusted time or original string\n  }\n\n  onScroll() {\n    this.fetchEvents();\n  }\n\n  refreshData() {\n    this.lastItemSK = '';\n    this.events = [];\n    this.fetchEvents();\n    this.filter = {\n      vehicleID: null,\n      date: ''\n    };\n  }\n\n};\n\nEventListComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: SafetyService\n}, {\n  type: Router\n}, {\n  type: ToastrService\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HereMapService\n}];\n\nEventListComponent = __decorate([Component({\n  selector: 'app-event-list',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], EventListComponent);\nexport { EventListComponent };","map":null,"metadata":{},"sourceType":"module"}