{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./vehicle-renew-add.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./vehicle-renew-add.component.css\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { map } from \"rxjs/operators\";\nimport { ToastrService } from 'ngx-toastr';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NgbCalendar, NgbDateAdapter } from '@ng-bootstrap/ng-bootstrap';\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { from, Subject } from 'rxjs';\nimport { ModalService } from \"../../../../../services/modal.service\";\nimport { Location } from '@angular/common';\nimport constants from '../../../constants';\nimport * as moment from 'moment';\nlet VehicleRenewAddComponent = class VehicleRenewAddComponent {\n  constructor(apiService, route, router, modalService, modalServiceOwn, toastr, ngbCalendar, dateAdapter, location) {\n    this.apiService = apiService;\n    this.route = route;\n    this.router = router;\n    this.modalService = modalService;\n    this.modalServiceOwn = modalServiceOwn;\n    this.toastr = toastr;\n    this.ngbCalendar = ngbCalendar;\n    this.dateAdapter = dateAdapter;\n    this.location = location;\n    this.takeUntil$ = new Subject();\n    this.entityID = null;\n    this.taskID = null;\n    this.isSubmitted = false;\n    this.reminderData = {\n      entityID: '',\n      type: constants.REMINDER_VEHICLE,\n      tasks: {\n        taskID: '',\n        remindByDays: 0,\n        dueDate: '',\n        time: 1,\n        timeUnit: 'month'\n      },\n      status: '',\n      subscribers: ''\n    };\n    this.serviceTask = {\n      taskName: '',\n      taskType: constants.TASK_VEHICLE,\n      description: ''\n    };\n    this.taskData = [];\n    this.midArray = [];\n    this.groupData = {\n      groupName: '',\n      groupType: constants.GROUP_USERS,\n      description: '',\n      groupMembers: []\n    };\n    this.time = 1;\n    this.timeType = 'day';\n    this.finalSubscribers = [];\n    this.vehicles = [];\n    this.users = [];\n    this.groups = [];\n    this.errors = {};\n    this.Error = '';\n    this.Success = '';\n    this.response = '';\n    this.hasError = false;\n    this.hasSuccess = false;\n    this.currentDate = moment().format('YYYY-MM-DD');\n    this.submitDisabled = false;\n    this.dateMinLimit = {\n      year: 1950,\n      month: 1,\n      day: 1\n    };\n    this.date = new Date();\n    this.futureDatesLimit = {\n      year: this.date.getFullYear() + 30,\n      month: 12,\n      day: 31\n    };\n  }\n\n  get today() {\n    return this.dateAdapter.toModel(this.ngbCalendar.getToday());\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.reminderID = _this.route.snapshot.params[`reminderID`];\n\n      _this.fetchServiceTasks();\n\n      if (_this.reminderID) {\n        _this.pageTitle = 'Edit Vehicle Renewal Reminder';\n        yield _this.fetchReminderByID();\n      } else {\n        _this.pageTitle = 'Add Vehicle Renewal Reminder';\n      }\n\n      yield _this.fetchVehicles();\n    })();\n  }\n\n  fetchServiceTasks() {\n    this.apiService.getData('tasks?type=vehicle').subscribe(result => {\n      this.taskData = result;\n    });\n  }\n\n  fetchVehicles() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this2.apiService.getData('vehicles').toPromise();\n      result.Items.forEach(element => {\n        if (element.isDeleted === 0) {\n          _this2.vehicles.push(element);\n        }\n\n        if (element.isDeleted === 1 && _this2.reminderData.entityID === element.vehicleID) {\n          _this2.entityID = null;\n        }\n      });\n    })();\n  }\n\n  addRenewal() {\n    this.hideErrors();\n    this.submitDisabled = true;\n\n    switch (this.reminderData.tasks.timeUnit) {\n      case 'day':\n        {\n          this.numberOfDays = this.reminderData.tasks.time * 1;\n          break;\n        }\n\n      case 'month':\n        {\n          this.numberOfDays = this.reminderData.tasks.time * 30;\n          break;\n        }\n\n      case 'week':\n        {\n          this.numberOfDays = this.reminderData.tasks.time * 7;\n          break;\n        }\n    }\n\n    this.reminderData.tasks.remindByDays = this.numberOfDays;\n    this.reminderData.entityID = this.entityID != null ? this.entityID : null;\n    this.reminderData.tasks.taskID = this.taskID != null ? this.taskID : null;\n    this.apiService.postData('reminders', this.reminderData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {},\n          next: () => {\n            this.submitDisabled = false;\n          }\n        });\n      },\n      next: res => {\n        this.submitDisabled = false;\n        this.response = res;\n        this.toastr.success('Vehicle Renewal Reminder Added Successfully');\n        this.cancel();\n        this.reminderData = {\n          entityID: '',\n          type: constants.REMINDER_VEHICLE,\n          tasks: {\n            taskID: '',\n            remindByDays: 0,\n            dueDate: '',\n            time: 0,\n            timeUnit: ''\n          },\n          status: '',\n          subscribers: ''\n        };\n      }\n    });\n  }\n\n  fetchReminderByID() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let result = yield _this3.apiService.getData('reminders/detail/' + _this3.reminderID).toPromise();\n      result = result.Items[0];\n      _this3.reminderData[`createdDate`] = result.createdDate;\n      _this3.reminderData[`createdTime`] = result.createdTime;\n      _this3.reminderData[`timeCreated`] = result.timeCreated;\n      _this3.reminderData[`reminderID`] = _this3.reminderID;\n      _this3.reminderData.tasks.dueDate = result.tasks.dueDate;\n      _this3.taskID = result.tasks.taskID;\n      _this3.reminderData.tasks.time = result.tasks.time;\n      _this3.reminderData.tasks.timeUnit = result.tasks.timeUnit;\n      _this3.entityID = result.entityID;\n      _this3.reminderData[`entityID`] = _this3.entityID;\n      _this3.reminderData.subscribers = result.subscribers;\n    })();\n  }\n\n  throwErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').after('<label id=\"' + v + '-error\" class=\"error\" for=\"' + v + '\">' + this.errors[v] + '</label>').addClass('error');\n    });\n  }\n\n  hideErrors() {\n    from(Object.keys(this.errors)).subscribe(v => {\n      $('[name=\"' + v + '\"]').removeClass('error').next().remove('label');\n    });\n    this.errors = {};\n  }\n\n  cancel() {\n    this.location.back(); // <-- go back to previous location on cancel\n  } // UPDATING REMINDER\n\n\n  updateRenewal() {\n    this.errors = {};\n    this.submitDisabled = true;\n    this.hasError = false;\n    this.hasSuccess = false;\n\n    switch (this.reminderData.tasks.timeUnit) {\n      case 'day':\n        {\n          this.numberOfDays = this.reminderData.tasks.time * 1;\n          break;\n        }\n\n      case 'month':\n        {\n          this.numberOfDays = this.reminderData.tasks.time * 30;\n          break;\n        }\n\n      case 'week':\n        {\n          this.numberOfDays = this.reminderData.tasks.time * 7;\n          break;\n        }\n    }\n\n    this.reminderData.tasks.remindByDays = this.numberOfDays;\n    this.reminderData.entityID = this.entityID != null ? this.entityID : null;\n    this.reminderData.tasks.taskID = this.taskID != null ? this.taskID : null;\n    this.apiService.putData('reminders', this.reminderData).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {\n            this.submitDisabled = false; // this.throwErrors();\n          },\n          error: () => {\n            this.submitDisabled = false;\n          },\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.submitDisabled = false;\n        this.toastr.success('Vehicle Renewal Reminder Updated Successfully.');\n        this.router.navigateByUrl('/fleet/reminders/vehicle-renewals/list');\n        this.Success = '';\n      }\n    });\n  } // SERVICE TASK\n\n\n  addServiceTask() {\n    this.apiService.postData('tasks', this.serviceTask).subscribe({\n      complete: () => {},\n      error: err => {\n        from(err.error).pipe(map(val => {\n          val.message = val.message.replace(/\".*\"/, 'This Field');\n          this.errors[val.context.key] = val.message;\n        })).subscribe({\n          complete: () => {// this.throwErrors();\n          },\n          error: () => {},\n          next: () => {}\n        });\n      },\n      next: res => {\n        this.response = res;\n        this.toastr.success('Renewal Type Added Successfully.');\n        this.router.navigateByUrl('/fleet/reminders/vehicle-renewals/add');\n        $('#addServiceTasks').modal('toggle');\n        this.fetchServiceTasks();\n      }\n    });\n  }\n\n  refreshTypeData() {\n    this.fetchServiceTasks();\n  }\n\n};\n\nVehicleRenewAddComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: Router\n}, {\n  type: NgbModal\n}, {\n  type: ModalService\n}, {\n  type: ToastrService\n}, {\n  type: NgbCalendar\n}, {\n  type: NgbDateAdapter\n}, {\n  type: Location\n}];\n\nVehicleRenewAddComponent.propDecorators = {\n  vehicleRF: [{\n    type: ViewChild,\n    args: ['vehicleRF']\n  }]\n};\nVehicleRenewAddComponent = __decorate([Component({\n  selector: 'app-vehicle-renew-add',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], VehicleRenewAddComponent);\nexport { VehicleRenewAddComponent };","map":null,"metadata":{},"sourceType":"module"}