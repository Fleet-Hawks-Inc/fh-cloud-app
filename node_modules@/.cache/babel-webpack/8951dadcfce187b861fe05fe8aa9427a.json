{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateExportTaskRequest, CreateExportTaskResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateExportTaskCommand, serializeAws_json1_1CreateExportTaskCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates an export task, which allows you to efficiently export data from a\n *       log group to an Amazon S3 bucket. When you perform a <code>CreateExportTask</code>\n *       operation, you must use credentials that have permission to write to the S3 bucket\n *       that you specify as the destination.</p>\n *          <p>This is an asynchronous call. If all the required information is provided, this\n *       operation initiates an export task and responds with the ID of the task. After the task has started,\n *       you can use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeExportTasks.html\">DescribeExportTasks</a> to get the status of the export task. Each account can\n *       only have one active (<code>RUNNING</code> or <code>PENDING</code>) export task at a time.\n *       To cancel an export task, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CancelExportTask.html\">CancelExportTask</a>.</p>\n *          <p>You can export logs from multiple log groups or multiple time ranges to the same S3\n *       bucket. To separate out log data for each export task, you can specify a prefix to be used as\n *       the Amazon S3 key prefix for all exported objects.</p>\n *          <p>Exporting to S3 buckets that are encrypted with AES-256 is supported. Exporting to S3 buckets\n *       encrypted with SSE-KMS is not supported. </p>\n */\n\nvar CreateExportTaskCommand = function (_super) {\n  __extends(CreateExportTaskCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateExportTaskCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateExportTaskCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"CreateExportTaskCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateExportTaskRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateExportTaskResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateExportTaskCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateExportTaskCommand(input, context);\n  };\n\n  CreateExportTaskCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateExportTaskCommand(output, context);\n  };\n\n  return CreateExportTaskCommand;\n}($Command);\n\nexport { CreateExportTaskCommand }; //# sourceMappingURL=CreateExportTaskCommand.js.map","map":null,"metadata":{},"sourceType":"module"}