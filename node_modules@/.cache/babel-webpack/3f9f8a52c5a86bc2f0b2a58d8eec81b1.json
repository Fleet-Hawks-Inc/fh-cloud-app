{"ast":null,"code":"import _asyncToGenerator from \"C:/FH/fh-cloud-app/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"!C:\\\\FH\\\\fh-cloud-app\\\\node_modules\\\\@ngtools\\\\webpack\\\\src\\\\loaders\\\\direct-resource.js!./ace-details.component.html\";\nimport __NG_CLI_RESOURCE__1 from \"./ace-details.component.css\";\nimport { Component } from '@angular/core';\nimport { ApiService } from '../../../../../services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as moment from 'moment';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { HttpClient } from '@angular/common/http';\nimport { CountryStateCityService } from 'src/app/services/country-state-city.service';\nlet AceDetailsComponent = class AceDetailsComponent {\n  constructor(apiService, route, spinner, httpClient, toastr, router, countryStateCity) {\n    this.apiService = apiService;\n    this.route = route;\n    this.spinner = spinner;\n    this.httpClient = httpClient;\n    this.toastr = toastr;\n    this.router = router;\n    this.countryStateCity = countryStateCity;\n    this.countryCodeName = {};\n    this.assetTypeCode = {};\n    this.stateCodeToName = {};\n    this.truck = {\n      number: '',\n      type: '',\n      vinNumber: '',\n      dotNumber: '',\n      insurancePolicy: {\n        insuranceCompanyName: '',\n        policyNumber: '',\n        issuedDate: '',\n        policyAmount: ''\n      },\n      licensePlates: [{\n        number: '',\n        stateProvince: '',\n        country: ''\n      }],\n      sealNumbers: [],\n      IIT: ''\n    };\n    this.mainDriver = {};\n    this.drivers = [];\n    this.trailers = [];\n    this.shipments = [];\n    this.passengers = [];\n    this.borderResponses = [];\n    this.shipmentData = {\n      shipmentControlNumber: '',\n      type: '',\n      shipperName: '',\n      consigneeName: '',\n      broker: {\n        filerCode: '',\n        portLocation: ''\n      },\n      provinceOfLoading: '',\n      goodsAstrayDateOfExit: '',\n      commodities: [{\n        loadedOn: {\n          type: '',\n          number: ''\n        },\n        description: '',\n        quantity: '',\n        packagingUnit: '',\n        weight: '',\n        weightUnit: '',\n        marksAndNumbers: [{\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }, {\n          markNumber: ''\n        }],\n        c4LineReleaseNumber: '',\n        harmonizedCode: '',\n        value: '',\n        countryOfOrigin: '',\n        hazmatDetails: {\n          unCode: '',\n          emergencyContactName: '',\n          contactPhone: '',\n          contactEmail: ''\n        }\n      }],\n      thirdParties: [],\n      inBondDetails: {\n        type: '',\n        paperInBondNumber: '',\n        usDestination: '',\n        foreignDestination: '',\n        onwardCarrierScac: '',\n        irsNumber: '',\n        estimatedDepartureDate: '',\n        fda: false\n      }\n    };\n    this.driverData = {\n      driverID: '',\n      driverNumber: '',\n      firstName: '',\n      gender: '',\n      lastName: '',\n      dateOfBirth: '',\n      citizenshipCountry: '',\n      fastCardNumber: '',\n      travelDocuments: [],\n      usAddress: {\n        addressLine: '',\n        state: '',\n        city: '',\n        zipCode: ''\n      }\n    };\n    this.passengerData = {\n      passengerID: '',\n      firstName: '',\n      gender: '',\n      lastName: '',\n      dateOfBirth: '',\n      citizenshipCountry: '',\n      fastCardNumber: '',\n      travelDocuments: []\n    };\n    this.documentTypeList = [];\n    this.documentsTypesObects = {};\n    this.packagingUnitsObects = {};\n    this.packagingList = {};\n    this.thirdPartyTypesList = {};\n    this.thirdPartyTypesObects = {};\n    this.vehicleTypeObjects = {};\n    this.shipmentTypeObjects = {};\n    this.inBondTypeObects = {};\n    this.foreignDestinationListObjects = {};\n    this.USportsListObjects = {};\n    this.brokerCodeObject = {};\n    this.sendBorderConnectOption = false;\n  }\n\n  ngOnInit() {\n    this.manifestID = this.route.snapshot.params[`manifestID`];\n    this.fetchACEEntry();\n    this.fetchAssetsCodeName();\n    this.fetchDocuments();\n    this.fetchPackagingUnits();\n    this.fetchThirdPartyTypes();\n    this.fetchVehicleType();\n    this.fetchShipmentType();\n    this.fetchInBondType();\n    this.fetchforeignDestinationList();\n    this.fetchUSportsList();\n    this.fetchBrokerList();\n  }\n\n  fetchforeignDestinationList() {\n    this.httpClient.get('assets/jsonFiles/ACEforeignPorts.json').subscribe(data => {\n      this.foreignDestinationListObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`portOfEntry`], a;\n      }, {});\n    });\n  }\n\n  fetchUSportsList() {\n    this.httpClient.get('assets/USports.json').subscribe(data => {\n      this.USportsListObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`portOfEntry`], a;\n      }, {});\n    });\n  }\n\n  fetchAssetsCodeName() {\n    this.httpClient.get('assets/jsonFiles/trailers.json').subscribe(data => {\n      this.assetTypeCode = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchDocuments() {\n    this.httpClient.get('assets/travelDocumentType.json').subscribe(data => {\n      this.documentTypeList = data;\n      this.documentsTypesObects = this.documentTypeList.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchThirdPartyTypes() {\n    this.httpClient.get('assets/jsonFiles/ACEthirdPartyTypes.json').subscribe(data => {\n      this.thirdPartyTypesList = data;\n      this.thirdPartyTypesObects = this.thirdPartyTypesList.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchPackagingUnits() {\n    this.httpClient.get('assets/packagingUnit.json').subscribe(data => {\n      this.packagingList = data;\n      this.packagingUnitsObects = this.packagingList.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchBrokerList() {\n    this.httpClient.get('assets/ACEBrokersList.json').subscribe(data => {\n      this.brokerCodeObject = data.reduce((a, b) => {\n        return a[b[`filerCode`]] = b[`brokerName`], a;\n      }, {});\n    });\n  }\n\n  fetchVehicleType() {\n    this.httpClient.get('assets/vehicleType.json').subscribe(data => {\n      this.vehicleTypeObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`name`], a;\n      }, {});\n    });\n  }\n\n  fetchInBondType() {\n    this.httpClient.get('assets/jsonFiles/ACEinbond-types.json').subscribe(data => {\n      this.inBondTypeObects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`longDescription`], a;\n      }, {});\n    });\n  }\n\n  fetchShipmentType() {\n    this.httpClient.get('assets/ACEShipmentType.json').subscribe(data => {\n      this.shipmentTypeObjects = data.reduce((a, b) => {\n        return a[b[`code`]] = b[`description`], a;\n      }, {});\n    });\n  }\n\n  fetchACEEntry() {\n    var _this = this;\n\n    this.spinner.show(); // loader init\n\n    this.apiService.getData('eManifests/ACEdetails/' + this.manifestID).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        _this.estimatedArrivalDateTime = result.estimatedArrivalDateTime;\n        _this.usPortOfArrival = result.usPortOfArrival;\n        _this.tripNumber = result.tripNumber;\n        _this.currentStatus = result.currentStatus;\n        _this.truck = {\n          number: result.truck.number,\n          type: result.truck.type,\n          vinNumber: result.truck.vinNumber,\n          dotNumber: result.truck.dotNumber,\n          insurancePolicy: {\n            insuranceCompanyName: result.truck.insurancePolicy.insuranceCompanyName,\n            policyNumber: result.truck.insurancePolicy.policyNumber,\n            issuedDate: result.truck.insurancePolicy.issuedDate,\n            policyAmount: result.truck.insurancePolicy.policyAmount,\n            amountCurrency: result.truck.insurancePolicy.amountCurrency\n          },\n          licensePlates: [{\n            number: result.truck.licensePlates[0].number,\n            stateProvince: yield _this.countryStateCity.GetStateNameFromCode(result.truck.licensePlates[0].stateProvince, result.truck.licensePlates[0].country),\n            country: yield _this.countryStateCity.GetSpecificCountryNameByCode(result.truck.licensePlates[0].country)\n          }],\n          sealNumbers: result.truck.sealNumbers,\n          IIT: result.truck.IIT\n        };\n        _this.trailers = result.trailers;\n\n        _this.getTrailerLicState(result.trailers);\n\n        _this.mainDriver = result.mainDriver;\n        _this.drivers = result.drivers;\n        _this.passengers = result.passengers;\n        _this.shipments = result.shipments;\n        _this.timeModified = moment(result.timeModified).format(`MMMM D YYYY, h:mm:ss a`);\n        _this.modifiedBy = result.modifiedBy;\n        _this.borderResponses = result.borderResponses;\n        _this.createdBy = result.createdBy;\n        _this.createdDate = result.createdDate;\n        _this.createdTime = result.createdTime;\n\n        _this.spinner.hide(); // loader hide\n\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  setStatus(val) {\n    let record = {\n      date: this.createdDate,\n      time: this.createdTime,\n      eventID: this.manifestID,\n      manifestType: 'ACE',\n      status: val\n    };\n    this.apiService.postData('eManifests/setStatus', record).subscribe(result => {\n      this.toastr.success('Status Updated Successfully!');\n      this.currentStatus = val;\n    });\n  }\n\n  getTrailerLicState(trailers) {\n    var _this2 = this;\n\n    if (trailers !== undefined || trailers !== '') {\n      for (let t = 0; t < trailers.length; t++) {\n        trailers.map( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (e) {\n            let countryCode = e.licensePlates[0].country;\n            e.licensePlates[0].stateProvince = yield _this2.countryStateCity.GetStateNameFromCode(e.licensePlates[0].stateProvince, countryCode);\n            e.licensePlates[0].country = yield _this2.countryStateCity.GetSpecificCountryNameByCode(countryCode);\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      }\n    }\n  }\n\n  sendCBPFn() {\n    this.apiService.getData('eManifests/ACE/CBPdetails/' + this.manifestID).subscribe(result => {// this.sendBorderConnectOption = result;\n      // if (this.sendBorderConnectOption === true) {\n      //   const val = 'Queued';\n      //   const setStatus: any = this.apiService.getData('ACEeManifest/setStatus/' + this.manifestID + '/' + val).subscribe((result: any) => {\n      //     this.toastr.success('Status Updated Successfully!');\n      //      this.currentStatus = val;\n      //   });\n      // }\n    });\n  }\n\n  showShipmentDetails(shipmentID) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const shipmentDataFetched = _this3.shipments.filter(item => item.shipmentID === shipmentID);\n\n      _this3.shipmentData = {\n        shipmentControlNumber: shipmentDataFetched[0].shipmentControlNumber,\n        type: shipmentDataFetched[0].type,\n        provinceOfLoading: yield _this3.countryStateCity.GetStateNameFromCode(shipmentDataFetched[0].provinceOfLoading, 'CA'),\n        goodsAstrayDateOfExit: shipmentDataFetched[0].goodsAstrayDateOfExit,\n        shipperName: shipmentDataFetched[0].shipper.name,\n        consigneeName: shipmentDataFetched[0].consignee.name,\n        broker: shipmentDataFetched[0].broker,\n        commodities: shipmentDataFetched[0].commodities,\n        thirdParties: shipmentDataFetched[0].thirdParties,\n        inBondDetails: shipmentDataFetched[0].inBondDetails\n      };\n\n      for (let c = 0; c < _this3.shipmentData.commodities.length; c++) {\n        if (shipmentDataFetched[0].commodities[c].hazmatDetails === undefined) {\n          _this3.shipmentData.commodities[c][`hazmatDetails`] = {\n            unCode: '',\n            emergencyContactName: '',\n            contactPhone: '',\n            contactEmail: ''\n          };\n        }\n      }\n\n      if (shipmentDataFetched[0][`inBondDetails`] === undefined) {\n        _this3.shipmentData.inBondDetails = {\n          type: '',\n          paperInBondNumber: '',\n          usDestination: '',\n          foreignDestination: '',\n          onwardCarrierScac: '',\n          irsNumber: '',\n          estimatedDepartureDate: '',\n          fda: false\n        };\n      }\n    })();\n  }\n\n  showMainDriverDetails() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const countryCode = 'US';\n      const stateCode = _this4.mainDriver.usAddress.state;\n      _this4.driverData = {\n        driverID: _this4.mainDriver.driverID,\n        driverNumber: _this4.mainDriver.driverNumber,\n        firstName: _this4.mainDriver.firstName,\n        gender: _this4.mainDriver.gender,\n        lastName: _this4.mainDriver.lastName,\n        dateOfBirth: _this4.mainDriver.dateOfBirth,\n        citizenshipCountry: yield _this4.countryStateCity.GetSpecificCountryNameByCode(_this4.mainDriver.citizenshipCountry),\n        fastCardNumber: _this4.mainDriver.fastCardNumber,\n        travelDocuments: _this4.mainDriver.travelDocuments,\n        usAddress: {\n          addressLine: _this4.mainDriver.usAddress.addressLine,\n          state: yield _this4.countryStateCity.GetStateNameFromCode(stateCode, countryCode),\n          city: _this4.mainDriver.usAddress.city,\n          zipCode: _this4.mainDriver.usAddress.zipCode\n        }\n      };\n\n      for (let d = 0; d < _this4.mainDriver.travelDocuments.length; d++) {\n        _this4.mainDriver.travelDocuments.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (e) {\n            e.stateProvince = yield _this4.countryStateCity.GetStateNameFromCode(e.stateProvince, e.country);\n            e.country = yield _this4.countryStateCity.GetSpecificCountryNameByCode(e.country);\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  showDriverDetails(driverID) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const driverDataFetched = _this5.drivers.filter(item => item.driverID === driverID);\n\n      _this5.driverData = {\n        driverID: driverDataFetched[0].driverID,\n        driverNumber: driverDataFetched[0].driverNumber,\n        firstName: driverDataFetched[0].firstName,\n        gender: driverDataFetched[0].gender,\n        lastName: driverDataFetched[0].lastName,\n        dateOfBirth: driverDataFetched[0].dateOfBirth,\n        citizenshipCountry: yield _this5.countryStateCity.GetSpecificCountryNameByCode(driverDataFetched[0].citizenshipCountry),\n        fastCardNumber: driverDataFetched[0].fastCardNumber,\n        travelDocuments: driverDataFetched[0].travelDocuments,\n        usAddress: {\n          addressLine: _this5.mainDriver.usAddress.addressLine,\n          state: yield _this5.countryStateCity.GetStateNameFromCode(driverDataFetched[0].usAddress.state, 'US'),\n          city: _this5.mainDriver.usAddress.city,\n          zipCode: _this5.mainDriver.usAddress.zipCode\n        }\n      };\n\n      for (let d = 0; d < driverDataFetched[0].travelDocuments.length; d++) {\n        driverDataFetched[0].travelDocuments.map( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (e) {\n            e.stateProvince = yield _this5.countryStateCity.GetStateNameFromCode(e.stateProvince, e.country);\n            e.country = yield _this5.countryStateCity.GetSpecificCountryNameByCode(e.country);\n          });\n\n          return function (_x4) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n\n  showPassengerDetails(passengerID) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const passengerDataFetched = _this6.passengers.filter(item => item.passengerID === passengerID);\n\n      _this6.passengerData = {\n        passengerID: passengerDataFetched[0].passengerID,\n        firstName: passengerDataFetched[0].firstName,\n        gender: passengerDataFetched[0].gender,\n        lastName: passengerDataFetched[0].lastName,\n        dateOfBirth: passengerDataFetched[0].dateOfBirth,\n        citizenshipCountry: yield _this6.countryStateCity.GetSpecificCountryNameByCode(passengerDataFetched[0].citizenshipCountry),\n        fastCardNumber: passengerDataFetched[0].fastCardNumber,\n        travelDocuments: passengerDataFetched[0].travelDocuments\n      };\n\n      for (let d = 0; d < passengerDataFetched[0].travelDocuments.length; d++) {\n        passengerDataFetched[0].travelDocuments.map( /*#__PURE__*/function () {\n          var _ref5 = _asyncToGenerator(function* (e) {\n            e.stateProvince = yield _this6.countryStateCity.GetStateNameFromCode(e.stateProvince, e.country);\n            e.country = yield _this6.countryStateCity.GetSpecificCountryNameByCode(e.country);\n          });\n\n          return function (_x5) {\n            return _ref5.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  } // getPassengerDocData(travelDocuments: any){\n  // }\n\n\n  cancelManifest(manifestID) {\n    this.apiService.getData(`eManifests/ACEmanifest/cancelManifest/` + manifestID).subscribe();\n  }\n\n  amendManifest() {\n    const amend = true;\n    this.router.navigateByUrl('/dispatch/cross-border/ACE-edit-eManifest/' + this.manifestID + `?amendManifest=` + amend);\n  }\n\n};\n\nAceDetailsComponent.ctorParameters = () => [{\n  type: ApiService\n}, {\n  type: ActivatedRoute\n}, {\n  type: NgxSpinnerService\n}, {\n  type: HttpClient\n}, {\n  type: ToastrService\n}, {\n  type: Router\n}, {\n  type: CountryStateCityService\n}];\n\nAceDetailsComponent = __decorate([Component({\n  selector: 'app-ace-details',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AceDetailsComponent);\nexport { AceDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}